//
// Generated file, do not edit! Created by opp_msgc 4.3 from common/DiscoveryMode.msg.
//

#ifndef _DISCOVERYMODE_M_H_
#define _DISCOVERYMODE_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include <CommonMessages_m.h>
// }}



/**
 * Enum generated from <tt>common/DiscoveryMode.msg</tt> by opp_msgc.
 * <pre>
 * enum DiscoveryNodesType
 * {
 *    CLOSE_NODES = 1;
 *    SPREADED_NODES = 2;
 * };
 * </pre>
 */
enum DiscoveryNodesType {
    CLOSE_NODES = 1,
    SPREADED_NODES = 2
};

/**
 * Class generated from <tt>common/DiscoveryMode.msg</tt> by opp_msgc.
 * <pre>
 * packet DiscoveryCall extends BaseCallMessage {
 *     unsigned int nodesType enum(DiscoveryNodesType) = CLOSE_NODES;
 *     int numberOfNodes = -1;
 *     int index = -1;
 * }
 * </pre>
 */
class DiscoveryCall : public ::BaseCallMessage
{
  protected:
    unsigned int nodesType_var;
    int numberOfNodes_var;
    int index_var;

  private:
    void copy(const DiscoveryCall& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DiscoveryCall&);

  public:
    DiscoveryCall(const char *name=NULL, int kind=0);
    DiscoveryCall(const DiscoveryCall& other);
    virtual ~DiscoveryCall();
    DiscoveryCall& operator=(const DiscoveryCall& other);
    virtual DiscoveryCall *dup() const {return new DiscoveryCall(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getNodesType() const;
    virtual void setNodesType(unsigned int nodesType);
    virtual int getNumberOfNodes() const;
    virtual void setNumberOfNodes(int numberOfNodes);
    virtual int getIndex() const;
    virtual void setIndex(int index);
};

inline void doPacking(cCommBuffer *b, DiscoveryCall& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, DiscoveryCall& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>common/DiscoveryMode.msg</tt> by opp_msgc.
 * <pre>
 * packet DiscoveryResponse extends BaseResponseMessage {
 *     TransportAddress nodes[];
 *     int maxIndex = -1;
 * }
 * </pre>
 */
class DiscoveryResponse : public ::BaseResponseMessage
{
  protected:
    TransportAddress *nodes_var; // array ptr
    unsigned int nodes_arraysize;
    int maxIndex_var;

  private:
    void copy(const DiscoveryResponse& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DiscoveryResponse&);

  public:
    DiscoveryResponse(const char *name=NULL, int kind=0);
    DiscoveryResponse(const DiscoveryResponse& other);
    virtual ~DiscoveryResponse();
    DiscoveryResponse& operator=(const DiscoveryResponse& other);
    virtual DiscoveryResponse *dup() const {return new DiscoveryResponse(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual void setNodesArraySize(unsigned int size);
    virtual unsigned int getNodesArraySize() const;
    virtual TransportAddress& getNodes(unsigned int k);
    virtual const TransportAddress& getNodes(unsigned int k) const {return const_cast<DiscoveryResponse*>(this)->getNodes(k);}
    virtual void setNodes(unsigned int k, const TransportAddress& nodes);
    virtual int getMaxIndex() const;
    virtual void setMaxIndex(int maxIndex);
};

inline void doPacking(cCommBuffer *b, DiscoveryResponse& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, DiscoveryResponse& obj) {obj.parsimUnpack(b);}


#endif // _DISCOVERYMODE_M_H_
