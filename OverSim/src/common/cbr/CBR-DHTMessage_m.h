//
// Generated file, do not edit! Created by opp_msgc 4.3 from common/cbr/CBR-DHTMessage.msg.
//

#ifndef _CBR_DHTMESSAGE_M_H_
#define _CBR_DHTMESSAGE_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include <OverlayKey.h>
#include <DHTMessage_m.h>
// }}



/**
 * Class generated from <tt>common/cbr/CBR-DHTMessage.msg</tt> by opp_msgc.
 * <pre>
 * packet CBRDHTGetCall extends DHTGetCall
 * {
 *     OverlayKey originalKey;
 * }
 * </pre>
 */
class CBRDHTGetCall : public ::DHTGetCall
{
  protected:
    OverlayKey originalKey_var;

  private:
    void copy(const CBRDHTGetCall& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CBRDHTGetCall&);

  public:
    CBRDHTGetCall(const char *name=NULL, int kind=0);
    CBRDHTGetCall(const CBRDHTGetCall& other);
    virtual ~CBRDHTGetCall();
    CBRDHTGetCall& operator=(const CBRDHTGetCall& other);
    virtual CBRDHTGetCall *dup() const {return new CBRDHTGetCall(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual OverlayKey& getOriginalKey();
    virtual const OverlayKey& getOriginalKey() const {return const_cast<CBRDHTGetCall*>(this)->getOriginalKey();}
    virtual void setOriginalKey(const OverlayKey& originalKey);
};

inline void doPacking(cCommBuffer *b, CBRDHTGetCall& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, CBRDHTGetCall& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>common/cbr/CBR-DHTMessage.msg</tt> by opp_msgc.
 * <pre>
 * packet CBRDHTGetResponse extends DHTGetResponse
 * {
 *     OverlayKey originalKey;
 * }
 * </pre>
 */
class CBRDHTGetResponse : public ::DHTGetResponse
{
  protected:
    OverlayKey originalKey_var;

  private:
    void copy(const CBRDHTGetResponse& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CBRDHTGetResponse&);

  public:
    CBRDHTGetResponse(const char *name=NULL, int kind=0);
    CBRDHTGetResponse(const CBRDHTGetResponse& other);
    virtual ~CBRDHTGetResponse();
    CBRDHTGetResponse& operator=(const CBRDHTGetResponse& other);
    virtual CBRDHTGetResponse *dup() const {return new CBRDHTGetResponse(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual OverlayKey& getOriginalKey();
    virtual const OverlayKey& getOriginalKey() const {return const_cast<CBRDHTGetResponse*>(this)->getOriginalKey();}
    virtual void setOriginalKey(const OverlayKey& originalKey);
};

inline void doPacking(cCommBuffer *b, CBRDHTGetResponse& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, CBRDHTGetResponse& obj) {obj.parsimUnpack(b);}


#endif // _CBR_DHTMESSAGE_M_H_
