//
// Generated file, do not edit! Created by opp_msgc 4.3 from common/ProximityLookupMessages.msg.
//

#ifndef _PROXIMITYLOOKUPMESSAGES_M_H_
#define _PROXIMITYLOOKUPMESSAGES_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include<CommonMessages_m.h>

#define PROXFINDNODECALL_L(msg) (FINDNODECALL_L(msg)) 
#define PROXFINDNODERESPONSE_L(msg) (FINDNODERESPONSE_L(msg) + \
                                     (msg->getNextHopNcsInfosArraySize() ? \
                                      msg->getNextHopNcsInfosArraySize() * 32 : \
                                      0))
// }}



/**
 * Enum generated from <tt>common/ProximityLookupMessages.msg</tt> by opp_msgc.
 * <pre>
 * enum ProximityLookupMetrik
 * {
 *     NONE = 0;                       
 *     BY_KEY = 1;                     
 *     BY_KEY_X = 2;                   
 *     BY_PROXIMITY = 3;               
 *     BY_PROXIMITY_X = 4;             
 *     BY_KEY_AND_PROXIMITY = 5;       
 *     BY_KEY_AND_PROXIMITY_WEIGHT = 6;
 * }
 * </pre>
 */
enum ProximityLookupMetrik {
    NONE = 0,
    BY_KEY = 1,
    BY_KEY_X = 2,
    BY_PROXIMITY = 3,
    BY_PROXIMITY_X = 4,
    BY_KEY_AND_PROXIMITY = 5,
    BY_KEY_AND_PROXIMITY_WEIGHT = 6
};

/**
 * Class generated from <tt>common/ProximityLookupMessages.msg</tt> by opp_msgc.
 * <pre>
 * packet ProxFindNodeCall extends FindNodeCall
 * {
 * }
 * </pre>
 */
class ProxFindNodeCall : public ::FindNodeCall
{
  protected:

  private:
    void copy(const ProxFindNodeCall& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ProxFindNodeCall&);

  public:
    ProxFindNodeCall(const char *name=NULL, int kind=0);
    ProxFindNodeCall(const ProxFindNodeCall& other);
    virtual ~ProxFindNodeCall();
    ProxFindNodeCall& operator=(const ProxFindNodeCall& other);
    virtual ProxFindNodeCall *dup() const {return new ProxFindNodeCall(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, ProxFindNodeCall& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ProxFindNodeCall& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>common/ProximityLookupMessages.msg</tt> by opp_msgc.
 * <pre>
 * packet ProxFindNodeResponse extends FindNodeResponse
 * {
 *         double nextHopNcsInfos[];
 * }
 * </pre>
 */
class ProxFindNodeResponse : public ::FindNodeResponse
{
  protected:
    double *nextHopNcsInfos_var; // array ptr
    unsigned int nextHopNcsInfos_arraysize;

  private:
    void copy(const ProxFindNodeResponse& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ProxFindNodeResponse&);

  public:
    ProxFindNodeResponse(const char *name=NULL, int kind=0);
    ProxFindNodeResponse(const ProxFindNodeResponse& other);
    virtual ~ProxFindNodeResponse();
    ProxFindNodeResponse& operator=(const ProxFindNodeResponse& other);
    virtual ProxFindNodeResponse *dup() const {return new ProxFindNodeResponse(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual void setNextHopNcsInfosArraySize(unsigned int size);
    virtual unsigned int getNextHopNcsInfosArraySize() const;
    virtual double getNextHopNcsInfos(unsigned int k) const;
    virtual void setNextHopNcsInfos(unsigned int k, double nextHopNcsInfos);
};

inline void doPacking(cCommBuffer *b, ProxFindNodeResponse& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ProxFindNodeResponse& obj) {obj.parsimUnpack(b);}


#endif // _PROXIMITYLOOKUPMESSAGES_M_H_
