<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="page">
    <name>index</name>
    <title>OverSim API Reference</title>
    <filename>index</filename>
  </compound>
  <compound kind="file">
    <name>AbstractLookup.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>AbstractLookup_8h</filename>
    <includes id="NodeVector_8h" name="NodeVector.h" local="no" imported="no">NodeVector.h</includes>
    <class kind="class">AbstractLookup</class>
  </compound>
  <compound kind="file">
    <name>AbstractSendStrategy.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/globalViewBuilder/</path>
    <filename>AbstractSendStrategy_8cc</filename>
    <includes id="AbstractSendStrategy_8h" name="AbstractSendStrategy.h" local="yes" imported="no">AbstractSendStrategy.h</includes>
    <includes id="GlobalViewBuilder_8h" name="GlobalViewBuilder.h" local="no" imported="no">GlobalViewBuilder.h</includes>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>getGlobalViewData</name>
      <anchorfile>AbstractSendStrategy_8cc.html</anchorfile>
      <anchor>a7ddf88e2830496aacd9e9322dd1e865a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AbstractSendStrategy.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/globalViewBuilder/</path>
    <filename>AbstractSendStrategy_8h</filename>
    <includes id="CoordinateSystem_8h" name="CoordinateSystem.h" local="no" imported="no">CoordinateSystem.h</includes>
    <includes id="TreeManagementMessage__m_8h" name="TreeManagementMessage_m.h" local="no" imported="no">TreeManagementMessage_m.h</includes>
    <includes id="TreeManagement_8h" name="TreeManagement.h" local="no" imported="no">TreeManagement.h</includes>
    <class kind="class">AbstractSendStrategy</class>
  </compound>
  <compound kind="file">
    <name>AccessNet.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/inetunderlay/</path>
    <filename>AccessNet_8cc</filename>
    <includes id="AccessNet_8h" name="AccessNet.h" local="yes" imported="no">AccessNet.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>AccessNet_8cc.html</anchorfile>
      <anchor>a5f0ff649408065ef8dc375223b0d3e79</anchor>
      <arglist>(AccessNet)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>AccessNet_8cc.html</anchorfile>
      <anchor>af547d2641eef703c9c2b422bb5ac7cd8</anchor>
      <arglist>(std::ostream &amp;os, NodeInfo &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>firstUnusedGate</name>
      <anchorfile>AccessNet_8cc.html</anchorfile>
      <anchor>a15cec891c95d848dfc3900b508a58eaa</anchor>
      <arglist>(cModule *owner, const char *name, cGate::Type type)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AccessNet.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/inetunderlay/</path>
    <filename>AccessNet_8h</filename>
    <includes id="InitStages_8h" name="InitStages.h" local="no" imported="no">InitStages.h</includes>
    <class kind="struct">IPv6Words</class>
    <class kind="class">NodeInfo</class>
    <class kind="class">TerminalInfo</class>
    <class kind="class">AccessNet</class>
    <member kind="function">
      <type>cGate *</type>
      <name>firstUnusedGate</name>
      <anchorfile>AccessNet_8h.html</anchorfile>
      <anchor>af2c9442d1584211aa9722511140a63c0</anchor>
      <arglist>(cModule *owner, const char *name, cGate::Type type=cGate::NONE)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ALMTest.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/almtest/</path>
    <filename>ALMTest_8cc</filename>
    <includes id="ALMTest_8h" name="ALMTest.h" local="yes" imported="no">ALMTest.h</includes>
    <includes id="ALMTestTracedMessage__m_8h" name="ALMTestTracedMessage_m.h" local="yes" imported="no">ALMTestTracedMessage_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>ALMTest_8cc.html</anchorfile>
      <anchor>a3b5014f410c7989e8bad4b467ecc94cd</anchor>
      <arglist>(ALMTest)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ALMTest.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/almtest/</path>
    <filename>ALMTest_8h</filename>
    <includes id="BaseApp_8h" name="BaseApp.h" local="yes" imported="no">BaseApp.h</includes>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="yes" imported="no">CommonMessages_m.h</includes>
    <includes id="MessageObserver_8h" name="MessageObserver.h" local="yes" imported="no">MessageObserver.h</includes>
    <class kind="class">ALMTest</class>
  </compound>
  <compound kind="file">
    <name>ALMTestTracedMessage_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/almtest/</path>
    <filename>ALMTestTracedMessage__m_8h</filename>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <class kind="class">ALMTestTracedMessage</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>ALMTestTracedMessage__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>ALMTestTracedMessage__m_8h.html</anchorfile>
      <anchor>a3538c3bc6f565f96bad91d75194e64d2</anchor>
      <arglist>(cCommBuffer *b, ALMTestTracedMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>ALMTestTracedMessage__m_8h.html</anchorfile>
      <anchor>aa6a77922d1b5de56369892b262113a30</anchor>
      <arglist>(cCommBuffer *b, ALMTestTracedMessage &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>apptunoutscheduler.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/singlehostunderlay/</path>
    <filename>apptunoutscheduler_8cc</filename>
    <includes id="apptunoutscheduler_8h" name="apptunoutscheduler.h" local="yes" imported="no">apptunoutscheduler.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>apptunoutscheduler_8cc.html</anchorfile>
      <anchor>af5867ee1650a1174ebdfd6c9a248c7f1</anchor>
      <arglist>(AppTunOutScheduler)</arglist>
    </member>
    <member kind="variable">
      <type>cConfigOption *</type>
      <name>CFGID_EXTERNALAPP_APP_PORT</name>
      <anchorfile>apptunoutscheduler_8cc.html</anchorfile>
      <anchor>ab909f74fd837f0c0ddf41a7041a197b0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>apptunoutscheduler.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/singlehostunderlay/</path>
    <filename>apptunoutscheduler_8h</filename>
    <includes id="realtimescheduler_8h" name="realtimescheduler.h" local="yes" imported="no">realtimescheduler.h</includes>
    <class kind="class">AppTunOutScheduler</class>
    <member kind="define">
      <type>#define</type>
      <name>WANT_WINSOCK2</name>
      <anchorfile>apptunoutscheduler_8h.html</anchorfile>
      <anchor>a105264025fbdfc308077979bc21a5474</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AreaDataContainer.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/globalViewBuilder/</path>
    <filename>AreaDataContainer_8cc</filename>
    <includes id="AreaDataContainer_8h" name="AreaDataContainer.h" local="yes" imported="no">AreaDataContainer.h</includes>
  </compound>
  <compound kind="file">
    <name>AreaDataContainer.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/globalViewBuilder/</path>
    <filename>AreaDataContainer_8h</filename>
    <includes id="CoordBasedRouting_8h" name="CoordBasedRouting.h" local="no" imported="no">CoordBasedRouting.h</includes>
    <class kind="class">AreaDataContainer</class>
  </compound>
  <compound kind="file">
    <name>Bamboo.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/bamboo/</path>
    <filename>Bamboo_8cc</filename>
    <includes id="RpcMacros_8h" name="RpcMacros.h" local="no" imported="no">RpcMacros.h</includes>
    <includes id="InitStages_8h" name="InitStages.h" local="no" imported="no">InitStages.h</includes>
    <includes id="GlobalStatistics_8h" name="GlobalStatistics.h" local="no" imported="no">GlobalStatistics.h</includes>
    <includes id="LookupListener_8h" name="LookupListener.h" local="no" imported="no">LookupListener.h</includes>
    <includes id="AbstractLookup_8h" name="AbstractLookup.h" local="no" imported="no">AbstractLookup.h</includes>
    <includes id="Bamboo_8h" name="Bamboo.h" local="yes" imported="no">Bamboo.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>Bamboo_8cc.html</anchorfile>
      <anchor>a9b77b226f30544835b627ace4a81bdd5</anchor>
      <arglist>(Bamboo)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Bamboo.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/bamboo/</path>
    <filename>Bamboo_8h</filename>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="BaseOverlay_8h" name="BaseOverlay.h" local="no" imported="no">BaseOverlay.h</includes>
    <includes id="BasePastry_8h" name="BasePastry.h" local="no" imported="no">BasePastry.h</includes>
    <includes id="PastryTypes_8h" name="PastryTypes.h" local="yes" imported="no">PastryTypes.h</includes>
    <includes id="PastryMessage__m_8h" name="PastryMessage_m.h" local="yes" imported="no">PastryMessage_m.h</includes>
    <includes id="PastryRoutingTable_8h" name="PastryRoutingTable.h" local="yes" imported="no">PastryRoutingTable.h</includes>
    <includes id="PastryLeafSet_8h" name="PastryLeafSet.h" local="yes" imported="no">PastryLeafSet.h</includes>
    <includes id="PastryNeighborhoodSet_8h" name="PastryNeighborhoodSet.h" local="yes" imported="no">PastryNeighborhoodSet.h</includes>
    <class kind="class">Bamboo</class>
    <class kind="class">BambooLookupListener</class>
  </compound>
  <compound kind="file">
    <name>base64.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier3/xmlrpcinterface/xmlrpc++/</path>
    <filename>base64_8h</filename>
    <class kind="class">base64</class>
    <class kind="struct">base64::crlf</class>
    <class kind="struct">base64::crlfsp</class>
    <class kind="struct">base64::noline</class>
    <class kind="struct">base64::three2four</class>
    <member kind="define">
      <type>#define</type>
      <name>_0000_0011</name>
      <anchorfile>base64_8h.html</anchorfile>
      <anchor>a6b920280ad3a36d7d0bdb3f92252c8d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_1111_1100</name>
      <anchorfile>base64_8h.html</anchorfile>
      <anchor>a5f72788f8c935d67f87d67e98f1e298b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_1111_0000</name>
      <anchorfile>base64_8h.html</anchorfile>
      <anchor>a990dfb53aea8776dcc549610b9c033b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_0011_0000</name>
      <anchorfile>base64_8h.html</anchorfile>
      <anchor>a51ba1c7e3c450eb8207091fb5e3869d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_0011_1100</name>
      <anchorfile>base64_8h.html</anchorfile>
      <anchor>a9c9151c0e01fdc938cc5ed069477fd17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_0000_1111</name>
      <anchorfile>base64_8h.html</anchorfile>
      <anchor>a3760424db42111d800ea5bb22d2db829</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_1100_0000</name>
      <anchorfile>base64_8h.html</anchorfile>
      <anchor>af52ed4a8ecdf7ed91662c3b9ec87152e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_0011_1111</name>
      <anchorfile>base64_8h.html</anchorfile>
      <anchor>a616630e2caacfdd6b6c34030014919fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_EQUAL_CHAR</name>
      <anchorfile>base64_8h.html</anchorfile>
      <anchor>ab21fe31657ebd8230fdf07e2111517f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_UNKNOWN_CHAR</name>
      <anchorfile>base64_8h.html</anchorfile>
      <anchor>ac3fdee79031f06fa7379e78adbe5dd51</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOS_FAILBIT</name>
      <anchorfile>base64_8h.html</anchorfile>
      <anchor>afa6d7287cc399e80698b0806e299ce79</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOS_EOFBIT</name>
      <anchorfile>base64_8h.html</anchorfile>
      <anchor>a92513723d8d0ad993ee39e505091e979</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOS_BADBIT</name>
      <anchorfile>base64_8h.html</anchorfile>
      <anchor>a5c2c702062d9d465461e31c653ab749b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_IOS_GOODBIT</name>
      <anchorfile>base64_8h.html</anchorfile>
      <anchor>a07f4dae7067990d4a3313395d2689c0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>_base64Chars</name>
      <anchorfile>base64_8h.html</anchorfile>
      <anchor>ab52135e7a1927f5d50d1a077e591f5d3</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BaseApp.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>BaseApp_8cc</filename>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <includes id="BaseRpc_8h" name="BaseRpc.h" local="no" imported="no">BaseRpc.h</includes>
    <includes id="OverlayAccess_8h" name="OverlayAccess.h" local="no" imported="no">OverlayAccess.h</includes>
    <includes id="GlobalNodeListAccess_8h" name="GlobalNodeListAccess.h" local="no" imported="no">GlobalNodeListAccess.h</includes>
    <includes id="GlobalStatisticsAccess_8h" name="GlobalStatisticsAccess.h" local="no" imported="no">GlobalStatisticsAccess.h</includes>
    <includes id="UnderlayConfiguratorAccess_8h" name="UnderlayConfiguratorAccess.h" local="no" imported="no">UnderlayConfiguratorAccess.h</includes>
    <includes id="BaseApp_8h" name="BaseApp.h" local="yes" imported="no">BaseApp.h</includes>
  </compound>
  <compound kind="file">
    <name>BaseApp.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>BaseApp_8h</filename>
    <includes id="NodeVector_8h" name="NodeVector.h" local="yes" imported="no">NodeVector.h</includes>
    <includes id="BaseRpc_8h" name="BaseRpc.h" local="no" imported="no">BaseRpc.h</includes>
    <includes id="BaseTcpSupport_8h" name="BaseTcpSupport.h" local="no" imported="no">BaseTcpSupport.h</includes>
    <includes id="BaseOverlay_8h" name="BaseOverlay.h" local="no" imported="no">BaseOverlay.h</includes>
    <class kind="class">BaseApp</class>
  </compound>
  <compound kind="file">
    <name>BaseLocation.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>BaseLocation_8h</filename>
    <class kind="class">BaseLocation</class>
  </compound>
  <compound kind="file">
    <name>BaseOverlay.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>BaseOverlay_8cc</filename>
    <includes id="RpcMacros_8h" name="RpcMacros.h" local="no" imported="no">RpcMacros.h</includes>
    <includes id="GlobalNodeListAccess_8h" name="GlobalNodeListAccess.h" local="no" imported="no">GlobalNodeListAccess.h</includes>
    <includes id="UnderlayConfiguratorAccess_8h" name="UnderlayConfiguratorAccess.h" local="no" imported="no">UnderlayConfiguratorAccess.h</includes>
    <includes id="GlobalStatisticsAccess_8h" name="GlobalStatisticsAccess.h" local="no" imported="no">GlobalStatisticsAccess.h</includes>
    <includes id="GlobalParametersAccess_8h" name="GlobalParametersAccess.h" local="no" imported="no">GlobalParametersAccess.h</includes>
    <includes id="LookupListener_8h" name="LookupListener.h" local="no" imported="no">LookupListener.h</includes>
    <includes id="RecursiveLookup_8h" name="RecursiveLookup.h" local="no" imported="no">RecursiveLookup.h</includes>
    <includes id="IterativeLookup_8h" name="IterativeLookup.h" local="no" imported="no">IterativeLookup.h</includes>
    <includes id="BootstrapList_8h" name="BootstrapList.h" local="no" imported="no">BootstrapList.h</includes>
    <includes id="BaseOverlay_8h" name="BaseOverlay.h" local="yes" imported="no">BaseOverlay.h</includes>
    <class kind="class">SendToKeyListener</class>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>pendingLookups</name>
      <anchorfile>BaseOverlay_8cc.html</anchorfile>
      <anchor>a400caf95d25f6d8cedf0f008f9a697ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BaseOverlay.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>BaseOverlay_8h</filename>
    <includes id="oversim__mapset_8h" name="oversim_mapset.h" local="no" imported="no">oversim_mapset.h</includes>
    <includes id="NodeVector_8h" name="NodeVector.h" local="no" imported="no">NodeVector.h</includes>
    <includes id="TopologyVis_8h" name="TopologyVis.h" local="no" imported="no">TopologyVis.h</includes>
    <includes id="BaseRpc_8h" name="BaseRpc.h" local="no" imported="no">BaseRpc.h</includes>
    <includes id="BaseTcpSupport_8h" name="BaseTcpSupport.h" local="no" imported="no">BaseTcpSupport.h</includes>
    <includes id="IterativeLookupConfiguration_8h" name="IterativeLookupConfiguration.h" local="no" imported="no">IterativeLookupConfiguration.h</includes>
    <includes id="RecursiveLookup_8h" name="RecursiveLookup.h" local="no" imported="no">RecursiveLookup.h</includes>
    <includes id="InitStages_8h" name="InitStages.h" local="no" imported="no">InitStages.h</includes>
    <class kind="class">BaseOverlay</class>
    <class kind="class">BaseOverlay::BaseOverlayContext</class>
    <class kind="struct">BaseOverlay::HopDelayRecord</class>
    <class kind="class">BaseOverlay::lookupHashFcn</class>
  </compound>
  <compound kind="file">
    <name>BasePastry.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/pastry/</path>
    <filename>BasePastry_8cc</filename>
    <includes id="RpcMacros_8h" name="RpcMacros.h" local="no" imported="no">RpcMacros.h</includes>
    <includes id="InitStages_8h" name="InitStages.h" local="no" imported="no">InitStages.h</includes>
    <includes id="NeighborCache_8h" name="NeighborCache.h" local="no" imported="no">NeighborCache.h</includes>
    <includes id="GlobalStatistics_8h" name="GlobalStatistics.h" local="no" imported="no">GlobalStatistics.h</includes>
    <includes id="BootstrapList_8h" name="BootstrapList.h" local="no" imported="no">BootstrapList.h</includes>
    <includes id="BasePastry_8h" name="BasePastry.h" local="yes" imported="no">BasePastry.h</includes>
    <member kind="function">
      <type>bool</type>
      <name>stateMsgIsSmaller</name>
      <anchorfile>BasePastry_8cc.html</anchorfile>
      <anchor>ac391c2095c772c546f4804779001cea9</anchor>
      <arglist>(const PastryStateMsgHandle &amp;hnd1, const PastryStateMsgHandle &amp;hnd2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>BasePastry_8cc.html</anchorfile>
      <anchor>a662ea562d7bf53435f91be0508afd85d</anchor>
      <arglist>(std::ostream &amp;os, const PastryStateMsgProximity &amp;pr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasePastry.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/pastry/</path>
    <filename>BasePastry_8h</filename>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="BaseOverlay_8h" name="BaseOverlay.h" local="no" imported="no">BaseOverlay.h</includes>
    <includes id="NeighborCache_8h" name="NeighborCache.h" local="no" imported="no">NeighborCache.h</includes>
    <includes id="PastryTypes_8h" name="PastryTypes.h" local="yes" imported="no">PastryTypes.h</includes>
    <includes id="PastryMessage__m_8h" name="PastryMessage_m.h" local="yes" imported="no">PastryMessage_m.h</includes>
    <includes id="PastryRoutingTable_8h" name="PastryRoutingTable.h" local="yes" imported="no">PastryRoutingTable.h</includes>
    <includes id="PastryLeafSet_8h" name="PastryLeafSet.h" local="yes" imported="no">PastryLeafSet.h</includes>
    <includes id="PastryNeighborhoodSet_8h" name="PastryNeighborhoodSet.h" local="yes" imported="no">PastryNeighborhoodSet.h</includes>
    <class kind="class">BasePastry</class>
    <class kind="struct">BasePastry::PingContext</class>
    <member kind="function">
      <type>bool</type>
      <name>stateMsgIsSmaller</name>
      <anchorfile>BasePastry_8h.html</anchorfile>
      <anchor>ac391c2095c772c546f4804779001cea9</anchor>
      <arglist>(const PastryStateMsgHandle &amp;hnd1, const PastryStateMsgHandle &amp;hnd2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>BasePastry_8h.html</anchorfile>
      <anchor>a662ea562d7bf53435f91be0508afd85d</anchor>
      <arglist>(std::ostream &amp;os, const PastryStateMsgProximity &amp;pr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BaseRpc.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>BaseRpc_8cc</filename>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <includes id="UnderlayConfiguratorAccess_8h" name="UnderlayConfiguratorAccess.h" local="no" imported="no">UnderlayConfiguratorAccess.h</includes>
    <includes id="GlobalStatisticsAccess_8h" name="GlobalStatisticsAccess.h" local="no" imported="no">GlobalStatisticsAccess.h</includes>
    <includes id="NeighborCache_8h" name="NeighborCache.h" local="no" imported="no">NeighborCache.h</includes>
    <includes id="CryptoModule_8h" name="CryptoModule.h" local="no" imported="no">CryptoModule.h</includes>
    <includes id="Vivaldi_8h" name="Vivaldi.h" local="no" imported="no">Vivaldi.h</includes>
    <includes id="OverlayAccess_8h" name="OverlayAccess.h" local="no" imported="no">OverlayAccess.h</includes>
    <includes id="BaseRpc_8h" name="BaseRpc.h" local="yes" imported="no">BaseRpc.h</includes>
    <includes id="RpcMacros_8h" name="RpcMacros.h" local="yes" imported="no">RpcMacros.h</includes>
  </compound>
  <compound kind="file">
    <name>BaseRpc.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>BaseRpc_8h</filename>
    <includes id="oversim__mapset_8h" name="oversim_mapset.h" local="no" imported="no">oversim_mapset.h</includes>
    <includes id="RpcState_8h" name="RpcState.h" local="no" imported="no">RpcState.h</includes>
    <includes id="RpcListener_8h" name="RpcListener.h" local="no" imported="no">RpcListener.h</includes>
    <includes id="RpcMacros_8h" name="RpcMacros.h" local="no" imported="no">RpcMacros.h</includes>
    <includes id="ProxNodeHandle_8h" name="ProxNodeHandle.h" local="no" imported="no">ProxNodeHandle.h</includes>
    <class kind="class">BaseRpc</class>
  </compound>
  <compound kind="file">
    <name>BaseTcpSupport.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>BaseTcpSupport_8cc</filename>
    <includes id="BaseTcpSupport_8h" name="BaseTcpSupport.h" local="yes" imported="no">BaseTcpSupport.h</includes>
    <includes id="GlobalStatisticsAccess_8h" name="GlobalStatisticsAccess.h" local="no" imported="no">GlobalStatisticsAccess.h</includes>
  </compound>
  <compound kind="file">
    <name>BaseTcpSupport.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>BaseTcpSupport_8h</filename>
    <includes id="TransportAddress_8h" name="TransportAddress.h" local="no" imported="no">TransportAddress.h</includes>
    <includes id="ExtTCPSocketMap_8h" name="ExtTCPSocketMap.h" local="no" imported="no">ExtTCPSocketMap.h</includes>
    <class kind="class">BaseTcpSupport</class>
  </compound>
  <compound kind="file">
    <name>BinaryValue.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>BinaryValue_8cc</filename>
    <includes id="cnetcommbuffer_8h" name="cnetcommbuffer.h" local="no" imported="no">cnetcommbuffer.h</includes>
    <includes id="BinaryValue_8h" name="BinaryValue.h" local="yes" imported="no">BinaryValue.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>BinaryValue_8cc.html</anchorfile>
      <anchor>a8ac95ea2336925636853d4ebce1aa8cb</anchor>
      <arglist>(std::ostream &amp;os, const BinaryValue &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BinaryValue.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>BinaryValue_8h</filename>
    <class kind="class">BinaryValue</class>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>BinaryValue_8h.html</anchorfile>
      <anchor>a84e2b447ea20dd5d73594975d3bc508e</anchor>
      <arglist>(cCommBuffer *b, BinaryValue &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>BinaryValue_8h.html</anchorfile>
      <anchor>aa22e142bb58ab950113251357ffc6fa1</anchor>
      <arglist>(cCommBuffer *b, BinaryValue &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BootstrapList.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>BootstrapList_8cc</filename>
    <includes id="BaseApp_8h" name="BaseApp.h" local="no" imported="no">BaseApp.h</includes>
    <includes id="BootstrapList_8h" name="BootstrapList.h" local="no" imported="no">BootstrapList.h</includes>
    <includes id="GlobalNodeList_8h" name="GlobalNodeList.h" local="no" imported="no">GlobalNodeList.h</includes>
    <includes id="BaseOverlay_8h" name="BaseOverlay.h" local="no" imported="no">BaseOverlay.h</includes>
    <includes id="NeighborCache_8h" name="NeighborCache.h" local="no" imported="no">NeighborCache.h</includes>
    <includes id="UnderlayConfiguratorAccess_8h" name="UnderlayConfiguratorAccess.h" local="no" imported="no">UnderlayConfiguratorAccess.h</includes>
    <includes id="ZeroconfConnector_8h" name="ZeroconfConnector.h" local="no" imported="no">ZeroconfConnector.h</includes>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <includes id="hashWatch_8h" name="hashWatch.h" local="no" imported="no">hashWatch.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>BootstrapList_8cc.html</anchorfile>
      <anchor>a6c22f0c5c1da6a43b14ea878077d4607</anchor>
      <arglist>(BootstrapList)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>BootstrapList_8cc.html</anchorfile>
      <anchor>ad5cdbfe66951873f655709197be60a3e</anchor>
      <arglist>(std::ostream &amp;os, const BootstrapNodeHandle *n)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BootstrapList.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>BootstrapList_8h</filename>
    <includes id="BaseApp_8h" name="BaseApp.h" local="no" imported="no">BaseApp.h</includes>
    <includes id="BootstrapNodeHandle_8h" name="BootstrapNodeHandle.h" local="no" imported="no">BootstrapNodeHandle.h</includes>
    <includes id="NodeVector_8h" name="NodeVector.h" local="no" imported="no">NodeVector.h</includes>
    <includes id="oversim__mapset_8h" name="oversim_mapset.h" local="no" imported="no">oversim_mapset.h</includes>
    <class kind="class">BootstrapList</class>
    <member kind="typedef">
      <type>std::pair&lt; TransportAddress, BootstrapNodeHandle * &gt;</type>
      <name>NodePair</name>
      <anchorfile>BootstrapList_8h.html</anchorfile>
      <anchor>a73111df7a3d2967658283b0d5711013f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UNORDERED_MAP&lt; TransportAddress, BootstrapNodeHandle *, TransportAddress::hashFcn &gt;</type>
      <name>BootstrapNodeSet</name>
      <anchorfile>BootstrapList_8h.html</anchorfile>
      <anchor>acaca2f91cc129122d49820f698f057ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BootstrapListAccess.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>BootstrapListAccess_8h</filename>
    <includes id="GlobalNodeList_8h" name="GlobalNodeList.h" local="yes" imported="no">GlobalNodeList.h</includes>
    <class kind="class">GlobalNodeListAccess</class>
  </compound>
  <compound kind="file">
    <name>BootstrapNodeHandle.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>BootstrapNodeHandle_8h</filename>
    <class kind="class">BootstrapNodeHandle</class>
    <member kind="enumeration">
      <name>BootstrapNodePrioType</name>
      <anchorfile>BootstrapNodeHandle_8h.html</anchorfile>
      <anchor>a68a006cef1615ffd58c7e3a75e79a1fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DNSSD</name>
      <anchorfile>BootstrapNodeHandle_8h.html</anchorfile>
      <anchor>a68a006cef1615ffd58c7e3a75e79a1feab4f3db8974793bdd756e25ebedeafd57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MDNS</name>
      <anchorfile>BootstrapNodeHandle_8h.html</anchorfile>
      <anchor>a68a006cef1615ffd58c7e3a75e79a1fea3d46c8f36ec8683985f3a55be004fa3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CACHE</name>
      <anchorfile>BootstrapNodeHandle_8h.html</anchorfile>
      <anchor>a68a006cef1615ffd58c7e3a75e79a1fea1c40da5431ef614ba2eea7e7e3eed53d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoundingBox2D.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/simplegameclient/</path>
    <filename>BoundingBox2D_8cc</filename>
    <includes id="BoundingBox2D_8h" name="BoundingBox2D.h" local="no" imported="no">BoundingBox2D.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>BoundingBox2D_8cc.html</anchorfile>
      <anchor>aed9064a5f8511f7ad85e60fdf8a5b0c7</anchor>
      <arglist>(std::ostream &amp;Stream, const BoundingBox2D &amp;box)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoundingBox2D.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/simplegameclient/</path>
    <filename>BoundingBox2D_8h</filename>
    <includes id="Vector2D_8h" name="Vector2D.h" local="no" imported="no">Vector2D.h</includes>
    <class kind="class">BoundingBox2D</class>
  </compound>
  <compound kind="file">
    <name>Broose.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/broose/</path>
    <filename>Broose_8cc</filename>
    <includes id="Broose_8h" name="Broose.h" local="yes" imported="no">Broose.h</includes>
    <includes id="RpcMacros_8h" name="RpcMacros.h" local="no" imported="no">RpcMacros.h</includes>
    <includes id="GlobalStatistics_8h" name="GlobalStatistics.h" local="no" imported="no">GlobalStatistics.h</includes>
    <includes id="BootstrapList_8h" name="BootstrapList.h" local="no" imported="no">BootstrapList.h</includes>
    <includes id="LookupListener_8h" name="LookupListener.h" local="no" imported="no">LookupListener.h</includes>
    <class kind="class">BrooseLookupListener</class>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>Broose_8cc.html</anchorfile>
      <anchor>a93944e35989f89683336b2bde84791e6</anchor>
      <arglist>(Broose)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Broose.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/broose/</path>
    <filename>Broose_8h</filename>
    <includes id="BaseOverlay_8h" name="BaseOverlay.h" local="no" imported="no">BaseOverlay.h</includes>
    <includes id="RpcListener_8h" name="RpcListener.h" local="no" imported="no">RpcListener.h</includes>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="BrooseHandle_8h" name="BrooseHandle.h" local="yes" imported="no">BrooseHandle.h</includes>
    <includes id="BrooseBucket_8h" name="BrooseBucket.h" local="yes" imported="no">BrooseBucket.h</includes>
    <includes id="BrooseMessage__m_8h" name="BrooseMessage_m.h" local="yes" imported="no">BrooseMessage_m.h</includes>
    <class kind="class">Broose</class>
  </compound>
  <compound kind="file">
    <name>BrooseBucket.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/broose/</path>
    <filename>BrooseBucket_8cc</filename>
    <includes id="BrooseBucket_8h" name="BrooseBucket.h" local="yes" imported="no">BrooseBucket.h</includes>
    <includes id="BrooseHandle_8h" name="BrooseHandle.h" local="yes" imported="no">BrooseHandle.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>BrooseBucket_8cc.html</anchorfile>
      <anchor>a5f24a0c69a7c8cd8003551765ffdec11</anchor>
      <arglist>(BrooseBucket)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>MAXBITS</name>
      <anchorfile>BrooseBucket_8cc.html</anchorfile>
      <anchor>a0415bc7339b2dfe1da871bc2082f3c95</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BrooseBucket.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/broose/</path>
    <filename>BrooseBucket_8h</filename>
    <includes id="BrooseHandle_8h" name="BrooseHandle.h" local="yes" imported="no">BrooseHandle.h</includes>
    <includes id="Broose_8h" name="Broose.h" local="yes" imported="no">Broose.h</includes>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <class kind="class">BrooseBucket</class>
  </compound>
  <compound kind="file">
    <name>BrooseHandle.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/broose/</path>
    <filename>BrooseHandle_8cc</filename>
    <includes id="BrooseHandle_8h" name="BrooseHandle.h" local="yes" imported="no">BrooseHandle.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>BrooseHandle_8cc.html</anchorfile>
      <anchor>a64dd49711335877d9c0983d48fc63959</anchor>
      <arglist>(std::ostream &amp;os, const BrooseHandle &amp;n)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BrooseHandle.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/broose/</path>
    <filename>BrooseHandle_8h</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <class kind="class">BrooseHandle</class>
  </compound>
  <compound kind="file">
    <name>BrooseMessage_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/broose/</path>
    <filename>BrooseMessage__m_8h</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <class kind="class">BucketCall</class>
    <class kind="class">BucketResponse</class>
    <class kind="class">BrooseFindNodeExtMessage</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>BrooseMessage__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BUCKETCALL_L</name>
      <anchorfile>BrooseMessage__m_8h.html</anchorfile>
      <anchor>a828592e4207a671e7eb7011a5cce9bc1</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BUCKETRESPONSE_L</name>
      <anchorfile>BrooseMessage__m_8h.html</anchorfile>
      <anchor>a5be8fc7cfdcfdb3f48cad80a6f25a3cc</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BROOSEFINDNODEEXTMESSAGE_L</name>
      <anchorfile>BrooseMessage__m_8h.html</anchorfile>
      <anchor>a16ba8d8ad06fbd2154037234fa035de7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>BucketType</name>
      <anchorfile>BrooseMessage__m_8h.html</anchorfile>
      <anchor>a0d72090ca3225dfb0af1767bf6390a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RIGHT</name>
      <anchorfile>BrooseMessage__m_8h.html</anchorfile>
      <anchor>a0d72090ca3225dfb0af1767bf6390a40aec8379af7490bb9eaaf579cf17876f38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LEFT</name>
      <anchorfile>BrooseMessage__m_8h.html</anchorfile>
      <anchor>a0d72090ca3225dfb0af1767bf6390a40adb45120aafd37a973140edee24708065</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BROTHER</name>
      <anchorfile>BrooseMessage__m_8h.html</anchorfile>
      <anchor>a0d72090ca3225dfb0af1767bf6390a40a0448a6480348702c480296969de6dca0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ProState</name>
      <anchorfile>BrooseMessage__m_8h.html</anchorfile>
      <anchor>a1e4df1e60bb9501df7c024063484d127</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PINIT</name>
      <anchorfile>BrooseMessage__m_8h.html</anchorfile>
      <anchor>a1e4df1e60bb9501df7c024063484d127a544019da4a7a9284830c20e6c4f5a5a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRSET</name>
      <anchorfile>BrooseMessage__m_8h.html</anchorfile>
      <anchor>a1e4df1e60bb9501df7c024063484d127aa90bbfe38513a4fab312de105624e88e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PBSET</name>
      <anchorfile>BrooseMessage__m_8h.html</anchorfile>
      <anchor>a1e4df1e60bb9501df7c024063484d127a59443e9ea684a77445f11ef9ebccebbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PREADY</name>
      <anchorfile>BrooseMessage__m_8h.html</anchorfile>
      <anchor>a1e4df1e60bb9501df7c024063484d127af0cf279bed94f2aef4b9dd34594400c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>BrooseMessage__m_8h.html</anchorfile>
      <anchor>a746e8eda405552983fb57f029d396498</anchor>
      <arglist>(cCommBuffer *b, BucketCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>BrooseMessage__m_8h.html</anchorfile>
      <anchor>aaa4f8b3572d75ed950fb0910be897f84</anchor>
      <arglist>(cCommBuffer *b, BucketCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>BrooseMessage__m_8h.html</anchorfile>
      <anchor>a36237c9fb3ac9f4d566a3aa2fcfa7e72</anchor>
      <arglist>(cCommBuffer *b, BucketResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>BrooseMessage__m_8h.html</anchorfile>
      <anchor>a2552c7a3a596d86a4d8a3ca14cde41cc</anchor>
      <arglist>(cCommBuffer *b, BucketResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>BrooseMessage__m_8h.html</anchorfile>
      <anchor>ad926c18a10a1c2115121a6d75071f03a</anchor>
      <arglist>(cCommBuffer *b, BrooseFindNodeExtMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>BrooseMessage__m_8h.html</anchorfile>
      <anchor>ad170e2112ea7a94d3c37a6c5250c8f0c</anchor>
      <arglist>(cCommBuffer *b, BrooseFindNodeExtMessage &amp;obj)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>INDEX_L</name>
      <anchorfile>BrooseMessage__m_8h.html</anchorfile>
      <anchor>aae6f5d5891526a06197d0930bee6fa88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>BUCKETTYPE_L</name>
      <anchorfile>BrooseMessage__m_8h.html</anchorfile>
      <anchor>a49a38eced3a4cf1757a2cfce37b6884f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>PROTOSTATE_L</name>
      <anchorfile>BrooseMessage__m_8h.html</anchorfile>
      <anchor>a9f5cac595f6d7b82266a79d36f2d657a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>STEP_L</name>
      <anchorfile>BrooseMessage__m_8h.html</anchorfile>
      <anchor>af2a26d0b6f7c43ad0ef3dadcacd02c91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>RIGHTSHIFTING_L</name>
      <anchorfile>BrooseMessage__m_8h.html</anchorfile>
      <anchor>aaf75b559284f85e3bbad440b35db5181</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>NODENUM_L</name>
      <anchorfile>BrooseMessage__m_8h.html</anchorfile>
      <anchor>a0481f3c3b2d13513fcadbc424a42d0eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CBR-DHT.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/</path>
    <filename>CBR-DHT_8cc</filename>
    <includes id="CBR-DHT_8h" name="CBR-DHT.h" local="yes" imported="no">CBR-DHT.h</includes>
    <includes id="RpcMacros_8h" name="RpcMacros.h" local="no" imported="no">RpcMacros.h</includes>
    <includes id="BaseRpc_8h" name="BaseRpc.h" local="no" imported="no">BaseRpc.h</includes>
    <includes id="GlobalStatistics_8h" name="GlobalStatistics.h" local="no" imported="no">GlobalStatistics.h</includes>
    <includes id="CoordBasedRoutingAccess_8h" name="CoordBasedRoutingAccess.h" local="no" imported="no">CoordBasedRoutingAccess.h</includes>
    <includes id="NeighborCache_8h" name="NeighborCache.h" local="no" imported="no">NeighborCache.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>DIRECT_ROUTE_GET</name>
      <anchorfile>CBR-DHT_8cc.html</anchorfile>
      <anchor>a672052f3c28fcb08329d6a62a89b4912</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>CBR-DHT_8cc.html</anchorfile>
      <anchor>a7be2b8e32a564fe5abce5f421260c861</anchor>
      <arglist>(CBRDHT)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CBR-DHT.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/</path>
    <filename>CBR-DHT_8h</filename>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="SHA1_8h" name="SHA1.h" local="no" imported="no">SHA1.h</includes>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <includes id="CBR-DHTMessage__m_8h" name="CBR-DHTMessage_m.h" local="yes" imported="no">CBR-DHTMessage_m.h</includes>
    <includes id="DHTMessage__m_8h" name="DHTMessage_m.h" local="yes" imported="no">DHTMessage_m.h</includes>
    <includes id="DHTDataStorage_8h" name="DHTDataStorage.h" local="yes" imported="no">DHTDataStorage.h</includes>
    <includes id="BaseApp_8h" name="BaseApp.h" local="yes" imported="no">BaseApp.h</includes>
    <includes id="RpcMacros_8h" name="RpcMacros.h" local="no" imported="no">RpcMacros.h</includes>
    <class kind="class">CBRDHT</class>
    <class kind="struct">CBRDHT::GetMapEntry</class>
    <class kind="struct">CBRDHT::PutMapEntry</class>
  </compound>
  <compound kind="file">
    <name>CBR-DHTMessage_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/</path>
    <filename>CBR-DHTMessage__m_8h</filename>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="DHTMessage__m_8h" name="DHTMessage_m.h" local="no" imported="no">DHTMessage_m.h</includes>
    <class kind="class">CBRDHTGetCall</class>
    <class kind="class">CBRDHTGetResponse</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>CBR-DHTMessage__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CBR-DHTMessage__m_8h.html</anchorfile>
      <anchor>ae927316249079eb1139636c00413f839</anchor>
      <arglist>(cCommBuffer *b, CBRDHTGetCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CBR-DHTMessage__m_8h.html</anchorfile>
      <anchor>a1429ec92590dccfbd1865ba3a1b254ce</anchor>
      <arglist>(cCommBuffer *b, CBRDHTGetCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CBR-DHTMessage__m_8h.html</anchorfile>
      <anchor>ac49afe8ab9feaff0fad2e06c1188c2cb</anchor>
      <arglist>(cCommBuffer *b, CBRDHTGetResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CBR-DHTMessage__m_8h.html</anchorfile>
      <anchor>a67d174b48a50ce1b3908db133bded2d4</anchor>
      <arglist>(cCommBuffer *b, CBRDHTGetResponse &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Chord.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/chord/</path>
    <filename>Chord_8cc</filename>
    <includes id="GlobalStatistics_8h" name="GlobalStatistics.h" local="no" imported="no">GlobalStatistics.h</includes>
    <includes id="Comparator_8h" name="Comparator.h" local="no" imported="no">Comparator.h</includes>
    <includes id="BootstrapList_8h" name="BootstrapList.h" local="no" imported="no">BootstrapList.h</includes>
    <includes id="GlobalParameters_8h" name="GlobalParameters.h" local="no" imported="no">GlobalParameters.h</includes>
    <includes id="NeighborCache_8h" name="NeighborCache.h" local="no" imported="no">NeighborCache.h</includes>
    <includes id="ChordFingerTable_8h" name="ChordFingerTable.h" local="no" imported="no">ChordFingerTable.h</includes>
    <includes id="ChordSuccessorList_8h" name="ChordSuccessorList.h" local="no" imported="no">ChordSuccessorList.h</includes>
    <includes id="Chord_8h" name="Chord.h" local="yes" imported="no">Chord.h</includes>
    <namespace>oversim</namespace>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>aac274bdf33ee20fba3e03edadb79cb5b</anchor>
      <arglist>(Chord)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Chord.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/chord/</path>
    <filename>Chord_8h</filename>
    <includes id="BaseOverlay_8h" name="BaseOverlay.h" local="no" imported="no">BaseOverlay.h</includes>
    <includes id="NeighborCache_8h" name="NeighborCache.h" local="no" imported="no">NeighborCache.h</includes>
    <includes id="ChordMessage__m_8h" name="ChordMessage_m.h" local="yes" imported="no">ChordMessage_m.h</includes>
    <class kind="class">oversim::Chord</class>
    <namespace>oversim</namespace>
  </compound>
  <compound kind="file">
    <name>ChordFingerTable.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/chord/</path>
    <filename>ChordFingerTable_8cc</filename>
    <includes id="hashWatch_8h" name="hashWatch.h" local="yes" imported="no">hashWatch.h</includes>
    <includes id="Chord_8h" name="Chord.h" local="yes" imported="no">Chord.h</includes>
    <includes id="ChordSuccessorList_8h" name="ChordSuccessorList.h" local="yes" imported="no">ChordSuccessorList.h</includes>
    <includes id="ChordFingerTable_8h" name="ChordFingerTable.h" local="yes" imported="no">ChordFingerTable.h</includes>
    <namespace>oversim</namespace>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>a4ce40456e6cd781bfc5a1ac4b2629e24</anchor>
      <arglist>(ChordFingerTable)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>ChordFingerTable_8cc.html</anchorfile>
      <anchor>ac2f904f25fe0a21f6b996f70e2ed0425</anchor>
      <arglist>(std::ostream &amp;os, const Successors &amp;suc)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>ChordFingerTable_8cc.html</anchorfile>
      <anchor>a3cb07fd7ccff09fc3fe02bb0ece9dec1</anchor>
      <arglist>(std::ostream &amp;os, const FingerEntry &amp;entry)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ChordFingerTable.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/chord/</path>
    <filename>ChordFingerTable_8h</filename>
    <includes id="NodeVector_8h" name="NodeVector.h" local="no" imported="no">NodeVector.h</includes>
    <includes id="InitStages_8h" name="InitStages.h" local="no" imported="no">InitStages.h</includes>
    <class kind="class">oversim::ChordFingerTable</class>
    <namespace>oversim</namespace>
    <member kind="typedef">
      <type>std::multimap&lt; simtime_t, NodeHandle &gt;</type>
      <name>Successors</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>accb84485edd59dfec332aba3eea6311e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; NodeHandle, Successors &gt;</type>
      <name>FingerEntry</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>ac74e60dd6245280c9943f0d8a5ec0f25</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>ChordFingerTable_8h.html</anchorfile>
      <anchor>ac953ca0bf56d5d237c42bbd3c911ab44</anchor>
      <arglist>(std::ostream &amp;os, const oversim::Successors &amp;suc)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>ChordFingerTable_8h.html</anchorfile>
      <anchor>ab3d6641c861fca61d1c42b114b4659d0</anchor>
      <arglist>(std::ostream &amp;os, const oversim::FingerEntry &amp;entry)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ChordMessage_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/chord/</path>
    <filename>ChordMessage__m_8h</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="TransportAddress_8h" name="TransportAddress.h" local="no" imported="no">TransportAddress.h</includes>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <class kind="class">ChordMessage</class>
    <class kind="class">NewSuccessorHintMessage</class>
    <class kind="class">NotifyCall</class>
    <class kind="class">NotifyResponse</class>
    <class kind="class">JoinCall</class>
    <class kind="class">JoinResponse</class>
    <class kind="class">StabilizeCall</class>
    <class kind="class">StabilizeResponse</class>
    <class kind="class">FixfingersCall</class>
    <class kind="class">FixfingersResponse</class>
    <class kind="class">KoordeFindNodeExtMessage</class>
    <class kind="class">DeBruijnCall</class>
    <class kind="class">DeBruijnResponse</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NEWSUCCESSORHINT_L</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a62862b07d9b3c06662017b792a47d26e</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOTIFYCALL_L</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a92642e8c55d5dd61d18927463a543738</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOTIFYRESPONSE_L</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a4431f3b1e8e3607614621e64727d85ea</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JOINCALL_L</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a8dd5c744e569287e88c98abd1c7480ab</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JOINRESPONSE_L</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>acb583954e0e152b9a5c439c9a635a92f</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STABILIZECALL_L</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a4280cd10a109a628eb470fe82920412c</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STABILIZERESPONSE_L</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a70d8ce03701d7d90fd6df3cbca177d59</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FIXFINGERSCALL_L</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a40fc0d6544a8d88755b49b508100225d</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FIXFINGERSRESPONSE_L</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a19fd46eab9da6f1de33d5e7234b28f09</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBRUIJNCALL_L</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a6d4711cba890e02d29136cd0a27aa56e</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBRUIJNRESPONSE_L</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a708cca2352cee0836e113f9d65680771</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KOORDEFINDNODEEXTMESSAGE_L</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>aa96567df9c417d5592f776defc6413c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ChordCommand</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a3c927aa3389b27d2c0e6e4f481c8995f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEWSUCCESSORHINT</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a3c927aa3389b27d2c0e6e4f481c8995fa1a9257b13a6b35faa974a4728f77b89a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a51f4a47ebf1b8ccdc0b37c2c1b804fde</anchor>
      <arglist>(cCommBuffer *b, ChordMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>ad2672a23d18669106b5ed198c2237ce4</anchor>
      <arglist>(cCommBuffer *b, ChordMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a8aa0cb8e32ce6e7e966e0bec0106eeeb</anchor>
      <arglist>(cCommBuffer *b, NewSuccessorHintMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a5bbec63326c82bd441cd3765f759c376</anchor>
      <arglist>(cCommBuffer *b, NewSuccessorHintMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a397cba2e5419b62186fb37974c3ecc3f</anchor>
      <arglist>(cCommBuffer *b, NotifyCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a8f4fbc394af3178c1f8698aff1fc27ae</anchor>
      <arglist>(cCommBuffer *b, NotifyCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a91fd59a47205e50f453719bb109f5964</anchor>
      <arglist>(cCommBuffer *b, NotifyResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>aa010321f51f67aaba69217547beb1a35</anchor>
      <arglist>(cCommBuffer *b, NotifyResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>adbddd3dc5bdef6bac81baf6c187b80a4</anchor>
      <arglist>(cCommBuffer *b, JoinCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a72eed17d94851850a26b484c20736197</anchor>
      <arglist>(cCommBuffer *b, JoinCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a875549ad2fc7dafdedccb73f10be92d6</anchor>
      <arglist>(cCommBuffer *b, JoinResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>aed977032701d66e07306ee2c6b389b2e</anchor>
      <arglist>(cCommBuffer *b, JoinResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a556bfad84aee9f2d9d50351797b78629</anchor>
      <arglist>(cCommBuffer *b, StabilizeCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a63bb3736c7b2a8f816ca6ced147dbf05</anchor>
      <arglist>(cCommBuffer *b, StabilizeCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a694866215499ebfbb3265f058217d3bb</anchor>
      <arglist>(cCommBuffer *b, StabilizeResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a98ac1ea13f0550615826e9ebe61892ac</anchor>
      <arglist>(cCommBuffer *b, StabilizeResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>ae674b7f6d6bf1195be289d2b902f7c95</anchor>
      <arglist>(cCommBuffer *b, FixfingersCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a0c1aa90a79225cc0c350d5ef6a4e38bd</anchor>
      <arglist>(cCommBuffer *b, FixfingersCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a807e4f2e74d92b5e22b7839b0d335d09</anchor>
      <arglist>(cCommBuffer *b, FixfingersResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a718d7b0c868b27d0cd3a2ddda54c68fe</anchor>
      <arglist>(cCommBuffer *b, FixfingersResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>ab348e5a369d94bbc455793fb8c214d34</anchor>
      <arglist>(cCommBuffer *b, KoordeFindNodeExtMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a83dd485581dfcb1976662dd2c47d6123</anchor>
      <arglist>(cCommBuffer *b, KoordeFindNodeExtMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a0f4e33800c38f2b8a3d2af6dcda99ca4</anchor>
      <arglist>(cCommBuffer *b, DeBruijnCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a72c8e3630bc883e0032a9199077f523a</anchor>
      <arglist>(cCommBuffer *b, DeBruijnCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a2e3e50bbc465d21304fdbe2b696f66ca</anchor>
      <arglist>(cCommBuffer *b, DeBruijnResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a1fa0fa971e49022d368337c4f4246dd8</anchor>
      <arglist>(cCommBuffer *b, DeBruijnResponse &amp;obj)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>CHORDCOMMAND_L</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a36e5aa7c8d8f5559fff1dc88820e1bbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>SUCNUM_L</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>a9969c24f525c6e266d853f414ef6b71f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>FINGER_L</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>ab1c0b3406ca614599c576c7c3ce42da7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>STEP_L</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>af2a26d0b6f7c43ad0ef3dadcacd02c91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>PRENODESET_L</name>
      <anchorfile>ChordMessage__m_8h.html</anchorfile>
      <anchor>ae777b3df630d85119117e9498c93a04b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ChordSuccessorList.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/chord/</path>
    <filename>ChordSuccessorList_8cc</filename>
    <includes id="ChordSuccessorList_8h" name="ChordSuccessorList.h" local="yes" imported="no">ChordSuccessorList.h</includes>
    <includes id="Chord_8h" name="Chord.h" local="yes" imported="no">Chord.h</includes>
    <namespace>oversim</namespace>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>a62504e2a4fbc558f8dcb5c85ff2c06e0</anchor>
      <arglist>(ChordSuccessorList)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>aadea7e56aca0c555180e0673e23c5e60</anchor>
      <arglist>(std::ostream &amp;os, const SuccessorListEntry &amp;e)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ChordSuccessorList.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/chord/</path>
    <filename>ChordSuccessorList_8h</filename>
    <includes id="InitStages_8h" name="InitStages.h" local="no" imported="no">InitStages.h</includes>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <class kind="struct">oversim::SuccessorListEntry</class>
    <class kind="class">oversim::ChordSuccessorList</class>
    <namespace>oversim</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>aadea7e56aca0c555180e0673e23c5e60</anchor>
      <arglist>(std::ostream &amp;os, const SuccessorListEntry &amp;e)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Churn_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>Churn__m_8h</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <class kind="class">ChurnMessage</class>
    <class kind="class">ParetoChurnMessage</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>Churn__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>Churn__m_8h.html</anchorfile>
      <anchor>a7c2ec3266729ca48ebb9c9285291f61b</anchor>
      <arglist>(cCommBuffer *b, ChurnMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>Churn__m_8h.html</anchorfile>
      <anchor>ac58eb0cde580e975ded0ba1a8984f6ee</anchor>
      <arglist>(cCommBuffer *b, ChurnMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>Churn__m_8h.html</anchorfile>
      <anchor>ac4f8dd0acf71c7c8bc3d99416c02a8d3</anchor>
      <arglist>(cCommBuffer *b, ParetoChurnMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>Churn__m_8h.html</anchorfile>
      <anchor>add024c093362fb5cc62fa8c1aa61ffe4</anchor>
      <arglist>(cCommBuffer *b, ParetoChurnMessage &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ChurnGenerator.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>ChurnGenerator_8cc</filename>
    <includes id="ChurnGenerator_8h" name="ChurnGenerator.h" local="yes" imported="no">ChurnGenerator.h</includes>
    <includes id="UnderlayConfiguratorAccess_8h" name="UnderlayConfiguratorAccess.h" local="no" imported="no">UnderlayConfiguratorAccess.h</includes>
  </compound>
  <compound kind="file">
    <name>ChurnGenerator.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>ChurnGenerator_8h</filename>
    <includes id="InitStages_8h" name="InitStages.h" local="no" imported="no">InitStages.h</includes>
    <class kind="class">NodeType</class>
    <class kind="class">ChurnGenerator</class>
    <member kind="define">
      <type>#define</type>
      <name>MAX_NODETYPES</name>
      <anchorfile>ChurnGenerator_8h.html</anchorfile>
      <anchor>a33ea43f0a9197f153e9aa813166df708</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ChurnGeneratorAccess.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>ChurnGeneratorAccess_8h</filename>
    <includes id="ChurnGenerator_8h" name="ChurnGenerator.h" local="yes" imported="no">ChurnGenerator.h</includes>
    <class kind="class">ChurnGeneratorAccess</class>
  </compound>
  <compound kind="file">
    <name>cnetcommbuffer.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>cnetcommbuffer_8cc</filename>
    <includes id="cnetcommbuffer_8h" name="cnetcommbuffer.h" local="yes" imported="no">cnetcommbuffer.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>STOREARRAY</name>
      <anchorfile>cnetcommbuffer_8cc.html</anchorfile>
      <anchor>acc14cb7d3756cb8dfd7bccdacb893e13</anchor>
      <arglist>(type, d, size)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EXTRACTARRAY</name>
      <anchorfile>cnetcommbuffer_8cc.html</anchorfile>
      <anchor>abb575b24d09925cf265d2b2f10d4e903</anchor>
      <arglist>(type, d, size)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STORE</name>
      <anchorfile>cnetcommbuffer_8cc.html</anchorfile>
      <anchor>abecce9a1bd3f3e898fa47d722993eb8a</anchor>
      <arglist>(type, d)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EXTRACT</name>
      <anchorfile>cnetcommbuffer_8cc.html</anchorfile>
      <anchor>aff5caaed320a915581e5156f49a98c62</anchor>
      <arglist>(type, d)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cnetcommbuffer.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>cnetcommbuffer_8h</filename>
    <class kind="class">cNetCommBuffer</class>
  </compound>
  <compound kind="file">
    <name>combination.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/nice/</path>
    <filename>combination_8h</filename>
    <namespace>oversim</namespace>
    <member kind="function">
      <type>bool</type>
      <name>next_combination</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>a9fccec5847240be8424dcc8703a6d49b</anchor>
      <arglist>(BidIt n_begin, BidIt n_end, BidIt r_begin, BidIt r_end)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next_combination</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>ae61d0163684ba38f35b349be0674df56</anchor>
      <arglist>(BidIt n_begin, BidIt n_end, BidIt r_begin, BidIt r_end, Prediate Equal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>prev_combination</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>ae0d824f07e414fe86aa7a17ec9a4ec2f</anchor>
      <arglist>(BidIt n_begin, BidIt n_end, BidIt r_begin, BidIt r_end)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>prev_combination</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>a3c2f8f57e1c902a69dbd57e6b677862e</anchor>
      <arglist>(BidIt n_begin, BidIt n_end, BidIt r_begin, BidIt r_end, Prediate Equal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recursive_combination</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>a8a3b17923f0b8c3c3d7fdac90cb1464b</anchor>
      <arglist>(RanIt nbegin, RanIt nend, int n_column, RanIt rbegin, RanIt rend, int r_column, int loop, Func func)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CommonMessages_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>CommonMessages__m_8h</filename>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="TransportAddress_8h" name="TransportAddress.h" local="no" imported="no">TransportAddress.h</includes>
    <includes id="BinaryValue_8h" name="BinaryValue.h" local="no" imported="no">BinaryValue.h</includes>
    <includes id="Vector2D_8h" name="Vector2D.h" local="no" imported="no">Vector2D.h</includes>
    <includes id="OverSimMessage_8h" name="OverSimMessage.h" local="no" imported="no">OverSimMessage.h</includes>
    <class kind="class">AuthBlock</class>
    <class kind="class">BaseOverlayMessage</class>
    <class kind="class">BaseRouteMessage</class>
    <class kind="class">BaseAppDataMessage</class>
    <class kind="class">BaseRpcMessage</class>
    <class kind="class">BaseCallMessage</class>
    <class kind="class">BaseResponseMessage</class>
    <class kind="class">RpcTimeoutMessage</class>
    <class kind="class">FindNodeCall</class>
    <class kind="class">FindNodeResponse</class>
    <class kind="class">FailedNodeCall</class>
    <class kind="class">FailedNodeResponse</class>
    <class kind="class">PingCall</class>
    <class kind="class">PingResponse</class>
    <class kind="class">CompReadyMessage</class>
    <class kind="class">BootstrapLookupMessage</class>
    <class kind="class">NextHopCall</class>
    <class kind="class">NextHopResponse</class>
    <class kind="class">SingleHostUnderlayPacketNotification</class>
    <class kind="class">TcpDataMessage</class>
    <class kind="class">CommonAPIMessage</class>
    <class kind="class">KBRroute</class>
    <class kind="class">KBRforward</class>
    <class kind="class">KBRdeliver</class>
    <class kind="class">KBRupdate</class>
    <class kind="class">DhtDumpEntry</class>
    <class kind="class">DHTputCAPICall</class>
    <class kind="class">DHTgetCAPICall</class>
    <class kind="class">DHTputCAPIResponse</class>
    <class kind="class">DHTgetCAPIResponse</class>
    <class kind="class">DHTdumpCall</class>
    <class kind="class">DHTdumpResponse</class>
    <class kind="class">LookupCall</class>
    <class kind="class">LookupResponse</class>
    <class kind="class">P2pnsRegisterCall</class>
    <class kind="class">P2pnsRegisterResponse</class>
    <class kind="class">P2pnsResolveCall</class>
    <class kind="class">P2pnsResolveResponse</class>
    <class kind="class">OverlayCtrlInfo</class>
    <class kind="class">BinaryValueArray</class>
    <class kind="class">ALMMessage</class>
    <class kind="class">ALMCreateMessage</class>
    <class kind="class">ALMDeleteMessage</class>
    <class kind="class">ALMSubscribeMessage</class>
    <class kind="class">ALMLeaveMessage</class>
    <class kind="class">ALMMulticastMessage</class>
    <class kind="class">ALMAnycastMessage</class>
    <class kind="class">GameAPIMessage</class>
    <class kind="class">GameAPIListMessage</class>
    <class kind="class">GameAPIPositionMessage</class>
    <class kind="class">GameAPIResizeAOIMessage</class>
    <class kind="class">GameAPIChatMessage</class>
    <class kind="class">GameAPISnowMessage</class>
    <class kind="class">GameAPIFrozenMessage</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a600bb1ce7eb7b6ca4dcbb41546c32ec5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NODEHANDLE_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a4023e8ae97644f91856b5b2c79a751ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TRANSPORTADDRESS_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a03f3385cd9cf6d79400c7b9e3dfe7299</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AUTHBLOCK_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a06bed1f18c78d612efe98781ddd5f56f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BASEOVERLAY_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a017124fff12165edb25c49e820161e20</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BASEROUTE_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>aa51e9b4f9362c33b9a432fd496bc31d0</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BASEAPPDATA_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>aebae47ba62d6bd9fe00ca6d779bf0e81</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BASERPC_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a5f3f504dc8074381082ed4dfe9714f79</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BASECALL_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a7fec5905d4a2719c43d83febaa6a1333</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BASERESPONSE_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ab6f3ca46959b913da03899a4c7114338</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FINDNODECALL_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>aac2b8db2e1b70d585c2262cb346130e4</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FINDNODERESPONSE_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>adf1e0e3719d7a62675c9c873cee6155e</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FAILEDNODECALL_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a2f5fa84bc72cc769fe63a311220673cc</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FAILEDNODERESPONSE_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ae470e5deb63f7debd17b8666514dae46</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PINGCALL_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ab7ee4e96118fb051913602b515b24297</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PINGRESPONSE_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ae3c44f7f2bca0070e7fa3077731de647</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BOOTSTRAPPINGCALL_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ab17cbce7be3fd4a2ce66105030e2f9fb</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BOOTSTRAPPINGRESPONSE_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ad6d6dbb839d760685e2c8b5cd5ba1d46</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NEXTHOPCALL_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ad34959682756fd7714484c7326ae823b</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NEXTHOPRESPONSE_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>adc9bda6bf3f1e194f083e32df15f237d</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="enumeration">
      <name>BaseOverlayMessageType</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a6af1a552a7a6bce33c291758c369b17e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OVERLAYSIGNALING</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a6af1a552a7a6bce33c291758c369b17ea7c7b80e64b0ee54f9c64b4547d82e7fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RPC</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a6af1a552a7a6bce33c291758c369b17ea7f7e32ed10aea1dd73b80e96c70e8abf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APPDATA</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a6af1a552a7a6bce33c291758c369b17eab0641a3f5bcb1e08ee72afe9583ff5e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OVERLAYROUTE</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a6af1a552a7a6bce33c291758c369b17ea9fb39f8e1c5f2ff00e45bb7294e5524f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>CompType</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>aad57ef0110fe8675eb299d467148bc5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_COMP</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>aad57ef0110fe8675eb299d467148bc5eaf3e64c2733321fd2c525766733a4b7c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OVERLAY_COMP</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>aad57ef0110fe8675eb299d467148bc5ead1b904580b02f8adaa1ab2de239c4c79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIER1_COMP</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>aad57ef0110fe8675eb299d467148bc5ea098b73cd039f61df8b83f056c12b4d3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIER2_COMP</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>aad57ef0110fe8675eb299d467148bc5eaf097637305d4fe4ee3b62d2f76f6dc16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIER3_COMP</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>aad57ef0110fe8675eb299d467148bc5ea802527fa5e49f1389e1bb1c84f0191be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOOTSTRAPLIST_COMP</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>aad57ef0110fe8675eb299d467148bc5ea6b7871eeda317b7934cc8fb0b84899c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEIGHBORCACHE_COMP</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>aad57ef0110fe8675eb299d467148bc5ead65752bbf62b380b2d957b69477f5742</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>RoutingType</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a5bbe67ba1134d38bbb89c7c242ba6551</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_OVERLAY_ROUTING</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a5bbe67ba1134d38bbb89c7c242ba6551aec961f27dcdb3050f97033fbd88b89b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEFAULT_ROUTING</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a5bbe67ba1134d38bbb89c7c242ba6551a931137cd67090e50ef2ea3ccfb9e8d90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ITERATIVE_ROUTING</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a5bbe67ba1134d38bbb89c7c242ba6551ae4bd936cbb47803986c83242cbb51867</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXHAUSTIVE_ITERATIVE_ROUTING</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a5bbe67ba1134d38bbb89c7c242ba6551ad60cf756d6bb24af372d7fe7c279f44d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEMI_RECURSIVE_ROUTING</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a5bbe67ba1134d38bbb89c7c242ba6551a18b63fe85aa5e81cd3fca5e3c7c9df82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FULL_RECURSIVE_ROUTING</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a5bbe67ba1134d38bbb89c7c242ba6551aeec4ce5cac6dae9d3d59b1347a9df957</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RECURSIVE_SOURCE_ROUTING</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a5bbe67ba1134d38bbb89c7c242ba6551ad8c4eefed3d826e5da402fe582cad2c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROX_AWARE_ITERATIVE_ROUTING</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a5bbe67ba1134d38bbb89c7c242ba6551add318c83c9a8b174c360274f24726be8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TransportType</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>aca1e72535e7f260e54ed8bbf984dade9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_TRANSPORT</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>aca1e72535e7f260e54ed8bbf984dade9a63a9afad251f3398062f584d1b23ecb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTERNAL_TRANSPORT</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>aca1e72535e7f260e54ed8bbf984dade9a94f99d3e9b3318d2fc69d80e3c33008b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDP_TRANSPORT</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>aca1e72535e7f260e54ed8bbf984dade9a01580b2e886cd821bd7f3f2bcd7c690c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ROUTE_TRANSPORT</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>aca1e72535e7f260e54ed8bbf984dade9a03dcc78e081682d383ff0baec54dcf8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>CommonAPIMessageType</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a61951439f8b8b0a1c54516d2e4c72297</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COMMON_API_UNDEFINED</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a61951439f8b8b0a1c54516d2e4c72297a3a089ecfa52ae22102e684953c5dc393</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KBR_ROUTE</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a61951439f8b8b0a1c54516d2e4c72297a23a4b5abce0f1361f2bff8086906384e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KBR_DELIVER</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a61951439f8b8b0a1c54516d2e4c72297a9379c2a8f1bf319d3839652a3f3270ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KBR_FORWARD</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a61951439f8b8b0a1c54516d2e4c72297a0afbe139422edee97cf4f5998edbfc9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KBR_FORWARD_RESPONSE</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a61951439f8b8b0a1c54516d2e4c72297a52cf562ba395873c58a7378d5f60c8e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KBR_UPDATE</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a61951439f8b8b0a1c54516d2e4c72297ac502d048ee6f6b1287c7b7843d2706b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>StatType</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a25418fa818fbb01cd8c0b2c4b0732cdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAINTENANCE_STAT</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a25418fa818fbb01cd8c0b2c4b0732cdfad7989a419a7028d382d7b6e6d17e88c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APP_DATA_STAT</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a25418fa818fbb01cd8c0b2c4b0732cdfad8d082af8526e80f7de088c52ad1b7c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APP_LOOKUP_STAT</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a25418fa818fbb01cd8c0b2c4b0732cdfab0d83e0332137027a936320d7c9bdb86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>GameAPIMessageCommand</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ac76e82bc37e4b2b364247c7cff8f7b6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MOVEMENT_INDICATION</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ac76e82bc37e4b2b364247c7cff8f7b6ba7a7dbf862295be01b326c1d51e73d875</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MOVEMENT_REQUEST</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ac76e82bc37e4b2b364247c7cff8f7b6baebd21087dd4fccf5bea6d56c351f76d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEIGHBOR_UPDATE</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ac76e82bc37e4b2b364247c7cff8f7b6ba360dbdf5c7f61a4d26263e2a010057d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESIZE_AOI</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ac76e82bc37e4b2b364247c7cff8f7b6ba04223e5523bbf330b2553e5ba3e320d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GAMEEVENT_CHAT</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ac76e82bc37e4b2b364247c7cff8f7b6ba2d637d8d63fd5cc1921d781389e7482c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GAMEEVENT_SNOW</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ac76e82bc37e4b2b364247c7cff8f7b6ba94d7bea1985e12fde4c9b7ba389a59c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GAMEEVENT_FROZEN</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ac76e82bc37e4b2b364247c7cff8f7b6ba42bc017550219c838438200a3155c506</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a5fc772bbbe5af9d758e1b18daa68b0d9</anchor>
      <arglist>(cCommBuffer *b, AuthBlock &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a0d600aeba40c11ec03ff805cf671d771</anchor>
      <arglist>(cCommBuffer *b, AuthBlock &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ad4b6a14d32f4d2045853304fe6ad1d22</anchor>
      <arglist>(cCommBuffer *b, BaseOverlayMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a410e73aa1c239668919a75c403ab3a27</anchor>
      <arglist>(cCommBuffer *b, BaseOverlayMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a2067204ea6da283ee05c30e24b3ad3af</anchor>
      <arglist>(cCommBuffer *b, BaseRouteMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a8e78c6f3ebee7ec7cb5c03ba78e96a63</anchor>
      <arglist>(cCommBuffer *b, BaseRouteMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>aa01e2cf0b89d05f92530a172535b9cff</anchor>
      <arglist>(cCommBuffer *b, BaseAppDataMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>af07f472694428f4ae4d66cdceededb68</anchor>
      <arglist>(cCommBuffer *b, BaseAppDataMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a9898c5ea71f56c6fc92a3284e09f73be</anchor>
      <arglist>(cCommBuffer *b, BaseRpcMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a54c34113f05a19db293844053cec27e2</anchor>
      <arglist>(cCommBuffer *b, BaseRpcMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a4bbf6b69fc6b3122de45d642f135dd71</anchor>
      <arglist>(cCommBuffer *b, BaseCallMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a2870e1291b8303089e4efdfa8f0253e7</anchor>
      <arglist>(cCommBuffer *b, BaseCallMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>af3e94adbde0429a37d608954e3e10988</anchor>
      <arglist>(cCommBuffer *b, BaseResponseMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a5898bb079369dce0143055583eebb9d2</anchor>
      <arglist>(cCommBuffer *b, BaseResponseMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a53e8dd71a26bb54df63196cc0ee891e2</anchor>
      <arglist>(cCommBuffer *b, RpcTimeoutMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ad131e32ffe98398975b8026af322357d</anchor>
      <arglist>(cCommBuffer *b, RpcTimeoutMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a02faf37466ec93119d8ad035f5332e57</anchor>
      <arglist>(cCommBuffer *b, FindNodeCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>aaaf83a9e3957f56278e66fe31816b148</anchor>
      <arglist>(cCommBuffer *b, FindNodeCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a0f5aa99e14593c7bb6517e1d7778f621</anchor>
      <arglist>(cCommBuffer *b, FindNodeResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>aa3255473d6836aeb5bd9abaae519ad4c</anchor>
      <arglist>(cCommBuffer *b, FindNodeResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a749d87835b23fd5f0377b91b63136c26</anchor>
      <arglist>(cCommBuffer *b, FailedNodeCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a16fcc74d0b46c5cf275504ad5226c0d3</anchor>
      <arglist>(cCommBuffer *b, FailedNodeCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ac2ab89fa2b4208a42724d3811107deef</anchor>
      <arglist>(cCommBuffer *b, FailedNodeResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>acc701a190cc0fe6f79184a85d4c3d29f</anchor>
      <arglist>(cCommBuffer *b, FailedNodeResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ad73768e80a4852e06c26507b2bbbcb1c</anchor>
      <arglist>(cCommBuffer *b, PingCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a508e2fa3eb2b21c5b5dc8ddb423e2572</anchor>
      <arglist>(cCommBuffer *b, PingCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a7223be173b8347df73e5480b01513bd0</anchor>
      <arglist>(cCommBuffer *b, PingResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a1ecc9a237f641e9f73760bfd681bf16a</anchor>
      <arglist>(cCommBuffer *b, PingResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a1ed27b1479f3192b67dd8adb2454343d</anchor>
      <arglist>(cCommBuffer *b, CompReadyMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a805dc9bb48709ad83f0557baa3e95ab3</anchor>
      <arglist>(cCommBuffer *b, CompReadyMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a249d91cb895228b6c8fb073e7d5a6867</anchor>
      <arglist>(cCommBuffer *b, BootstrapLookupMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a0264a3c85b75e363ea7d2c65e5922837</anchor>
      <arglist>(cCommBuffer *b, BootstrapLookupMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a824e3d0a989a57b1c8368a40270cf1d4</anchor>
      <arglist>(cCommBuffer *b, NextHopCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a8d30e13ec9a63d89b3861cb7f7508a38</anchor>
      <arglist>(cCommBuffer *b, NextHopCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a69fcc78f21d3a4b8c49d6f31c962561d</anchor>
      <arglist>(cCommBuffer *b, NextHopResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a5518f90fc2c87c90cfda387f002cdae7</anchor>
      <arglist>(cCommBuffer *b, NextHopResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a32e0738e865210e5a7ac332332abe4b4</anchor>
      <arglist>(cCommBuffer *b, SingleHostUnderlayPacketNotification &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a891e86dff85a4993a3340941470841b5</anchor>
      <arglist>(cCommBuffer *b, SingleHostUnderlayPacketNotification &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>af40715d2c1077e90c962ed5e33f7b7a9</anchor>
      <arglist>(cCommBuffer *b, TcpDataMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ac5a83e00f4ee728446904c9a3299496b</anchor>
      <arglist>(cCommBuffer *b, TcpDataMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ab4af3831bb3d49d2b521ed9d2e065770</anchor>
      <arglist>(cCommBuffer *b, CommonAPIMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ad20768f48d97b74b75ef2e0e4a9e3af4</anchor>
      <arglist>(cCommBuffer *b, CommonAPIMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a4e2cfad938badc01a984de9ef8cd2102</anchor>
      <arglist>(cCommBuffer *b, KBRroute &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ad3816802b60bc38dfe041f3024954c3f</anchor>
      <arglist>(cCommBuffer *b, KBRroute &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a39209a335a6ff10044132214053a2063</anchor>
      <arglist>(cCommBuffer *b, KBRforward &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ac871137a98ba4300a7d989a903daa50d</anchor>
      <arglist>(cCommBuffer *b, KBRforward &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a5a02a1de0bb21cc63ac1abf856491261</anchor>
      <arglist>(cCommBuffer *b, KBRdeliver &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a06a07424437df9186779054568e96d4e</anchor>
      <arglist>(cCommBuffer *b, KBRdeliver &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a07b250d1dff9490a04c7f2bad9c4e09b</anchor>
      <arglist>(cCommBuffer *b, KBRupdate &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a570806523749d9a4b39e26734de924ca</anchor>
      <arglist>(cCommBuffer *b, KBRupdate &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ac1ab535b2ed00fc32ce2c51637a51898</anchor>
      <arglist>(cCommBuffer *b, DhtDumpEntry &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ad1b66532b3c45dbe809ca41a1b38ef38</anchor>
      <arglist>(cCommBuffer *b, DhtDumpEntry &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a0b8bd4b13f89c494cc311f7ba0f4b739</anchor>
      <arglist>(cCommBuffer *b, DHTputCAPICall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>adae5eedf811aad4f2a02f38e1479e673</anchor>
      <arglist>(cCommBuffer *b, DHTputCAPICall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>aa5e7fee9ea959672c7f05df7c5d7eefd</anchor>
      <arglist>(cCommBuffer *b, DHTgetCAPICall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>aba8bd33d35bbddb0e96cc9cad23d5e67</anchor>
      <arglist>(cCommBuffer *b, DHTgetCAPICall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ae3bf8e4349f1f2fe1b1b759c0533c061</anchor>
      <arglist>(cCommBuffer *b, DHTputCAPIResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>abee65a92972dea4c3fe8d6df5006bce4</anchor>
      <arglist>(cCommBuffer *b, DHTputCAPIResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a0729e280a6af5ad8acebc121734e5454</anchor>
      <arglist>(cCommBuffer *b, DHTgetCAPIResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a7dfe962a57710fc761f355766ab298e3</anchor>
      <arglist>(cCommBuffer *b, DHTgetCAPIResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a26cc1481ba7870e5732eacbecce2feb1</anchor>
      <arglist>(cCommBuffer *b, DHTdumpCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a7cce8c5da74a2990139342fbf4064163</anchor>
      <arglist>(cCommBuffer *b, DHTdumpCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a41ecee793903ff5b9bb0fd202a0a4500</anchor>
      <arglist>(cCommBuffer *b, DHTdumpResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>adcd5caea8ad50533af3dcedf583d213d</anchor>
      <arglist>(cCommBuffer *b, DHTdumpResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ab29428baa677d5d346851e28e97ae5e6</anchor>
      <arglist>(cCommBuffer *b, LookupCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a3f5b3105ff24df6716627a45e1d77763</anchor>
      <arglist>(cCommBuffer *b, LookupCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a9070c9d9430fa5e2e44d112420aa8441</anchor>
      <arglist>(cCommBuffer *b, LookupResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ae9a9c752a10422da8feb3cd3dec80e3f</anchor>
      <arglist>(cCommBuffer *b, LookupResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a8f4d10744974bdc2e2d442ea37c82606</anchor>
      <arglist>(cCommBuffer *b, P2pnsRegisterCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a73aa86b7a797cea591da1d28efbdc300</anchor>
      <arglist>(cCommBuffer *b, P2pnsRegisterCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>af4ecbef4f6e572b0b26ed0aa2e366720</anchor>
      <arglist>(cCommBuffer *b, P2pnsRegisterResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a33ba3180e97d41cfe988797a37249cc3</anchor>
      <arglist>(cCommBuffer *b, P2pnsRegisterResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>abf7c781f789cbf9ad734cb6fdde1289c</anchor>
      <arglist>(cCommBuffer *b, P2pnsResolveCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a8a83c9232f49f53eaa377467b01de4f7</anchor>
      <arglist>(cCommBuffer *b, P2pnsResolveCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>adeba95826afb3fa8bb596def5cc3b8f9</anchor>
      <arglist>(cCommBuffer *b, P2pnsResolveResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>af12f63646e3f13543a206bb33f2e2bc3</anchor>
      <arglist>(cCommBuffer *b, P2pnsResolveResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a028cc876bfb35bb46047f7e8ff715af7</anchor>
      <arglist>(cCommBuffer *b, OverlayCtrlInfo &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a88b32e9caa86cd1403fc08d345564c98</anchor>
      <arglist>(cCommBuffer *b, OverlayCtrlInfo &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a95c5da2bd9ed0255710f4f799c2829ca</anchor>
      <arglist>(cCommBuffer *b, BinaryValueArray &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ac69c0dff01ba9c0f24e4298c3e898427</anchor>
      <arglist>(cCommBuffer *b, BinaryValueArray &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ac2742485f981b2606346d07f77dead9d</anchor>
      <arglist>(cCommBuffer *b, ALMMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ab57a42ebf6a1982baa5f8334921dde36</anchor>
      <arglist>(cCommBuffer *b, ALMMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a04242101b0521a56cfe22b7726a25605</anchor>
      <arglist>(cCommBuffer *b, ALMCreateMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>aa932792716143150c14746047dab03c0</anchor>
      <arglist>(cCommBuffer *b, ALMCreateMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a2e3dea90069daca7f0181e421e4056c6</anchor>
      <arglist>(cCommBuffer *b, ALMDeleteMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ac8b263399be043ab2bcc197fe4775c5a</anchor>
      <arglist>(cCommBuffer *b, ALMDeleteMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>abecd0af042b3930b0a98d93c19f875dc</anchor>
      <arglist>(cCommBuffer *b, ALMSubscribeMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a310401374e782fc5a9d18e9e9ba2f71c</anchor>
      <arglist>(cCommBuffer *b, ALMSubscribeMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ab61d2ba7794a0888297b6901ba818e78</anchor>
      <arglist>(cCommBuffer *b, ALMLeaveMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a7dce40dece5eeec2edea845c43aa3238</anchor>
      <arglist>(cCommBuffer *b, ALMLeaveMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ac0280592814936e2d6668a58cd3e12d3</anchor>
      <arglist>(cCommBuffer *b, ALMMulticastMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a98bbba47655dc38c6a686ca9c9e61fb8</anchor>
      <arglist>(cCommBuffer *b, ALMMulticastMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>abbf57171f94ab20da712758235081231</anchor>
      <arglist>(cCommBuffer *b, ALMAnycastMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>aec5c53e9fd57382cb7fa3966a83a7f95</anchor>
      <arglist>(cCommBuffer *b, ALMAnycastMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>aea2db3a0d2f3f670fd5a66b04b6bee92</anchor>
      <arglist>(cCommBuffer *b, GameAPIMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a6114c85a51e6f97aec663c2011d1a17c</anchor>
      <arglist>(cCommBuffer *b, GameAPIMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a0bede82cec00e0a8203d63cb9a6c6ed2</anchor>
      <arglist>(cCommBuffer *b, GameAPIListMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a8ed5212ad69de8c3e6bf1c7feafe7955</anchor>
      <arglist>(cCommBuffer *b, GameAPIListMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a701e3482b6b04dc9bc2e022da5927e5e</anchor>
      <arglist>(cCommBuffer *b, GameAPIPositionMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ad2f3849efd04aedf573d45d6cde2257c</anchor>
      <arglist>(cCommBuffer *b, GameAPIPositionMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a984553bbb28baa9f5ff18f784aacaabe</anchor>
      <arglist>(cCommBuffer *b, GameAPIResizeAOIMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a37c617fafa3f2af4856e984d76b14980</anchor>
      <arglist>(cCommBuffer *b, GameAPIResizeAOIMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a749efff0844d98de320d784f56ce7232</anchor>
      <arglist>(cCommBuffer *b, GameAPIChatMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>aef3dbe424b641d7cf34c3a7d3f8f9393</anchor>
      <arglist>(cCommBuffer *b, GameAPIChatMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ade9cf8b7e8ce21614e24adf404df0ca7</anchor>
      <arglist>(cCommBuffer *b, GameAPISnowMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a7594a228f09aa2fb678c4182b5da361c</anchor>
      <arglist>(cCommBuffer *b, GameAPISnowMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a02d8c85bd732f213e17c4757070a436a</anchor>
      <arglist>(cCommBuffer *b, GameAPIFrozenMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>aca2badcbe36d23cdc9ba3f0e814c5aee</anchor>
      <arglist>(cCommBuffer *b, GameAPIFrozenMessage &amp;obj)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>TYPE_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a0ef53c762f3b3018e87032a9332c85a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>IPADDR_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a41f4c5a6a1823befa459ba084f0ea52e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>UDPPORT_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a336b54c4b47f32e61db83aadc30d762c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>HOPCOUNT_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a099e4b519e011daf2bf545304381e211</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>NONCE_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ac19edafa8c3a6751f1619bae67c9bf32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>COMP_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a8d2c11e50f9c5656608dd73542f2b925</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>NUMSIBLINGS_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a3a4a877d244cfe3b61057be7d8a95126</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>NUMREDNODES_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>af0b9401e7baf5bbdd4c4a929f8bbb3d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>EXHAUSTIVEFLAG_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a69a6fbf6c16f7d66d168b8a47df5b33d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>NEIGHBORSFLAG_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a9177957bee588cbdc00093b6391c1f11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>RESPONSEFLAG_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ad11c883d6e77f85fc6a02f65310d2e8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>TRYAGAINFLAG_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a6c3fbcb71662d9fec3335df0bb37b094</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>TIER_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>acf5a90407d7062f411e8579193bf8906</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>ARRAYSIZE_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a521937379e3a69c6a4af5886e3d9455c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>ROUTINGTYPE_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ad0bdac38d62ebcda4ee9f17e876ace90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>SIGNATURE_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>af71bfa7230cc2c72f9e2591f18145c56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>CERT_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>aa48d39a206d861e5a80e7c8b66525ea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>PUBKEY_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>a03f8cdcc916e256010529ab0aa724eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>NCSINFO_L</name>
      <anchorfile>CommonMessages__m_8h.html</anchorfile>
      <anchor>ac39b757a258d1b06a82ba129c1170239</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Comparator.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>Comparator_8h</filename>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="ProxNodeHandle_8h" name="ProxNodeHandle.h" local="no" imported="no">ProxNodeHandle.h</includes>
    <class kind="class">Comparator</class>
    <class kind="class">KeyStdMetric</class>
    <class kind="class">KeyXorMetric</class>
    <class kind="class">KeyRingMetric</class>
    <class kind="class">KeyCwRingMetric</class>
    <class kind="class">KeyCcwRingMetric</class>
    <class kind="class">KeyPrefixMetric</class>
    <class kind="class">KeyDistanceComparator</class>
    <class kind="class">KeyDistanceComparator&lt; KeyPrefixMetric &gt;</class>
    <class kind="class">AbstractProxComparator</class>
    <class kind="class">StdProxComparator</class>
    <class kind="class">AbstractProxKeyComparator</class>
    <class kind="class">ProxKeyComparator</class>
    <class kind="class">ProxKeyComparator&lt; KeyPrefixMetric &gt;</class>
    <class kind="class">KademliaPRComparator</class>
    <class kind="class">AccordionPRComparator</class>
    <member kind="typedef">
      <type>Comparator&lt; OverlayKey &gt;</type>
      <name>KeyComparator</name>
      <anchorfile>Comparator_8h.html</anchorfile>
      <anchor>aac9623315ce869d71c2e56da84c6f74a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConnectivityProbe.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/vast/</path>
    <filename>ConnectivityProbe_8cc</filename>
    <includes id="ConnectivityProbe_8h" name="ConnectivityProbe.h" local="yes" imported="no">ConnectivityProbe.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>ConnectivityProbe_8cc.html</anchorfile>
      <anchor>a9011741488963457a16a955a9dccab74</anchor>
      <arglist>(ConnectivityProbe)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConnectivityProbe.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/vast/</path>
    <filename>ConnectivityProbe_8h</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="VastDefs_8h" name="VastDefs.h" local="no" imported="no">VastDefs.h</includes>
    <includes id="Vast_8h" name="Vast.h" local="no" imported="no">Vast.h</includes>
    <includes id="GlobalStatisticsAccess_8h" name="GlobalStatisticsAccess.h" local="yes" imported="no">GlobalStatisticsAccess.h</includes>
    <class kind="class">VTopologyNode</class>
    <class kind="class">ConnectivityProbe</class>
    <member kind="typedef">
      <type>std::map&lt; OverlayKey, VTopologyNode &gt;</type>
      <name>VTopology</name>
      <anchorfile>ConnectivityProbe_8h.html</anchorfile>
      <anchor>a9feb6ca60e2f61cdc794b6a224f0b297</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConnectivityProbeApp.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/simplegameclient/</path>
    <filename>ConnectivityProbeApp_8cc</filename>
    <includes id="ConnectivityProbeApp_8h" name="ConnectivityProbeApp.h" local="yes" imported="no">ConnectivityProbeApp.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>ConnectivityProbeApp_8cc.html</anchorfile>
      <anchor>ab98d9a26a679e1f3a73c39382bf90b16</anchor>
      <arglist>(ConnectivityProbeApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConnectivityProbeApp.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/simplegameclient/</path>
    <filename>ConnectivityProbeApp_8h</filename>
    <includes id="SimpleGameClient_8h" name="SimpleGameClient.h" local="no" imported="no">SimpleGameClient.h</includes>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="Vector2D_8h" name="Vector2D.h" local="no" imported="no">Vector2D.h</includes>
    <includes id="GlobalStatisticsAccess_8h" name="GlobalStatisticsAccess.h" local="yes" imported="no">GlobalStatisticsAccess.h</includes>
    <class kind="class">ConnectivityProbeApp</class>
  </compound>
  <compound kind="file">
    <name>ConnectivityProbeQuon.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/quon/</path>
    <filename>ConnectivityProbeQuon_8cc</filename>
    <includes id="ConnectivityProbeQuon_8h" name="ConnectivityProbeQuon.h" local="yes" imported="no">ConnectivityProbeQuon.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>ConnectivityProbeQuon_8cc.html</anchorfile>
      <anchor>a13c7dbb16aff11b5106cc7ce423b2881</anchor>
      <arglist>(ConnectivityProbeQuon)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConnectivityProbeQuon.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/quon/</path>
    <filename>ConnectivityProbeQuon_8h</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="QuonHelper_8h" name="QuonHelper.h" local="no" imported="no">QuonHelper.h</includes>
    <includes id="Quon_8h" name="Quon.h" local="no" imported="no">Quon.h</includes>
    <includes id="GlobalStatisticsAccess_8h" name="GlobalStatisticsAccess.h" local="yes" imported="no">GlobalStatisticsAccess.h</includes>
    <class kind="class">QuonTopologyNode</class>
    <class kind="class">ConnectivityProbeQuon</class>
    <member kind="typedef">
      <type>std::map&lt; OverlayKey, QuonTopologyNode &gt;</type>
      <name>QuonTopology</name>
      <anchorfile>ConnectivityProbeQuon_8h.html</anchorfile>
      <anchor>a205a1ff727e77c1422858dc5d32f7c34</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConnectReaSE.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/reaseunderlay/</path>
    <filename>ConnectReaSE_8cc</filename>
    <includes id="ConnectReaSE_8h" name="ConnectReaSE.h" local="yes" imported="no">ConnectReaSE.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>ConnectReaSE_8cc.html</anchorfile>
      <anchor>ae33bc74e58d3c109e64761d8bb5b6d60</anchor>
      <arglist>(ConnectReaSE)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>ConnectReaSE_8cc.html</anchorfile>
      <anchor>a1638188c632871d5a4a099c223e28daa</anchor>
      <arglist>(std::ostream &amp;os, terminalInfo &amp;n)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConnectReaSE.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/reaseunderlay/</path>
    <filename>ConnectReaSE_8h</filename>
    <includes id="InitStages_8h" name="InitStages.h" local="no" imported="no">InitStages.h</includes>
    <class kind="struct">edgeRoutes</class>
    <class kind="struct">autoSystem</class>
    <class kind="struct">topologyProperty</class>
    <class kind="struct">edgePool</class>
    <class kind="class">terminalInfo</class>
    <class kind="class">AccessInfo</class>
    <class kind="class">ConnectReaSE</class>
  </compound>
  <compound kind="file">
    <name>CoordBasedRouting.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/</path>
    <filename>CoordBasedRouting_8cc</filename>
    <includes id="GlobalNodeListAccess_8h" name="GlobalNodeListAccess.h" local="no" imported="no">GlobalNodeListAccess.h</includes>
    <includes id="PeerInfo_8h" name="PeerInfo.h" local="no" imported="no">PeerInfo.h</includes>
    <includes id="CoordBasedRouting_8h" name="CoordBasedRouting.h" local="yes" imported="no">CoordBasedRouting.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>CoordBasedRouting_8cc.html</anchorfile>
      <anchor>aabbb61dc0b49b6307c9e8e1959515e22</anchor>
      <arglist>(CoordBasedRouting)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>CoordBasedRouting_8cc.html</anchorfile>
      <anchor>ae04c4910c4e8173f9169fc8cc78b2a00</anchor>
      <arglist>(std::ostream &amp;os, const CBRArea &amp;area)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CoordBasedRouting.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/</path>
    <filename>CoordBasedRouting_8h</filename>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="TransportAddress_8h" name="TransportAddress.h" local="no" imported="no">TransportAddress.h</includes>
    <includes id="CoordinateSystem_8h" name="CoordinateSystem.h" local="no" imported="no">CoordinateSystem.h</includes>
    <class kind="class">CBRArea</class>
    <class kind="class">CoordBasedRouting</class>
    <class kind="class">leqDim</class>
    <member kind="typedef">
      <type>std::vector&lt; CBRArea &gt;</type>
      <name>AP</name>
      <anchorfile>CoordBasedRouting_8h.html</anchorfile>
      <anchor>ad91d7d67c95c2e1de279d6c2a96d241e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Coords &gt;</type>
      <name>CD</name>
      <anchorfile>CoordBasedRouting_8h.html</anchorfile>
      <anchor>a1a3d5390f3a2bad66417f1d6a7faea58</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CoordBasedRoutingAccess.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/</path>
    <filename>CoordBasedRoutingAccess_8h</filename>
    <includes id="CoordBasedRouting_8h" name="CoordBasedRouting.h" local="yes" imported="no">CoordBasedRouting.h</includes>
    <class kind="class">CoordBasedRoutingAccess</class>
  </compound>
  <compound kind="file">
    <name>CoordDataContainer.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/globalViewBuilder/</path>
    <filename>CoordDataContainer_8cc</filename>
    <includes id="CoordDataContainer_8h" name="CoordDataContainer.h" local="yes" imported="no">CoordDataContainer.h</includes>
  </compound>
  <compound kind="file">
    <name>CoordDataContainer.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/globalViewBuilder/</path>
    <filename>CoordDataContainer_8h</filename>
    <includes id="oversim__mapset_8h" name="oversim_mapset.h" local="no" imported="no">oversim_mapset.h</includes>
    <class kind="class">CoordDataContainer</class>
  </compound>
  <compound kind="file">
    <name>CoordinateSystem.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>CoordinateSystem_8cc</filename>
    <includes id="ProxNodeHandle_8h" name="ProxNodeHandle.h" local="no" imported="no">ProxNodeHandle.h</includes>
    <includes id="CoordinateSystem_8h" name="CoordinateSystem.h" local="no" imported="no">CoordinateSystem.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>CoordinateSystem_8cc.html</anchorfile>
      <anchor>a2e07066f2e555651c8a647762054ff5a</anchor>
      <arglist>(std::ostream &amp;os, const GnpNpsCoordsInfo &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>CoordinateSystem_8cc.html</anchorfile>
      <anchor>a24d274a91b3cebaa2fba39beeeca668d</anchor>
      <arglist>(std::ostream &amp;os, const VivaldiCoordsInfo &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>CoordinateSystem_8cc.html</anchorfile>
      <anchor>a736352080446f5ee20012aebc1ed186f</anchor>
      <arglist>(std::ostream &amp;os, const Coords &amp;coords)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CoordinateSystem.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>CoordinateSystem_8h</filename>
    <class kind="class">AbstractNcsNodeInfo</class>
    <class kind="class">EuclideanNcsNodeInfo</class>
    <class kind="class">GnpNpsCoordsInfo</class>
    <class kind="class">SimpleUnderlayCoordsInfo</class>
    <class kind="class">SimpleCoordsInfo</class>
    <class kind="class">VivaldiCoordsInfo</class>
    <class kind="class">AbstractNcs</class>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>Coords</name>
      <anchorfile>CoordinateSystem_8h.html</anchorfile>
      <anchor>a8f7367a38245fd7188c210c12c203821</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Coords &gt;</type>
      <name>CoordsVec</name>
      <anchorfile>CoordinateSystem_8h.html</anchorfile>
      <anchor>a71724399e99bfd4fc0f3643b4c048a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>CoordinateSystem_8h.html</anchorfile>
      <anchor>a736352080446f5ee20012aebc1ed186f</anchor>
      <arglist>(std::ostream &amp;os, const Coords &amp;coords)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>CoordinateSystem_8h.html</anchorfile>
      <anchor>a2e07066f2e555651c8a647762054ff5a</anchor>
      <arglist>(std::ostream &amp;os, const GnpNpsCoordsInfo &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>CoordinateSystem_8h.html</anchorfile>
      <anchor>af1f2dee5e592b77b5c59d4be232a8ae6</anchor>
      <arglist>(std::ostream &amp;os, const SimpleCoordsInfo &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>CoordinateSystem_8h.html</anchorfile>
      <anchor>a24d274a91b3cebaa2fba39beeeca668d</anchor>
      <arglist>(std::ostream &amp;os, const VivaldiCoordsInfo &amp;info)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CoordMessages_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/</path>
    <filename>CoordMessages__m_8h</filename>
    <includes id="TransportAddress_8h" name="TransportAddress.h" local="no" imported="no">TransportAddress.h</includes>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <class kind="class">CoordsOfNodeCall</class>
    <class kind="class">RttToNodeCall</class>
    <class kind="class">CoordsOfNodeResponse</class>
    <class kind="class">RttToNodeResponse</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>CoordMessages__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COORDSOFNODECALL_L</name>
      <anchorfile>CoordMessages__m_8h.html</anchorfile>
      <anchor>a32c34eb0c392d74f10f63a4f63a9b591</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COORDSOFNODERESPONSE_L</name>
      <anchorfile>CoordMessages__m_8h.html</anchorfile>
      <anchor>a6d1e0a6617ce157f5cdefa8a8da75c5a</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CoordMessages__m_8h.html</anchorfile>
      <anchor>ac9278399801df90ff7f727008c525c01</anchor>
      <arglist>(cCommBuffer *b, CoordsOfNodeCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CoordMessages__m_8h.html</anchorfile>
      <anchor>a5133df2c3eda665bebb300f16cc22cdc</anchor>
      <arglist>(cCommBuffer *b, CoordsOfNodeCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CoordMessages__m_8h.html</anchorfile>
      <anchor>a8947254b4f1c0c9766bf0b286ec2f211</anchor>
      <arglist>(cCommBuffer *b, RttToNodeCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CoordMessages__m_8h.html</anchorfile>
      <anchor>a4e5c96778afd8ad989928691da942917</anchor>
      <arglist>(cCommBuffer *b, RttToNodeCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CoordMessages__m_8h.html</anchorfile>
      <anchor>a9fc442c04ce3c25d1767bd930037dd0c</anchor>
      <arglist>(cCommBuffer *b, CoordsOfNodeResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CoordMessages__m_8h.html</anchorfile>
      <anchor>a69f20a009a3f97a09e450fbe19cad66d</anchor>
      <arglist>(cCommBuffer *b, CoordsOfNodeResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>CoordMessages__m_8h.html</anchorfile>
      <anchor>ac47a320a90340b19033cf0bb1d9cfe1d</anchor>
      <arglist>(cCommBuffer *b, RttToNodeResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>CoordMessages__m_8h.html</anchorfile>
      <anchor>a0d7de36feecbc609ebc416c4bfc982a5</anchor>
      <arglist>(cCommBuffer *b, RttToNodeResponse &amp;obj)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>LAYER_L</name>
      <anchorfile>CoordMessages__m_8h.html</anchorfile>
      <anchor>a9467fdaa5a519d4d71034242ccd32d19</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CryptoModule.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>CryptoModule_8cc</filename>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <includes id="OverlayAccess_8h" name="OverlayAccess.h" local="no" imported="no">OverlayAccess.h</includes>
    <includes id="GlobalStatisticsAccess_8h" name="GlobalStatisticsAccess.h" local="no" imported="no">GlobalStatisticsAccess.h</includes>
    <includes id="CryptoModule_8h" name="CryptoModule.h" local="no" imported="no">CryptoModule.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>CryptoModule_8cc.html</anchorfile>
      <anchor>a8df5b4aff13ba9887a531e2181169487</anchor>
      <arglist>(CryptoModule)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CryptoModule.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>CryptoModule_8h</filename>
    <includes id="cnetcommbuffer_8h" name="cnetcommbuffer.h" local="no" imported="no">cnetcommbuffer.h</includes>
    <class kind="class">CryptoModule</class>
  </compound>
  <compound kind="file">
    <name>DHT.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/dht/</path>
    <filename>DHT_8cc</filename>
    <includes id="DHT_8h" name="DHT.h" local="yes" imported="no">DHT.h</includes>
    <includes id="RpcMacros_8h" name="RpcMacros.h" local="no" imported="no">RpcMacros.h</includes>
    <includes id="BaseRpc_8h" name="BaseRpc.h" local="no" imported="no">BaseRpc.h</includes>
    <includes id="GlobalStatistics_8h" name="GlobalStatistics.h" local="no" imported="no">GlobalStatistics.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>DHT_8cc.html</anchorfile>
      <anchor>aa1872a5a275c29c33ddad00f6b4ad1ff</anchor>
      <arglist>(DHT)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>DHT_8cc.html</anchorfile>
      <anchor>a326b007470017cababccb6808198bee3</anchor>
      <arglist>(std::ostream &amp;os, const DHT::PendingRpcsEntry &amp;entry)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DHT.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/dht/</path>
    <filename>DHT_8h</filename>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="SHA1_8h" name="SHA1.h" local="no" imported="no">SHA1.h</includes>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <includes id="DHTMessage__m_8h" name="DHTMessage_m.h" local="yes" imported="no">DHTMessage_m.h</includes>
    <includes id="DHTDataStorage_8h" name="DHTDataStorage.h" local="yes" imported="no">DHTDataStorage.h</includes>
    <includes id="BaseApp_8h" name="BaseApp.h" local="yes" imported="no">BaseApp.h</includes>
    <includes id="RpcMacros_8h" name="RpcMacros.h" local="no" imported="no">RpcMacros.h</includes>
    <class kind="class">DHT</class>
    <class kind="class">DHT::PendingRpcsEntry</class>
  </compound>
  <compound kind="file">
    <name>DHTDataStorage.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/dht/</path>
    <filename>DHTDataStorage_8cc</filename>
    <includes id="hashWatch_8h" name="hashWatch.h" local="no" imported="no">hashWatch.h</includes>
    <includes id="DHTDataStorage_8h" name="DHTDataStorage.h" local="yes" imported="no">DHTDataStorage.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>DHTDataStorage_8cc.html</anchorfile>
      <anchor>acee3e044278894ba950fc1c2ce8aa362</anchor>
      <arglist>(DHTDataStorage)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>DHTDataStorage_8cc.html</anchorfile>
      <anchor>af2cc5bc144b45499811ca87c09ce4225</anchor>
      <arglist>(std::ostream &amp;os, const DhtDataEntry entry)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DHTDataStorage.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/dht/</path>
    <filename>DHTDataStorage_8h</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="InitStages_8h" name="InitStages.h" local="no" imported="no">InitStages.h</includes>
    <includes id="BinaryValue_8h" name="BinaryValue.h" local="no" imported="no">BinaryValue.h</includes>
    <includes id="NodeVector_8h" name="NodeVector.h" local="no" imported="no">NodeVector.h</includes>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <class kind="struct">DhtDataEntry</class>
    <class kind="class">DHTDataStorage</class>
    <member kind="typedef">
      <type>std::map&lt; BinaryValue, NodeVector &gt;</type>
      <name>SiblingVoteMap</name>
      <anchorfile>DHTDataStorage_8h.html</anchorfile>
      <anchor>a7f2c64b251b966a300f71fad757b23c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::pair&lt; OverlayKey, DhtDataEntry &gt; &gt;</type>
      <name>DhtDataVector</name>
      <anchorfile>DHTDataStorage_8h.html</anchorfile>
      <anchor>a2f8220ffa02a044fe8f817f5f9a29f36</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; DhtDumpEntry &gt;</type>
      <name>DhtDumpVector</name>
      <anchorfile>DHTDataStorage_8h.html</anchorfile>
      <anchor>ae1791efbd50a05f79354e7b6444044ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::multimap&lt; OverlayKey, DhtDataEntry &gt;</type>
      <name>DhtDataMap</name>
      <anchorfile>DHTDataStorage_8h.html</anchorfile>
      <anchor>aae5fb8352785773186f9d4f082a35d01</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DHTMessage_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/dht/</path>
    <filename>DHTMessage__m_8h</filename>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="BinaryValue_8h" name="BinaryValue.h" local="no" imported="no">BinaryValue.h</includes>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <class kind="class">DHTPutCall</class>
    <class kind="class">DHTGetCall</class>
    <class kind="class">DHTPutResponse</class>
    <class kind="class">DHTGetResponse</class>
    <class kind="class">DHTTtlTimer</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>DHTMessage__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SUCCESS_L</name>
      <anchorfile>DHTMessage__m_8h.html</anchorfile>
      <anchor>a85a83dad422e005080e6c89d57dcc9ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KIND_L</name>
      <anchorfile>DHTMessage__m_8h.html</anchorfile>
      <anchor>a44bc519d079dc083795b2afb123513e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ID_L</name>
      <anchorfile>DHTMessage__m_8h.html</anchorfile>
      <anchor>ab65a79a011c2785a469d583162a85e4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SEQNO_L</name>
      <anchorfile>DHTMessage__m_8h.html</anchorfile>
      <anchor>a357890b6386c38bf1c2bdad33cc84250</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TTL_L</name>
      <anchorfile>DHTMessage__m_8h.html</anchorfile>
      <anchor>a5b0e816782ca72b2d6c3e8cb98812fb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESULT_L</name>
      <anchorfile>DHTMessage__m_8h.html</anchorfile>
      <anchor>af4ece71a85680bf53263536e90ec256e</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUTCALL_L</name>
      <anchorfile>DHTMessage__m_8h.html</anchorfile>
      <anchor>add3d32552f5e0954f907fc1ece9d476d</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GETCALL_L</name>
      <anchorfile>DHTMessage__m_8h.html</anchorfile>
      <anchor>ae52c9263850458a4b01c7fdca7a79e1d</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUTRESPONSE_L</name>
      <anchorfile>DHTMessage__m_8h.html</anchorfile>
      <anchor>a845afd31387cf944fd8f6c173b69507f</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GETRESPONSE_L</name>
      <anchorfile>DHTMessage__m_8h.html</anchorfile>
      <anchor>a4d1e9bd925aefbe37e7efbc528004a78</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>DHTMessage__m_8h.html</anchorfile>
      <anchor>ade2e9e1b4fa09f2fa99f7191c7bbeebd</anchor>
      <arglist>(cCommBuffer *b, DHTPutCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>DHTMessage__m_8h.html</anchorfile>
      <anchor>aef7cba41771b931726df4bc71aacab90</anchor>
      <arglist>(cCommBuffer *b, DHTPutCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>DHTMessage__m_8h.html</anchorfile>
      <anchor>a9938eefb93970f309971dd50d964b877</anchor>
      <arglist>(cCommBuffer *b, DHTGetCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>DHTMessage__m_8h.html</anchorfile>
      <anchor>a9a1ea17d972c07189014e1a2e55ff1bc</anchor>
      <arglist>(cCommBuffer *b, DHTGetCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>DHTMessage__m_8h.html</anchorfile>
      <anchor>a5f2316f7c2fd7146e7424d99e65a5673</anchor>
      <arglist>(cCommBuffer *b, DHTPutResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>DHTMessage__m_8h.html</anchorfile>
      <anchor>a8b663db69c21155338878b23585409fd</anchor>
      <arglist>(cCommBuffer *b, DHTPutResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>DHTMessage__m_8h.html</anchorfile>
      <anchor>ab6398da8cebdcc081ddcf44b7743361b</anchor>
      <arglist>(cCommBuffer *b, DHTGetResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>DHTMessage__m_8h.html</anchorfile>
      <anchor>a367aa5425bd93ff487bf6af09aab4f6e</anchor>
      <arglist>(cCommBuffer *b, DHTGetResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>DHTMessage__m_8h.html</anchorfile>
      <anchor>a7e010a1563341967e791969e4100aae7</anchor>
      <arglist>(cCommBuffer *b, DHTTtlTimer &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>DHTMessage__m_8h.html</anchorfile>
      <anchor>a1a920c949c3d704057dff31893eaf8bd</anchor>
      <arglist>(cCommBuffer *b, DHTTtlTimer &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DHTTestApp.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier2/dhttestapp/</path>
    <filename>DHTTestApp_8cc</filename>
    <includes id="GlobalNodeListAccess_8h" name="GlobalNodeListAccess.h" local="no" imported="no">GlobalNodeListAccess.h</includes>
    <includes id="GlobalStatisticsAccess_8h" name="GlobalStatisticsAccess.h" local="no" imported="no">GlobalStatisticsAccess.h</includes>
    <includes id="UnderlayConfiguratorAccess_8h" name="UnderlayConfiguratorAccess.h" local="no" imported="no">UnderlayConfiguratorAccess.h</includes>
    <includes id="RpcMacros_8h" name="RpcMacros.h" local="no" imported="no">RpcMacros.h</includes>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="yes" imported="no">CommonMessages_m.h</includes>
    <includes id="GlobalDhtTestMap_8h" name="GlobalDhtTestMap.h" local="no" imported="no">GlobalDhtTestMap.h</includes>
    <includes id="DHTTestApp_8h" name="DHTTestApp.h" local="yes" imported="no">DHTTestApp.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>DHTTestApp_8cc.html</anchorfile>
      <anchor>a7295956dc858fcf2c0e6aa1380c1d95c</anchor>
      <arglist>(DHTTestApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DHTTestApp.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier2/dhttestapp/</path>
    <filename>DHTTestApp_8h</filename>
    <includes id="GlobalNodeList_8h" name="GlobalNodeList.h" local="no" imported="no">GlobalNodeList.h</includes>
    <includes id="GlobalStatistics_8h" name="GlobalStatistics.h" local="no" imported="no">GlobalStatistics.h</includes>
    <includes id="UnderlayConfigurator_8h" name="UnderlayConfigurator.h" local="no" imported="no">UnderlayConfigurator.h</includes>
    <includes id="TransportAddress_8h" name="TransportAddress.h" local="no" imported="no">TransportAddress.h</includes>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="InitStages_8h" name="InitStages.h" local="no" imported="no">InitStages.h</includes>
    <includes id="BinaryValue_8h" name="BinaryValue.h" local="no" imported="no">BinaryValue.h</includes>
    <includes id="BaseApp_8h" name="BaseApp.h" local="no" imported="no">BaseApp.h</includes>
    <class kind="class">DHTTestApp</class>
    <class kind="class">DHTTestApp::DHTStatsContext</class>
  </compound>
  <compound kind="file">
    <name>DHTTestAppMessages_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier2/dhttestapp/</path>
    <filename>DHTTestAppMessages__m_8h</filename>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <class kind="class">DhtTestEntryTimer</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>DHTTestAppMessages__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>DHTTestAppMessages__m_8h.html</anchorfile>
      <anchor>a6b0eee1cc7cd8dc46ff997ef36fad80f</anchor>
      <arglist>(cCommBuffer *b, DhtTestEntryTimer &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>DHTTestAppMessages__m_8h.html</anchorfile>
      <anchor>a8000e5250ae9b31d5d0a2687b13b1c83</anchor>
      <arglist>(cCommBuffer *b, DhtTestEntryTimer &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DiscoveryMode.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>DiscoveryMode_8cc</filename>
    <includes id="BasePastry_8h" name="BasePastry.h" local="no" imported="no">BasePastry.h</includes>
    <includes id="DiscoveryMode__m_8h" name="DiscoveryMode_m.h" local="no" imported="no">DiscoveryMode_m.h</includes>
    <includes id="DiscoveryMode_8h" name="DiscoveryMode.h" local="yes" imported="no">DiscoveryMode.h</includes>
  </compound>
  <compound kind="file">
    <name>DiscoveryMode.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>DiscoveryMode_8h</filename>
    <includes id="RpcListener_8h" name="RpcListener.h" local="no" imported="no">RpcListener.h</includes>
    <includes id="NeighborCache_8h" name="NeighborCache.h" local="no" imported="no">NeighborCache.h</includes>
    <includes id="DiscoveryMode__m_8h" name="DiscoveryMode_m.h" local="no" imported="no">DiscoveryMode_m.h</includes>
    <class kind="class">DiscoveryMode</class>
  </compound>
  <compound kind="file">
    <name>DiscoveryMode_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>DiscoveryMode__m_8h</filename>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <class kind="class">DiscoveryCall</class>
    <class kind="class">DiscoveryResponse</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>DiscoveryMode__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>DiscoveryNodesType</name>
      <anchorfile>DiscoveryMode__m_8h.html</anchorfile>
      <anchor>a004cf217a35cac94a1d911006d3dedf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CLOSE_NODES</name>
      <anchorfile>DiscoveryMode__m_8h.html</anchorfile>
      <anchor>a004cf217a35cac94a1d911006d3dedf5a5d044afb3be74306a0478496441b022d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPREADED_NODES</name>
      <anchorfile>DiscoveryMode__m_8h.html</anchorfile>
      <anchor>a004cf217a35cac94a1d911006d3dedf5a8ef5a48a632286a6593ca8b1588e6df7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>DiscoveryMode__m_8h.html</anchorfile>
      <anchor>a130b908525f602f1036d38fbe6eab400</anchor>
      <arglist>(cCommBuffer *b, DiscoveryCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>DiscoveryMode__m_8h.html</anchorfile>
      <anchor>aac7c353984d2cfa54f0d4cc03310dac5</anchor>
      <arglist>(cCommBuffer *b, DiscoveryCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>DiscoveryMode__m_8h.html</anchorfile>
      <anchor>ade9ed7fb52d5ef1090d0d1bb2a4b18fe</anchor>
      <arglist>(cCommBuffer *b, DiscoveryResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>DiscoveryMode__m_8h.html</anchorfile>
      <anchor>a4079710cf40500dbf61fc83f0d71e6d3</anchor>
      <arglist>(cCommBuffer *b, DiscoveryResponse &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ExtAPIMessages_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>ExtAPIMessages__m_8h</filename>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <class kind="class">GIASearchAppMessage</class>
    <class kind="class">GIAput</class>
    <class kind="class">GIAremove</class>
    <class kind="class">GIAsearch</class>
    <class kind="class">GIAanswer</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>ExtAPIMessages__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GIASEARCHAPP_L</name>
      <anchorfile>ExtAPIMessages__m_8h.html</anchorfile>
      <anchor>a41ceddeb291a4fa1bc6b4143c2e5ddf4</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GIAPUT_L</name>
      <anchorfile>ExtAPIMessages__m_8h.html</anchorfile>
      <anchor>a7bf9ffae2fd53edf227131524232668c</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GIAGET_L</name>
      <anchorfile>ExtAPIMessages__m_8h.html</anchorfile>
      <anchor>abd649ca5d2dd3fc482850b5fbc25c984</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GIAGETRSP_L</name>
      <anchorfile>ExtAPIMessages__m_8h.html</anchorfile>
      <anchor>a768a929de9fb483a46a7f6f6426c28d6</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="enumeration">
      <name>GIAAppCommand</name>
      <anchorfile>ExtAPIMessages__m_8h.html</anchorfile>
      <anchor>a682fe177714e5c2639d8d79f943b9bd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GIA_PUT</name>
      <anchorfile>ExtAPIMessages__m_8h.html</anchorfile>
      <anchor>a682fe177714e5c2639d8d79f943b9bd9a74a5c8dd1e956ef0227a08d6b0e41b24</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GIA_SEARCH</name>
      <anchorfile>ExtAPIMessages__m_8h.html</anchorfile>
      <anchor>a682fe177714e5c2639d8d79f943b9bd9a45a10c8ce4e9f59500b40cff0f8e89f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GIA_ANSWER</name>
      <anchorfile>ExtAPIMessages__m_8h.html</anchorfile>
      <anchor>a682fe177714e5c2639d8d79f943b9bd9a80113ea9d674191438771091131b7b8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>ExtAPIMessages__m_8h.html</anchorfile>
      <anchor>afaf88c3bbe150e5813a0aa7d04558f31</anchor>
      <arglist>(cCommBuffer *b, GIASearchAppMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>ExtAPIMessages__m_8h.html</anchorfile>
      <anchor>a8df71d74ab4860b2eccb211922e5578e</anchor>
      <arglist>(cCommBuffer *b, GIASearchAppMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>ExtAPIMessages__m_8h.html</anchorfile>
      <anchor>ac69a4c36744d4b04d1a54632fd0bef3e</anchor>
      <arglist>(cCommBuffer *b, GIAput &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>ExtAPIMessages__m_8h.html</anchorfile>
      <anchor>a1d7986450dec5fc5f4899a8a3a96723c</anchor>
      <arglist>(cCommBuffer *b, GIAput &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>ExtAPIMessages__m_8h.html</anchorfile>
      <anchor>a7f58cb80cf6132331003fe1474751e06</anchor>
      <arglist>(cCommBuffer *b, GIAremove &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>ExtAPIMessages__m_8h.html</anchorfile>
      <anchor>a672f14b1b8589d5eb79989eaf53354e2</anchor>
      <arglist>(cCommBuffer *b, GIAremove &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>ExtAPIMessages__m_8h.html</anchorfile>
      <anchor>a775360142da638a865935d9ac9f49309</anchor>
      <arglist>(cCommBuffer *b, GIAsearch &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>ExtAPIMessages__m_8h.html</anchorfile>
      <anchor>a7366bd84c8cf7d8542125d19ccd10c89</anchor>
      <arglist>(cCommBuffer *b, GIAsearch &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>ExtAPIMessages__m_8h.html</anchorfile>
      <anchor>a7cd2b9e4d9961c06bd46c31f0a253135</anchor>
      <arglist>(cCommBuffer *b, GIAanswer &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>ExtAPIMessages__m_8h.html</anchorfile>
      <anchor>a229414f068f111e60ae561f7e7724b4a</anchor>
      <arglist>(cCommBuffer *b, GIAanswer &amp;obj)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>GIAAPPCOMMAND_L</name>
      <anchorfile>ExtAPIMessages__m_8h.html</anchorfile>
      <anchor>afa9ab5a7b301f6fe45b08ec81799614f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ExtTCPSocketMap.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>ExtTCPSocketMap_8cc</filename>
    <includes id="ExtTCPSocketMap_8h" name="ExtTCPSocketMap.h" local="no" imported="no">ExtTCPSocketMap.h</includes>
  </compound>
  <compound kind="file">
    <name>ExtTCPSocketMap.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>ExtTCPSocketMap_8h</filename>
    <class kind="class">ExtTCPSocketMap</class>
  </compound>
  <compound kind="file">
    <name>FinisherModule.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>FinisherModule_8cc</filename>
    <includes id="GlobalStatisticsAccess_8h" name="GlobalStatisticsAccess.h" local="no" imported="no">GlobalStatisticsAccess.h</includes>
    <includes id="FinisherModule_8h" name="FinisherModule.h" local="yes" imported="no">FinisherModule.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>FinisherModule_8cc.html</anchorfile>
      <anchor>a89611e8ec930a9265510592a4bfc5dbb</anchor>
      <arglist>(FinisherModule)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FinisherModule.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>FinisherModule_8h</filename>
    <class kind="class">FinisherModule</class>
  </compound>
  <compound kind="file">
    <name>GenericPacketParser.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>GenericPacketParser_8cc</filename>
    <includes id="GenericPacketParser_8h" name="GenericPacketParser.h" local="yes" imported="no">GenericPacketParser.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>GenericPacketParser_8cc.html</anchorfile>
      <anchor>a55f82fcb3f1795ee1b895a2dd47d62e7</anchor>
      <arglist>(GenericPacketParser)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GenericPacketParser.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>GenericPacketParser_8h</filename>
    <includes id="PacketParser_8h" name="PacketParser.h" local="no" imported="no">PacketParser.h</includes>
    <includes id="cnetcommbuffer_8h" name="cnetcommbuffer.h" local="no" imported="no">cnetcommbuffer.h</includes>
    <class kind="class">GenericPacketParser</class>
  </compound>
  <compound kind="file">
    <name>Gia.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/gia/</path>
    <filename>Gia_8cc</filename>
    <includes id="GlobalStatistics_8h" name="GlobalStatistics.h" local="no" imported="no">GlobalStatistics.h</includes>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <includes id="ExtAPIMessages__m_8h" name="ExtAPIMessages_m.h" local="no" imported="no">ExtAPIMessages_m.h</includes>
    <includes id="InitStages_8h" name="InitStages.h" local="no" imported="no">InitStages.h</includes>
    <includes id="BootstrapList_8h" name="BootstrapList.h" local="no" imported="no">BootstrapList.h</includes>
    <includes id="Gia_8h" name="Gia.h" local="yes" imported="no">Gia.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>Gia_8cc.html</anchorfile>
      <anchor>a8777a9fefc4a4917e6f3fe9f2fa73f27</anchor>
      <arglist>(Gia)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Gia.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/gia/</path>
    <filename>Gia_8h</filename>
    <includes id="GlobalNodeList_8h" name="GlobalNodeList.h" local="no" imported="no">GlobalNodeList.h</includes>
    <includes id="UnderlayConfigurator_8h" name="UnderlayConfigurator.h" local="no" imported="no">UnderlayConfigurator.h</includes>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <includes id="BaseOverlay_8h" name="BaseOverlay.h" local="no" imported="no">BaseOverlay.h</includes>
    <includes id="GiaMessage__m_8h" name="GiaMessage_m.h" local="yes" imported="no">GiaMessage_m.h</includes>
    <includes id="GiaKeyListModule_8h" name="GiaKeyListModule.h" local="yes" imported="no">GiaKeyListModule.h</includes>
    <includes id="GiaKeyList_8h" name="GiaKeyList.h" local="yes" imported="no">GiaKeyList.h</includes>
    <includes id="GiaNeighbors_8h" name="GiaNeighbors.h" local="yes" imported="no">GiaNeighbors.h</includes>
    <includes id="GiaTokenFactory_8h" name="GiaTokenFactory.h" local="yes" imported="no">GiaTokenFactory.h</includes>
    <includes id="GiaNode_8h" name="GiaNode.h" local="yes" imported="no">GiaNode.h</includes>
    <includes id="GiaNeighborCandidateList_8h" name="GiaNeighborCandidateList.h" local="yes" imported="no">GiaNeighborCandidateList.h</includes>
    <includes id="GiaMessageBookkeeping_8h" name="GiaMessageBookkeeping.h" local="yes" imported="no">GiaMessageBookkeeping.h</includes>
    <class kind="class">Gia</class>
  </compound>
  <compound kind="file">
    <name>GiaKeyList.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/gia/</path>
    <filename>GiaKeyList_8cc</filename>
    <includes id="GiaKeyList_8h" name="GiaKeyList.h" local="yes" imported="no">GiaKeyList.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>GiaKeyList_8cc.html</anchorfile>
      <anchor>a38578d104c48a1f4d6550891d79ed2b3</anchor>
      <arglist>(std::ostream &amp;os, const GiaKeyList &amp;k)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GiaKeyList.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/gia/</path>
    <filename>GiaKeyList_8h</filename>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <class kind="class">GiaKeyList</class>
  </compound>
  <compound kind="file">
    <name>GiaKeyListModule.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/gia/</path>
    <filename>GiaKeyListModule_8cc</filename>
    <includes id="GiaKeyListModule_8h" name="GiaKeyListModule.h" local="yes" imported="no">GiaKeyListModule.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>GiaKeyListModule_8cc.html</anchorfile>
      <anchor>a52a428a680f15de5024d6a5cc2e1f0f9</anchor>
      <arglist>(GiaKeyListModule)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GiaKeyListModule.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/gia/</path>
    <filename>GiaKeyListModule_8h</filename>
    <includes id="InitStages_8h" name="InitStages.h" local="no" imported="no">InitStages.h</includes>
    <includes id="GiaKeyList_8h" name="GiaKeyList.h" local="yes" imported="no">GiaKeyList.h</includes>
    <class kind="class">GiaKeyListModule</class>
  </compound>
  <compound kind="file">
    <name>GiaMessage_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/gia/</path>
    <filename>GiaMessage__m_8h</filename>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="GiaNode_8h" name="GiaNode.h" local="no" imported="no">GiaNode.h</includes>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <class kind="class">GiaMessage</class>
    <class kind="class">GiaNeighborMessage</class>
    <class kind="class">TokenMessage</class>
    <class kind="class">GiaIDMessage</class>
    <class kind="class">GiaRouteMessage</class>
    <class kind="class">KeyListMessage</class>
    <class kind="class">SearchMessage</class>
    <class kind="class">SearchResponseMessage</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GIANODE_L</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>a73e445d0f2a7eef8cfc3aa622b1ca48b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GIA_L</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>a13941a3c234abd9ed668a78dbf147122</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GIANEIGHBOR_L</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>ac4af8e861c1e8426d0e99088a9d03672</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOKEN_L</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>af3c8731b5649e3a1d75e7da955061c7d</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GIAID_L</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>abb8fd5dc7170c32ddeb4ed4954abc66f</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GIAROUTE_L</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>a4ff691f2202b0edd05ddde6e40fbfecb</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEYLIST_L</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>a82e73cacdf48e8be594a723d175f1efd</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SEARCH_L</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>abe5bfc3f9b12112eaef8d98c36735ea7</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SEARCHRESPONSE_L</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>ac1baf6c107426782065ec5c3fd311321</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="enumeration">
      <name>GIACommand</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>ac712f468e66678ffb5df03be6d6a8157</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JOIN_REQUEST</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>ac712f468e66678ffb5df03be6d6a8157a71fec090ff88ece51771bbbf434064ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JOIN_RESPONSE</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>ac712f468e66678ffb5df03be6d6a8157ab9718444a42f4dac3598ed891ae2967d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JOIN_ACK</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>ac712f468e66678ffb5df03be6d6a8157afe7af85f46fcb229e3764e27ba305eeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JOIN_DENY</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>ac712f468e66678ffb5df03be6d6a8157a51239b797a8fabeb793cabb23a7496b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISCONNECT</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>ac712f468e66678ffb5df03be6d6a8157a2f6318afb30e8e2817e6203ebedc8173</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ROUTE</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>ac712f468e66678ffb5df03be6d6a8157a6530dd7e53049fcde9b27580cd9b8cdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEARCH</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>ac712f468e66678ffb5df03be6d6a8157a803088a5d28b83b0f9d0828150ca4e76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ANSWER</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>ac712f468e66678ffb5df03be6d6a8157a0c2c933912b1834f832d17e973cd8100</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UPDATE</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>ac712f468e66678ffb5df03be6d6a8157a3912ed627c0090ccc7fa1b03fef04202</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOKEN</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>ac712f468e66678ffb5df03be6d6a8157a07fe54e18c187cac6548db45a3f3676a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KEYLIST</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>ac712f468e66678ffb5df03be6d6a8157a95698b1f31ee39c824b110207deec1b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>aefda39ac5ac2729c38fd1d1cb3760e46</anchor>
      <arglist>(cCommBuffer *b, GiaMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>a6b4cdca4ded7e53d73a527416319abbd</anchor>
      <arglist>(cCommBuffer *b, GiaMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>afd18004d7caf76807fc6d9946410e0d5</anchor>
      <arglist>(cCommBuffer *b, GiaNeighborMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>a80da99ce1e0ad55cfdcfa67568ecf1db</anchor>
      <arglist>(cCommBuffer *b, GiaNeighborMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>a0298b2078c9e853eadbf51830716f814</anchor>
      <arglist>(cCommBuffer *b, TokenMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>a50c9716bbcd9a79f23cd646edd311431</anchor>
      <arglist>(cCommBuffer *b, TokenMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>afe10931a68e7598887c4834f15dc2cec</anchor>
      <arglist>(cCommBuffer *b, GiaIDMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>a3680c9434731f615f4818f8e6eb63721</anchor>
      <arglist>(cCommBuffer *b, GiaIDMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>a6ac8d5a06d934629b9dc31825370e9d3</anchor>
      <arglist>(cCommBuffer *b, GiaRouteMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>af1ffa5c423b8fae92bc13211f527d61e</anchor>
      <arglist>(cCommBuffer *b, GiaRouteMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>a1744873be8b1db067189e60e2665ea90</anchor>
      <arglist>(cCommBuffer *b, KeyListMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>af0bc23653e1a1dce1574ced20bcd6c57</anchor>
      <arglist>(cCommBuffer *b, KeyListMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>a1cae7619b083439f3dc7b1ad6631f2a1</anchor>
      <arglist>(cCommBuffer *b, SearchMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>aec3fac6c2b331effbd92709989008f8b</anchor>
      <arglist>(cCommBuffer *b, SearchMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>adc7e00792824505fb4771949022bd091</anchor>
      <arglist>(cCommBuffer *b, SearchResponseMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>ab84738b145966430a8d4fed31277745e</anchor>
      <arglist>(cCommBuffer *b, SearchResponseMessage &amp;obj)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>GIACOMMAND_L</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>a4b59853c1609218934a5a3ab44124b66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>CAPACITY_L</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>aa1f670f2ac67f68b8aa1b95477015f0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>DEGREE_L</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>a8a186c162f4ad3ceea3e176783134d55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>TOKENNR_L</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>a4096c83e27493e6f48995de409751a05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>MAXRESPONSES_L</name>
      <anchorfile>GiaMessage__m_8h.html</anchorfile>
      <anchor>a1f85e72c972a1adffb338a4e050d4b1f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GiaMessageBookkeeping.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/gia/</path>
    <filename>GiaMessageBookkeeping_8cc</filename>
    <includes id="GiaMessageBookkeeping_8h" name="GiaMessageBookkeeping.h" local="yes" imported="no">GiaMessageBookkeeping.h</includes>
  </compound>
  <compound kind="file">
    <name>GiaMessageBookkeeping.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/gia/</path>
    <filename>GiaMessageBookkeeping_8h</filename>
    <includes id="GiaNeighbors_8h" name="GiaNeighbors.h" local="yes" imported="no">GiaNeighbors.h</includes>
    <includes id="GiaMessage__m_8h" name="GiaMessage_m.h" local="yes" imported="no">GiaMessage_m.h</includes>
    <includes id="GiaNode_8h" name="GiaNode.h" local="yes" imported="no">GiaNode.h</includes>
    <class kind="class">GiaMessageBookkeeping</class>
    <class kind="class">GiaMessageBookkeeping::GiaNodeQueueCompare</class>
    <class kind="struct">GiaMessageBookkeeping::MessageItem</class>
  </compound>
  <compound kind="file">
    <name>GiaNeighborCandidateList.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/gia/</path>
    <filename>GiaNeighborCandidateList_8cc</filename>
    <includes id="GiaNeighborCandidateList_8h" name="GiaNeighborCandidateList.h" local="yes" imported="no">GiaNeighborCandidateList.h</includes>
  </compound>
  <compound kind="file">
    <name>GiaNeighborCandidateList.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/gia/</path>
    <filename>GiaNeighborCandidateList_8h</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <class kind="class">GiaNeighborCandidateList</class>
  </compound>
  <compound kind="file">
    <name>GiaNeighbors.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/gia/</path>
    <filename>GiaNeighbors_8cc</filename>
    <includes id="InitStages_8h" name="InitStages.h" local="no" imported="no">InitStages.h</includes>
    <includes id="GiaNeighbors_8h" name="GiaNeighbors.h" local="yes" imported="no">GiaNeighbors.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>GiaNeighbors_8cc.html</anchorfile>
      <anchor>a7f07e021d2555be95bb9dc0599463e6c</anchor>
      <arglist>(GiaNeighbors)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>GiaNeighbors_8cc.html</anchorfile>
      <anchor>aa509d75e5c617b96ae1a61fba53476b5</anchor>
      <arglist>(std::ostream &amp;os, const GiaNeighborInfo &amp;info)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GiaNeighbors.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/gia/</path>
    <filename>GiaNeighbors_8h</filename>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="InitStages_8h" name="InitStages.h" local="no" imported="no">InitStages.h</includes>
    <includes id="GiaNode_8h" name="GiaNode.h" local="yes" imported="no">GiaNode.h</includes>
    <includes id="GiaKeyList_8h" name="GiaKeyList.h" local="yes" imported="no">GiaKeyList.h</includes>
    <class kind="struct">GiaNeighborInfo</class>
    <class kind="struct">FullGiaNodeInfo</class>
    <class kind="class">GiaNeighbors</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>GiaNeighbors_8h.html</anchorfile>
      <anchor>aa509d75e5c617b96ae1a61fba53476b5</anchor>
      <arglist>(std::ostream &amp;os, const GiaNeighborInfo &amp;info)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GiaNode.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/gia/</path>
    <filename>GiaNode_8cc</filename>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="GiaNode_8h" name="GiaNode.h" local="yes" imported="no">GiaNode.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>GiaNode_8cc.html</anchorfile>
      <anchor>ab155ca6f9b85ef9b9b5b92ba08462628</anchor>
      <arglist>(std::ostream &amp;os, const GiaNode &amp;node)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GiaNode.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/gia/</path>
    <filename>GiaNode_8h</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <class kind="class">GiaNode</class>
  </compound>
  <compound kind="file">
    <name>GIASearchApp.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/giasearchapp/</path>
    <filename>GIASearchApp_8cc</filename>
    <includes id="InitStages_8h" name="InitStages.h" local="no" imported="no">InitStages.h</includes>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <includes id="ExtAPIMessages__m_8h" name="ExtAPIMessages_m.h" local="no" imported="no">ExtAPIMessages_m.h</includes>
    <includes id="GiaMessage__m_8h" name="GiaMessage_m.h" local="no" imported="no">GiaMessage_m.h</includes>
    <includes id="GlobalStatistics_8h" name="GlobalStatistics.h" local="no" imported="no">GlobalStatistics.h</includes>
    <includes id="GIASearchApp_8h" name="GIASearchApp.h" local="yes" imported="no">GIASearchApp.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>GIASearchApp_8cc.html</anchorfile>
      <anchor>ae5eafc52fe6674aa22339fecfa956469</anchor>
      <arglist>(GIASearchApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GIASearchApp.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/giasearchapp/</path>
    <filename>GIASearchApp_8h</filename>
    <includes id="BaseApp_8h" name="BaseApp.h" local="no" imported="no">BaseApp.h</includes>
    <includes id="GlobalNodeList_8h" name="GlobalNodeList.h" local="no" imported="no">GlobalNodeList.h</includes>
    <includes id="UnderlayConfigurator_8h" name="UnderlayConfigurator.h" local="no" imported="no">UnderlayConfigurator.h</includes>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="SearchMsgBookkeeping_8h" name="SearchMsgBookkeeping.h" local="yes" imported="no">SearchMsgBookkeeping.h</includes>
    <class kind="class">GIASearchApp</class>
  </compound>
  <compound kind="file">
    <name>GiaTokenFactory.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/gia/</path>
    <filename>GiaTokenFactory_8cc</filename>
    <includes id="GiaTokenFactory_8h" name="GiaTokenFactory.h" local="yes" imported="no">GiaTokenFactory.h</includes>
    <includes id="Gia_8h" name="Gia.h" local="yes" imported="no">Gia.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>GiaTokenFactory_8cc.html</anchorfile>
      <anchor>a6e640b0fe601aae396a071dd114351f5</anchor>
      <arglist>(GiaTokenFactory)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GiaTokenFactory.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/gia/</path>
    <filename>GiaTokenFactory_8h</filename>
    <includes id="InitStages_8h" name="InitStages.h" local="no" imported="no">InitStages.h</includes>
    <includes id="GiaNeighbors_8h" name="GiaNeighbors.h" local="yes" imported="no">GiaNeighbors.h</includes>
    <class kind="class">GiaTokenFactory</class>
    <class kind="class">GiaTokenFactory::tokenCompareGiaNode</class>
  </compound>
  <compound kind="file">
    <name>GlobalCoordinator.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/simplegameclient/</path>
    <filename>GlobalCoordinator_8cc</filename>
    <includes id="GlobalCoordinator_8h" name="GlobalCoordinator.h" local="yes" imported="no">GlobalCoordinator.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>GlobalCoordinator_8cc.html</anchorfile>
      <anchor>a1da5ac0a9411862e951b679578b8a64a</anchor>
      <arglist>(GlobalCoordinator)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlobalCoordinator.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/simplegameclient/</path>
    <filename>GlobalCoordinator_8h</filename>
    <includes id="Vector2D_8h" name="Vector2D.h" local="no" imported="no">Vector2D.h</includes>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <class kind="class">GlobalCoordinator</class>
  </compound>
  <compound kind="file">
    <name>GlobalDhtTestMap.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier2/dhttestapp/</path>
    <filename>GlobalDhtTestMap_8cc</filename>
    <includes id="GlobalStatisticsAccess_8h" name="GlobalStatisticsAccess.h" local="no" imported="no">GlobalStatisticsAccess.h</includes>
    <includes id="DHTTestAppMessages__m_8h" name="DHTTestAppMessages_m.h" local="no" imported="no">DHTTestAppMessages_m.h</includes>
    <includes id="GlobalDhtTestMap_8h" name="GlobalDhtTestMap.h" local="yes" imported="no">GlobalDhtTestMap.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>GlobalDhtTestMap_8cc.html</anchorfile>
      <anchor>a0e8fcd542a735eb9ccd0a47b6f7c0939</anchor>
      <arglist>(GlobalDhtTestMap)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>GlobalDhtTestMap_8cc.html</anchorfile>
      <anchor>aaa2c429228b3918979fd8e2553fe5a1b</anchor>
      <arglist>(std::ostream &amp;stream, const DHTEntry entry)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlobalDhtTestMap.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier2/dhttestapp/</path>
    <filename>GlobalDhtTestMap_8h</filename>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="BinaryValue_8h" name="BinaryValue.h" local="no" imported="no">BinaryValue.h</includes>
    <class kind="struct">DHTEntry</class>
    <class kind="class">GlobalDhtTestMap</class>
  </compound>
  <compound kind="file">
    <name>GlobalNodeList.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>GlobalNodeList_8cc</filename>
    <includes id="BinaryValue_8h" name="BinaryValue.h" local="no" imported="no">BinaryValue.h</includes>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="PeerInfo_8h" name="PeerInfo.h" local="no" imported="no">PeerInfo.h</includes>
    <includes id="BaseOverlay_8h" name="BaseOverlay.h" local="no" imported="no">BaseOverlay.h</includes>
    <includes id="GlobalStatisticsAccess_8h" name="GlobalStatisticsAccess.h" local="no" imported="no">GlobalStatisticsAccess.h</includes>
    <includes id="hashWatch_8h" name="hashWatch.h" local="no" imported="no">hashWatch.h</includes>
    <includes id="BootstrapList_8h" name="BootstrapList.h" local="no" imported="no">BootstrapList.h</includes>
    <includes id="GlobalNodeList_8h" name="GlobalNodeList.h" local="yes" imported="no">GlobalNodeList.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>GlobalNodeList_8cc.html</anchorfile>
      <anchor>a043d128f4448b3da323b4abeb8649cdc</anchor>
      <arglist>(GlobalNodeList)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>GlobalNodeList_8cc.html</anchorfile>
      <anchor>a16e41fd91e554d2f468c10d5576f5823</anchor>
      <arglist>(std::ostream &amp;os, const BootstrapEntry &amp;entry)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlobalNodeList.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>GlobalNodeList_8h</filename>
    <includes id="oversim__mapset_8h" name="oversim_mapset.h" local="no" imported="no">oversim_mapset.h</includes>
    <includes id="ChurnGenerator_8h" name="ChurnGenerator.h" local="no" imported="no">ChurnGenerator.h</includes>
    <includes id="BinaryValue_8h" name="BinaryValue.h" local="no" imported="no">BinaryValue.h</includes>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="PeerStorage_8h" name="PeerStorage.h" local="no" imported="no">PeerStorage.h</includes>
    <class kind="class">GlobalNodeList</class>
  </compound>
  <compound kind="file">
    <name>GlobalNodeListAccess.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>GlobalNodeListAccess_8h</filename>
    <includes id="GlobalNodeList_8h" name="GlobalNodeList.h" local="yes" imported="no">GlobalNodeList.h</includes>
    <class kind="class">GlobalNodeListAccess</class>
  </compound>
  <compound kind="file">
    <name>GlobalParameters.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>GlobalParameters_8cc</filename>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="GlobalParameters_8h" name="GlobalParameters.h" local="yes" imported="no">GlobalParameters.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>GlobalParameters_8cc.html</anchorfile>
      <anchor>ae13bd0b42949cc71c9524946095042ae</anchor>
      <arglist>(GlobalParameters)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlobalParameters.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>GlobalParameters_8h</filename>
    <class kind="class">GlobalParameters</class>
  </compound>
  <compound kind="file">
    <name>GlobalParametersAccess.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>GlobalParametersAccess_8h</filename>
    <includes id="GlobalParameters_8h" name="GlobalParameters.h" local="yes" imported="no">GlobalParameters.h</includes>
    <class kind="class">GlobalParametersAccess</class>
  </compound>
  <compound kind="file">
    <name>GlobalStatistics.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>GlobalStatistics_8cc</filename>
    <includes id="GlobalStatistics_8h" name="GlobalStatistics.h" local="yes" imported="no">GlobalStatistics.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>GlobalStatistics_8cc.html</anchorfile>
      <anchor>a0beb1ad2e71b15f1f76beb2dc66f1316</anchor>
      <arglist>(GlobalStatistics)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlobalStatistics.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>GlobalStatistics_8h</filename>
    <class kind="class">GlobalStatistics</class>
    <class kind="struct">GlobalStatistics::OutVector</class>
    <member kind="define">
      <type>#define</type>
      <name>RECORD_STATS</name>
      <anchorfile>GlobalStatistics_8h.html</anchorfile>
      <anchor>af29140ebe8e0a93406a58441f7c5fec8</anchor>
      <arglist>(x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlobalStatisticsAccess.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>GlobalStatisticsAccess_8h</filename>
    <includes id="GlobalStatistics_8h" name="GlobalStatistics.h" local="yes" imported="no">GlobalStatistics.h</includes>
    <class kind="class">GlobalStatisticsAccess</class>
  </compound>
  <compound kind="file">
    <name>GlobalTraceManager.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>GlobalTraceManager_8cc</filename>
    <includes id="UnderlayConfiguratorAccess_8h" name="UnderlayConfiguratorAccess.h" local="no" imported="no">UnderlayConfiguratorAccess.h</includes>
    <includes id="GlobalNodeListAccess_8h" name="GlobalNodeListAccess.h" local="no" imported="no">GlobalNodeListAccess.h</includes>
    <includes id="GlobalTraceManager__m_8h" name="GlobalTraceManager_m.h" local="no" imported="no">GlobalTraceManager_m.h</includes>
    <includes id="TraceChurn_8h" name="TraceChurn.h" local="no" imported="no">TraceChurn.h</includes>
    <includes id="GlobalTraceManager_8h" name="GlobalTraceManager.h" local="yes" imported="no">GlobalTraceManager.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>GlobalTraceManager_8cc.html</anchorfile>
      <anchor>af499c68e2d3ad1402056a7d70291204a</anchor>
      <arglist>(GlobalTraceManager)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlobalTraceManager.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>GlobalTraceManager_8h</filename>
    <class kind="class">GlobalTraceManager</class>
  </compound>
  <compound kind="file">
    <name>GlobalTraceManager_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>GlobalTraceManager__m_8h</filename>
    <class kind="class">GlobalTraceManagerMessage</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>GlobalTraceManager__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>GlobalTraceManager__m_8h.html</anchorfile>
      <anchor>ad003c2ee546fd4b61d1a571e346f8d58</anchor>
      <arglist>(cCommBuffer *b, GlobalTraceManagerMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>GlobalTraceManager__m_8h.html</anchorfile>
      <anchor>a455bbacd72a84ddb1cbeaf2871bf03af</anchor>
      <arglist>(cCommBuffer *b, GlobalTraceManagerMessage &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlobalViewBuilder.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/</path>
    <filename>GlobalViewBuilder_8cc</filename>
    <includes id="AbstractSendStrategy_8h" name="AbstractSendStrategy.h" local="no" imported="no">AbstractSendStrategy.h</includes>
    <includes id="UnderlayConfiguratorAccess_8h" name="UnderlayConfiguratorAccess.h" local="no" imported="no">UnderlayConfiguratorAccess.h</includes>
    <includes id="CoordBasedRoutingAccess_8h" name="CoordBasedRoutingAccess.h" local="no" imported="no">CoordBasedRoutingAccess.h</includes>
    <includes id="GlobalViewBuilder_8h" name="GlobalViewBuilder.h" local="yes" imported="no">GlobalViewBuilder.h</includes>
  </compound>
  <compound kind="file">
    <name>GlobalViewBuilder.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/</path>
    <filename>GlobalViewBuilder_8h</filename>
    <includes id="NeighborCache_8h" name="NeighborCache.h" local="no" imported="no">NeighborCache.h</includes>
    <includes id="OverlayAccess_8h" name="OverlayAccess.h" local="no" imported="no">OverlayAccess.h</includes>
    <includes id="TreeManagement_8h" name="TreeManagement.h" local="no" imported="no">TreeManagement.h</includes>
    <includes id="SendStrategyFactory_8h" name="SendStrategyFactory.h" local="no" imported="no">SendStrategyFactory.h</includes>
    <includes id="StrategySendAll_8h" name="StrategySendAll.h" local="no" imported="no">StrategySendAll.h</includes>
    <includes id="RpcListener_8h" name="RpcListener.h" local="no" imported="no">RpcListener.h</includes>
    <includes id="TreeManagementMessage__m_8h" name="TreeManagementMessage_m.h" local="no" imported="no">TreeManagementMessage_m.h</includes>
    <includes id="CoordBasedRouting_8h" name="CoordBasedRouting.h" local="no" imported="no">CoordBasedRouting.h</includes>
    <class kind="class">AbstractTreeMsgClient</class>
    <class kind="class">GlobalViewBuilder</class>
  </compound>
  <compound kind="file">
    <name>greatGathering.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/simplegameclient/</path>
    <filename>greatGathering_8cc</filename>
    <includes id="greatGathering_8h" name="greatGathering.h" local="yes" imported="no">greatGathering.h</includes>
  </compound>
  <compound kind="file">
    <name>greatGathering.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/simplegameclient/</path>
    <filename>greatGathering_8h</filename>
    <includes id="MovementGenerator_8h" name="MovementGenerator.h" local="yes" imported="no">MovementGenerator.h</includes>
    <class kind="class">greatGathering</class>
  </compound>
  <compound kind="file">
    <name>groupRoaming.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/simplegameclient/</path>
    <filename>groupRoaming_8cc</filename>
    <includes id="groupRoaming_8h" name="groupRoaming.h" local="yes" imported="no">groupRoaming.h</includes>
  </compound>
  <compound kind="file">
    <name>groupRoaming.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/simplegameclient/</path>
    <filename>groupRoaming_8h</filename>
    <includes id="MovementGenerator_8h" name="MovementGenerator.h" local="yes" imported="no">MovementGenerator.h</includes>
    <class kind="class">groupRoaming</class>
  </compound>
  <compound kind="file">
    <name>HashFunc.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>HashFunc_8h</filename>
    <includes id="oversim__mapset_8h" name="oversim_mapset.h" local="no" imported="no">oversim_mapset.h</includes>
    <includes id="oversim__byteswap_8h" name="oversim_byteswap.h" local="no" imported="no">oversim_byteswap.h</includes>
    <includes id="TransportAddress_8h" name="TransportAddress.h" local="no" imported="no">TransportAddress.h</includes>
    <class kind="struct">__gnu_cxx::hash&lt; IPvXAddress &gt;</class>
    <class kind="struct">__gnu_cxx::hash&lt; TransportAddress &gt;</class>
    <namespace>__gnu_cxx</namespace>
  </compound>
  <compound kind="file">
    <name>hashWatch.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>hashWatch_8h</filename>
    <includes id="oversim__mapset_8h" name="oversim_mapset.h" local="no" imported="no">oversim_mapset.h</includes>
    <class kind="class">cHashSetWatcher</class>
    <class kind="class">cDequeWatcher</class>
    <class kind="class">cHashMapWatcher</class>
    <class kind="class">cConstHashMapWatcher</class>
    <class kind="class">cPointerMapWatcher</class>
    <class kind="class">cStdMultiMapWatcher</class>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_UNORDERED_SET</name>
      <anchorfile>hashWatch_8h.html</anchorfile>
      <anchor>a2e51703608bdb5d1f37f4ba7d96f72d0</anchor>
      <arglist>(variable)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_DEQUE</name>
      <anchorfile>hashWatch_8h.html</anchorfile>
      <anchor>a6c82de4985d07d27ae298e3defed5e6c</anchor>
      <arglist>(variable)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_UNORDERED_MAP</name>
      <anchorfile>hashWatch_8h.html</anchorfile>
      <anchor>ae15520d5e275d3c6aef5da79fb633201</anchor>
      <arglist>(m)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_POINTER_MAP</name>
      <anchorfile>hashWatch_8h.html</anchorfile>
      <anchor>ae5678c8f482eb1afddaea5022e654865</anchor>
      <arglist>(m)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_MULTIMAP</name>
      <anchorfile>hashWatch_8h.html</anchorfile>
      <anchor>ac3751704303addd5d8f0a36286e70780</anchor>
      <arglist>(m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createHashSetWatcher</name>
      <anchorfile>hashWatch_8h.html</anchorfile>
      <anchor>a83602c00f7b3c23c74c687cf4f335d6b</anchor>
      <arglist>(const char *varname, UNORDERED_SET&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createDequeWatcher</name>
      <anchorfile>hashWatch_8h.html</anchorfile>
      <anchor>a144b502aa25bbf109937fd0ebcfb0cea</anchor>
      <arglist>(const char *varname, std::deque&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createHashMapWatcher</name>
      <anchorfile>hashWatch_8h.html</anchorfile>
      <anchor>a2153f9369ed76a3f7277c1318c60534f</anchor>
      <arglist>(const char *varname, UNORDERED_MAP&lt; KeyT, ValueT, CmpT &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createHashMapWatcher</name>
      <anchorfile>hashWatch_8h.html</anchorfile>
      <anchor>aaf8adc6806ab36cbbf86dccca68a5544</anchor>
      <arglist>(const char *varname, const UNORDERED_MAP&lt; KeyT, ValueT, CmpT &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createPointerMapWatcher</name>
      <anchorfile>hashWatch_8h.html</anchorfile>
      <anchor>a2bd2d3ef29cd676d57976306856bcf55</anchor>
      <arglist>(const char *varname, std::map&lt; KeyT, ValueT, CmpT &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createStdMultiMapWatcher</name>
      <anchorfile>hashWatch_8h.html</anchorfile>
      <anchor>a06f1be9386f061969fe99d2db52e0cfa</anchor>
      <arglist>(const char *varname, std::multimap&lt; KeyT, ValueT, CmpT &gt; &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HMessage_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/htopology/</path>
    <filename>HMessage__m_8h</filename>
    <includes id="TransportAddress_8h" name="TransportAddress.h" local="no" imported="no">TransportAddress.h</includes>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <includes id="HNode_8h" name="HNode.h" local="yes" imported="no">HNode.h</includes>
    <includes id="HStructs_8h" name="HStructs.h" local="yes" imported="no">HStructs.h</includes>
    <class kind="class">HCapacityCall</class>
    <class kind="class">HCapacityResponse</class>
    <class kind="class">HGetParametersCall</class>
    <class kind="class">HGetParametersResponse</class>
    <class kind="class">HSelectParentCall</class>
    <class kind="class">HSelectParentResponse</class>
    <class kind="class">HJoinCall</class>
    <class kind="class">HJoinResponse</class>
    <class kind="class">HVideoSegmentCall</class>
    <class kind="class">HLeaveOverlayCall</class>
    <class kind="class">HLeaveOverlayResponse</class>
    <class kind="class">HNewParentSelectedCall</class>
    <class kind="class">HResponsibilityAsParentCall</class>
    <class kind="class">HScheduleSegmentsCall</class>
    <class kind="class">HScheduleSegmentsResponse</class>
    <class kind="class">HSwitchToRescueModeCall</class>
    <class kind="class">HGetChildrenCall</class>
    <class kind="class">HGetChildrenResponse</class>
    <class kind="class">HMessage</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JOINCALL_L</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a8dd5c744e569287e88c98abd1c7480ab</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HJOINRESPONSE_L</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>ad225612599a05a2d6ede017a66e1bc6e</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HGETCHILDRENCALL_L</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>aaff474e254f717932723ce8d97e80e84</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HGETCHILDRENRESPONSE_L</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a2a366f8af51cfee04bbc08f1600b9f2d</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HCAPACITYCALL_L</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>af5ef80334730f2ed90007fdff6e9f033</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HCAPACITYRESPONSE_L</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>afbe25456a15cf75dce17c9f277c544bf</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HSELECTPARENTCALL_L</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>acc860e1c905eae064038ba0970dfc606</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HSELECTPARENTRESPONSE_L</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a07ccdff98d89a2ac65ed24ac01c59e75</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HVIDEOSEGMENTCALL_L</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a7172f54a702de875eac790f290fdda3d</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HLEAVEOVERLAYCALL_L</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>abc8f19a99f908870e9098f05537f1b41</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HLEAVEOVERLAYRESPONSE_L</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a48cdf2916ab7f8b0c398861efd858539</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HNEWPARENTSELECTEDCALL_L</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>ac86a1f11ba429c7d865cfb03918ae2b5</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HRESPONSIBILITYASPARENTCALL_L</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>ade8946990b4e7e20689ad62504e9c0a5</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HVIDEOSEGMENT_L</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a15e9d273cbc277d7459d40d06b353a4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HSCHEDULESEGMENTSCALL_L</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>aca82bbcbb5aa8b8cf531d550a9216fe2</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HSCHEDULESEGMENTSRESPONSE_L</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a45044ae8a54524ab75754b16f11e97ce</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HSWITCHTORESCUEMODECALL_L</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a5f88529716db6da609a130c02b82ec7a</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HGETPARAMETERSCALL_L</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a169fcf09da13c40bf9770e18e6ed9714</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HGETPARAMETERSRESPONSE_L</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a02b7f8e42f2f59e73f21f8522fe8f040</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="enumeration">
      <name>MessageType</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>ac6606ebe91c8ac66a2c314c79f5ab013</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MYMSG_PING</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>ac6606ebe91c8ac66a2c314c79f5ab013a460221e053aedd5c97e2614abf6f14ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MYMSG_PONG</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>ac6606ebe91c8ac66a2c314c79f5ab013a2970f35929b2f861889f758349b564f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCPEXMSG_PING</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>ac6606ebe91c8ac66a2c314c79f5ab013a7d216e14f2cada95987fb4acb26d7d55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCPEXMSG_PONG</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>ac6606ebe91c8ac66a2c314c79f5ab013a381fa72411d7ec03ebf83c2fad99e7c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>M_JOIN</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>ac6606ebe91c8ac66a2c314c79f5ab013acd29641e94a490eff42f9405ff3bfadd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>M_LEAVE</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>ac6606ebe91c8ac66a2c314c79f5ab013a2b7a0f4663b009a55deb3d397a72f1d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>M_QUERY_NODE</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>ac6606ebe91c8ac66a2c314c79f5ab013a44576a84484d57925ed8848278d4defb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>M_QUERY_SEGMENT</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>ac6606ebe91c8ac66a2c314c79f5ab013a19bf83a01d9cdeb9d6f6b65f62f67346</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>M_RESCUE</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>ac6606ebe91c8ac66a2c314c79f5ab013a0579bc3b657a2fab0696e13e02439d99</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a6c78b482e22ea43a6765add3f5668e3e</anchor>
      <arglist>(cCommBuffer *b, HCapacityCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a1a2007d49d900de23586076dfc40baa0</anchor>
      <arglist>(cCommBuffer *b, HCapacityCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>abaa198786da7f6c205d10be1e03c39f1</anchor>
      <arglist>(cCommBuffer *b, HCapacityResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a3fbd50acab9059183a955d6e8409ee0f</anchor>
      <arglist>(cCommBuffer *b, HCapacityResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a9e680ec7485a618d648549e97d6ba704</anchor>
      <arglist>(cCommBuffer *b, HGetParametersCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a42dfa12dadc63b1f4421575079205eec</anchor>
      <arglist>(cCommBuffer *b, HGetParametersCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>abcd4fd062e950d8f8deabd5b0826b0ab</anchor>
      <arglist>(cCommBuffer *b, HGetParametersResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>ac3d2d0a6a9f5ec88019283d763499b97</anchor>
      <arglist>(cCommBuffer *b, HGetParametersResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a933de6922976dc897b9e10cce8e67415</anchor>
      <arglist>(cCommBuffer *b, HSelectParentCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>ace812c5c897dfed7656dede43a2e161e</anchor>
      <arglist>(cCommBuffer *b, HSelectParentCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a4c6179d3d6c8305d9c14a3312c60cc05</anchor>
      <arglist>(cCommBuffer *b, HSelectParentResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>ad148ba34a432f2c3df4354ebaf0e6f17</anchor>
      <arglist>(cCommBuffer *b, HSelectParentResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>ae63906442646ba4cc77899a71c7fe3bd</anchor>
      <arglist>(cCommBuffer *b, HJoinCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a295d1f68e3fdf3197b9b3f4ede52cfc9</anchor>
      <arglist>(cCommBuffer *b, HJoinCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a4887cdf40b2750ffd7ce793539f498ad</anchor>
      <arglist>(cCommBuffer *b, HJoinResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a3232e4ddf8527aaf68c1c5d004d4ce60</anchor>
      <arglist>(cCommBuffer *b, HJoinResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>ae869285b7d9748e9ff7f128a55f1a02b</anchor>
      <arglist>(cCommBuffer *b, HVideoSegmentCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>ab392ef2f0647d8600433a87ae9540f2c</anchor>
      <arglist>(cCommBuffer *b, HVideoSegmentCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>ac4c811284ce92d6ebabd42d756cee481</anchor>
      <arglist>(cCommBuffer *b, HLeaveOverlayCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a2fe61e019c08aed7e29bfb07e9998efd</anchor>
      <arglist>(cCommBuffer *b, HLeaveOverlayCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>aaf2810cfa003f08625b19fbb00163457</anchor>
      <arglist>(cCommBuffer *b, HLeaveOverlayResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a432a6d32a28815c2f30c7e071c09c9f7</anchor>
      <arglist>(cCommBuffer *b, HLeaveOverlayResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a032c6b0df7d64a0fdd7c508da63804a7</anchor>
      <arglist>(cCommBuffer *b, HNewParentSelectedCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a45792bfdccbff400d957daea4e370b53</anchor>
      <arglist>(cCommBuffer *b, HNewParentSelectedCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a4a32de01ed1995ea7bbacf16390e5b12</anchor>
      <arglist>(cCommBuffer *b, HResponsibilityAsParentCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a4bd937a6e9d466464df2b4b525dd87ad</anchor>
      <arglist>(cCommBuffer *b, HResponsibilityAsParentCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a4c5ab7d44f7a6055d5e1493e3b19329e</anchor>
      <arglist>(cCommBuffer *b, HScheduleSegmentsCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a9deed554fcaf712cf0c826303c07405d</anchor>
      <arglist>(cCommBuffer *b, HScheduleSegmentsCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>ab74b5aa88e8e76e5723d73dd5b879ac4</anchor>
      <arglist>(cCommBuffer *b, HScheduleSegmentsResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>abee347c246091e291e44870fc5076363</anchor>
      <arglist>(cCommBuffer *b, HScheduleSegmentsResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a90c9d6ed2c8b9178ef133f8d57fdd8ef</anchor>
      <arglist>(cCommBuffer *b, HSwitchToRescueModeCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a899a209fc70d7abbaf36f5f5bd96eb83</anchor>
      <arglist>(cCommBuffer *b, HSwitchToRescueModeCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a6818457d72f5b50449b5506079e9d6b1</anchor>
      <arglist>(cCommBuffer *b, HGetChildrenCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a626985010cbe3adef5041c820d97e87c</anchor>
      <arglist>(cCommBuffer *b, HGetChildrenCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a13dd282dcb5d965885bb543331319296</anchor>
      <arglist>(cCommBuffer *b, HGetChildrenResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a89e5a58b9ff8fd163269669751896e7e</anchor>
      <arglist>(cCommBuffer *b, HGetChildrenResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a75396f8244789ac2e351f8e525aeec3e</anchor>
      <arglist>(cCommBuffer *b, HMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>HMessage__m_8h.html</anchorfile>
      <anchor>a3f5d61bd4abf05882185861360142385</anchor>
      <arglist>(cCommBuffer *b, HMessage &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HNode.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/htopology/</path>
    <filename>HNode_8cc</filename>
    <includes id="HNode_8h" name="HNode.h" local="yes" imported="no">HNode.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>HNode_8cc.html</anchorfile>
      <anchor>a72405508299f6a983e18ae3e13581dc9</anchor>
      <arglist>(std::ostream &amp;os, const HNode &amp;node)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HNode.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/htopology/</path>
    <filename>HNode_8h</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="NodeVector_8h" name="NodeVector.h" local="no" imported="no">NodeVector.h</includes>
    <class kind="class">HNode</class>
  </compound>
  <compound kind="file">
    <name>hotspotRoaming.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/simplegameclient/</path>
    <filename>hotspotRoaming_8cc</filename>
    <includes id="hotspotRoaming_8h" name="hotspotRoaming.h" local="yes" imported="no">hotspotRoaming.h</includes>
    <includes id="StringConvert_8h" name="StringConvert.h" local="yes" imported="no">StringConvert.h</includes>
  </compound>
  <compound kind="file">
    <name>hotspotRoaming.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/simplegameclient/</path>
    <filename>hotspotRoaming_8h</filename>
    <includes id="MovementGenerator_8h" name="MovementGenerator.h" local="yes" imported="no">MovementGenerator.h</includes>
    <class kind="class">hotspotRoaming</class>
    <class kind="struct">hotspotRoaming::Hotspot</class>
  </compound>
  <compound kind="file">
    <name>hstreaming.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/hstreaming/</path>
    <filename>hstreaming_8cc</filename>
    <includes id="UnderlayConfigurator_8h" name="UnderlayConfigurator.h" local="yes" imported="no">UnderlayConfigurator.h</includes>
    <includes id="hstreaming_8h" name="hstreaming.h" local="yes" imported="no">hstreaming.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>hstreaming_8cc.html</anchorfile>
      <anchor>a1a758ea6b58e4725bb5c04ce0a4922e5</anchor>
      <arglist>(HStreaming)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getComponentName</name>
      <anchorfile>hstreaming_8cc.html</anchorfile>
      <anchor>a83f8d8abc278d370da3f4442bfd9f8eb</anchor>
      <arglist>(int id)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>hstreaming.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/hstreaming/</path>
    <filename>hstreaming_8h</filename>
    <includes id="BaseApp_8h" name="BaseApp.h" local="yes" imported="no">BaseApp.h</includes>
    <class kind="class">HStreaming</class>
  </compound>
  <compound kind="file">
    <name>HStructs.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/htopology/</path>
    <filename>HStructs_8h</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <class kind="struct">HVideoSegment</class>
    <class kind="struct">HNodeReplacement</class>
    <class kind="struct">RankingParameters</class>
    <class kind="class">RescueNode</class>
    <member kind="define">
      <type>#define</type>
      <name>SEGMENT_SIZE</name>
      <anchorfile>HStructs_8h.html</anchorfile>
      <anchor>acbe07a3c3fe2056125230c357f85b870</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const RankingParameters</type>
      <name>RankingFactors</name>
      <anchorfile>HStructs_8h.html</anchorfile>
      <anchor>af269e0fb2e187942ccac531df3b56922</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HTopology.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/htopology/</path>
    <filename>HTopology_8cc</filename>
    <includes id="HTopology_8h" name="HTopology.h" local="yes" imported="no">HTopology.h</includes>
    <includes id="HMessage__m_8h" name="HMessage_m.h" local="yes" imported="no">HMessage_m.h</includes>
    <includes id="RpcMacros_8h" name="RpcMacros.h" local="no" imported="no">rpcmacros.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>BIGBIT</name>
      <anchorfile>HTopology_8cc.html</anchorfile>
      <anchor>a4b4493d6c307b977013a6585496ab2ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>HTopology_8cc.html</anchorfile>
      <anchor>a689e3eaa447f1abfb8c189dbbbb844d2</anchor>
      <arglist>(HTopology)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>tToString</name>
      <anchorfile>HTopology_8cc.html</anchorfile>
      <anchor>a49e288f390ec2132acabe8fc138995df</anchor>
      <arglist>(T a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareRescueNodes</name>
      <anchorfile>HTopology_8cc.html</anchorfile>
      <anchor>a77f588989b908592d485127d50260317</anchor>
      <arglist>(const RescueNode &amp;L, const RescueNode &amp;R)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HTopology.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/htopology/</path>
    <filename>HTopology_8h</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="BootstrapList_8h" name="BootstrapList.h" local="no" imported="no">BootstrapList.h</includes>
    <includes id="BaseOverlay_8h" name="BaseOverlay.h" local="yes" imported="no">BaseOverlay.h</includes>
    <includes id="HMessage__m_8h" name="HMessage_m.h" local="yes" imported="no">HMessage_m.h</includes>
    <includes id="HNode_8h" name="HNode.h" local="yes" imported="no">HNode.h</includes>
    <includes id="HStructs_8h" name="HStructs.h" local="yes" imported="no">HStructs.h</includes>
    <class kind="class">HTopology</class>
    <member kind="define">
      <type>#define</type>
      <name>GENERAL_MODE</name>
      <anchorfile>HTopology_8h.html</anchorfile>
      <anchor>ae299d97a2e865713de7c2f194fc15efb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RESCUE_MODE</name>
      <anchorfile>HTopology_8h.html</anchorfile>
      <anchor>a27424de5fbaef3125925573b54f4df8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PARAMETERS_RESPONSE_BUFFER</name>
      <anchorfile>HTopology_8h.html</anchorfile>
      <anchor>a32b767e7f465f90c0052addaa96f0f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; OverlayKey, HNode &gt;</type>
      <name>KeyToNodeMap</name>
      <anchorfile>HTopology_8h.html</anchorfile>
      <anchor>a5f26a0c66e215ca333f9b071dc6db1ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KeyToNodeMap::iterator</type>
      <name>MapIterator</name>
      <anchorfile>HTopology_8h.html</anchorfile>
      <anchor>aa69f8fb601ac3917aebd2e625971b246</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; OverlayKey, RescueNode &gt;</type>
      <name>KeyToRescueNodeMap</name>
      <anchorfile>HTopology_8h.html</anchorfile>
      <anchor>a2f8610f5a68de520f1a124bd5abf6632</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KeyToRescueNodeMap::iterator</type>
      <name>RescueMapIterator</name>
      <anchorfile>HTopology_8h.html</anchorfile>
      <anchor>a44bc56e4e98cfc2233186d7ec06411fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>I3.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/i3/</path>
    <filename>I3_8cc</filename>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <includes id="GlobalNodeListAccess_8h" name="GlobalNodeListAccess.h" local="no" imported="no">GlobalNodeListAccess.h</includes>
    <includes id="UnderlayConfiguratorAccess_8h" name="UnderlayConfiguratorAccess.h" local="no" imported="no">UnderlayConfiguratorAccess.h</includes>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="SHA1_8h" name="SHA1.h" local="yes" imported="no">SHA1.h</includes>
    <includes id="TriggerTable_8h" name="TriggerTable.h" local="yes" imported="no">TriggerTable.h</includes>
    <includes id="I3Identifier_8h" name="I3Identifier.h" local="yes" imported="no">I3Identifier.h</includes>
    <includes id="I3IPAddress_8h" name="I3IPAddress.h" local="yes" imported="no">I3IPAddress.h</includes>
    <includes id="I3SubIdentifier_8h" name="I3SubIdentifier.h" local="yes" imported="no">I3SubIdentifier.h</includes>
    <includes id="I3IdentifierStack_8h" name="I3IdentifierStack.h" local="yes" imported="no">I3IdentifierStack.h</includes>
    <includes id="I3Trigger_8h" name="I3Trigger.h" local="yes" imported="no">I3Trigger.h</includes>
    <includes id="I3Message__m_8h" name="I3Message_m.h" local="yes" imported="no">I3Message_m.h</includes>
    <includes id="I3Message_8h" name="I3Message.h" local="yes" imported="no">I3Message.h</includes>
    <includes id="I3_8h" name="I3.h" local="yes" imported="no">I3.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>I3_8cc.html</anchorfile>
      <anchor>a4de5761d6de90d117e33dc7314ddc331</anchor>
      <arglist>(std::ostream &amp;os, const I3TriggerSet &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>I3_8cc.html</anchorfile>
      <anchor>abac235bc461dea3ccf40b50b9898b6f2</anchor>
      <arglist>(I3)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>I3.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/i3/</path>
    <filename>I3_8h</filename>
    <includes id="I3Trigger_8h" name="I3Trigger.h" local="yes" imported="no">I3Trigger.h</includes>
    <includes id="I3Identifier_8h" name="I3Identifier.h" local="yes" imported="no">I3Identifier.h</includes>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="I3Message_8h" name="I3Message.h" local="yes" imported="no">I3Message.h</includes>
    <includes id="BaseApp_8h" name="BaseApp.h" local="no" imported="no">BaseApp.h</includes>
    <class kind="class">I3TriggerSet</class>
    <class kind="class">I3</class>
    <member kind="typedef">
      <type>std::map&lt; I3Identifier, I3TriggerSet &gt;</type>
      <name>I3TriggerTable</name>
      <anchorfile>I3_8h.html</anchorfile>
      <anchor>a8472afa61e8b0e8b6900212558ff418e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>I3Anycast.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/i3/i3Apps/</path>
    <filename>I3Anycast_8cc</filename>
    <includes id="I3BaseApp_8h" name="I3BaseApp.h" local="yes" imported="no">I3BaseApp.h</includes>
    <class kind="class">I3Anycast</class>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>I3Anycast_8cc.html</anchorfile>
      <anchor>a1ba8a47ce6ba58b513d1ae99406dc6aa</anchor>
      <arglist>(I3Anycast)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>I3BaseApp.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/i3/</path>
    <filename>I3BaseApp_8cc</filename>
    <includes id="GlobalNodeListAccess_8h" name="GlobalNodeListAccess.h" local="no" imported="no">GlobalNodeListAccess.h</includes>
    <includes id="InitStages_8h" name="InitStages.h" local="no" imported="no">InitStages.h</includes>
    <includes id="UnderlayConfigurator_8h" name="UnderlayConfigurator.h" local="no" imported="no">UnderlayConfigurator.h</includes>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="BootstrapList_8h" name="BootstrapList.h" local="no" imported="no">BootstrapList.h</includes>
    <includes id="I3Trigger_8h" name="I3Trigger.h" local="yes" imported="no">I3Trigger.h</includes>
    <includes id="I3IdentifierStack_8h" name="I3IdentifierStack.h" local="yes" imported="no">I3IdentifierStack.h</includes>
    <includes id="I3Message_8h" name="I3Message.h" local="yes" imported="no">I3Message.h</includes>
    <includes id="I3BaseApp_8h" name="I3BaseApp.h" local="yes" imported="no">I3BaseApp.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>I3BaseApp_8cc.html</anchorfile>
      <anchor>a0ed35d3d938ec542ed156c5246c4ef0d</anchor>
      <arglist>(std::ostream &amp;os, const I3BaseApp::I3CachedServer &amp;server)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>I3BaseApp.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/i3/</path>
    <filename>I3BaseApp_8h</filename>
    <includes id="I3Trigger_8h" name="I3Trigger.h" local="yes" imported="no">I3Trigger.h</includes>
    <includes id="I3IdentifierStack_8h" name="I3IdentifierStack.h" local="yes" imported="no">I3IdentifierStack.h</includes>
    <includes id="I3Message_8h" name="I3Message.h" local="yes" imported="no">I3Message.h</includes>
    <includes id="I3IPAddress_8h" name="I3IPAddress.h" local="yes" imported="no">I3IPAddress.h</includes>
    <includes id="I3Identifier_8h" name="I3Identifier.h" local="yes" imported="no">I3Identifier.h</includes>
    <class kind="class">I3BaseApp</class>
    <class kind="struct">I3BaseApp::I3CachedServer</class>
  </compound>
  <compound kind="file">
    <name>I3Composite.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/i3/i3Apps/</path>
    <filename>I3Composite_8cc</filename>
    <includes id="I3BaseApp_8h" name="I3BaseApp.h" local="yes" imported="no">I3BaseApp.h</includes>
    <class kind="struct">I3CompositeMessage</class>
    <class kind="class">I3Composite</class>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>I3Composite_8cc.html</anchorfile>
      <anchor>a77f1315b8a8cc547e5be319bcd2954d9</anchor>
      <arglist>(I3Composite)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>I3HostMobility.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/i3/i3Apps/</path>
    <filename>I3HostMobility_8cc</filename>
    <includes id="I3BaseApp_8h" name="I3BaseApp.h" local="yes" imported="no">I3BaseApp.h</includes>
    <includes id="I3_8h" name="I3.h" local="yes" imported="no">I3.h</includes>
    <class kind="struct">MessageContent</class>
    <class kind="class">I3HostMobility</class>
    <member kind="define">
      <type>#define</type>
      <name>NUM_PARTNERS</name>
      <anchorfile>I3HostMobility_8cc.html</anchorfile>
      <anchor>a728d4250790b57d673c41a5945bff091</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>MsgType</name>
      <anchorfile>I3HostMobility_8cc.html</anchorfile>
      <anchor>a2ea0bb09adcce7f655e8f8ee8d30561b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MSG_TIMER</name>
      <anchorfile>I3HostMobility_8cc.html</anchorfile>
      <anchor>a2ea0bb09adcce7f655e8f8ee8d30561baef3dac7daa2bc74a63fd3c1238526c2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MSG_TIMER_RESET_ID</name>
      <anchorfile>I3HostMobility_8cc.html</anchorfile>
      <anchor>a2ea0bb09adcce7f655e8f8ee8d30561ba03a319bf9d66c53639001d3f05d193ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MSG_TIMER_REDISCOVER</name>
      <anchorfile>I3HostMobility_8cc.html</anchorfile>
      <anchor>a2ea0bb09adcce7f655e8f8ee8d30561bace1d6f725c62fbb40a3222d472bfa381</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MSG_QUERY_ID</name>
      <anchorfile>I3HostMobility_8cc.html</anchorfile>
      <anchor>a2ea0bb09adcce7f655e8f8ee8d30561bad31bb13ce0736aa36c832485cc010449</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MSG_REPLY_ID</name>
      <anchorfile>I3HostMobility_8cc.html</anchorfile>
      <anchor>a2ea0bb09adcce7f655e8f8ee8d30561ba8acfdc74373cd25351ad851f060edde0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MSG_PING</name>
      <anchorfile>I3HostMobility_8cc.html</anchorfile>
      <anchor>a2ea0bb09adcce7f655e8f8ee8d30561baadfe01bd4c9e50a1930619703ba3217d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MSG_REPLY</name>
      <anchorfile>I3HostMobility_8cc.html</anchorfile>
      <anchor>a2ea0bb09adcce7f655e8f8ee8d30561bac64ad8022fee74b7d846396b994be151</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>I3HostMobility_8cc.html</anchorfile>
      <anchor>aab288a564cae8dfe97eb455e4596b197</anchor>
      <arglist>(I3HostMobility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>I3Identifier.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/i3/</path>
    <filename>I3Identifier_8cc</filename>
    <includes id="I3Identifier_8h" name="I3Identifier.h" local="yes" imported="no">I3Identifier.h</includes>
    <includes id="SHA1_8h" name="SHA1.h" local="yes" imported="no">SHA1.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>I3Identifier_8cc.html</anchorfile>
      <anchor>a3bc41a684592e3ad5d8f59c090dee174</anchor>
      <arglist>(std::ostream &amp;os, const I3Identifier &amp;id)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>I3Identifier.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/i3/</path>
    <filename>I3Identifier_8h</filename>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <class kind="class">I3Identifier</class>
    <member kind="define">
      <type>#define</type>
      <name>DEFAULT_PREFIX_LENGTH</name>
      <anchorfile>I3Identifier_8h.html</anchorfile>
      <anchor>a929c5415a3b52636121cb521864bb082</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFAULT_KEY_LENGTH</name>
      <anchorfile>I3Identifier_8h.html</anchorfile>
      <anchor>a9220b48bd21153fb98f8a034142542a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>I3IdentifierStack.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/i3/</path>
    <filename>I3IdentifierStack_8cc</filename>
    <includes id="I3IdentifierStack_8h" name="I3IdentifierStack.h" local="yes" imported="no">I3IdentifierStack.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>I3IdentifierStack_8cc.html</anchorfile>
      <anchor>ab6749b6a4684dff1e6122a84f92ecc99</anchor>
      <arglist>(std::ostream &amp;os, const I3IdentifierStack &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>I3IdentifierStack.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/i3/</path>
    <filename>I3IdentifierStack_8h</filename>
    <includes id="I3Identifier_8h" name="I3Identifier.h" local="yes" imported="no">I3Identifier.h</includes>
    <includes id="I3IPAddress_8h" name="I3IPAddress.h" local="yes" imported="no">I3IPAddress.h</includes>
    <includes id="I3SubIdentifier_8h" name="I3SubIdentifier.h" local="yes" imported="no">I3SubIdentifier.h</includes>
    <class kind="class">I3IdentifierStack</class>
  </compound>
  <compound kind="file">
    <name>I3IPAddress.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/i3/</path>
    <filename>I3IPAddress_8cc</filename>
    <includes id="I3IPAddress_8h" name="I3IPAddress.h" local="yes" imported="no">I3IPAddress.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>I3IPAddress_8cc.html</anchorfile>
      <anchor>a0eec4f4fd3808b6b7e44b7d47cf31027</anchor>
      <arglist>(std::ostream &amp;os, const I3IPAddress &amp;ip)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>I3IPAddress.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/i3/</path>
    <filename>I3IPAddress_8h</filename>
    <includes id="TransportAddress_8h" name="TransportAddress.h" local="no" imported="no">TransportAddress.h</includes>
    <class kind="struct">I3IPAddress</class>
  </compound>
  <compound kind="file">
    <name>I3LatencyStretch.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/i3/i3Apps/</path>
    <filename>I3LatencyStretch_8cc</filename>
    <includes id="I3BaseApp_8h" name="I3BaseApp.h" local="yes" imported="no">I3BaseApp.h</includes>
    <includes id="I3_8h" name="I3.h" local="yes" imported="no">I3.h</includes>
    <class kind="struct">NodeIdentity</class>
    <class kind="struct">LatencyInfo</class>
    <class kind="struct">MsgContent</class>
    <class kind="class">I3LatencyStretch</class>
    <member kind="define">
      <type>#define</type>
      <name>TRIGGER_TIMER</name>
      <anchorfile>I3LatencyStretch_8cc.html</anchorfile>
      <anchor>ab715b208b88f3eb71f69395a4128b24d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STRETCH_HELLO</name>
      <anchorfile>I3LatencyStretch_8cc.html</anchorfile>
      <anchor>a349f153b3bac1f7e5ddaab07355a9d17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STRETCH_HELLOACK</name>
      <anchorfile>I3LatencyStretch_8cc.html</anchorfile>
      <anchor>a40f7e30700a2c3c5e668d5e2e65dfcd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STRETCH_I3MSG</name>
      <anchorfile>I3LatencyStretch_8cc.html</anchorfile>
      <anchor>a3b0f3a8c849fece52340fa2d45de32af</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STRETCH_IPMSG</name>
      <anchorfile>I3LatencyStretch_8cc.html</anchorfile>
      <anchor>a6ba2b221fd8366184e60e0c6afb83878</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>USE_NO_SAMPLING</name>
      <anchorfile>I3LatencyStretch_8cc.html</anchorfile>
      <anchor>af1121a5173a4fb0a4d278dc3f04ddc5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>USE_QUERY_FLAG</name>
      <anchorfile>I3LatencyStretch_8cc.html</anchorfile>
      <anchor>a1c985a4179ff7c416c6a232a81122d4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>USE_CLOSEST_ID</name>
      <anchorfile>I3LatencyStretch_8cc.html</anchorfile>
      <anchor>a790de7895216523a8111d6f7d67f5465</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>USE_SAMPLING</name>
      <anchorfile>I3LatencyStretch_8cc.html</anchorfile>
      <anchor>a933db5eee1c5161d290ab0ee35374f85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Stats</name>
      <anchorfile>I3LatencyStretch_8cc.html</anchorfile>
      <anchor>ad28c24e82986133459dee232a5360bc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STAT_IP</name>
      <anchorfile>I3LatencyStretch_8cc.html</anchorfile>
      <anchor>ad28c24e82986133459dee232a5360bc4a919cfdcfe53b4629f38e1e9e78628464</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STAT_I3</name>
      <anchorfile>I3LatencyStretch_8cc.html</anchorfile>
      <anchor>ad28c24e82986133459dee232a5360bc4a152683d381b0e713898c7bd4c3459ddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STAT_RATIO</name>
      <anchorfile>I3LatencyStretch_8cc.html</anchorfile>
      <anchor>ad28c24e82986133459dee232a5360bc4a42595a3908827a45f4aac322e206e00f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUM_STATS</name>
      <anchorfile>I3LatencyStretch_8cc.html</anchorfile>
      <anchor>ad28c24e82986133459dee232a5360bc4a750f92d9db7dcbbfdec0de1e6ef5e7d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STAT_CHANGE</name>
      <anchorfile>I3LatencyStretch_8cc.html</anchorfile>
      <anchor>ad28c24e82986133459dee232a5360bc4ae2829d757aa42f71a9f2299ed13b825c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STAT_RX</name>
      <anchorfile>I3LatencyStretch_8cc.html</anchorfile>
      <anchor>ad28c24e82986133459dee232a5360bc4ae3b2958235a7345ee56b73583609c858</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STAT_WRONG</name>
      <anchorfile>I3LatencyStretch_8cc.html</anchorfile>
      <anchor>ad28c24e82986133459dee232a5360bc4adfe2253db3cdca19949247ce3af5c0c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUM_STATS</name>
      <anchorfile>I3LatencyStretch_8cc.html</anchorfile>
      <anchor>ad28c24e82986133459dee232a5360bc4a750f92d9db7dcbbfdec0de1e6ef5e7d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>I3LatencyStretch_8cc.html</anchorfile>
      <anchor>a6978f25eddcc059fadd8ac9b90238ea0</anchor>
      <arglist>(I3LatencyStretch)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static cStdDev</type>
      <name>stats</name>
      <anchorfile>I3LatencyStretch_8cc.html</anchorfile>
      <anchor>a7ed8351ae8a180bc15f7755236dc19b0</anchor>
      <arglist>[NUM_STATS]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>statsDumped</name>
      <anchorfile>I3LatencyStretch_8cc.html</anchorfile>
      <anchor>a4ff1999433d14714ea9199c018649dfe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>I3Message.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/i3/</path>
    <filename>I3Message_8cc</filename>
    <includes id="I3Message_8h" name="I3Message.h" local="yes" imported="no">I3Message.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>I3Message_8cc.html</anchorfile>
      <anchor>aef09cbc2b2257d62cf73c392a35b846b</anchor>
      <arglist>(I3SendPacketMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>I3Message_8cc.html</anchorfile>
      <anchor>ad167b8402ba8e77bb9f5b1dfd8414589</anchor>
      <arglist>(I3RemoveTriggerMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>I3Message_8cc.html</anchorfile>
      <anchor>ac18d982a32b68b0457edaa7e65e3d4cd</anchor>
      <arglist>(I3InsertTriggerMessage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>I3Message_8cc.html</anchorfile>
      <anchor>a3957febfdb2e078c7d53606ef2a60153</anchor>
      <arglist>(I3QueryReplyMessage)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>I3Message.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/i3/</path>
    <filename>I3Message_8h</filename>
    <includes id="I3Message__m_8h" name="I3Message_m.h" local="yes" imported="no">I3Message_m.h</includes>
    <class kind="class">I3InsertTriggerMessage</class>
    <class kind="class">I3RemoveTriggerMessage</class>
    <class kind="class">I3SendPacketMessage</class>
    <class kind="class">I3QueryReplyMessage</class>
  </compound>
  <compound kind="file">
    <name>I3Message_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/i3/</path>
    <filename>I3Message__m_8h</filename>
    <includes id="I3Trigger_8h" name="I3Trigger.h" local="yes" imported="no">I3Trigger.h</includes>
    <includes id="I3IdentifierStack_8h" name="I3IdentifierStack.h" local="yes" imported="no">I3IdentifierStack.h</includes>
    <includes id="I3Identifier_8h" name="I3Identifier.h" local="yes" imported="no">I3Identifier.h</includes>
    <includes id="I3IPAddress_8h" name="I3IPAddress.h" local="yes" imported="no">I3IPAddress.h</includes>
    <class kind="class">I3Message</class>
    <class kind="class">I3InsertTriggerMessage_Base</class>
    <class kind="class">I3QueryReplyMessage_Base</class>
    <class kind="class">I3RemoveTriggerMessage_Base</class>
    <class kind="class">I3SendPacketMessage_Base</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>I3Message__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>I3TYPE_L</name>
      <anchorfile>I3Message__m_8h.html</anchorfile>
      <anchor>ac6f3c75916f91083678f753998e3f37a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>I3BOOL_L</name>
      <anchorfile>I3Message__m_8h.html</anchorfile>
      <anchor>a51e8651681491dc28d9ffb7056d521a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>I3TIME_L</name>
      <anchorfile>I3Message__m_8h.html</anchorfile>
      <anchor>a5a3ecf2d2d20e5283f726c11cfd7044e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INSERT_TRIGGER_L</name>
      <anchorfile>I3Message__m_8h.html</anchorfile>
      <anchor>a2225e9cc2a027ee6c4980135bd2be566</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>QUERY_REPLY_L</name>
      <anchorfile>I3Message__m_8h.html</anchorfile>
      <anchor>ac8918f6a6cd5bc2d0faa06f37017b06d</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REMOVE_TRIGGER_L</name>
      <anchorfile>I3Message__m_8h.html</anchorfile>
      <anchor>aa3d907610b9bf82ececd116606b08990</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SEND_PACKET_L</name>
      <anchorfile>I3Message__m_8h.html</anchorfile>
      <anchor>ae7fce2ecc74dbf0da3e01ffa4b7b4830</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="enumeration">
      <name>I3MessageType</name>
      <anchorfile>I3Message__m_8h.html</anchorfile>
      <anchor>aabd1e55c19381bd63c1b4d47c5409afe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INSERT_TRIGGER</name>
      <anchorfile>I3Message__m_8h.html</anchorfile>
      <anchor>aabd1e55c19381bd63c1b4d47c5409afea2b7960bcdd651d62992e14ccaa29b977</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QUERY_REPLY</name>
      <anchorfile>I3Message__m_8h.html</anchorfile>
      <anchor>aabd1e55c19381bd63c1b4d47c5409afeafb1fb3e4b863935162d5a1ef755938f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REMOVE_TRIGGER</name>
      <anchorfile>I3Message__m_8h.html</anchorfile>
      <anchor>aabd1e55c19381bd63c1b4d47c5409afeaacce412b4be14f90aa78b94ca37da909</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEND_PACKET</name>
      <anchorfile>I3Message__m_8h.html</anchorfile>
      <anchor>aabd1e55c19381bd63c1b4d47c5409afead25076dd974810d50835d534cc94950c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>I3Message__m_8h.html</anchorfile>
      <anchor>a8dd411c38d36578d39456f65b2bcd91a</anchor>
      <arglist>(cCommBuffer *b, I3Message &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>I3Message__m_8h.html</anchorfile>
      <anchor>a6b376c54a19b37305d1d10578005ae32</anchor>
      <arglist>(cCommBuffer *b, I3Message &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>I3Multicast.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/i3/i3Apps/</path>
    <filename>I3Multicast_8cc</filename>
    <includes id="I3BaseApp_8h" name="I3BaseApp.h" local="yes" imported="no">I3BaseApp.h</includes>
    <class kind="class">I3Multicast</class>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>I3Multicast_8cc.html</anchorfile>
      <anchor>afbf16b2c991b794351ce40bffa87e6fc</anchor>
      <arglist>(I3Multicast)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>I3Session.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/i3/i3Apps/</path>
    <filename>I3Session_8cc</filename>
    <includes id="I3BaseApp_8h" name="I3BaseApp.h" local="yes" imported="no">I3BaseApp.h</includes>
    <includes id="I3SessionMessage__m_8h" name="I3SessionMessage_m.h" local="yes" imported="no">I3SessionMessage_m.h</includes>
    <class kind="class">I3SessionServer</class>
    <class kind="class">I3SessionClient</class>
    <class kind="class">I3SessionClientStarter</class>
    <member kind="define">
      <type>#define</type>
      <name>DONT_REMOVE</name>
      <anchorfile>I3Session_8cc.html</anchorfile>
      <anchor>a3f26339d804abee3cba3b637e7feb7fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REMOVE_AT_ONCE</name>
      <anchorfile>I3Session_8cc.html</anchorfile>
      <anchor>ad8f7bbbb32258edfd464f407b8877365</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WAIT_STATIC</name>
      <anchorfile>I3Session_8cc.html</anchorfile>
      <anchor>a9b52e893821ca58cbda7cd38eb62ffb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WAIT_CONFIRMATION</name>
      <anchorfile>I3Session_8cc.html</anchorfile>
      <anchor>a246a223787b61e005e4d04c58ecab60a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_CHANGE_SESSION</name>
      <anchorfile>I3Session_8cc.html</anchorfile>
      <anchor>a8b31d98d333a08f79c5cfb33eb373773</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_REMOVE_TRIGGER</name>
      <anchorfile>I3Session_8cc.html</anchorfile>
      <anchor>a2b38f115941a08759e0dd2aa5a77ee1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Stats</name>
      <anchorfile>I3Session_8cc.html</anchorfile>
      <anchor>ad28c24e82986133459dee232a5360bc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STAT_IP</name>
      <anchorfile>I3Session_8cc.html</anchorfile>
      <anchor>ad28c24e82986133459dee232a5360bc4a919cfdcfe53b4629f38e1e9e78628464</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STAT_I3</name>
      <anchorfile>I3Session_8cc.html</anchorfile>
      <anchor>ad28c24e82986133459dee232a5360bc4a152683d381b0e713898c7bd4c3459ddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STAT_RATIO</name>
      <anchorfile>I3Session_8cc.html</anchorfile>
      <anchor>ad28c24e82986133459dee232a5360bc4a42595a3908827a45f4aac322e206e00f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUM_STATS</name>
      <anchorfile>I3Session_8cc.html</anchorfile>
      <anchor>ad28c24e82986133459dee232a5360bc4a750f92d9db7dcbbfdec0de1e6ef5e7d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STAT_CHANGE</name>
      <anchorfile>I3Session_8cc.html</anchorfile>
      <anchor>ad28c24e82986133459dee232a5360bc4ae2829d757aa42f71a9f2299ed13b825c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STAT_RX</name>
      <anchorfile>I3Session_8cc.html</anchorfile>
      <anchor>ad28c24e82986133459dee232a5360bc4ae3b2958235a7345ee56b73583609c858</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STAT_WRONG</name>
      <anchorfile>I3Session_8cc.html</anchorfile>
      <anchor>ad28c24e82986133459dee232a5360bc4adfe2253db3cdca19949247ce3af5c0c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUM_STATS</name>
      <anchorfile>I3Session_8cc.html</anchorfile>
      <anchor>ad28c24e82986133459dee232a5360bc4a750f92d9db7dcbbfdec0de1e6ef5e7d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>I3Session_8cc.html</anchorfile>
      <anchor>ab16d7bdfe677ea970614c30eba87ac9d</anchor>
      <arglist>(I3SessionServer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>I3Session_8cc.html</anchorfile>
      <anchor>aae1c034c4f417cfb2f120476734d153c</anchor>
      <arglist>(I3SessionClient)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>I3Session_8cc.html</anchorfile>
      <anchor>a58ab69eee4300f4b2cf08ab4720490fd</anchor>
      <arglist>(I3SessionClientStarter)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>I3SessionMessage_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/i3/i3Apps/</path>
    <filename>I3SessionMessage__m_8h</filename>
    <includes id="I3Identifier_8h" name="I3Identifier.h" local="yes" imported="no">I3Identifier.h</includes>
    <class kind="class">SessionMsg</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>I3SessionMessage__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>SessionMsgType</name>
      <anchorfile>I3SessionMessage__m_8h.html</anchorfile>
      <anchor>a8d4fffc8d9d8a98cb0f40a38297a049c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PAYLOAD</name>
      <anchorfile>I3SessionMessage__m_8h.html</anchorfile>
      <anchor>a8d4fffc8d9d8a98cb0f40a38297a049ca14aa1c5c4852ea2d61eef4d73772ea65</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHANGE_SESSION</name>
      <anchorfile>I3SessionMessage__m_8h.html</anchorfile>
      <anchor>a8d4fffc8d9d8a98cb0f40a38297a049ca071f7ba15af673dcf9f9b7403ddb9b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRIGGER_CONFIRMATION</name>
      <anchorfile>I3SessionMessage__m_8h.html</anchorfile>
      <anchor>a8d4fffc8d9d8a98cb0f40a38297a049caf1fa46ea028c651938dd27b137c69907</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>I3SessionMessage__m_8h.html</anchorfile>
      <anchor>a99520e818b8a91e04e9391c280b13ca4</anchor>
      <arglist>(cCommBuffer *b, SessionMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>I3SessionMessage__m_8h.html</anchorfile>
      <anchor>a9111cd534645ad29152182cb5c493bea</anchor>
      <arglist>(cCommBuffer *b, SessionMsg &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>I3SubIdentifier.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/i3/</path>
    <filename>I3SubIdentifier_8cc</filename>
    <includes id="I3SubIdentifier_8h" name="I3SubIdentifier.h" local="yes" imported="no">I3SubIdentifier.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>I3SubIdentifier_8cc.html</anchorfile>
      <anchor>a167b32f938bec8d3e6faeecfebef16a1</anchor>
      <arglist>(std::ostream &amp;os, const I3SubIdentifier &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>I3SubIdentifier.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/i3/</path>
    <filename>I3SubIdentifier_8h</filename>
    <includes id="I3IPAddress_8h" name="I3IPAddress.h" local="yes" imported="no">I3IPAddress.h</includes>
    <includes id="I3Identifier_8h" name="I3Identifier.h" local="yes" imported="no">I3Identifier.h</includes>
    <class kind="class">I3SubIdentifier</class>
  </compound>
  <compound kind="file">
    <name>I3Trigger.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/i3/</path>
    <filename>I3Trigger_8cc</filename>
    <includes id="I3Trigger_8h" name="I3Trigger.h" local="yes" imported="no">I3Trigger.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>I3Trigger_8cc.html</anchorfile>
      <anchor>a90228bbd2e7b841c61fc781a47ceac59</anchor>
      <arglist>(std::ostream &amp;os, const I3Trigger &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>I3Trigger.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/i3/</path>
    <filename>I3Trigger_8h</filename>
    <includes id="I3Identifier_8h" name="I3Identifier.h" local="yes" imported="no">I3Identifier.h</includes>
    <includes id="I3IdentifierStack_8h" name="I3IdentifierStack.h" local="yes" imported="no">I3IdentifierStack.h</includes>
    <class kind="class">I3Trigger</class>
  </compound>
  <compound kind="file">
    <name>I3TriggerRoutingTime.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/i3/i3Apps/</path>
    <filename>I3TriggerRoutingTime_8cc</filename>
    <includes id="I3BaseApp_8h" name="I3BaseApp.h" local="yes" imported="no">I3BaseApp.h</includes>
    <includes id="I3_8h" name="I3.h" local="yes" imported="no">I3.h</includes>
    <class kind="class">I3TRTServer</class>
    <class kind="class">I3TRTClient</class>
    <member kind="define">
      <type>#define</type>
      <name>TRIGGER_TIMER</name>
      <anchorfile>I3TriggerRoutingTime_8cc.html</anchorfile>
      <anchor>ab715b208b88f3eb71f69395a4128b24d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>I3TriggerRoutingTime_8cc.html</anchorfile>
      <anchor>afdd584069044c5fb76978efcce1566ee</anchor>
      <arglist>(I3TRTServer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>I3TriggerRoutingTime_8cc.html</anchorfile>
      <anchor>abad9fb4b0364a6f5eee50047d68656f9</anchor>
      <arglist>(I3TRTClient)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static cStdDev</type>
      <name>stats</name>
      <anchorfile>I3TriggerRoutingTime_8cc.html</anchorfile>
      <anchor>a39db9b8dfa9db2cf8010b1d8e9d23d9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>statsDumped</name>
      <anchorfile>I3TriggerRoutingTime_8cc.html</anchorfile>
      <anchor>a4ff1999433d14714ea9199c018649dfe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>I3Triggers.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/i3/i3Apps/</path>
    <filename>I3Triggers_8cc</filename>
    <includes id="I3BaseApp_8h" name="I3BaseApp.h" local="yes" imported="no">I3BaseApp.h</includes>
    <includes id="I3TriggersMessage__m_8h" name="I3TriggersMessage_m.h" local="yes" imported="no">I3TriggersMessage_m.h</includes>
    <class kind="class">I3Triggers</class>
    <class kind="struct">I3Triggers::Client</class>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>I3Triggers_8cc.html</anchorfile>
      <anchor>ad8bf8f30cdc60aef81928ca31929a581</anchor>
      <arglist>(I3Triggers)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>I3TriggersMessage_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/i3/i3Apps/</path>
    <filename>I3TriggersMessage__m_8h</filename>
    <includes id="I3Identifier_8h" name="I3Identifier.h" local="yes" imported="no">I3Identifier.h</includes>
    <class kind="class">TriggersHandshakeMsg</class>
    <class kind="class">TriggersMsg</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>I3TriggersMessage__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>I3TriggersMessage__m_8h.html</anchorfile>
      <anchor>a50cb1d522d28b6ba4857d2e4ca1b41ae</anchor>
      <arglist>(cCommBuffer *b, TriggersHandshakeMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>I3TriggersMessage__m_8h.html</anchorfile>
      <anchor>a204f8ad91a9d1299229e4e40d6662692</anchor>
      <arglist>(cCommBuffer *b, TriggersHandshakeMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>I3TriggersMessage__m_8h.html</anchorfile>
      <anchor>a52f716f18fbdea6adc85f3498301c93c</anchor>
      <arglist>(cCommBuffer *b, TriggersMsg &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>I3TriggersMessage__m_8h.html</anchorfile>
      <anchor>ab1ac6e0d48ed73e35744e8ceca60c937</anchor>
      <arglist>(cCommBuffer *b, TriggersMsg &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>index.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>index_8h</filename>
  </compound>
  <compound kind="file">
    <name>InetInfo.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/inetunderlay/</path>
    <filename>InetInfo_8cc</filename>
    <includes id="InetInfo_8h" name="InetInfo.h" local="yes" imported="no">InetInfo.h</includes>
  </compound>
  <compound kind="file">
    <name>InetInfo.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/inetunderlay/</path>
    <filename>InetInfo_8h</filename>
    <includes id="PeerInfo_8h" name="PeerInfo.h" local="no" imported="no">PeerInfo.h</includes>
    <class kind="class">InetInfo</class>
  </compound>
  <compound kind="file">
    <name>InetUnderlayConfigurator.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/inetunderlay/</path>
    <filename>InetUnderlayConfigurator_8cc</filename>
    <includes id="InetUnderlayConfigurator_8h" name="InetUnderlayConfigurator.h" local="yes" imported="no">InetUnderlayConfigurator.h</includes>
    <includes id="GlobalNodeList_8h" name="GlobalNodeList.h" local="no" imported="no">GlobalNodeList.h</includes>
    <includes id="TransportAddress_8h" name="TransportAddress.h" local="no" imported="no">TransportAddress.h</includes>
    <includes id="StringConvert_8h" name="StringConvert.h" local="no" imported="no">StringConvert.h</includes>
    <includes id="AccessNet_8h" name="AccessNet.h" local="no" imported="no">AccessNet.h</includes>
    <includes id="InetInfo_8h" name="InetInfo.h" local="no" imported="no">InetInfo.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>InetUnderlayConfigurator_8cc.html</anchorfile>
      <anchor>ae6fa0ae45854c5db66acac7768841e5d</anchor>
      <arglist>(InetUnderlayConfigurator)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>uniform2</name>
      <anchorfile>InetUnderlayConfigurator_8cc.html</anchorfile>
      <anchor>ac3fb363481075d619448cf8ff6c5b681</anchor>
      <arglist>(double start, double end, double index, double new_calc)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>intuniform2</name>
      <anchorfile>InetUnderlayConfigurator_8cc.html</anchorfile>
      <anchor>a4069a2b6fca9492d0400992d8cdd2c04</anchor>
      <arglist>(double start, double end, double index, double new_calc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_NED_Math_Function</name>
      <anchorfile>InetUnderlayConfigurator_8cc.html</anchorfile>
      <anchor>a7ef962ca48190143e5593d7976240f2d</anchor>
      <arglist>(uniform2, 4)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_NED_Math_Function</name>
      <anchorfile>InetUnderlayConfigurator_8cc.html</anchorfile>
      <anchor>afdfd6bdd59c585cfe917116b713b8cd0</anchor>
      <arglist>(intuniform2, 4)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InetUnderlayConfigurator.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/inetunderlay/</path>
    <filename>InetUnderlayConfigurator_8h</filename>
    <includes id="UnderlayConfigurator_8h" name="UnderlayConfigurator.h" local="no" imported="no">UnderlayConfigurator.h</includes>
    <class kind="class">InetUnderlayConfigurator</class>
    <member kind="function">
      <type>double</type>
      <name>uniform2</name>
      <anchorfile>InetUnderlayConfigurator_8h.html</anchorfile>
      <anchor>ac3fb363481075d619448cf8ff6c5b681</anchor>
      <arglist>(double start, double end, double index, double new_calc)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>intuniform2</name>
      <anchorfile>InetUnderlayConfigurator_8h.html</anchorfile>
      <anchor>a4069a2b6fca9492d0400992d8cdd2c04</anchor>
      <arglist>(double start, double end, double index, double new_calc)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InitStages.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>InitStages_8h</filename>
    <member kind="enumeration">
      <name>INIT_STAGES</name>
      <anchorfile>InitStages_8h.html</anchorfile>
      <anchor>a42fde1aa1e14a1c45d29061d6e87e532</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MIN_STAGE_UNDERLAY</name>
      <anchorfile>InitStages_8h.html</anchorfile>
      <anchor>a42fde1aa1e14a1c45d29061d6e87e532ac691a73094515eb9c580b1cac99f416c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX_STAGE_UNDERLAY</name>
      <anchorfile>InitStages_8h.html</anchorfile>
      <anchor>a42fde1aa1e14a1c45d29061d6e87e532a51360a7e54ff555dc3d078d686500cb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUM_STAGES_UNDERLAY</name>
      <anchorfile>InitStages_8h.html</anchorfile>
      <anchor>a42fde1aa1e14a1c45d29061d6e87e532ab81f899d3af8a59fb3edda3d9f78d283</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGISTER_STAGE</name>
      <anchorfile>InitStages_8h.html</anchorfile>
      <anchor>a42fde1aa1e14a1c45d29061d6e87e532af7318a654ca995f5f66f3396e4ebf61a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MIN_STAGE_COMPONENTS</name>
      <anchorfile>InitStages_8h.html</anchorfile>
      <anchor>a42fde1aa1e14a1c45d29061d6e87e532aa906fbde207e9a5d9454f2ffaf341e66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX_STAGE_COMPONENTS</name>
      <anchorfile>InitStages_8h.html</anchorfile>
      <anchor>a42fde1aa1e14a1c45d29061d6e87e532a4d4d9a4da2e3c3b4ae4de11cc55b20de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUM_STAGES_COMPONENTS</name>
      <anchorfile>InitStages_8h.html</anchorfile>
      <anchor>a42fde1aa1e14a1c45d29061d6e87e532ac89706f6bbebfa00b18670dce3482f5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MIN_STAGE_OVERLAY</name>
      <anchorfile>InitStages_8h.html</anchorfile>
      <anchor>a42fde1aa1e14a1c45d29061d6e87e532a58e83c497c7c8495e9c592ff3148b6b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX_STAGE_OVERLAY</name>
      <anchorfile>InitStages_8h.html</anchorfile>
      <anchor>a42fde1aa1e14a1c45d29061d6e87e532af261a91f9b71ec40c7c7c7e18b3455ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUM_STAGES_OVERLAY</name>
      <anchorfile>InitStages_8h.html</anchorfile>
      <anchor>a42fde1aa1e14a1c45d29061d6e87e532aaf00495d561daabedcaddf8c0d5315d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MIN_STAGE_APP</name>
      <anchorfile>InitStages_8h.html</anchorfile>
      <anchor>a42fde1aa1e14a1c45d29061d6e87e532ad9afa81d0184c5f0649fa111f7a821bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX_STAGE_APP</name>
      <anchorfile>InitStages_8h.html</anchorfile>
      <anchor>a42fde1aa1e14a1c45d29061d6e87e532a735021fae11712b786e515700dfdb5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUM_STAGES_APP</name>
      <anchorfile>InitStages_8h.html</anchorfile>
      <anchor>a42fde1aa1e14a1c45d29061d6e87e532abde2768376523950c61baac1975be71a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MIN_STAGE_TIER_1</name>
      <anchorfile>InitStages_8h.html</anchorfile>
      <anchor>a42fde1aa1e14a1c45d29061d6e87e532a57dc8beae2d53b30da5ebbb84b8eb94e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX_STAGE_TIER_1</name>
      <anchorfile>InitStages_8h.html</anchorfile>
      <anchor>a42fde1aa1e14a1c45d29061d6e87e532adde3c0e76fb4c24e253ada0ac73e6d08</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUM_STAGES_TIER_1</name>
      <anchorfile>InitStages_8h.html</anchorfile>
      <anchor>a42fde1aa1e14a1c45d29061d6e87e532a136be7114c1933fc29aa21aa07653d96</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MIN_STAGE_TIER_2</name>
      <anchorfile>InitStages_8h.html</anchorfile>
      <anchor>a42fde1aa1e14a1c45d29061d6e87e532a8c120f479555dddddddb3f379f7ca7aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX_STAGE_TIER_2</name>
      <anchorfile>InitStages_8h.html</anchorfile>
      <anchor>a42fde1aa1e14a1c45d29061d6e87e532abd9c9f371c16eb6b203c630976b14fc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUM_STAGES_TIER_2</name>
      <anchorfile>InitStages_8h.html</anchorfile>
      <anchor>a42fde1aa1e14a1c45d29061d6e87e532a43e1dce9868c47d7703fb5ef0455d4b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MIN_STAGE_TIER_3</name>
      <anchorfile>InitStages_8h.html</anchorfile>
      <anchor>a42fde1aa1e14a1c45d29061d6e87e532af0e982d467a9fa5af197033ce7eed978</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX_STAGE_TIER_3</name>
      <anchorfile>InitStages_8h.html</anchorfile>
      <anchor>a42fde1aa1e14a1c45d29061d6e87e532abd9258e846d0c7c246e8ba6517c5d38d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUM_STAGES_TIER_3</name>
      <anchorfile>InitStages_8h.html</anchorfile>
      <anchor>a42fde1aa1e14a1c45d29061d6e87e532a41e0f0417dcd8c337ed2fe88ae43e3de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUM_STAGES_ALL</name>
      <anchorfile>InitStages_8h.html</anchorfile>
      <anchor>a42fde1aa1e14a1c45d29061d6e87e532a89279af766b25396b796fe5cfd77d717</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IterativeLookup.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>IterativeLookup_8cc</filename>
    <includes id="UnderlayConfigurator_8h" name="UnderlayConfigurator.h" local="no" imported="no">UnderlayConfigurator.h</includes>
    <includes id="LookupListener_8h" name="LookupListener.h" local="no" imported="no">LookupListener.h</includes>
    <includes id="BaseOverlay_8h" name="BaseOverlay.h" local="no" imported="no">BaseOverlay.h</includes>
    <includes id="GlobalStatistics_8h" name="GlobalStatistics.h" local="no" imported="no">GlobalStatistics.h</includes>
    <includes id="IterativeLookup_8h" name="IterativeLookup.h" local="yes" imported="no">IterativeLookup.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>IterativeLookup_8cc.html</anchorfile>
      <anchor>a50eda42a6076ec5a8f654b2de1eb4d1d</anchor>
      <arglist>(std::ostream &amp;os, const LookupEntry &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>IterativeLookup_8cc.html</anchorfile>
      <anchor>a52f3aa2c3ae4a7749b26639d2acaa18f</anchor>
      <arglist>(std::ostream &amp;os, const LookupVector &amp;n)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IterativeLookup.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>IterativeLookup_8h</filename>
    <includes id="oversim__mapset_8h" name="oversim_mapset.h" local="no" imported="no">oversim_mapset.h</includes>
    <includes id="IterativeLookupConfiguration_8h" name="IterativeLookupConfiguration.h" local="no" imported="no">IterativeLookupConfiguration.h</includes>
    <includes id="AbstractLookup_8h" name="AbstractLookup.h" local="no" imported="no">AbstractLookup.h</includes>
    <includes id="RpcListener_8h" name="RpcListener.h" local="no" imported="no">RpcListener.h</includes>
    <includes id="NodeVector_8h" name="NodeVector.h" local="no" imported="no">NodeVector.h</includes>
    <includes id="Comparator_8h" name="Comparator.h" local="no" imported="no">Comparator.h</includes>
    <class kind="class">LookupEntry</class>
    <class kind="struct">KeyExtractor&lt; LookupEntry &gt;</class>
    <class kind="class">IterativeLookup</class>
    <class kind="class">IterativeLookup::RpcInfo</class>
    <class kind="class">IterativeLookup::RpcInfoVector</class>
    <class kind="class">IterativePathLookup</class>
    <member kind="typedef">
      <type>BaseKeySortedVector&lt; LookupEntry &gt;</type>
      <name>LookupVector</name>
      <anchorfile>IterativeLookup_8h.html</anchorfile>
      <anchor>aa992fcc70f4c9f476c35ae04cce879b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>LOOKUP_TIMEOUT</name>
      <anchorfile>IterativeLookup_8h.html</anchorfile>
      <anchor>ae75c5251111b189c3e954e04df6f4494</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IterativeLookupConfiguration.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>IterativeLookupConfiguration_8h</filename>
    <class kind="class">IterativeLookupConfiguration</class>
  </compound>
  <compound kind="file">
    <name>Kademlia.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/kademlia/</path>
    <filename>Kademlia_8cc</filename>
    <includes id="Kademlia_8h" name="Kademlia.h" local="yes" imported="no">Kademlia.h</includes>
    <includes id="KademliaMessage__m_8h" name="KademliaMessage_m.h" local="yes" imported="no">KademliaMessage_m.h</includes>
    <includes id="TopologyVis_8h" name="TopologyVis.h" local="yes" imported="no">TopologyVis.h</includes>
    <includes id="AbstractLookup_8h" name="AbstractLookup.h" local="no" imported="no">AbstractLookup.h</includes>
    <includes id="LookupListener_8h" name="LookupListener.h" local="no" imported="no">LookupListener.h</includes>
    <includes id="RpcMacros_8h" name="RpcMacros.h" local="no" imported="no">RpcMacros.h</includes>
    <includes id="BootstrapList_8h" name="BootstrapList.h" local="no" imported="no">BootstrapList.h</includes>
    <class kind="class">KademliaLookupListener</class>
    <member kind="define">
      <type>#define</type>
      <name>BUCKET_CONSISTENCY</name>
      <anchorfile>Kademlia_8cc.html</anchorfile>
      <anchor>aac1dc1d1f35365a3858fb0480153a467</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>Kademlia_8cc.html</anchorfile>
      <anchor>a7f075171403503da260dde5351a181be</anchor>
      <arglist>(Kademlia)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>Kademlia_8cc.html</anchorfile>
      <anchor>a7af9c469c3de5bc5a4815c6be9f5dae5</anchor>
      <arglist>(std::ostream &amp;os, const KademliaBucket *n)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Kademlia.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/kademlia/</path>
    <filename>Kademlia_8h</filename>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <includes id="BaseOverlay_8h" name="BaseOverlay.h" local="no" imported="no">BaseOverlay.h</includes>
    <includes id="GlobalStatistics_8h" name="GlobalStatistics.h" local="no" imported="no">GlobalStatistics.h</includes>
    <includes id="NeighborCache_8h" name="NeighborCache.h" local="no" imported="no">NeighborCache.h</includes>
    <includes id="KademliaNodeHandle_8h" name="KademliaNodeHandle.h" local="yes" imported="no">KademliaNodeHandle.h</includes>
    <includes id="KademliaBucket_8h" name="KademliaBucket.h" local="yes" imported="no">KademliaBucket.h</includes>
    <class kind="class">Kademlia</class>
  </compound>
  <compound kind="file">
    <name>KademliaBucket.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/kademlia/</path>
    <filename>KademliaBucket_8cc</filename>
    <includes id="KademliaBucket_8h" name="KademliaBucket.h" local="yes" imported="no">KademliaBucket.h</includes>
  </compound>
  <compound kind="file">
    <name>KademliaBucket.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/kademlia/</path>
    <filename>KademliaBucket_8h</filename>
    <includes id="KademliaNodeHandle_8h" name="KademliaNodeHandle.h" local="yes" imported="no">KademliaNodeHandle.h</includes>
    <class kind="class">KademliaBucket</class>
  </compound>
  <compound kind="file">
    <name>KademliaMessage_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/kademlia/</path>
    <filename>KademliaMessage__m_8h</filename>
    <includes id="KademliaNodeHandle_8h" name="KademliaNodeHandle.h" local="no" imported="no">KademliaNodeHandle.h</includes>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <class kind="class">KademliaRoutingInfoMessage</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>KademliaMessage__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MARKEDNODEHANDLE_L</name>
      <anchorfile>KademliaMessage__m_8h.html</anchorfile>
      <anchor>a7a4d6252f2faeffa8c80e5ae46d7d63e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KADEMLIAROUTINGINFO_L</name>
      <anchorfile>KademliaMessage__m_8h.html</anchorfile>
      <anchor>ae7646d8e6e9aab79d12e8d5b9aff15ee</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>KademliaMessage__m_8h.html</anchorfile>
      <anchor>ab7b9ec4554e04ee7add1aabff83fe740</anchor>
      <arglist>(cCommBuffer *b, KademliaRoutingInfoMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>KademliaMessage__m_8h.html</anchorfile>
      <anchor>a278cd1225349e05b30c78ed6e6951aeb</anchor>
      <arglist>(cCommBuffer *b, KademliaRoutingInfoMessage &amp;obj)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>ALIVEFLAG_L</name>
      <anchorfile>KademliaMessage__m_8h.html</anchorfile>
      <anchor>a50815823ec2122557d099b8a94c0d475</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>KademliaNodeHandle.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/kademlia/</path>
    <filename>KademliaNodeHandle_8cc</filename>
    <includes id="KademliaNodeHandle_8h" name="KademliaNodeHandle.h" local="no" imported="no">KademliaNodeHandle.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>KademliaNodeHandle_8cc.html</anchorfile>
      <anchor>a2822a8339d5599dbe0b5a1a6690e8cd6</anchor>
      <arglist>(std::ostream &amp;os, const MarkedNodeHandle &amp;n)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>KademliaNodeHandle.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/kademlia/</path>
    <filename>KademliaNodeHandle_8h</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="NodeVector_8h" name="NodeVector.h" local="no" imported="no">NodeVector.h</includes>
    <class kind="class">KademliaBucketEntry</class>
    <class kind="struct">KeyExtractor&lt; KademliaBucketEntry &gt;</class>
    <class kind="struct">ProxExtractor&lt; KademliaBucketEntry &gt;</class>
    <class kind="class">MarkedNodeHandle</class>
    <class kind="struct">KeyExtractor&lt; MarkedNodeHandle &gt;</class>
    <member kind="typedef">
      <type>BaseKeySortedVector&lt; MarkedNodeHandle &gt;</type>
      <name>MarkedNodeVector</name>
      <anchorfile>KademliaNodeHandle_8h.html</anchorfile>
      <anchor>a242560c14f24c7236c8e31dfca01527e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>KBRTestApp.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/kbrtestapp/</path>
    <filename>KBRTestApp_8cc</filename>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <includes id="GlobalStatistics_8h" name="GlobalStatistics.h" local="no" imported="no">GlobalStatistics.h</includes>
    <includes id="UnderlayConfigurator_8h" name="UnderlayConfigurator.h" local="no" imported="no">UnderlayConfigurator.h</includes>
    <includes id="GlobalNodeList_8h" name="GlobalNodeList.h" local="no" imported="no">GlobalNodeList.h</includes>
    <includes id="KBRTestApp_8h" name="KBRTestApp.h" local="yes" imported="no">KBRTestApp.h</includes>
    <includes id="KBRTestMessage__m_8h" name="KBRTestMessage_m.h" local="yes" imported="no">KBRTestMessage_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>KBRTestApp_8cc.html</anchorfile>
      <anchor>a00750a63926327828c027c734201810d</anchor>
      <arglist>(KBRTestApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>KBRTestApp.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/kbrtestapp/</path>
    <filename>KBRTestApp_8h</filename>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="BaseApp_8h" name="BaseApp.h" local="yes" imported="no">BaseApp.h</includes>
    <class kind="class">KBRTestApp</class>
    <class kind="struct">KBRTestApp::MsgHandle</class>
  </compound>
  <compound kind="file">
    <name>KBRTestMessage_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/kbrtestapp/</path>
    <filename>KBRTestMessage__m_8h</filename>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <class kind="class">KBRTestMessage</class>
    <class kind="class">KbrTestCall</class>
    <class kind="class">KbrTestResponse</class>
    <class kind="class">UnderlayTestCall</class>
    <class kind="class">UnderlayTestResponse</class>
    <class kind="class">KbrRpcContext</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>KBRTestMessage__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>KBRTestMessage__m_8h.html</anchorfile>
      <anchor>a73ba6a6a53fc8751c3e9f0215e23b227</anchor>
      <arglist>(cCommBuffer *b, KBRTestMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>KBRTestMessage__m_8h.html</anchorfile>
      <anchor>a2352cef44b35fa6dd05444793f54a7d5</anchor>
      <arglist>(cCommBuffer *b, KBRTestMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>KBRTestMessage__m_8h.html</anchorfile>
      <anchor>a489dedb78720f0cf872e8b43ab0dbf85</anchor>
      <arglist>(cCommBuffer *b, KbrTestCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>KBRTestMessage__m_8h.html</anchorfile>
      <anchor>acc9e643a0899767bfa2c13e97f69b8db</anchor>
      <arglist>(cCommBuffer *b, KbrTestCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>KBRTestMessage__m_8h.html</anchorfile>
      <anchor>a7993a4239a3ba1daff88843472d6238a</anchor>
      <arglist>(cCommBuffer *b, KbrTestResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>KBRTestMessage__m_8h.html</anchorfile>
      <anchor>a0ca4fffcf05fba7214b927c4cb861059</anchor>
      <arglist>(cCommBuffer *b, KbrTestResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>KBRTestMessage__m_8h.html</anchorfile>
      <anchor>a58e63432f273e68c508d6b59549ceee7</anchor>
      <arglist>(cCommBuffer *b, UnderlayTestCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>KBRTestMessage__m_8h.html</anchorfile>
      <anchor>a5b76b6c29f363712bedd402c013af9dd</anchor>
      <arglist>(cCommBuffer *b, UnderlayTestCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>KBRTestMessage__m_8h.html</anchorfile>
      <anchor>a6bc0aef16073a65901f6f1d185eb086d</anchor>
      <arglist>(cCommBuffer *b, UnderlayTestResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>KBRTestMessage__m_8h.html</anchorfile>
      <anchor>a06abaf18d1e015d048d70e3f65d1e4cb</anchor>
      <arglist>(cCommBuffer *b, UnderlayTestResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>KBRTestMessage__m_8h.html</anchorfile>
      <anchor>af2104885b23977e1db14fa4a445b935c</anchor>
      <arglist>(cCommBuffer *b, KbrRpcContext &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>KBRTestMessage__m_8h.html</anchorfile>
      <anchor>a3819470fdd7321e9e29568a60d776b4d</anchor>
      <arglist>(cCommBuffer *b, KbrRpcContext &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Koorde.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/koorde/</path>
    <filename>Koorde_8cc</filename>
    <includes id="GlobalStatistics_8h" name="GlobalStatistics.h" local="no" imported="no">GlobalStatistics.h</includes>
    <includes id="Koorde_8h" name="Koorde.h" local="yes" imported="no">Koorde.h</includes>
    <namespace>oversim</namespace>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>ac7150ad9342a466f088056505578044a</anchor>
      <arglist>(Koorde)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Koorde.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/koorde/</path>
    <filename>Koorde_8h</filename>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="BaseOverlay_8h" name="BaseOverlay.h" local="no" imported="no">BaseOverlay.h</includes>
    <class kind="class">oversim::Koorde</class>
    <namespace>oversim</namespace>
  </compound>
  <compound kind="file">
    <name>Landmark.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/</path>
    <filename>Landmark_8cc</filename>
    <includes id="SimpleUnderlayConfigurator_8h" name="SimpleUnderlayConfigurator.h" local="no" imported="no">SimpleUnderlayConfigurator.h</includes>
    <includes id="BootstrapList_8h" name="BootstrapList.h" local="no" imported="no">BootstrapList.h</includes>
    <includes id="NeighborCache_8h" name="NeighborCache.h" local="no" imported="no">NeighborCache.h</includes>
    <includes id="GlobalNodeList_8h" name="GlobalNodeList.h" local="no" imported="no">GlobalNodeList.h</includes>
    <includes id="GlobalStatistics_8h" name="GlobalStatistics.h" local="no" imported="no">GlobalStatistics.h</includes>
    <includes id="Landmark_8h" name="Landmark.h" local="yes" imported="no">Landmark.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>Landmark_8cc.html</anchorfile>
      <anchor>a918c2e8e286e2ea1996c1ac5fd00a7eb</anchor>
      <arglist>(Landmark)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Landmark.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/</path>
    <filename>Landmark_8h</filename>
    <includes id="BaseApp_8h" name="BaseApp.h" local="no" imported="no">BaseApp.h</includes>
    <class kind="class">Landmark</class>
  </compound>
  <compound kind="file">
    <name>LifetimeChurn.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>LifetimeChurn_8cc</filename>
    <includes id="GlobalStatisticsAccess_8h" name="GlobalStatisticsAccess.h" local="yes" imported="no">GlobalStatisticsAccess.h</includes>
    <includes id="UnderlayConfigurator_8h" name="UnderlayConfigurator.h" local="yes" imported="no">UnderlayConfigurator.h</includes>
    <includes id="Churn__m_8h" name="Churn_m.h" local="yes" imported="no">Churn_m.h</includes>
    <includes id="LifetimeChurn_8h" name="LifetimeChurn.h" local="yes" imported="no">LifetimeChurn.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>LifetimeChurn_8cc.html</anchorfile>
      <anchor>a2d2104273af5f0066f777b383eeb5ec7</anchor>
      <arglist>(LifetimeChurn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LifetimeChurn.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>LifetimeChurn_8h</filename>
    <includes id="ChurnGenerator_8h" name="ChurnGenerator.h" local="no" imported="no">ChurnGenerator.h</includes>
    <class kind="class">LifetimeChurn</class>
  </compound>
  <compound kind="file">
    <name>LoginCache.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/quon/</path>
    <filename>LoginCache_8cc</filename>
    <includes id="LoginCache_8h" name="LoginCache.h" local="yes" imported="no">LoginCache.h</includes>
    <includes id="Quon__m_8h" name="Quon_m.h" local="yes" imported="no">Quon_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>LoginCache_8cc.html</anchorfile>
      <anchor>a28164d0b7c36763833e9af933aabaf3b</anchor>
      <arglist>(LoginCache)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LoginCache.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/quon/</path>
    <filename>LoginCache_8h</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="Vector2D_8h" name="Vector2D.h" local="no" imported="no">Vector2D.h</includes>
    <includes id="GlobalStatisticsAccess_8h" name="GlobalStatisticsAccess.h" local="no" imported="no">GlobalStatisticsAccess.h</includes>
    <class kind="class">lcEntry</class>
    <class kind="class">LoginCache</class>
  </compound>
  <compound kind="file">
    <name>LookupListener.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>LookupListener_8h</filename>
    <class kind="class">LookupListener</class>
  </compound>
  <compound kind="file">
    <name>MessageObserver.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/almtest/</path>
    <filename>MessageObserver_8cc</filename>
    <includes id="GlobalStatisticsAccess_8h" name="GlobalStatisticsAccess.h" local="no" imported="no">GlobalStatisticsAccess.h</includes>
    <includes id="MessageObserver_8h" name="MessageObserver.h" local="yes" imported="no">MessageObserver.h</includes>
    <includes id="ALMTestTracedMessage__m_8h" name="ALMTestTracedMessage_m.h" local="yes" imported="no">ALMTestTracedMessage_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>MessageObserver_8cc.html</anchorfile>
      <anchor>af1583c55182145b6cf5592691a57bb41</anchor>
      <arglist>(MessageObserver)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>MessageObserver_8cc.html</anchorfile>
      <anchor>a8f32b0caa624b1003f9f7a382c634798</anchor>
      <arglist>(std::ostream &amp;os, MessageObserver::MulticastGroup const &amp;mg)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>MessageObserver_8cc.html</anchorfile>
      <anchor>a0ff05e9659b6489a97476781dcb50ba2</anchor>
      <arglist>(std::ostream &amp;os, MessageObserver::NodeGroupPair const &amp;ngp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MessageObserver.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/almtest/</path>
    <filename>MessageObserver_8h</filename>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="yes" imported="no">OverlayKey.h</includes>
    <class kind="class">MessageObserver</class>
    <class kind="struct">MessageObserver::MulticastGroup</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>MessageObserver_8h.html</anchorfile>
      <anchor>a8f32b0caa624b1003f9f7a382c634798</anchor>
      <arglist>(std::ostream &amp;os, MessageObserver::MulticastGroup const &amp;mg)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>MessageObserver_8h.html</anchorfile>
      <anchor>a0ff05e9659b6489a97476781dcb50ba2</anchor>
      <arglist>(std::ostream &amp;os, MessageObserver::NodeGroupPair const &amp;ngp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MovementGenerator.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/simplegameclient/</path>
    <filename>MovementGenerator_8cc</filename>
    <includes id="MovementGenerator_8h" name="MovementGenerator.h" local="yes" imported="no">MovementGenerator.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>MovementGenerator_8cc.html</anchorfile>
      <anchor>af36964b7f5fee57731a17ee6973a889e</anchor>
      <arglist>(std::ostream &amp;Stream, const NeighborMapEntry &amp;e)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MovementGenerator.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/simplegameclient/</path>
    <filename>MovementGenerator_8h</filename>
    <includes id="Vector2D_8h" name="Vector2D.h" local="no" imported="no">Vector2D.h</includes>
    <includes id="BoundingBox2D_8h" name="BoundingBox2D.h" local="no" imported="no">BoundingBox2D.h</includes>
    <includes id="TransportAddress_8h" name="TransportAddress.h" local="no" imported="no">TransportAddress.h</includes>
    <includes id="GlobalCoordinator_8h" name="GlobalCoordinator.h" local="yes" imported="no">GlobalCoordinator.h</includes>
    <class kind="class">NeighborMapEntry</class>
    <class kind="class">MovementGenerator</class>
    <member kind="typedef">
      <type>std::map&lt; TransportAddress, NeighborMapEntry &gt;</type>
      <name>NeighborMap</name>
      <anchorfile>MovementGenerator_8h.html</anchorfile>
      <anchor>a5e0a8f58fa9c5092891c610800716ea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; BoundingBox2D &gt;</type>
      <name>CollisionList</name>
      <anchorfile>MovementGenerator_8h.html</anchorfile>
      <anchor>ac8c6031ab31735aa20f1bd000c1b52db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>SCDir</name>
      <anchorfile>MovementGenerator_8h.html</anchorfile>
      <anchor>a38a4aafba314a9883f44bdb02110c37e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIR_DOWN</name>
      <anchorfile>MovementGenerator_8h.html</anchorfile>
      <anchor>a38a4aafba314a9883f44bdb02110c37eab1bf68da897d09488069dd40e54f442d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIR_UP</name>
      <anchorfile>MovementGenerator_8h.html</anchorfile>
      <anchor>a38a4aafba314a9883f44bdb02110c37ea0b76fb863426c07c6c997a8d9523257b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIR_LEFT</name>
      <anchorfile>MovementGenerator_8h.html</anchorfile>
      <anchor>a38a4aafba314a9883f44bdb02110c37ea1307dc42d06472935155dcbe283bc660</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIR_RIGHT</name>
      <anchorfile>MovementGenerator_8h.html</anchorfile>
      <anchor>a38a4aafba314a9883f44bdb02110c37ea5dd21ef3d450f62c44082756cab8f6f8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MyApplication.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/myapplication/</path>
    <filename>MyApplication_8cc</filename>
    <includes id="UnderlayConfigurator_8h" name="UnderlayConfigurator.h" local="yes" imported="no">UnderlayConfigurator.h</includes>
    <includes id="GlobalStatistics_8h" name="GlobalStatistics.h" local="yes" imported="no">GlobalStatistics.h</includes>
    <includes id="MyMessage__m_8h" name="MyMessage_m.h" local="yes" imported="no">MyMessage_m.h</includes>
    <includes id="MyApplication_8h" name="MyApplication.h" local="yes" imported="no">MyApplication.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>MyApplication_8cc.html</anchorfile>
      <anchor>ac4d4c5a9bf0c75f79a7ef994be4b2b5f</anchor>
      <arglist>(MyApplication)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MyApplication.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/myapplication/</path>
    <filename>MyApplication_8h</filename>
    <includes id="BaseApp_8h" name="BaseApp.h" local="yes" imported="no">BaseApp.h</includes>
    <class kind="class">MyApplication</class>
  </compound>
  <compound kind="file">
    <name>MyMessage_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/myapplication/</path>
    <filename>MyMessage__m_8h</filename>
    <includes id="TransportAddress_8h" name="TransportAddress.h" local="no" imported="no">TransportAddress.h</includes>
    <class kind="class">MyMessage</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>MyMessage__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>MessageType</name>
      <anchorfile>MyMessage__m_8h.html</anchorfile>
      <anchor>ac6606ebe91c8ac66a2c314c79f5ab013</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MYMSG_PING</name>
      <anchorfile>MyMessage__m_8h.html</anchorfile>
      <anchor>ac6606ebe91c8ac66a2c314c79f5ab013a460221e053aedd5c97e2614abf6f14ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MYMSG_PONG</name>
      <anchorfile>MyMessage__m_8h.html</anchorfile>
      <anchor>ac6606ebe91c8ac66a2c314c79f5ab013a2970f35929b2f861889f758349b564f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCPEXMSG_PING</name>
      <anchorfile>MyMessage__m_8h.html</anchorfile>
      <anchor>ac6606ebe91c8ac66a2c314c79f5ab013a7d216e14f2cada95987fb4acb26d7d55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCPEXMSG_PONG</name>
      <anchorfile>MyMessage__m_8h.html</anchorfile>
      <anchor>ac6606ebe91c8ac66a2c314c79f5ab013a381fa72411d7ec03ebf83c2fad99e7c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>M_JOIN</name>
      <anchorfile>MyMessage__m_8h.html</anchorfile>
      <anchor>ac6606ebe91c8ac66a2c314c79f5ab013acd29641e94a490eff42f9405ff3bfadd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>M_LEAVE</name>
      <anchorfile>MyMessage__m_8h.html</anchorfile>
      <anchor>ac6606ebe91c8ac66a2c314c79f5ab013a2b7a0f4663b009a55deb3d397a72f1d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>M_QUERY_NODE</name>
      <anchorfile>MyMessage__m_8h.html</anchorfile>
      <anchor>ac6606ebe91c8ac66a2c314c79f5ab013a44576a84484d57925ed8848278d4defb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>M_QUERY_SEGMENT</name>
      <anchorfile>MyMessage__m_8h.html</anchorfile>
      <anchor>ac6606ebe91c8ac66a2c314c79f5ab013a19bf83a01d9cdeb9d6f6b65f62f67346</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>M_RESCUE</name>
      <anchorfile>MyMessage__m_8h.html</anchorfile>
      <anchor>ac6606ebe91c8ac66a2c314c79f5ab013a0579bc3b657a2fab0696e13e02439d99</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>MyMessage__m_8h.html</anchorfile>
      <anchor>a534e54a29a961379ee9b5ec24dea3361</anchor>
      <arglist>(cCommBuffer *b, MyMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>MyMessage__m_8h.html</anchorfile>
      <anchor>ad6d56f5114e1d5e553c50417ca285601</anchor>
      <arglist>(cCommBuffer *b, MyMessage &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MyOverlay.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/myoverlay/</path>
    <filename>MyOverlay_8cc</filename>
    <includes id="UnderlayConfigurator_8h" name="UnderlayConfigurator.h" local="no" imported="no">UnderlayConfigurator.h</includes>
    <includes id="GlobalStatistics_8h" name="GlobalStatistics.h" local="no" imported="no">GlobalStatistics.h</includes>
    <includes id="MyOverlay__m_8h" name="MyOverlay_m.h" local="yes" imported="no">MyOverlay_m.h</includes>
    <includes id="MyOverlay_8h" name="MyOverlay.h" local="yes" imported="no">MyOverlay.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>BIGBIT</name>
      <anchorfile>MyOverlay_8cc.html</anchorfile>
      <anchor>a4b4493d6c307b977013a6585496ab2ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>MyOverlay_8cc.html</anchorfile>
      <anchor>aa93021a069e8ea71f9fe941a565522e6</anchor>
      <arglist>(MyOverlay)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MyOverlay.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/myoverlay/</path>
    <filename>MyOverlay_8h</filename>
    <includes id="BaseOverlay_8h" name="BaseOverlay.h" local="yes" imported="no">BaseOverlay.h</includes>
    <class kind="class">MyOverlay</class>
  </compound>
  <compound kind="file">
    <name>MyOverlay_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/myoverlay/</path>
    <filename>MyOverlay__m_8h</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <class kind="class">MyNeighborCall</class>
    <class kind="class">MyNeighborResponse</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>MyOverlay__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>MyOverlay__m_8h.html</anchorfile>
      <anchor>af1279297c1eda06fabed6d7e742257bf</anchor>
      <arglist>(cCommBuffer *b, MyNeighborCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>MyOverlay__m_8h.html</anchorfile>
      <anchor>a6dc38f76763ab13fca533aee27b75c12</anchor>
      <arglist>(cCommBuffer *b, MyNeighborCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>MyOverlay__m_8h.html</anchorfile>
      <anchor>a1f712bad6f2c0cb32e587b3ee3b849a9</anchor>
      <arglist>(cCommBuffer *b, MyNeighborResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>MyOverlay__m_8h.html</anchorfile>
      <anchor>a895a5730892af108b2e266af53d61bdc</anchor>
      <arglist>(cCommBuffer *b, MyNeighborResponse &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NeighborCache.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>NeighborCache_8cc</filename>
    <includes id="TransportAddress_8h" name="TransportAddress.h" local="no" imported="no">TransportAddress.h</includes>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="PeerInfo_8h" name="PeerInfo.h" local="no" imported="no">PeerInfo.h</includes>
    <includes id="GlobalStatisticsAccess_8h" name="GlobalStatisticsAccess.h" local="no" imported="no">GlobalStatisticsAccess.h</includes>
    <includes id="CoordBasedRoutingAccess_8h" name="CoordBasedRoutingAccess.h" local="no" imported="no">CoordBasedRoutingAccess.h</includes>
    <includes id="CoordMessages__m_8h" name="CoordMessages_m.h" local="no" imported="no">CoordMessages_m.h</includes>
    <includes id="GlobalNodeListAccess_8h" name="GlobalNodeListAccess.h" local="no" imported="no">GlobalNodeListAccess.h</includes>
    <includes id="hashWatch_8h" name="hashWatch.h" local="no" imported="no">hashWatch.h</includes>
    <includes id="BootstrapList_8h" name="BootstrapList.h" local="no" imported="no">BootstrapList.h</includes>
    <includes id="DiscoveryMode_8h" name="DiscoveryMode.h" local="no" imported="no">DiscoveryMode.h</includes>
    <includes id="NeighborCache_8h" name="NeighborCache.h" local="yes" imported="no">NeighborCache.h</includes>
    <includes id="GlobalViewBuilder_8h" name="GlobalViewBuilder.h" local="no" imported="no">GlobalViewBuilder.h</includes>
    <includes id="UnderlayConfigurator_8h" name="UnderlayConfigurator.h" local="no" imported="no">UnderlayConfigurator.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>NeighborCache_8cc.html</anchorfile>
      <anchor>a337c7679a09f7a0a57f6470f41bc01cd</anchor>
      <arglist>(std::ostream &amp;os, const NeighborCache::NeighborCacheEntry &amp;entry)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>NeighborCache_8cc.html</anchorfile>
      <anchor>a4c2a1bfad15bfc84b1304630bd3a11f0</anchor>
      <arglist>(NeighborCache)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NeighborCache.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>NeighborCache_8h</filename>
    <includes id="BaseApp_8h" name="BaseApp.h" local="no" imported="no">BaseApp.h</includes>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="CoordinateSystem_8h" name="CoordinateSystem.h" local="no" imported="no">CoordinateSystem.h</includes>
    <includes id="Nps_8h" name="Nps.h" local="no" imported="no">Nps.h</includes>
    <includes id="TreeManagement_8h" name="TreeManagement.h" local="no" imported="no">TreeManagement.h</includes>
    <includes id="TreeManagementMessage__m_8h" name="TreeManagementMessage_m.h" local="no" imported="no">TreeManagementMessage_m.h</includes>
    <includes id="SimpleUnderlayNCS_8h" name="SimpleUnderlayNCS.h" local="no" imported="no">SimpleUnderlayNCS.h</includes>
    <includes id="Vivaldi_8h" name="Vivaldi.h" local="no" imported="no">Vivaldi.h</includes>
    <includes id="SVivaldi_8h" name="SVivaldi.h" local="no" imported="no">SVivaldi.h</includes>
    <includes id="SimpleNcs_8h" name="SimpleNcs.h" local="no" imported="no">SimpleNcs.h</includes>
    <includes id="ProxNodeHandle_8h" name="ProxNodeHandle.h" local="no" imported="no">ProxNodeHandle.h</includes>
    <includes id="HashFunc_8h" name="HashFunc.h" local="no" imported="no">HashFunc.h</includes>
    <class kind="class">ProxListener</class>
    <class kind="class">NeighborCache</class>
    <class kind="struct">NeighborCache::WaitingContext</class>
    <class kind="struct">NeighborCache::NeighborCacheEntry</class>
    <member kind="enumeration">
      <name>NeighborCacheQueryType</name>
      <anchorfile>NeighborCache_8h.html</anchorfile>
      <anchor>ada3b7deab861ead8c817d583da336ccb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEIGHBORCACHE_AVAILABLE</name>
      <anchorfile>NeighborCache_8h.html</anchorfile>
      <anchor>ada3b7deab861ead8c817d583da336ccba1a4aaeee725859332274f6df4a4a64c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEIGHBORCACHE_EXACT</name>
      <anchorfile>NeighborCache_8h.html</anchorfile>
      <anchor>ada3b7deab861ead8c817d583da336ccba5a3faf832a3994bb6c8aa459a653e7f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEIGHBORCACHE_EXACT_TIMEOUT</name>
      <anchorfile>NeighborCache_8h.html</anchorfile>
      <anchor>ada3b7deab861ead8c817d583da336ccbab2c99c532f604e6029aacc815fd1f67e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEIGHBORCACHE_ESTIMATED</name>
      <anchorfile>NeighborCache_8h.html</anchorfile>
      <anchor>ada3b7deab861ead8c817d583da336ccbab3073985667b1e3eb2215dbd96359fa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEIGHBORCACHE_QUERY</name>
      <anchorfile>NeighborCache_8h.html</anchorfile>
      <anchor>ada3b7deab861ead8c817d583da336ccba46557811e0915cca5028188f13edf357</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEIGHBORCACHE_DEFAULT</name>
      <anchorfile>NeighborCache_8h.html</anchorfile>
      <anchor>ada3b7deab861ead8c817d583da336ccba751bede7ee708c74811f4bd49ee74cea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEIGHBORCACHE_DEFAULT_IMMEDIATELY</name>
      <anchorfile>NeighborCache_8h.html</anchorfile>
      <anchor>ada3b7deab861ead8c817d583da336ccbaa7fa0fb5215e636f2694f8d021d44f8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEIGHBORCACHE_DEFAULT_QUERY</name>
      <anchorfile>NeighborCache_8h.html</anchorfile>
      <anchor>ada3b7deab861ead8c817d583da336ccba03b4a3e8219995ffea0a4c9572d7f0bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Nice.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/nice/</path>
    <filename>Nice_8cc</filename>
    <includes id="GlobalStatistics_8h" name="GlobalStatistics.h" local="no" imported="no">GlobalStatistics.h</includes>
    <includes id="SimpleInfo_8h" name="SimpleInfo.h" local="yes" imported="no">SimpleInfo.h</includes>
    <includes id="SimpleNodeEntry_8h" name="SimpleNodeEntry.h" local="yes" imported="no">SimpleNodeEntry.h</includes>
    <includes id="SimpleUDP_8h" name="SimpleUDP.h" local="yes" imported="no">SimpleUDP.h</includes>
    <includes id="GlobalNodeListAccess_8h" name="GlobalNodeListAccess.h" local="yes" imported="no">GlobalNodeListAccess.h</includes>
    <includes id="BootstrapList_8h" name="BootstrapList.h" local="no" imported="no">BootstrapList.h</includes>
    <includes id="Nice_8h" name="Nice.h" local="yes" imported="no">Nice.h</includes>
    <namespace>oversim</namespace>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>ac02931151882dbf0943df783a045e4cc</anchor>
      <arglist>(Nice)</arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>clustercolors</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>a068481bf2793ad703ca213dcca1e4a6f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>clusterarrows</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>aa3b63c2cc07d2571efe93e9004ca0172</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Nice.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/nice/</path>
    <filename>Nice_8h</filename>
    <includes id="BaseOverlay_8h" name="BaseOverlay.h" local="no" imported="no">BaseOverlay.h</includes>
    <includes id="NiceCluster_8h" name="NiceCluster.h" local="yes" imported="no">NiceCluster.h</includes>
    <includes id="NiceMessage__m_8h" name="NiceMessage_m.h" local="yes" imported="no">NiceMessage_m.h</includes>
    <includes id="NicePeerInfo_8h" name="NicePeerInfo.h" local="yes" imported="no">NicePeerInfo.h</includes>
    <includes id="hashWatch_8h" name="hashWatch.h" local="no" imported="no">hashWatch.h</includes>
    <includes id="combination_8h" name="combination.h" local="yes" imported="no">combination.h</includes>
    <class kind="class">oversim::Nice</class>
    <namespace>oversim</namespace>
  </compound>
  <compound kind="file">
    <name>NiceCluster.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/nice/</path>
    <filename>NiceCluster_8cc</filename>
    <includes id="NiceCluster_8h" name="NiceCluster.h" local="yes" imported="no">NiceCluster.h</includes>
  </compound>
  <compound kind="file">
    <name>NiceCluster.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/nice/</path>
    <filename>NiceCluster_8h</filename>
    <includes id="BaseOverlay_8h" name="BaseOverlay.h" local="no" imported="no">BaseOverlay.h</includes>
    <class kind="class">NiceCluster</class>
  </compound>
  <compound kind="file">
    <name>NiceMessage_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/nice/</path>
    <filename>NiceMessage__m_8h</filename>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <class kind="class">NiceMessage</class>
    <class kind="class">NiceMemberMessage</class>
    <class kind="class">NiceClusterMerge</class>
    <class kind="class">NiceHeartbeat</class>
    <class kind="class">NiceLeaderHeartbeat</class>
    <class kind="class">NiceMulticastMessage</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TRANSPORTADDRESS_L</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a03f3385cd9cf6d79400c7b9e3dfe7299</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NICEMESSAGE_L</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a3a8186642559e55a97c3a6cd1d0ea1dd</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NICEMEMBERMESSAGE_L</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a094947aff89f3e4af2a30ec071040f4c</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NICECLUSTERMERGE_L</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>ab02fc9fb37858684e486f5750860e4ba</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NICEHEARTBEAT_L</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>ac9e73e65df01f2d7440ba59ff847f831</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NICELEADERHEARTBEAT_L</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a68ba46ab65eb1c5d2a31572894946444</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NICEMULTICAST_L</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a856829decd30527694f7c44f24d11eb9</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="enumeration">
      <name>NICECommand</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a53eb6ab4c3521dbc1b971f43f68001e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NICE_QUERY</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a53eb6ab4c3521dbc1b971f43f68001e7a8d5e84b5d60df22479df8355d6347834</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NICE_QUERY_RESPONSE</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a53eb6ab4c3521dbc1b971f43f68001e7a0ee562452c946bccf6069ac9e42b066e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NICE_JOIN_CLUSTER</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a53eb6ab4c3521dbc1b971f43f68001e7a6fd9bbfeec6702e13ecfa8ddf57fa018</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NICE_HEARTBEAT</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a53eb6ab4c3521dbc1b971f43f68001e7a47181a7ac5dfe7bb6857323f381abcbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NICE_LEADERHEARTBEAT</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a53eb6ab4c3521dbc1b971f43f68001e7acb65ea3a2078e57268ac2cf992483b5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NICE_LEADERTRANSFER</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a53eb6ab4c3521dbc1b971f43f68001e7a47c7b847cabda16ec1bb6322d21205ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NICE_JOINEVAL</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a53eb6ab4c3521dbc1b971f43f68001e7ad017b8270a2ffd62d28c6b40373dd44d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NICE_JOINEVAL_RESPONSE</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a53eb6ab4c3521dbc1b971f43f68001e7a8b3838507b87b8e45317b057acfc1893</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NICE_REMOVE</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a53eb6ab4c3521dbc1b971f43f68001e7adfb0b796750890c1d47678b130dff498</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NICE_PING_PROBE</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a53eb6ab4c3521dbc1b971f43f68001e7a60eff1ca2a24fa6a5ed193396b3611e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NICE_PING_PROBE_RESPONSE</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a53eb6ab4c3521dbc1b971f43f68001e7af507f86ba86f0aea580335c0965b26de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NICE_CLUSTER_MERGE_REQUEST</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a53eb6ab4c3521dbc1b971f43f68001e7a84de84b9a5707c06e307870df2031ce3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NICE_PEER_TEMPORARY</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a53eb6ab4c3521dbc1b971f43f68001e7adfc4413e72fcd16c342192d3b4a14bcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NICE_PEER_TEMPORARY_RELEASE</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a53eb6ab4c3521dbc1b971f43f68001e7a2fff14479fab6fd82da4db0029123e0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NICE_POLL_RP</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a53eb6ab4c3521dbc1b971f43f68001e7a8bf3ffec79cbd15ef9c801ec8fdcc1db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NICE_POLL_RP_RESPONSE</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a53eb6ab4c3521dbc1b971f43f68001e7ad1cdc4389204852a40ae4afd7eead55d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NICE_FORCE_MERGE</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a53eb6ab4c3521dbc1b971f43f68001e7a90982eabb998b1ee8a19ea9d467a0b8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NICE_MULTICAST</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a53eb6ab4c3521dbc1b971f43f68001e7a55f971433074db5a460d31159d73288c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a42a1ac80b585b7782272350a5d860385</anchor>
      <arglist>(cCommBuffer *b, NiceMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a6746b01d1a4b3514f6ae250a838928bf</anchor>
      <arglist>(cCommBuffer *b, NiceMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>af04244653a44212d226d39ecc86386b3</anchor>
      <arglist>(cCommBuffer *b, NiceMemberMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a8bb08f2ac4c80c35c310117b17cceebf</anchor>
      <arglist>(cCommBuffer *b, NiceMemberMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a004310d009a7d38034a4edcae1a3a446</anchor>
      <arglist>(cCommBuffer *b, NiceClusterMerge &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a1c58b9b69f00101842b765b6055d9557</anchor>
      <arglist>(cCommBuffer *b, NiceClusterMerge &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a3defbf0459941139edac727219b92eb1</anchor>
      <arglist>(cCommBuffer *b, NiceHeartbeat &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a60acec1322f7903320a447c5be48a253</anchor>
      <arglist>(cCommBuffer *b, NiceHeartbeat &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a51032784098625575e9f41effd761883</anchor>
      <arglist>(cCommBuffer *b, NiceLeaderHeartbeat &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a7d9eeb4d1b43e2b3d415be4654c50a43</anchor>
      <arglist>(cCommBuffer *b, NiceLeaderHeartbeat &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a28baaf2592c57229f52bebc983f7a3fe</anchor>
      <arglist>(cCommBuffer *b, NiceMulticastMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a10609409ffd1b5c5d7278ad2cab8328d</anchor>
      <arglist>(cCommBuffer *b, NiceMulticastMessage &amp;obj)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>NICECOMMAND_L</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a28b7a7ec0a806c7b4bdf088116f9fe7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>LAYER_L</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a9467fdaa5a519d4d71034242ccd32d19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>INT_L</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a83623c989fc5b9da33ff7f0a7b60d692</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>SIMTIME_L</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a45904ec4d9862cec75b9fcb2a1f85084</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>BOOL_L</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a74d48c9b04b6b2fc59b87c6af07be784</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>DOUBLE_L</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a5ad34cbdac3a15ddaf2ec1817d7e2cfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>SHORT_L</name>
      <anchorfile>NiceMessage__m_8h.html</anchorfile>
      <anchor>a3599cf95f1a87a224778aaed974ed73e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NicePeerInfo.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/nice/</path>
    <filename>NicePeerInfo_8cc</filename>
    <includes id="NicePeerInfo_8h" name="NicePeerInfo.h" local="yes" imported="no">NicePeerInfo.h</includes>
    <namespace>oversim</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>adf906f99b19d28fb06efb9e3e8ba73b9</anchor>
      <arglist>(std::ostream &amp;os, NicePeerInfo &amp;pi)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NicePeerInfo.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/nice/</path>
    <filename>NicePeerInfo_8h</filename>
    <includes id="BaseOverlay_8h" name="BaseOverlay.h" local="no" imported="no">BaseOverlay.h</includes>
    <class kind="class">oversim::NicePeerInfo</class>
    <namespace>oversim</namespace>
    <member kind="typedef">
      <type>std::pair&lt; unsigned int, double &gt;</type>
      <name>HeartbeatEvaluator</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>ac15ba8aa917f763e836dfdd2689c89bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NoChurn.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>NoChurn_8cc</filename>
    <includes id="TransportAddress_8h" name="TransportAddress.h" local="no" imported="no">TransportAddress.h</includes>
    <includes id="UnderlayConfigurator_8h" name="UnderlayConfigurator.h" local="no" imported="no">UnderlayConfigurator.h</includes>
    <includes id="NoChurn_8h" name="NoChurn.h" local="yes" imported="no">NoChurn.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>NoChurn_8cc.html</anchorfile>
      <anchor>abaf5ba16778aea81c7818355ee342da6</anchor>
      <arglist>(NoChurn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NoChurn.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>NoChurn_8h</filename>
    <includes id="ChurnGenerator_8h" name="ChurnGenerator.h" local="no" imported="no">ChurnGenerator.h</includes>
    <class kind="class">NoChurn</class>
  </compound>
  <compound kind="file">
    <name>NodeHandle.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>NodeHandle_8cc</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="yes" imported="no">NodeHandle.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>NodeHandle_8cc.html</anchorfile>
      <anchor>a78dee38c3e150a0c48ead0a04de50801</anchor>
      <arglist>(std::ostream &amp;os, const NodeHandle &amp;n)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NodeHandle.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>NodeHandle_8h</filename>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="TransportAddress_8h" name="TransportAddress.h" local="no" imported="no">TransportAddress.h</includes>
    <class kind="class">NodeHandle</class>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>NodeHandle_8h.html</anchorfile>
      <anchor>a435dd87032c8d8ecce0c3e627a8748c1</anchor>
      <arglist>(cCommBuffer *b, NodeHandle &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>NodeHandle_8h.html</anchorfile>
      <anchor>a635c647945b5dff2bf707751ce9602e1</anchor>
      <arglist>(cCommBuffer *b, NodeHandle &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NodeVector.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>NodeVector_8cc</filename>
    <includes id="NodeVector_8h" name="NodeVector.h" local="yes" imported="no">NodeVector.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>NodeVector_8cc.html</anchorfile>
      <anchor>aa226f6a884cc53c140f7bbf82507b699</anchor>
      <arglist>(std::ostream &amp;os, const NodeVector &amp;n)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NodeVector.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>NodeVector_8h</filename>
    <includes id="Comparator_8h" name="Comparator.h" local="no" imported="no">Comparator.h</includes>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="ProxNodeHandle_8h" name="ProxNodeHandle.h" local="no" imported="no">ProxNodeHandle.h</includes>
    <class kind="struct">KeyExtractor</class>
    <class kind="struct">KeyExtractor&lt; NodeHandle &gt;</class>
    <class kind="struct">KeyExtractor&lt; ProxNodeHandle &gt;</class>
    <class kind="struct">KeyExtractor&lt; std::pair&lt; NodeHandle, simtime_t &gt; &gt;</class>
    <class kind="struct">ProxExtractor</class>
    <class kind="struct">ProxExtractor&lt; ProxNodeHandle &gt;</class>
    <class kind="struct">ProxExtractor&lt; ProxTransportAddress &gt;</class>
    <class kind="struct">AddressExtractor</class>
    <class kind="struct">AddressExtractor&lt; NodeHandle &gt;</class>
    <class kind="struct">AddressExtractor&lt; ProxTransportAddress &gt;</class>
    <class kind="class">BaseKeySortedVector</class>
    <member kind="typedef">
      <type>BaseKeySortedVector&lt; NodeHandle &gt;</type>
      <name>NodeVector</name>
      <anchorfile>NodeVector_8h.html</anchorfile>
      <anchor>a442f90b66b22aa9fca51f83c5ce1b02b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseKeySortedVector&lt; ProxNodeHandle &gt;</type>
      <name>ProxNodeVector</name>
      <anchorfile>NodeVector_8h.html</anchorfile>
      <anchor>a4d7500584bc52e84d4b6bb26397750c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseKeySortedVector&lt; ProxTransportAddress &gt;</type>
      <name>ProxAddressVector</name>
      <anchorfile>NodeVector_8h.html</anchorfile>
      <anchor>a4dd14fd4e10a709d35fafe4967a28a68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Nps.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>Nps_8cc</filename>
    <includes id="GlobalNodeList_8h" name="GlobalNodeList.h" local="no" imported="no">GlobalNodeList.h</includes>
    <includes id="PeerInfo_8h" name="PeerInfo.h" local="no" imported="no">PeerInfo.h</includes>
    <includes id="RpcMacros_8h" name="RpcMacros.h" local="no" imported="no">RpcMacros.h</includes>
    <includes id="NeighborCache_8h" name="NeighborCache.h" local="no" imported="no">NeighborCache.h</includes>
    <includes id="GlobalNodeListAccess_8h" name="GlobalNodeListAccess.h" local="no" imported="no">GlobalNodeListAccess.h</includes>
    <includes id="Landmark_8h" name="Landmark.h" local="no" imported="no">Landmark.h</includes>
    <includes id="UnderlayConfigurator_8h" name="UnderlayConfigurator.h" local="no" imported="no">UnderlayConfigurator.h</includes>
    <includes id="SimpleNodeEntry_8h" name="SimpleNodeEntry.h" local="no" imported="no">SimpleNodeEntry.h</includes>
    <includes id="SimpleInfo_8h" name="SimpleInfo.h" local="no" imported="no">SimpleInfo.h</includes>
    <includes id="CoordBasedRoutingAccess_8h" name="CoordBasedRoutingAccess.h" local="no" imported="no">CoordBasedRoutingAccess.h</includes>
    <includes id="GlobalStatistics_8h" name="GlobalStatistics.h" local="no" imported="no">GlobalStatistics.h</includes>
    <includes id="Nps__m_8h" name="Nps_m.h" local="no" imported="no">Nps_m.h</includes>
    <includes id="Nps_8h" name="Nps.h" local="no" imported="no">Nps.h</includes>
  </compound>
  <compound kind="file">
    <name>Nps.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>Nps_8h</filename>
    <includes id="yang_8h" name="yang.h" local="no" imported="no">yang.h</includes>
    <includes id="simplex_8h" name="simplex.h" local="no" imported="no">simplex.h</includes>
    <includes id="RpcListener_8h" name="RpcListener.h" local="no" imported="no">RpcListener.h</includes>
    <includes id="Nps__m_8h" name="Nps_m.h" local="no" imported="no">Nps_m.h</includes>
    <includes id="CoordinateSystem_8h" name="CoordinateSystem.h" local="no" imported="no">CoordinateSystem.h</includes>
    <class kind="struct">LandmarkDataEntry</class>
    <class kind="struct">RttMeasurement</class>
    <class kind="class">CoordCalcFunction</class>
    <class kind="class">Nps</class>
  </compound>
  <compound kind="file">
    <name>Nps_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>Nps__m_8h</filename>
    <includes id="TransportAddress_8h" name="TransportAddress.h" local="no" imported="no">TransportAddress.h</includes>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <class kind="class">CoordsReqCall</class>
    <class kind="class">CoordsReqResponse</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>Nps__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COORDSREQCALL_L</name>
      <anchorfile>Nps__m_8h.html</anchorfile>
      <anchor>afac75b55e04e5fb85f432a2cde6dd01a</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COORDSREQRESPONSE_L</name>
      <anchorfile>Nps__m_8h.html</anchorfile>
      <anchor>ae7b4015cd07fa61cece5f394d6baf81e</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>Nps__m_8h.html</anchorfile>
      <anchor>a9a870c6b66f85f1d8dcab54f06318b1b</anchor>
      <arglist>(cCommBuffer *b, CoordsReqCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>Nps__m_8h.html</anchorfile>
      <anchor>ac7dbd0e08e4a7c3889049ecd7bf21335</anchor>
      <arglist>(cCommBuffer *b, CoordsReqCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>Nps__m_8h.html</anchorfile>
      <anchor>a1fca3806e9a9a434350f772900ab9760</anchor>
      <arglist>(cCommBuffer *b, CoordsReqResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>Nps__m_8h.html</anchorfile>
      <anchor>a2b82ee4e5df3f5504b0f0f09b23c26d4</anchor>
      <arglist>(cCommBuffer *b, CoordsReqResponse &amp;obj)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>NPSLAYER_L</name>
      <anchorfile>Nps__m_8h.html</anchorfile>
      <anchor>aa0ffdacd72cd9cf52923bdb5603fedd5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NTree.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/ntree/</path>
    <filename>NTree_8cc</filename>
    <includes id="NTree_8h" name="NTree.h" local="yes" imported="no">NTree.h</includes>
    <includes id="GlobalNodeListAccess_8h" name="GlobalNodeListAccess.h" local="yes" imported="no">GlobalNodeListAccess.h</includes>
    <includes id="GlobalStatistics_8h" name="GlobalStatistics.h" local="no" imported="no">GlobalStatistics.h</includes>
    <includes id="BootstrapList_8h" name="BootstrapList.h" local="no" imported="no">BootstrapList.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>NTree_8cc.html</anchorfile>
      <anchor>afa51d80713f6e39b071b2f9d3680c105</anchor>
      <arglist>(NTree)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NTree.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/ntree/</path>
    <filename>NTree_8h</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="BaseOverlay_8h" name="BaseOverlay.h" local="no" imported="no">BaseOverlay.h</includes>
    <includes id="NTreeHelper_8h" name="NTreeHelper.h" local="yes" imported="no">NTreeHelper.h</includes>
    <includes id="NTree__m_8h" name="NTree_m.h" local="yes" imported="no">NTree_m.h</includes>
    <class kind="class">NTree</class>
  </compound>
  <compound kind="file">
    <name>NTree_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/ntree/</path>
    <filename>NTree__m_8h</filename>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <includes id="Vector2D_8h" name="Vector2D.h" local="no" imported="no">Vector2D.h</includes>
    <class kind="class">NTreeJoinCall</class>
    <class kind="class">NTreeJoinResponse</class>
    <class kind="class">NTreeDivideCall</class>
    <class kind="class">NTreeDivideResponse</class>
    <class kind="class">NTreePingCall</class>
    <class kind="class">NTreeNodePingCall</class>
    <class kind="class">NTreePingResponse</class>
    <class kind="class">NTreeNodePingResponse</class>
    <class kind="class">NTreeGroupDeleteMessage</class>
    <class kind="class">NTreeCollapseMessage</class>
    <class kind="class">NTreeLeaveMessage</class>
    <class kind="class">NTreeMoveMessage</class>
    <class kind="class">NTreeGroupAddMessage</class>
    <class kind="class">NTreeReplaceNodeMessage</class>
    <class kind="class">NTreeTakeOverMessage</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NTREEJOINCALL_L</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>a1f34eb76183d177f52cbf91168b9f553</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NTREEJOINRESPONSE_L</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>a7f658bb71823007780729523f8b4b5e5</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NTREEDIVIDECALL_L</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>a9f8f3e06980b0a46881afcbb783482e3</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NTREEDIVIDERESPONSE_L</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>a6e8e0ec1b0354f923c9daaf205537106</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NTREEPINGCALL_L</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>a41827f99ffb6af1fd2dcb3cac2ed85d6</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NTREENODEPINGCALL_L</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>ad201f4a44cdad4712c6b92cbceab8751</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NTREEPINGRESPONSE_L</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>a92af2f21f40c63100bfc85b1fb3cd3b8</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NTREENODEPINGRESPONSE_L</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>af7e1044ad69b4f9420a3e9e579b1753c</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NTREEDELETE_L</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>aeffb22c9e19bad188fcac7ecf3b7f93b</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NTREECOLLAPSE_L</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>a05bb26b012bd4dc826f86714cfa0659b</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NTREELEAVE_L</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>af39a49959213a6c7812e8c69a95c1ae3</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NTREEMOVE_L</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>a1eefe5aa69aded13f3640d5ca69ab154</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NTREEADD_L</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>af7c80d54a47233a2a89c6b7b692f3363</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NTREEREPLACE_L</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>a8a6a66791389fce3829c25b21bb7f3ab</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NTREETAKEOVER_L</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>a06df47ba22ca8e6b285d3128f4bb9fee</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>a5ecd7c59dd716acd31269918d1661dc6</anchor>
      <arglist>(cCommBuffer *b, NTreeJoinCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>a983a9191cde5a7546a26032039b7f6f5</anchor>
      <arglist>(cCommBuffer *b, NTreeJoinCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>a633fedbc3032eb52621fe57b1e035695</anchor>
      <arglist>(cCommBuffer *b, NTreeJoinResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>ad5ed8cc6bbe3913ce57b59cbfc7704f8</anchor>
      <arglist>(cCommBuffer *b, NTreeJoinResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>aba8696c59ff09203a75f17d51e428502</anchor>
      <arglist>(cCommBuffer *b, NTreeDivideCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>aceabf8a8c96319b98b25d6cc12cd4023</anchor>
      <arglist>(cCommBuffer *b, NTreeDivideCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>aabac44a08be11ae10f7c907919dd7b5c</anchor>
      <arglist>(cCommBuffer *b, NTreeDivideResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>ac32a6dbc3105c478d0936c34a6ed620d</anchor>
      <arglist>(cCommBuffer *b, NTreeDivideResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>aa0047b8856208258c4e2511e4ce9000c</anchor>
      <arglist>(cCommBuffer *b, NTreePingCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>a400be5d259fea230aefc84bbc94d66fd</anchor>
      <arglist>(cCommBuffer *b, NTreePingCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>ac2f1d1a22014045ccfc9865649d853d9</anchor>
      <arglist>(cCommBuffer *b, NTreeNodePingCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>a619229dc544a5077e3110f46ab15a6fc</anchor>
      <arglist>(cCommBuffer *b, NTreeNodePingCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>aa2c8eef67fb1c2af3bd7d74abe6f3bd8</anchor>
      <arglist>(cCommBuffer *b, NTreePingResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>a1c16818dd55ecd1b961cde99bce6fc9d</anchor>
      <arglist>(cCommBuffer *b, NTreePingResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>a09832cbf48d4d29b7b2dff732f918f80</anchor>
      <arglist>(cCommBuffer *b, NTreeNodePingResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>aa6816b6cc56cf512d8343ef9efcbf34d</anchor>
      <arglist>(cCommBuffer *b, NTreeNodePingResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>adfce8ed47854a12f962ce0b1fefedd99</anchor>
      <arglist>(cCommBuffer *b, NTreeGroupDeleteMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>a5769fe8f9538f53a5c170eb6ff34b7c6</anchor>
      <arglist>(cCommBuffer *b, NTreeGroupDeleteMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>aa513cab1e46c6ae7177bff39cf2d7dd2</anchor>
      <arglist>(cCommBuffer *b, NTreeCollapseMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>a27f83751ef352c8aaed56ef2c1cb4ef2</anchor>
      <arglist>(cCommBuffer *b, NTreeCollapseMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>a64160e92cc89257699dfecf9fe21ee12</anchor>
      <arglist>(cCommBuffer *b, NTreeLeaveMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>aaf41c66b44059a490aaf51b8d26e8b97</anchor>
      <arglist>(cCommBuffer *b, NTreeLeaveMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>a19de878c2affd86d3ae81d2f5439d704</anchor>
      <arglist>(cCommBuffer *b, NTreeMoveMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>a3c71e207f59c5cf4bbe53bae801442cc</anchor>
      <arglist>(cCommBuffer *b, NTreeMoveMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>a14a7e7f5660d6714d5973a76bd9a8ebf</anchor>
      <arglist>(cCommBuffer *b, NTreeGroupAddMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>a406eee3056c60e2d4acab24492c6ef20</anchor>
      <arglist>(cCommBuffer *b, NTreeGroupAddMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>a7e18f44ed87eb6e877a9ce636dc3e617</anchor>
      <arglist>(cCommBuffer *b, NTreeReplaceNodeMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>a59ec6e1567249d773934b05e0d2383b9</anchor>
      <arglist>(cCommBuffer *b, NTreeReplaceNodeMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>a4ee4d516629670eb6e1ad2a243157dfe</anchor>
      <arglist>(cCommBuffer *b, NTreeTakeOverMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>a4f3c578aaefb7a50d094b7eeb8e84c45</anchor>
      <arglist>(cCommBuffer *b, NTreeTakeOverMessage &amp;obj)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>NTREEPOSITION_L</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>a39740fb0bdd7a18eb74a72bbfc5b5dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>NTREESIZE_L</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>a63a8d3d409c0fb12f80951f1374dc626</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>NTREEQUADRANT_L</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>affc07d2154b3ab411afc1dfac690afc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>NTREECHILDCOUNT_L</name>
      <anchorfile>NTree__m_8h.html</anchorfile>
      <anchor>ad2c2379bb6418f52a2e2a5fb06a0552c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NTreeHelper.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/ntree/</path>
    <filename>NTreeHelper_8cc</filename>
    <includes id="NTreeHelper_8h" name="NTreeHelper.h" local="yes" imported="no">NTreeHelper.h</includes>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>NTreeHelper_8cc.html</anchorfile>
      <anchor>aa01bd63b0cb816e910feae98484af245</anchor>
      <arglist>(const NTreeScope &amp;a, const NTreeScope &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>NTreeHelper_8cc.html</anchorfile>
      <anchor>a486fe4e820ed13e737c88f8811330667</anchor>
      <arglist>(const NTreeScope &amp;a, const NTreeScope &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>NTreeHelper_8cc.html</anchorfile>
      <anchor>a26a856600777f0c399e7aea607d446c1</anchor>
      <arglist>(std::ostream &amp;Stream, const NTreeScope &amp;scope)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>NTreeHelper_8cc.html</anchorfile>
      <anchor>a773fd36a5bda25e8b53bc8de4dec08c5</anchor>
      <arglist>(const NTreeGroup &amp;a, const NTreeGroup &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>NTreeHelper_8cc.html</anchorfile>
      <anchor>a1d0ba2cedafdd7669db1d5990060eeac</anchor>
      <arglist>(const NTreeGroup &amp;a, const NTreeGroup &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>NTreeHelper_8cc.html</anchorfile>
      <anchor>ab470167fa5a61ce51d7e0073290095ae</anchor>
      <arglist>(std::ostream &amp;Stream, const NTreeGroup &amp;group)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>NTreeHelper_8cc.html</anchorfile>
      <anchor>a1705552d32c966e4bffdb6c07e83fb52</anchor>
      <arglist>(const NTreeNode &amp;a, const NTreeNode &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>NTreeHelper_8cc.html</anchorfile>
      <anchor>a5532f9ac59a844ce33fe7ed8cb39cd06</anchor>
      <arglist>(const NTreeNode &amp;a, const NTreeNode &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>NTreeHelper_8cc.html</anchorfile>
      <anchor>aa7dcfd80bfada313666a3c651278192f</anchor>
      <arglist>(std::ostream &amp;Stream, const NTreeNode &amp;node)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NTreeHelper.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/ntree/</path>
    <filename>NTreeHelper_8h</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="Vector2D_8h" name="Vector2D.h" local="no" imported="no">Vector2D.h</includes>
    <class kind="class">NTreeScope</class>
    <class kind="class">NTreeGroup</class>
    <class kind="class">NTreeNode</class>
    <class kind="class">NTreeGroupDivideContext</class>
    <class kind="class">NTreeGroupDivideContextPtr</class>
    <class kind="class">NTreePingContext</class>
  </compound>
  <compound kind="file">
    <name>OverlayAccess.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>OverlayAccess_8h</filename>
    <includes id="BaseOverlay_8h" name="BaseOverlay.h" local="no" imported="no">BaseOverlay.h</includes>
    <class kind="class">OverlayAccess</class>
  </compound>
  <compound kind="file">
    <name>OverlayDummy.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/i3/</path>
    <filename>OverlayDummy_8cc</filename>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="BaseOverlay_8h" name="BaseOverlay.h" local="no" imported="no">BaseOverlay.h</includes>
    <class kind="class">OverlayDummy</class>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>OverlayDummy_8cc.html</anchorfile>
      <anchor>ab310deab126e9de52dbdbb8035cb96a2</anchor>
      <arglist>(OverlayDummy)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OverlayKey.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>OverlayKey_8cc</filename>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="yes" imported="no">OverlayKey.h</includes>
    <includes id="Comparator_8h" name="Comparator.h" local="yes" imported="no">Comparator.h</includes>
    <includes id="BinaryValue_8h" name="BinaryValue.h" local="no" imported="no">BinaryValue.h</includes>
    <includes id="SHA1_8h" name="SHA1.h" local="yes" imported="no">SHA1.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>GMP_TYPE</name>
      <anchorfile>OverlayKey_8cc.html</anchorfile>
      <anchor>a50891517da1af2e8089f610b164a5108</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>OverlayKey_8cc.html</anchorfile>
      <anchor>ab306aabd93db7233ea9d97a8ec506244</anchor>
      <arglist>(std::ostream &amp;os, const OverlayKey &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>omnet_random</name>
      <anchorfile>OverlayKey_8cc.html</anchorfile>
      <anchor>a9838f06c5e58d8cce4633d609d9ef98a</anchor>
      <arglist>(mp_limb_t *r1p, mp_size_t r1n)</arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>HEX</name>
      <anchorfile>OverlayKey_8cc.html</anchorfile>
      <anchor>a6680bf2db1d975d3524b502b06f1eeab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OverlayKey.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>OverlayKey_8h</filename>
    <class kind="class">OverlayKey</class>
    <class kind="class">OverlayKeyBit</class>
    <member kind="function">
      <type>void</type>
      <name>omnet_random</name>
      <anchorfile>OverlayKey_8h.html</anchorfile>
      <anchor>a9838f06c5e58d8cce4633d609d9ef98a</anchor>
      <arglist>(mp_limb_t *r1p, mp_size_t r1n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>OverlayKey_8h.html</anchorfile>
      <anchor>ad0e33e81297ebdc74d9a9a40ea74caae</anchor>
      <arglist>(cCommBuffer *b, OverlayKey &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>OverlayKey_8h.html</anchorfile>
      <anchor>ae1d81b0fa52c4193bb02e61ec9b1000b</anchor>
      <arglist>(cCommBuffer *b, OverlayKey &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>oversim_byteswap.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>oversim__byteswap_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>bswap_16</name>
      <anchorfile>oversim__byteswap_8h.html</anchorfile>
      <anchor>ad409605fabe125b1d222acb94a3f480f</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>bswap_32</name>
      <anchorfile>oversim__byteswap_8h.html</anchorfile>
      <anchor>a5bcbf8b6ee067af4c2fd60ef3bdb39d2</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>bswap_64</name>
      <anchorfile>oversim__byteswap_8h.html</anchorfile>
      <anchor>a0c0b427a2547aa727e2c5262a174e26b</anchor>
      <arglist>(x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>oversim_mapset.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>oversim__mapset_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>UNORDERED_MAP</name>
      <anchorfile>oversim__mapset_8h.html</anchorfile>
      <anchor>a01388c1e8dcc1a72ca2a329dab0659f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UNORDERED_MULTIMAP</name>
      <anchorfile>oversim__mapset_8h.html</anchorfile>
      <anchor>afb73fc253542232a90217b077f50175b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UNORDERED_SET</name>
      <anchorfile>oversim__mapset_8h.html</anchorfile>
      <anchor>abf84a972399847d096ba75afedd3916d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HASH_NAMESPACE</name>
      <anchorfile>oversim__mapset_8h.html</anchorfile>
      <anchor>a6b5b02a62459b7506bb7ee59fa557285</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OverSimMessage.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>OverSimMessage_8cc</filename>
    <includes id="cnetcommbuffer_8h" name="cnetcommbuffer.h" local="no" imported="no">cnetcommbuffer.h</includes>
    <includes id="OverSimMessage__m_8h" name="OverSimMessage_m.h" local="yes" imported="no">OverSimMessage_m.h</includes>
    <includes id="OverSimMessage_8h" name="OverSimMessage.h" local="yes" imported="no">OverSimMessage.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>OverSimMessage_8cc.html</anchorfile>
      <anchor>a662f37fe08cd331146984f1532f87855</anchor>
      <arglist>(OverSimMessage)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OverSimMessage.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>OverSimMessage_8h</filename>
    <includes id="OverSimMessage__m_8h" name="OverSimMessage_m.h" local="yes" imported="no">OverSimMessage_m.h</includes>
    <class kind="class">OverSimMessage</class>
  </compound>
  <compound kind="file">
    <name>OverSimMessage_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>OverSimMessage__m_8h</filename>
    <class kind="class">OverSimMessage_Base</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>OverSimMessage__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>getEncapsulatedPacket</name>
      <anchorfile>OverSimMessage__m_8h.html</anchorfile>
      <anchor>a43f96a0a4abd079ab2402d8e74ad414f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>P2pns.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier2/p2pns/</path>
    <filename>P2pns_8cc</filename>
    <includes id="XmlRpcInterface_8h" name="XmlRpcInterface.h" local="no" imported="no">XmlRpcInterface.h</includes>
    <includes id="P2pnsMessage__m_8h" name="P2pnsMessage_m.h" local="no" imported="no">P2pnsMessage_m.h</includes>
    <includes id="P2pns_8h" name="P2pns.h" local="yes" imported="no">P2pns.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>P2pns_8cc.html</anchorfile>
      <anchor>a3854001bbac710c2997f014929ca05e3</anchor>
      <arglist>(P2pns)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>P2pns.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier2/p2pns/</path>
    <filename>P2pns_8h</filename>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="SHA1_8h" name="SHA1.h" local="no" imported="no">SHA1.h</includes>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <includes id="BaseApp_8h" name="BaseApp.h" local="no" imported="no">BaseApp.h</includes>
    <includes id="RpcMacros_8h" name="RpcMacros.h" local="no" imported="no">RpcMacros.h</includes>
    <includes id="P2pnsCache_8h" name="P2pnsCache.h" local="yes" imported="no">P2pnsCache.h</includes>
    <class kind="class">P2pns</class>
    <class kind="class">P2pns::OverlayKeyObject</class>
  </compound>
  <compound kind="file">
    <name>P2pnsCache.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier2/p2pns/</path>
    <filename>P2pnsCache_8cc</filename>
    <includes id="P2pnsCache_8h" name="P2pnsCache.h" local="yes" imported="no">P2pnsCache.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>P2pnsCache_8cc.html</anchorfile>
      <anchor>a5afcb75f6df1c4d5ea95e0f657917523</anchor>
      <arglist>(P2pnsCache)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>P2pnsCache_8cc.html</anchorfile>
      <anchor>a18568c9956e5c84c693fca7c33a8e8d2</anchor>
      <arglist>(std::ostream &amp;os, const P2pnsIdCacheEntry entry)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>P2pnsCache_8cc.html</anchorfile>
      <anchor>aa518ac71d7f3b58eca690b153decf781</anchor>
      <arglist>(std::ostream &amp;Stream, const P2pnsCacheEntry entry)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>P2pnsCache.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier2/p2pns/</path>
    <filename>P2pnsCache_8h</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="InitStages_8h" name="InitStages.h" local="no" imported="no">InitStages.h</includes>
    <includes id="BinaryValue_8h" name="BinaryValue.h" local="no" imported="no">BinaryValue.h</includes>
    <class kind="struct">P2pnsCacheEntry</class>
    <class kind="class">P2pnsIdCacheEntry</class>
    <class kind="class">P2pnsCache</class>
    <member kind="typedef">
      <type>std::map&lt; OverlayKey, P2pnsIdCacheEntry &gt;</type>
      <name>P2pnsIdCache</name>
      <anchorfile>P2pnsCache_8h.html</anchorfile>
      <anchor>aa3e78418bbb9e982b92516e26f1667b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>P2pnsConnectionStates</name>
      <anchorfile>P2pnsCache_8h.html</anchorfile>
      <anchor>a74f0e0c8c7e8c4f97d1ae81e96aad2b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTION_PENDING</name>
      <anchorfile>P2pnsCache_8h.html</anchorfile>
      <anchor>a74f0e0c8c7e8c4f97d1ae81e96aad2b0aeeb127c34e59506f568c5baeb4335c7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTION_ACTIVE</name>
      <anchorfile>P2pnsCache_8h.html</anchorfile>
      <anchor>a74f0e0c8c7e8c4f97d1ae81e96aad2b0a2dee7fdb974fb3a008e70d5261fe105a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>P2pnsMessage_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier2/p2pns/</path>
    <filename>P2pnsMessage__m_8h</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="TransportAddress_8h" name="TransportAddress.h" local="no" imported="no">TransportAddress.h</includes>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <includes id="BinaryValue_8h" name="BinaryValue.h" local="no" imported="no">BinaryValue.h</includes>
    <class kind="class">P2pnsTunnelMessage</class>
    <class kind="class">P2pnsKeepaliveTimer</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>P2pnsMessage__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>P2PNSTUNNELMESSAGE_L</name>
      <anchorfile>P2pnsMessage__m_8h.html</anchorfile>
      <anchor>a483b39dc595d0cedacfee6659a109db7</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>P2pnsMessage__m_8h.html</anchorfile>
      <anchor>ad8973d9829dba04f64ce7d4e6a7b58dd</anchor>
      <arglist>(cCommBuffer *b, P2pnsTunnelMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>P2pnsMessage__m_8h.html</anchorfile>
      <anchor>a2b89bff650d42fa2fe706a5d77ee996c</anchor>
      <arglist>(cCommBuffer *b, P2pnsTunnelMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>P2pnsMessage__m_8h.html</anchorfile>
      <anchor>a4127e7e0262b4a497eb7a2d180b986c5</anchor>
      <arglist>(cCommBuffer *b, P2pnsKeepaliveTimer &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>P2pnsMessage__m_8h.html</anchorfile>
      <anchor>ac5643fcdacde0b572026ab9f205d08ed</anchor>
      <arglist>(cCommBuffer *b, P2pnsKeepaliveTimer &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PacketParser.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>PacketParser_8h</filename>
    <class kind="class">PacketParser</class>
  </compound>
  <compound kind="file">
    <name>ParetoChurn.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>ParetoChurn_8cc</filename>
    <includes id="ParetoChurn_8h" name="ParetoChurn.h" local="yes" imported="no">ParetoChurn.h</includes>
    <includes id="GlobalStatisticsAccess_8h" name="GlobalStatisticsAccess.h" local="yes" imported="no">GlobalStatisticsAccess.h</includes>
    <includes id="Churn__m_8h" name="Churn_m.h" local="yes" imported="no">Churn_m.h</includes>
    <includes id="GlobalStatistics_8h" name="GlobalStatistics.h" local="yes" imported="no">GlobalStatistics.h</includes>
    <includes id="UnderlayConfigurator_8h" name="UnderlayConfigurator.h" local="no" imported="no">UnderlayConfigurator.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>ParetoChurn_8cc.html</anchorfile>
      <anchor>af14c4f022fd0d074dc0ec5c79fe6b27c</anchor>
      <arglist>(ParetoChurn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParetoChurn.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>ParetoChurn_8h</filename>
    <includes id="ChurnGenerator_8h" name="ChurnGenerator.h" local="no" imported="no">ChurnGenerator.h</includes>
    <class kind="class">ParetoChurn</class>
    <class kind="struct">ParetoChurn::node_stat</class>
  </compound>
  <compound kind="file">
    <name>Pastry.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/pastry/</path>
    <filename>Pastry_8cc</filename>
    <includes id="RpcMacros_8h" name="RpcMacros.h" local="no" imported="no">RpcMacros.h</includes>
    <includes id="InitStages_8h" name="InitStages.h" local="no" imported="no">InitStages.h</includes>
    <includes id="GlobalStatistics_8h" name="GlobalStatistics.h" local="no" imported="no">GlobalStatistics.h</includes>
    <includes id="Pastry_8h" name="Pastry.h" local="yes" imported="no">Pastry.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>Pastry_8cc.html</anchorfile>
      <anchor>aa16e595f40ced4a3ea29fe10ca31ddaa</anchor>
      <arglist>(Pastry)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Pastry.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/pastry/</path>
    <filename>Pastry_8h</filename>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="BaseOverlay_8h" name="BaseOverlay.h" local="no" imported="no">BaseOverlay.h</includes>
    <includes id="BasePastry_8h" name="BasePastry.h" local="no" imported="no">BasePastry.h</includes>
    <includes id="PastryTypes_8h" name="PastryTypes.h" local="yes" imported="no">PastryTypes.h</includes>
    <includes id="PastryMessage__m_8h" name="PastryMessage_m.h" local="yes" imported="no">PastryMessage_m.h</includes>
    <includes id="PastryRoutingTable_8h" name="PastryRoutingTable.h" local="yes" imported="no">PastryRoutingTable.h</includes>
    <includes id="PastryLeafSet_8h" name="PastryLeafSet.h" local="yes" imported="no">PastryLeafSet.h</includes>
    <includes id="PastryNeighborhoodSet_8h" name="PastryNeighborhoodSet.h" local="yes" imported="no">PastryNeighborhoodSet.h</includes>
    <class kind="class">Pastry</class>
  </compound>
  <compound kind="file">
    <name>PastryLeafSet.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/pastry/</path>
    <filename>PastryLeafSet_8cc</filename>
    <includes id="PastryLeafSet_8h" name="PastryLeafSet.h" local="yes" imported="no">PastryLeafSet.h</includes>
    <includes id="PastryTypes_8h" name="PastryTypes.h" local="yes" imported="no">PastryTypes.h</includes>
    <includes id="NodeVector_8h" name="NodeVector.h" local="yes" imported="no">NodeVector.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>LEAF_TEST</name>
      <anchorfile>PastryLeafSet_8cc.html</anchorfile>
      <anchor>a2b96f0bd3a00d62f9b701dde3155f44a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>PastryLeafSet_8cc.html</anchorfile>
      <anchor>a941c68de3e28600208c62ea471f8c7b6</anchor>
      <arglist>(PastryLeafSet)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PastryLeafSet.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/pastry/</path>
    <filename>PastryLeafSet_8h</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="NodeVector_8h" name="NodeVector.h" local="no" imported="no">NodeVector.h</includes>
    <includes id="PastryStateObject_8h" name="PastryStateObject.h" local="yes" imported="no">PastryStateObject.h</includes>
    <includes id="PastryTypes_8h" name="PastryTypes.h" local="yes" imported="no">PastryTypes.h</includes>
    <includes id="PastryMessage__m_8h" name="PastryMessage_m.h" local="yes" imported="no">PastryMessage_m.h</includes>
    <includes id="BasePastry_8h" name="BasePastry.h" local="yes" imported="no">BasePastry.h</includes>
    <class kind="struct">PLSRepairData</class>
    <class kind="class">PastryLeafSet</class>
  </compound>
  <compound kind="file">
    <name>PastryMessage_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/pastry/</path>
    <filename>PastryMessage__m_8h</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <class kind="class">PastryStateMessage</class>
    <class kind="class">PastryFindNodeExtData</class>
    <class kind="class">PastryNewLeafsMessage</class>
    <class kind="class">PastrySendState</class>
    <class kind="class">PastryJoinCall</class>
    <class kind="class">PastryJoinResponse</class>
    <class kind="class">RequestStateCall</class>
    <class kind="class">RequestStateResponse</class>
    <class kind="class">RequestRepairCall</class>
    <class kind="class">RequestRepairResponse</class>
    <class kind="class">RequestLeafSetCall</class>
    <class kind="class">RequestLeafSetResponse</class>
    <class kind="class">RequestRoutingRowCall</class>
    <class kind="class">RequestRoutingRowResponse</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PASTRY_L</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a32920e6d6b15fe8f397d441422a257a1</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PASTRYSTATE_L</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a106839fe14025799ce4116d15d14fed7</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PASTRYNEWLEAFS_L</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a811621e4068a33905b600d418168fae8</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PASTRYJOINCALL_L</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>aab42401451c980d6e53e28cb4fbdcd1c</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PASTRYJOINRESPONSE_L</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>ad7441d080f34a8faabe0e36a03d29ef3</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PASTRYREQUESTSTATECALL_L</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a0d0658b10577722868eb0eebbc41fb30</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PASTRYREQUESTSTATERESPONSE_L</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a891633185b2a1e7756c3d53a92c5ac45</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PASTRYREQUESTREPAIRCALL_L</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a8f933575a54140da5ac51cbcdcb0666b</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PASTRYREQUESTREPAIRRESPONSE_L</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a19a9cb29399732dbd564737e1dbdfb38</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PASTRYREQUESTLEAFSETCALL_L</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>ae4a17bae7faeed6a6c46cac07ad68d8d</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PASTRYREQUESTLEAFSETRESPONSE_L</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a53e86523b9577a5ca89a366a45ef4ebe</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PASTRYREQUESTROUTINGROWCALL_L</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a6c7bf6c9f0135ddd1b0c3e06cb92c270</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PASTRYREQUESTROUTINGROWRESPONSE_L</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a944270d2d78e2e2f377538540390a8da</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="enumeration">
      <name>PastryStateMsgType</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a36b8c7a9b6b9c184ab518606946446c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PASTRY_STATE_STD</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a36b8c7a9b6b9c184ab518606946446c7a47af4c6e9cd3d1165507bcbb572215c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PASTRY_STATE_JOIN</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a36b8c7a9b6b9c184ab518606946446c7a2ca6c13943a398b19f55c7d53529ab4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PASTRY_STATE_MINJOIN</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a36b8c7a9b6b9c184ab518606946446c7abfbb059d5d48ab5c68f49eb88464171d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PASTRY_STATE_UPDATE</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a36b8c7a9b6b9c184ab518606946446c7a54b61d3690155bcd38468f1a14de088e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PASTRY_STATE_REPAIR</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a36b8c7a9b6b9c184ab518606946446c7a51f4659797b81e09bc35edfded346b7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PASTRY_STATE_JOINUPDATE</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a36b8c7a9b6b9c184ab518606946446c7aa3cde395106c55f5fb90538d45fdd46c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PASTRY_STATE_LEAFSET</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a36b8c7a9b6b9c184ab518606946446c7acaf8b7f0f06bde65edd6fcc21c0fe74b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PASTRY_STATE_ROUTINGROW</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a36b8c7a9b6b9c184ab518606946446c7add7d8a80690b4e9619d74d6059f7cb8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a5eca6030cd530f7fb2b20e98d930057d</anchor>
      <arglist>(cCommBuffer *b, PastryStateMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a4ecc3d3afedecc2c2c1349c230506d72</anchor>
      <arglist>(cCommBuffer *b, PastryStateMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>aaf3726b29ebd3d0944cba2746b42d535</anchor>
      <arglist>(cCommBuffer *b, PastryFindNodeExtData &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a7438385f80453372c027238fda1affe1</anchor>
      <arglist>(cCommBuffer *b, PastryFindNodeExtData &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a6d29ae775107cf6eb69af5c8ae7a175a</anchor>
      <arglist>(cCommBuffer *b, PastryNewLeafsMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a66a6b70466bae98891b055ab55061d18</anchor>
      <arglist>(cCommBuffer *b, PastryNewLeafsMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>ac684c088028345956c852fe24e30c8e4</anchor>
      <arglist>(cCommBuffer *b, PastrySendState &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>aa944c8926f58f610f3f3afe7fee372a7</anchor>
      <arglist>(cCommBuffer *b, PastrySendState &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>ae24ac885743e18e75e3a0686b72281f1</anchor>
      <arglist>(cCommBuffer *b, PastryJoinCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>af54ff5e2997d82861f9114cc6cc60fd1</anchor>
      <arglist>(cCommBuffer *b, PastryJoinCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>aef519b34e460746595786938ff8a5736</anchor>
      <arglist>(cCommBuffer *b, PastryJoinResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>abcb86eb1341f30a67fe694aceef3c4dc</anchor>
      <arglist>(cCommBuffer *b, PastryJoinResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>ab4e44cb738b677efcc1df36bdb6c6dd7</anchor>
      <arglist>(cCommBuffer *b, RequestStateCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>ab24871235749407e92dd512e61120c43</anchor>
      <arglist>(cCommBuffer *b, RequestStateCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a4b078b40476b3e60bd9427833c0d6559</anchor>
      <arglist>(cCommBuffer *b, RequestStateResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a5317a61fcb1643bb6d07a5eda7996d9c</anchor>
      <arglist>(cCommBuffer *b, RequestStateResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a285e4b8a4fd2cf6312e69c8ecdd794bd</anchor>
      <arglist>(cCommBuffer *b, RequestRepairCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>ae16fd28ddda6b5681aed84def7388742</anchor>
      <arglist>(cCommBuffer *b, RequestRepairCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a618131ca82091f7f462999e18aa5b2c9</anchor>
      <arglist>(cCommBuffer *b, RequestRepairResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a8060f153887716c9691a0bc0716bb254</anchor>
      <arglist>(cCommBuffer *b, RequestRepairResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>aa08127ca274607b91fa6d60033c6ccda</anchor>
      <arglist>(cCommBuffer *b, RequestLeafSetCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a02808f853b19b5a61e6be1f939f662f0</anchor>
      <arglist>(cCommBuffer *b, RequestLeafSetCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a3a24269c6de9b0783fbc1e8563a14374</anchor>
      <arglist>(cCommBuffer *b, RequestLeafSetResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a8f3fdd95caabe8af8d0b598efd0e03d5</anchor>
      <arglist>(cCommBuffer *b, RequestLeafSetResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>adaa4bc348c00a6ed518bf1251ccd0a12</anchor>
      <arglist>(cCommBuffer *b, RequestRoutingRowCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>addcace7b011dfe98b5ab5a1ace9657b1</anchor>
      <arglist>(cCommBuffer *b, RequestRoutingRowCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>afb0b4ded362c3f766e2d5287c95c0a25</anchor>
      <arglist>(cCommBuffer *b, RequestRoutingRowResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>af4cafea544212d894e065503be7a7014</anchor>
      <arglist>(cCommBuffer *b, RequestRoutingRowResponse &amp;obj)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>PASTRYTYPE_L</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a0aa90e427db49952b90e522fac2ea89b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>LASTHOPFLAG_L</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>ab287f59036a1e2cec592f8ffb4064561</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>TIMESTAMP_L</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>ab4fe82ae7b45df98871913c185739cb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>ROWNUMBER_L</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a5365d74fc7e66d2a7841c155ea04a2fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>PASTRYFINDNODEEXTDATA_L</name>
      <anchorfile>PastryMessage__m_8h.html</anchorfile>
      <anchor>a3194cc18d316439cb276491e29295c70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PastryNeighborhoodSet.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/pastry/</path>
    <filename>PastryNeighborhoodSet_8cc</filename>
    <includes id="PastryNeighborhoodSet_8h" name="PastryNeighborhoodSet.h" local="yes" imported="no">PastryNeighborhoodSet.h</includes>
    <includes id="PastryTypes_8h" name="PastryTypes.h" local="yes" imported="no">PastryTypes.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>PastryNeighborhoodSet_8cc.html</anchorfile>
      <anchor>ac65b95ea9028706413e624412c66d17e</anchor>
      <arglist>(PastryNeighborhoodSet)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>PastryNeighborhoodSet_8cc.html</anchorfile>
      <anchor>a8daf9d85fbe9d6c4184ead1fb54805be</anchor>
      <arglist>(std::ostream &amp;os, const PastryExtendedNode &amp;n)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PastryNeighborhoodSet.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/pastry/</path>
    <filename>PastryNeighborhoodSet_8h</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="PastryStateObject_8h" name="PastryStateObject.h" local="yes" imported="no">PastryStateObject.h</includes>
    <includes id="PastryTypes_8h" name="PastryTypes.h" local="yes" imported="no">PastryTypes.h</includes>
    <includes id="PastryMessage__m_8h" name="PastryMessage_m.h" local="yes" imported="no">PastryMessage_m.h</includes>
    <class kind="class">PastryNeighborhoodSet</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>PastryNeighborhoodSet_8h.html</anchorfile>
      <anchor>a8daf9d85fbe9d6c4184ead1fb54805be</anchor>
      <arglist>(std::ostream &amp;os, const PastryExtendedNode &amp;n)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PastryRoutingTable.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/pastry/</path>
    <filename>PastryRoutingTable_8cc</filename>
    <includes id="PastryRoutingTable_8h" name="PastryRoutingTable.h" local="yes" imported="no">PastryRoutingTable.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>PastryRoutingTable_8cc.html</anchorfile>
      <anchor>a60429d2cd35609e5655e8208bb82d8c6</anchor>
      <arglist>(PastryRoutingTable)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>PastryRoutingTable_8cc.html</anchorfile>
      <anchor>a741234c6753a2bbf7d99b20e34e3204f</anchor>
      <arglist>(std::ostream &amp;os, const PRTRow &amp;row)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PastryRoutingTable.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/pastry/</path>
    <filename>PastryRoutingTable_8h</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="PastryStateObject_8h" name="PastryStateObject.h" local="yes" imported="no">PastryStateObject.h</includes>
    <includes id="PastryTypes_8h" name="PastryTypes.h" local="yes" imported="no">PastryTypes.h</includes>
    <includes id="PastryMessage__m_8h" name="PastryMessage_m.h" local="yes" imported="no">PastryMessage_m.h</includes>
    <class kind="struct">PRTTrackRepair</class>
    <class kind="class">PastryRoutingTable</class>
    <member kind="typedef">
      <type>std::vector&lt; PastryExtendedNode &gt;</type>
      <name>PRTRow</name>
      <anchorfile>PastryRoutingTable_8h.html</anchorfile>
      <anchor>aef87e32a9d3f457c82682f7d416ff0dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>PastryRoutingTable_8h.html</anchorfile>
      <anchor>a741234c6753a2bbf7d99b20e34e3204f</anchor>
      <arglist>(std::ostream &amp;os, const PRTRow &amp;row)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PastryStateObject.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/pastry/</path>
    <filename>PastryStateObject_8cc</filename>
    <includes id="InitStages_8h" name="InitStages.h" local="no" imported="no">InitStages.h</includes>
    <includes id="PastryStateObject_8h" name="PastryStateObject.h" local="yes" imported="no">PastryStateObject.h</includes>
    <includes id="PastryTypes_8h" name="PastryTypes.h" local="yes" imported="no">PastryTypes.h</includes>
  </compound>
  <compound kind="file">
    <name>PastryStateObject.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/pastry/</path>
    <filename>PastryStateObject_8h</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="NodeVector_8h" name="NodeVector.h" local="no" imported="no">NodeVector.h</includes>
    <includes id="PastryTypes_8h" name="PastryTypes.h" local="yes" imported="no">PastryTypes.h</includes>
    <includes id="PastryMessage__m_8h" name="PastryMessage_m.h" local="yes" imported="no">PastryMessage_m.h</includes>
    <class kind="class">PastryStateObject</class>
  </compound>
  <compound kind="file">
    <name>PastryTypes.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/pastry/</path>
    <filename>PastryTypes_8h</filename>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="PastryMessage__m_8h" name="PastryMessage_m.h" local="yes" imported="no">PastryMessage_m.h</includes>
    <class kind="struct">PastryStateMsgProximity</class>
    <class kind="struct">PastryStateMsgHandle</class>
    <class kind="struct">PastryExtendedNode</class>
    <member kind="define">
      <type>#define</type>
      <name>PASTRY_PROX_INFINITE</name>
      <anchorfile>PastryTypes_8h.html</anchorfile>
      <anchor>ac63315d5b1f74062305fa0ef8ad8c2f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PASTRY_PROX_UNDEF</name>
      <anchorfile>PastryTypes_8h.html</anchorfile>
      <anchor>ac72c42e64b55779864ac448c6a71a0e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PASTRY_PROX_PENDING</name>
      <anchorfile>PastryTypes_8h.html</anchorfile>
      <anchor>a095206927871324515b53a7e3417f4ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PeerInfo.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>PeerInfo_8cc</filename>
    <includes id="PeerInfo_8h" name="PeerInfo.h" local="yes" imported="no">PeerInfo.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>PeerInfo_8cc.html</anchorfile>
      <anchor>ace06fe786b1f81e9a0e788bc76d3db48</anchor>
      <arglist>(std::ostream &amp;os, const PeerInfo info)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PeerInfo.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>PeerInfo_8h</filename>
    <class kind="class">PeerInfo</class>
  </compound>
  <compound kind="file">
    <name>PeerStorage.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>PeerStorage_8cc</filename>
    <includes id="PeerInfo_8h" name="PeerInfo.h" local="no" imported="no">PeerInfo.h</includes>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="PeerStorage_8h" name="PeerStorage.h" local="yes" imported="no">PeerStorage.h</includes>
  </compound>
  <compound kind="file">
    <name>PeerStorage.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>PeerStorage_8h</filename>
    <includes id="oversim__mapset_8h" name="oversim_mapset.h" local="no" imported="no">oversim_mapset.h</includes>
    <includes id="TransportAddress_8h" name="TransportAddress.h" local="no" imported="no">TransportAddress.h</includes>
    <includes id="HashFunc_8h" name="HashFunc.h" local="no" imported="no">HashFunc.h</includes>
    <includes id="PeerInfo_8h" name="PeerInfo.h" local="no" imported="no">PeerInfo.h</includes>
    <class kind="struct">AddrPerOverlay</class>
    <class kind="class">AddrPerOverlayVector</class>
    <class kind="struct">BootstrapEntry</class>
    <class kind="class">PeerStorage</class>
    <member kind="typedef">
      <type>UNORDERED_MAP&lt; IPvXAddress, BootstrapEntry &gt;</type>
      <name>PeerHashMap</name>
      <anchorfile>PeerStorage_8h.html</anchorfile>
      <anchor>a8e9ded8a226ddab6a368d968f11ddbd6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ProximityLookupMessages_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>ProximityLookupMessages__m_8h</filename>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <class kind="class">ProxFindNodeCall</class>
    <class kind="class">ProxFindNodeResponse</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>ProximityLookupMessages__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PROXFINDNODECALL_L</name>
      <anchorfile>ProximityLookupMessages__m_8h.html</anchorfile>
      <anchor>ae640004030d97278d33d5c3820d6fe9c</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PROXFINDNODERESPONSE_L</name>
      <anchorfile>ProximityLookupMessages__m_8h.html</anchorfile>
      <anchor>aa8b5a0f9b90209e66a7a28475c5e501c</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="enumeration">
      <name>ProximityLookupMetrik</name>
      <anchorfile>ProximityLookupMessages__m_8h.html</anchorfile>
      <anchor>a02f73627129187329ff5fa9f6519f53d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONE</name>
      <anchorfile>ProximityLookupMessages__m_8h.html</anchorfile>
      <anchor>a02f73627129187329ff5fa9f6519f53dac157bdf0b85a40d2619cbc8bc1ae5fe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BY_KEY</name>
      <anchorfile>ProximityLookupMessages__m_8h.html</anchorfile>
      <anchor>a02f73627129187329ff5fa9f6519f53da6d4c4eabb7d76d495dad5313c58a1b3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BY_KEY_X</name>
      <anchorfile>ProximityLookupMessages__m_8h.html</anchorfile>
      <anchor>a02f73627129187329ff5fa9f6519f53da2f1efe12fef9bf62ea9d15331e2abed2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BY_PROXIMITY</name>
      <anchorfile>ProximityLookupMessages__m_8h.html</anchorfile>
      <anchor>a02f73627129187329ff5fa9f6519f53da3691b42d51888f439332983642da6718</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BY_PROXIMITY_X</name>
      <anchorfile>ProximityLookupMessages__m_8h.html</anchorfile>
      <anchor>a02f73627129187329ff5fa9f6519f53da0f12a97a4d5ea87c57e60d9bc9b1f655</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BY_KEY_AND_PROXIMITY</name>
      <anchorfile>ProximityLookupMessages__m_8h.html</anchorfile>
      <anchor>a02f73627129187329ff5fa9f6519f53da841625c4074e9be43efba5974f7c4be9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BY_KEY_AND_PROXIMITY_WEIGHT</name>
      <anchorfile>ProximityLookupMessages__m_8h.html</anchorfile>
      <anchor>a02f73627129187329ff5fa9f6519f53da3791df66bfec6a7c460ca26affd82a6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>ProximityLookupMessages__m_8h.html</anchorfile>
      <anchor>adb78fd2bfc8b62cb5754d8c79c7342d1</anchor>
      <arglist>(cCommBuffer *b, ProxFindNodeCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>ProximityLookupMessages__m_8h.html</anchorfile>
      <anchor>a4b66a3ec662850acb792c7f5c27b76f0</anchor>
      <arglist>(cCommBuffer *b, ProxFindNodeCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>ProximityLookupMessages__m_8h.html</anchorfile>
      <anchor>ab53387d2d5fae49d4ad0f90ff922ccb3</anchor>
      <arglist>(cCommBuffer *b, ProxFindNodeResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>ProximityLookupMessages__m_8h.html</anchorfile>
      <anchor>aaf45ae1b40ff846296c23faf5c94c4b3</anchor>
      <arglist>(cCommBuffer *b, ProxFindNodeResponse &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ProxNodeHandle.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>ProxNodeHandle_8cc</filename>
    <includes id="ProxNodeHandle_8h" name="ProxNodeHandle.h" local="yes" imported="no">ProxNodeHandle.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MAXTIME_DBL</name>
      <anchorfile>ProxNodeHandle_8cc.html</anchorfile>
      <anchor>ab2c5762070652185060699bbbb7f54a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>ProxNodeHandle_8cc.html</anchorfile>
      <anchor>add431695399cdf49d3f6481c55e66130</anchor>
      <arglist>(std::ostream &amp;os, const Prox &amp;prox)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>ProxNodeHandle_8cc.html</anchorfile>
      <anchor>a2aa409c6fcba3142db523728d1aafe02</anchor>
      <arglist>(std::ostream &amp;os, const ProxTransportAddress &amp;address)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ProxNodeHandle.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>ProxNodeHandle_8h</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="yes" imported="no">NodeHandle.h</includes>
    <class kind="struct">Prox</class>
    <class kind="struct">ProxKey</class>
    <class kind="class">ProxNodeHandle</class>
    <class kind="class">ProxTransportAddress</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>ProxNodeHandle_8h.html</anchorfile>
      <anchor>a2aa409c6fcba3142db523728d1aafe02</anchor>
      <arglist>(std::ostream &amp;os, const ProxTransportAddress &amp;address)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PubSubLobby.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/pubsubmmog/</path>
    <filename>PubSubLobby_8cc</filename>
    <includes id="PubSubLobby_8h" name="PubSubLobby.h" local="yes" imported="no">PubSubLobby.h</includes>
    <includes id="GlobalStatistics_8h" name="GlobalStatistics.h" local="no" imported="no">GlobalStatistics.h</includes>
    <includes id="GlobalNodeListAccess_8h" name="GlobalNodeListAccess.h" local="no" imported="no">GlobalNodeListAccess.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>PubSubLobby_8cc.html</anchorfile>
      <anchor>aacc88f70320aab4aae8c699035c42779</anchor>
      <arglist>(std::ostream &amp;o, const PubSubLobby::ChildEntry &amp;entry)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>PubSubLobby_8cc.html</anchorfile>
      <anchor>a3f3cc4d2746b4dc6eeed3dfb7205955c</anchor>
      <arglist>(PubSubLobby)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PubSubLobby.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/pubsubmmog/</path>
    <filename>PubSubLobby_8h</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="BaseOverlay_8h" name="BaseOverlay.h" local="no" imported="no">BaseOverlay.h</includes>
    <includes id="PubSubMessage__m_8h" name="PubSubMessage_m.h" local="yes" imported="no">PubSubMessage_m.h</includes>
    <includes id="PubSubSubspace_8h" name="PubSubSubspace.h" local="yes" imported="no">PubSubSubspace.h</includes>
    <class kind="class">PubSubLobby</class>
    <class kind="class">PubSubLobby::ChildEntry</class>
  </compound>
  <compound kind="file">
    <name>PubSubMessage_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/pubsubmmog/</path>
    <filename>PubSubMessage__m_8h</filename>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <includes id="Vector2D_8h" name="Vector2D.h" local="no" imported="no">Vector2D.h</includes>
    <class kind="class">PubSubTimer</class>
    <class kind="class">PubSubJoinCall</class>
    <class kind="class">PubSubJoinResponse</class>
    <class kind="class">PubSubResponsibleNodeCall</class>
    <class kind="class">PubSubResponsibleNodeResponse</class>
    <class kind="class">PubSubTakeOverSubspaceCall</class>
    <class kind="class">PubSubTakeOverSubspaceResponse</class>
    <class kind="class">PubSubSubscriptionCall</class>
    <class kind="class">PubSubSubscriptionResponse</class>
    <class kind="class">PubSubUnsubscriptionMessage</class>
    <class kind="class">PubSubHelpCall</class>
    <class kind="class">PubSubHelpResponse</class>
    <class kind="class">PubSubIntermediateCall</class>
    <class kind="class">PubSubIntermediateResponse</class>
    <class kind="class">PubSubBackupCall</class>
    <class kind="class">PubSubBackupResponse</class>
    <class kind="class">PubSubPingCall</class>
    <class kind="class">PubSubPingResponse</class>
    <class kind="class">PubSubReplacementMessage</class>
    <class kind="class">PubSubFailedNodeMessage</class>
    <class kind="class">PubSubNodeLeftMessage</class>
    <class kind="class">PubSubAdoptChildCall</class>
    <class kind="class">PubSubAdoptChildResponse</class>
    <class kind="class">PubSubReleaseIntermediateMessage</class>
    <class kind="class">PubSubHelpReleaseMessage</class>
    <class kind="class">PubSubBackupSubscriptionMessage</class>
    <class kind="class">PubSubBackupIntermediateMessage</class>
    <class kind="class">PubSubBackupUnsubscribeMessage</class>
    <class kind="class">PubSubMoveMessage</class>
    <class kind="class">PubSubMoveListMessage</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUBSUB_JOINCALL_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>aa96a7433fbb3964212e56f287a1ac7a9</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUBSUB_JOINRESPONSE_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a6a72ae762a9911847d32136060e2ec4e</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUBSUB_RESPONSIBLENODECALL_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a5d4e7d4a5b91386ccba0e0a03330ab9d</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUBSUB_RESPONSIBLENODERESPONSE_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a83b307ff36cba03e2513b9b187545f7e</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUBSUB_TAKEOVERSUBSPACECALL_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a98a4918aeaf248642af3549108763ab4</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUBSUB_TAKEOVERSUBSPACERESPONSE_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a4b113dcf08095771bd96237e30495a29</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUBSUB_SUBSCRIPTIONCALL_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a2b5451b24d68787636358002b3292042</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUBSUB_SUBSCRIPTIONRESPONSE_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a2d60280823412936f4ce8dc98ae3fb41</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUBSUB_UNSUBSCRIPTION_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a88c175706edd5bdd237ad0768aeb6ef8</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUBSUB_HELPCALL_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>aac95c8ba038a0a9dd3671a29330493a9</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUBSUB_HELPRESPONSE_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>aa5cea757d38ff4d8ff69447f73c7dae0</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUBSUB_INTERMEDIATECALL_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a961df784f796bd894a954761e5585e72</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUBSUB_INTERMEDIATERESPONSE_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a520b21326aecd010016e460c12c4a572</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUBSUB_BACKUPCALL_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a571c4080ef67f0cfe61d2e1a8f80243d</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUBSUB_BACKUPRESPONSE_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a3a767754300bd5331a8bfabb54477377</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUBSUB_PINGCALL_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a5afa100d3f724e66abc9356ec55342b5</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUBSUB_PINGRESPONSE_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a9221c16747bc0f1ebce9a85e72a5d479</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUBSUB_REPLACEMENT_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a9dd61fb5cd5685440c7e610a2800b1f9</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUBSUB_FAILEDNODE_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>acb366745fb62311b100b1632b04b1141</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUBSUB_NODELEFT_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>ac2a4c9a20c40c17b2a948f346d5ae4fc</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUBSUB_ADOPTCHILDCALL_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a40172b8994bee9881c879d1f69994013</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUBSUB_ADOPTCHILDRESPONSE_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a245e5d150580b43d98348a8cd4008373</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUBSUB_RELEASEINTERMEDIATE_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a7a3eb4a2755d7c92be0f817a2a90340a</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUBSUB_HELPRELEASE_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>add2bbabb5819a74b1655d4f4ebdc5275</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUBSUB_BACKUPSUBSCRIPTION_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a485654404a477aa60cb34dd0ae722258</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUBSUB_BACKUPINTERMEDIATE_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>af0f2565f24c2e5b8e3655c3fb073d887</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUBSUB_BACKUPUNSUBSCRIBE_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a7e3bc76c2154625bc34828f44408df2e</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUBSUB_MOVE_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a07feb8f3c2aaad5db67ec6860dec5c5d</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUBSUB_MOVELIST_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a874c79322e2687e6c465d6c75129b8df</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="enumeration">
      <name>PubSubTimerType</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>ac87923fdb9d8348a9eb766921ec0e04c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PUBSUB_HEARTBEAT</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>ac87923fdb9d8348a9eb766921ec0e04caec28dc4bd962108ceb27575f46b81ebd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PUBSUB_CHILDPING</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>ac87923fdb9d8348a9eb766921ec0e04caa64f2984ebaaa94fb52bc3ff99d24fa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PUBSUB_PARENT_TIMEOUT</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>ac87923fdb9d8348a9eb766921ec0e04cad6da37474996a5016fe145fcc24a52c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PUBSUB_TAKEOVER_GRACE_TIME</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>ac87923fdb9d8348a9eb766921ec0e04cab0e89a4ee35934c7d563a3d44f906bef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PUBSUB_EVENTDELIVERY</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>ac87923fdb9d8348a9eb766921ec0e04cab87b77accd020036a875063be27c753c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>PubSubHelpType</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a0a7abf0acc5a382f3b386ab1a09cd07a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PUBSUB_BACKUP</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a0a7abf0acc5a382f3b386ab1a09cd07aaa575d5ab279429401172053d228e4838</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PUBSUB_INTERMEDIATE</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a0a7abf0acc5a382f3b386ab1a09cd07aa99501a84d5d53b3a4c78362dc7c7a551</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>PubSubPingType</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a955af4961bb8702caeddf04706c0681b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PUBSUB_PING_BACKUP</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a955af4961bb8702caeddf04706c0681ba4bcfe90f539ae081948077a9d0c1d992</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PUBSUB_PING_INTERMEDIATE</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a955af4961bb8702caeddf04706c0681ba3402d727b81d4511a52d09df2252918c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PUBSUB_PING_CHILD</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a955af4961bb8702caeddf04706c0681ba6be4bc3a5b9c7bee39a3eed787e5eb90</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a6693d1c085f812425fe177876c7dff88</anchor>
      <arglist>(cCommBuffer *b, PubSubTimer &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>aa5c9efc8d82361a80bdf42ee75b1599b</anchor>
      <arglist>(cCommBuffer *b, PubSubTimer &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>acc1a45860f24b46784012b5f3b2db385</anchor>
      <arglist>(cCommBuffer *b, PubSubJoinCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a33682619672e7c3f7e12e59d16403d2d</anchor>
      <arglist>(cCommBuffer *b, PubSubJoinCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a119781e68bf76d8bc41561e9b1f47c60</anchor>
      <arglist>(cCommBuffer *b, PubSubJoinResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a1f2eab647f0b505f307238807f63ccc8</anchor>
      <arglist>(cCommBuffer *b, PubSubJoinResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a548639b3562af28e25bbf0c4f16558c7</anchor>
      <arglist>(cCommBuffer *b, PubSubResponsibleNodeCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a348c8c050684afdd75f2210b9d40c9d3</anchor>
      <arglist>(cCommBuffer *b, PubSubResponsibleNodeCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a71c12962276d00bb2291092eb6824dcf</anchor>
      <arglist>(cCommBuffer *b, PubSubResponsibleNodeResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a0eb8f9f628966b6ba6a6a0ba87937049</anchor>
      <arglist>(cCommBuffer *b, PubSubResponsibleNodeResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a506a2a030e78ec54ba3eb054704a7a11</anchor>
      <arglist>(cCommBuffer *b, PubSubTakeOverSubspaceCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a8cece80d447e1ff44032375dc46cce12</anchor>
      <arglist>(cCommBuffer *b, PubSubTakeOverSubspaceCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a7d7fe0feb9749c0ef54c146fe7c76c46</anchor>
      <arglist>(cCommBuffer *b, PubSubTakeOverSubspaceResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a830a398e4f0ac42f387db787b8f0d4ef</anchor>
      <arglist>(cCommBuffer *b, PubSubTakeOverSubspaceResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>aebf6bab548a8346f421aed2433a4f998</anchor>
      <arglist>(cCommBuffer *b, PubSubSubscriptionCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a22874623e042ab093cad460edecd3471</anchor>
      <arglist>(cCommBuffer *b, PubSubSubscriptionCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a16d04b0a3ab55f5d7c8c7745a3adc5e5</anchor>
      <arglist>(cCommBuffer *b, PubSubSubscriptionResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a3a172a5ae2a49e3e8bc091a628016690</anchor>
      <arglist>(cCommBuffer *b, PubSubSubscriptionResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a3f9f3a291fd32b4393e431549662b92b</anchor>
      <arglist>(cCommBuffer *b, PubSubUnsubscriptionMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a31411c60950e1d30c6dcd0bc8f448714</anchor>
      <arglist>(cCommBuffer *b, PubSubUnsubscriptionMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>ab9939846a131652d1c4ea81cc1b3272a</anchor>
      <arglist>(cCommBuffer *b, PubSubHelpCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a8e781396b1ede97f2e7b59003e1cd7b7</anchor>
      <arglist>(cCommBuffer *b, PubSubHelpCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a2cb2560117cdee8c99a0d11bcbe084ac</anchor>
      <arglist>(cCommBuffer *b, PubSubHelpResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a3226b6c8b7afd351788994a5e54a2d1e</anchor>
      <arglist>(cCommBuffer *b, PubSubHelpResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>ae12e79c631bcc85a02beadaa6de6a7d0</anchor>
      <arglist>(cCommBuffer *b, PubSubIntermediateCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a439c45c0cd0bcd6038d28fd1aaff1db8</anchor>
      <arglist>(cCommBuffer *b, PubSubIntermediateCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a410223dbd698560a846b5d18f8ce52d3</anchor>
      <arglist>(cCommBuffer *b, PubSubIntermediateResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a12696641b0a4558c410716e93457da0b</anchor>
      <arglist>(cCommBuffer *b, PubSubIntermediateResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>ae6e08a34d0c8bb8dd56e6bf03554ce13</anchor>
      <arglist>(cCommBuffer *b, PubSubBackupCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>af7d333677289704c8629535cb5c2ef13</anchor>
      <arglist>(cCommBuffer *b, PubSubBackupCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a378f86af4dd1eab0c266da3bd1b2ba39</anchor>
      <arglist>(cCommBuffer *b, PubSubBackupResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a10f5b3297e38f08cbe2d03a7c9867f35</anchor>
      <arglist>(cCommBuffer *b, PubSubBackupResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a56f95e027ea169c444dfa089463de8d4</anchor>
      <arglist>(cCommBuffer *b, PubSubPingCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>ab1d53f800724a22fcb56259ac47712ac</anchor>
      <arglist>(cCommBuffer *b, PubSubPingCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>ad067912c71736f19ff184a034e9cddf6</anchor>
      <arglist>(cCommBuffer *b, PubSubPingResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>ab12f283dcf870e2ba7b65e333ca1eb0b</anchor>
      <arglist>(cCommBuffer *b, PubSubPingResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a4617ed25661d919c78106f8c64e263c5</anchor>
      <arglist>(cCommBuffer *b, PubSubReplacementMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>ae5cff22ad2ce4791e2bfce74f0ea0ff0</anchor>
      <arglist>(cCommBuffer *b, PubSubReplacementMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>ab4f5fcd3b31cbb24a2a961901770b4d4</anchor>
      <arglist>(cCommBuffer *b, PubSubFailedNodeMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>acd13c9619b4ac157fa5f07f22d28dd02</anchor>
      <arglist>(cCommBuffer *b, PubSubFailedNodeMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>ace5dcbfb46217795f076f26b86b42d4b</anchor>
      <arglist>(cCommBuffer *b, PubSubNodeLeftMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>acb9d648512f518cc3efab54577f53491</anchor>
      <arglist>(cCommBuffer *b, PubSubNodeLeftMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a04e4bab1974fb5cbc2e6c6b0a0f35571</anchor>
      <arglist>(cCommBuffer *b, PubSubAdoptChildCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a03c2653c4861b098dd741a11fa9b3d45</anchor>
      <arglist>(cCommBuffer *b, PubSubAdoptChildCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a8f49ecee40b9af6e846dc1276ea09646</anchor>
      <arglist>(cCommBuffer *b, PubSubAdoptChildResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>aa1c10cbbabc2137ee47f018983d22835</anchor>
      <arglist>(cCommBuffer *b, PubSubAdoptChildResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>ab61e0fd1b6e29bfe7bfaf89dc0dfc4d0</anchor>
      <arglist>(cCommBuffer *b, PubSubReleaseIntermediateMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>aea88fe327f8d7741104eaad049f973bc</anchor>
      <arglist>(cCommBuffer *b, PubSubReleaseIntermediateMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a0913b8ad48b82f200adb2ae367ef3490</anchor>
      <arglist>(cCommBuffer *b, PubSubHelpReleaseMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a7b9f894aacbe0b4ebff7d6e6b2a6fc68</anchor>
      <arglist>(cCommBuffer *b, PubSubHelpReleaseMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a4ec78788737159b80b3f7df46ca660be</anchor>
      <arglist>(cCommBuffer *b, PubSubBackupSubscriptionMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>acdd34db4a6e8363987a4244b140e7a6e</anchor>
      <arglist>(cCommBuffer *b, PubSubBackupSubscriptionMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a0a7775bc65da2ee6eec3635ec16aa80c</anchor>
      <arglist>(cCommBuffer *b, PubSubBackupIntermediateMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a6ce3fb9148e08ba20818c84033b88eec</anchor>
      <arglist>(cCommBuffer *b, PubSubBackupIntermediateMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>ad4e284807f200910f4d22c271fb16236</anchor>
      <arglist>(cCommBuffer *b, PubSubBackupUnsubscribeMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a03e5d75ebf461efc9f7b799e0325fc4d</anchor>
      <arglist>(cCommBuffer *b, PubSubBackupUnsubscribeMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a288f98b592c9585158c997b50f8ba734</anchor>
      <arglist>(cCommBuffer *b, PubSubMoveMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a5d093922fb60b1df82557f3c867ac383</anchor>
      <arglist>(cCommBuffer *b, PubSubMoveMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a518cbe8a36afda4c894cc5b866c09cd7</anchor>
      <arglist>(cCommBuffer *b, PubSubMoveListMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>ae9b53b7f525041cf238f0b6bbd88e579</anchor>
      <arglist>(cCommBuffer *b, PubSubMoveListMessage &amp;obj)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>PUBSUB_FLAG_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>ad7135089113fde53d0cd8cb61c863d14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>PUBSUB_VECTOR_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a79d696c54f735bd5edbcc95e3b481d31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>PUBSUB_RESS_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a1bc0857ac9e248f0502239db84156099</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>PUBSUB_SUBSPACE_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>a25f059a1c855f28a4e2a09ef1d2cb1a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>PUBSUB_CHILDPOS_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>af84a938b5ac5af25abe109dd3d9165d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>PUBSUB_TIMESTAMP_L</name>
      <anchorfile>PubSubMessage__m_8h.html</anchorfile>
      <anchor>abbf2add6f2471452d7e337d3b6f892b2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PubSubMMOG.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/pubsubmmog/</path>
    <filename>PubSubMMOG_8cc</filename>
    <includes id="PubSubMMOG_8h" name="PubSubMMOG.h" local="yes" imported="no">PubSubMMOG.h</includes>
    <includes id="GlobalNodeListAccess_8h" name="GlobalNodeListAccess.h" local="yes" imported="no">GlobalNodeListAccess.h</includes>
    <includes id="GlobalStatistics_8h" name="GlobalStatistics.h" local="no" imported="no">GlobalStatistics.h</includes>
    <includes id="BootstrapList_8h" name="BootstrapList.h" local="no" imported="no">BootstrapList.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>PubSubMMOG_8cc.html</anchorfile>
      <anchor>a084d7a54c7f7b601b4575c1a9d78adeb</anchor>
      <arglist>(PubSubMMOG)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PubSubMMOG.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/pubsubmmog/</path>
    <filename>PubSubMMOG_8h</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="BaseOverlay_8h" name="BaseOverlay.h" local="no" imported="no">BaseOverlay.h</includes>
    <includes id="PubSubSubspace_8h" name="PubSubSubspace.h" local="yes" imported="no">PubSubSubspace.h</includes>
    <includes id="PubSubMessage__m_8h" name="PubSubMessage_m.h" local="yes" imported="no">PubSubMessage_m.h</includes>
    <class kind="class">PubSubMMOG</class>
  </compound>
  <compound kind="file">
    <name>PubSubSubspace.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/pubsubmmog/</path>
    <filename>PubSubSubspace_8cc</filename>
    <includes id="PubSubSubspace_8h" name="PubSubSubspace.h" local="yes" imported="no">PubSubSubspace.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>PubSubSubspace_8cc.html</anchorfile>
      <anchor>af5ef30522c1381a3e7038c69b1a8211f</anchor>
      <arglist>(std::ostream &amp;o, const PubSubSubspace &amp;subspace)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>PubSubSubspace_8cc.html</anchorfile>
      <anchor>a61271c80517d94c80f91247c801bc659</anchor>
      <arglist>(std::ostream &amp;o, const PubSubSubspaceIntermediate &amp;subspace)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>PubSubSubspace_8cc.html</anchorfile>
      <anchor>a3e942879ecbd0964c26d68519a38ef8a</anchor>
      <arglist>(std::ostream &amp;o, const PubSubSubspaceResponsible &amp;subspace)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PubSubSubspace.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/pubsubmmog/</path>
    <filename>PubSubSubspace_8h</filename>
    <includes id="PubSubSubspaceId_8h" name="PubSubSubspaceId.h" local="yes" imported="no">PubSubSubspaceId.h</includes>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="yes" imported="no">NodeHandle.h</includes>
    <includes id="PubSubMessage__m_8h" name="PubSubMessage_m.h" local="yes" imported="no">PubSubMessage_m.h</includes>
    <class kind="class">PubSubSubspace</class>
    <class kind="class">PubSubSubspaceLobby</class>
    <class kind="class">PubSubSubspaceIntermediate</class>
    <class kind="class">PubSubSubspaceResponsible</class>
    <class kind="class">PubSubSubspaceResponsible::IntermediateNode</class>
  </compound>
  <compound kind="file">
    <name>PubSubSubspaceId.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/pubsubmmog/</path>
    <filename>PubSubSubspaceId_8cc</filename>
    <includes id="PubSubSubspaceId_8h" name="PubSubSubspaceId.h" local="yes" imported="no">PubSubSubspaceId.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>PubSubSubspaceId_8cc.html</anchorfile>
      <anchor>a3c30973bf72d5eadbf4b7f429946ec69</anchor>
      <arglist>(std::ostream &amp;o, const PubSubSubspaceId &amp;subspaceId)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PubSubSubspaceId.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/pubsubmmog/</path>
    <filename>PubSubSubspaceId_8h</filename>
    <class kind="class">PubSubSubspaceId</class>
  </compound>
  <compound kind="file">
    <name>Quon.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/quon/</path>
    <filename>Quon_8cc</filename>
    <includes id="Quon_8h" name="Quon.h" local="no" imported="no">Quon.h</includes>
    <includes id="BootstrapList_8h" name="BootstrapList.h" local="no" imported="no">BootstrapList.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>Quon_8cc.html</anchorfile>
      <anchor>a9288cc44cbe6fb00798208579011cbc3</anchor>
      <arglist>(Quon)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Quon.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/quon/</path>
    <filename>Quon_8h</filename>
    <includes id="BaseOverlay_8h" name="BaseOverlay.h" local="no" imported="no">BaseOverlay.h</includes>
    <includes id="GlobalNodeList_8h" name="GlobalNodeList.h" local="no" imported="no">GlobalNodeList.h</includes>
    <includes id="GlobalStatistics_8h" name="GlobalStatistics.h" local="no" imported="no">GlobalStatistics.h</includes>
    <includes id="Quon__m_8h" name="Quon_m.h" local="no" imported="no">Quon_m.h</includes>
    <includes id="QuonHelper_8h" name="QuonHelper.h" local="no" imported="no">QuonHelper.h</includes>
    <includes id="LoginCache_8h" name="LoginCache.h" local="yes" imported="no">LoginCache.h</includes>
    <class kind="class">Quon</class>
  </compound>
  <compound kind="file">
    <name>Quon_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/quon/</path>
    <filename>Quon__m_8h</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="QuonDefs_8h" name="QuonDefs.h" local="no" imported="no">QuonDefs.h</includes>
    <includes id="QuonHelper_8h" name="QuonHelper.h" local="no" imported="no">QuonHelper.h</includes>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <class kind="class">QuonSelfMessage</class>
    <class kind="class">QuonMessage</class>
    <class kind="class">QuonListMessage</class>
    <class kind="class">QuonMoveMessage</class>
    <class kind="class">QuonEventMessage</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>Quon__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>QUON_L</name>
      <anchorfile>Quon__m_8h.html</anchorfile>
      <anchor>a587b735bc9858abdd2351e73fd2081ed</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>QUONLIST_L</name>
      <anchorfile>Quon__m_8h.html</anchorfile>
      <anchor>acf84b923bf8e068d7e35df6078f252ba</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>QUONMOVE_L</name>
      <anchorfile>Quon__m_8h.html</anchorfile>
      <anchor>a3da2a269dbae8ed952a6b0a237710162</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>QUONENTRY_L</name>
      <anchorfile>Quon__m_8h.html</anchorfile>
      <anchor>a5fd7ebee6c8022277e3eb99e51c233e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>QUONCommand</name>
      <anchorfile>Quon__m_8h.html</anchorfile>
      <anchor>af6ba389f08ae3248fdcdcbcf600ea41f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JOIN_REQUEST</name>
      <anchorfile>Quon__m_8h.html</anchorfile>
      <anchor>af6ba389f08ae3248fdcdcbcf600ea41fa71fec090ff88ece51771bbbf434064ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JOIN_ACKNOWLEDGE</name>
      <anchorfile>Quon__m_8h.html</anchorfile>
      <anchor>af6ba389f08ae3248fdcdcbcf600ea41fad2045a15ed8b82d3db379cc54ba0b7d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NODE_MOVE</name>
      <anchorfile>Quon__m_8h.html</anchorfile>
      <anchor>af6ba389f08ae3248fdcdcbcf600ea41fad9745223990da14f545a02e12e727b63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEW_NEIGHBORS</name>
      <anchorfile>Quon__m_8h.html</anchorfile>
      <anchor>af6ba389f08ae3248fdcdcbcf600ea41fa3aafac4a63883acb0402e9a5dcae8110</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NODE_LEAVE</name>
      <anchorfile>Quon__m_8h.html</anchorfile>
      <anchor>af6ba389f08ae3248fdcdcbcf600ea41fac2f6b0a84b96ac134911c0d532a4a91c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QUON_EVENT</name>
      <anchorfile>Quon__m_8h.html</anchorfile>
      <anchor>af6ba389f08ae3248fdcdcbcf600ea41fa41da4915ade740f2d44932bedc63b858</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>Quon__m_8h.html</anchorfile>
      <anchor>a2d963ab834689f77a6ba68097ff1761d</anchor>
      <arglist>(cCommBuffer *b, QuonSelfMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>Quon__m_8h.html</anchorfile>
      <anchor>ae7a81158c68b9b152f0e9b4296fb8932</anchor>
      <arglist>(cCommBuffer *b, QuonSelfMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>Quon__m_8h.html</anchorfile>
      <anchor>afd2a15b21161303f63eee93dc289526e</anchor>
      <arglist>(cCommBuffer *b, QuonMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>Quon__m_8h.html</anchorfile>
      <anchor>afed96013b40d3f0a3f66e5eb3834aef3</anchor>
      <arglist>(cCommBuffer *b, QuonMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>Quon__m_8h.html</anchorfile>
      <anchor>a90e614e0fce3fa0969793b285d4238b6</anchor>
      <arglist>(cCommBuffer *b, QuonListMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>Quon__m_8h.html</anchorfile>
      <anchor>a1828f6d70e95a12b35712e23ad3680f6</anchor>
      <arglist>(cCommBuffer *b, QuonListMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>Quon__m_8h.html</anchorfile>
      <anchor>a8ce401a83df5609771b32e6c4bf68be3</anchor>
      <arglist>(cCommBuffer *b, QuonMoveMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>Quon__m_8h.html</anchorfile>
      <anchor>aa60e3bd747813c3e5b7e5bdd7c94291e</anchor>
      <arglist>(cCommBuffer *b, QuonMoveMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>Quon__m_8h.html</anchorfile>
      <anchor>aeb42e979b227946c45411b9ac474f025</anchor>
      <arglist>(cCommBuffer *b, QuonEventMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>Quon__m_8h.html</anchorfile>
      <anchor>a9cfaf348ccca175515d45aefecc6ed7d</anchor>
      <arglist>(cCommBuffer *b, QuonEventMessage &amp;obj)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>QUONCOMMAND_L</name>
      <anchorfile>Quon__m_8h.html</anchorfile>
      <anchor>a2244e89b2f7417fdd9c81b50c2d5fc52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>QUONPOSITION_L</name>
      <anchorfile>Quon__m_8h.html</anchorfile>
      <anchor>a9ea719dcf5342d8ef549590863e18c2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>QUONAOI_L</name>
      <anchorfile>Quon__m_8h.html</anchorfile>
      <anchor>a8063e4946d9a6a70058aadc8321e6dc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>QUONENTRYCOUNT_L</name>
      <anchorfile>Quon__m_8h.html</anchorfile>
      <anchor>aff04badb3c900c85b7da4000ad8f7c69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>QUONFLAG_L</name>
      <anchorfile>Quon__m_8h.html</anchorfile>
      <anchor>a787342de90d09b394b6b956c962938ff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>QuonDefs.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/quon/</path>
    <filename>QuonDefs_8h</filename>
    <includes id="Vector2D_8h" name="Vector2D.h" local="no" imported="no">Vector2D.h</includes>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>QINFINITY</name>
      <anchorfile>QuonDefs_8h.html</anchorfile>
      <anchor>aac13d8ef7e990848a5b1e4eeac523a87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; Vector2D &gt;</type>
      <name>QPositionSet</name>
      <anchorfile>QuonDefs_8h.html</anchorfile>
      <anchor>acc007731568c87cac0e1e0b8a7f25b77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; OverlayKey, Vector2D &gt;</type>
      <name>QDeleteMap</name>
      <anchorfile>QuonDefs_8h.html</anchorfile>
      <anchor>a380c00788c20b96cde0eb65c87bbdf27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>QState</name>
      <anchorfile>QuonDefs_8h.html</anchorfile>
      <anchor>aca8402343f1e6379e68bc32d471c3ff1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QUNINITIALIZED</name>
      <anchorfile>QuonDefs_8h.html</anchorfile>
      <anchor>aca8402343f1e6379e68bc32d471c3ff1af0bde5b6e5ef90c75111f6b79fa4fe42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QJOINING</name>
      <anchorfile>QuonDefs_8h.html</anchorfile>
      <anchor>aca8402343f1e6379e68bc32d471c3ff1a6159e3ad96e5cc7ce4cc87a9ac499213</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QREADY</name>
      <anchorfile>QuonDefs_8h.html</anchorfile>
      <anchor>aca8402343f1e6379e68bc32d471c3ff1a22a0702a9f5ac0bad9f415323647cd18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>QNeighborType</name>
      <anchorfile>QuonDefs_8h.html</anchorfile>
      <anchor>a65910f3553787356a3dc0bcea3b0c663</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QUNDEFINED</name>
      <anchorfile>QuonDefs_8h.html</anchorfile>
      <anchor>a65910f3553787356a3dc0bcea3b0c663a02657096ca1b200aae91c6f4c8f1fb5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QTHIS</name>
      <anchorfile>QuonDefs_8h.html</anchorfile>
      <anchor>a65910f3553787356a3dc0bcea3b0c663a5f0c262d908147d33dd7235bd5cd5515</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QNEIGHBOR</name>
      <anchorfile>QuonDefs_8h.html</anchorfile>
      <anchor>a65910f3553787356a3dc0bcea3b0c663a9a4ea8f06501f7d26d66e134e0e1b015</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QBINDING</name>
      <anchorfile>QuonDefs_8h.html</anchorfile>
      <anchor>a65910f3553787356a3dc0bcea3b0c663ade742dc8734ee1f2b8944e338a7992fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>QPurgeType</name>
      <anchorfile>QuonDefs_8h.html</anchorfile>
      <anchor>adc5a48b199e542d36b27075cdb579b26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QKEEPSOFT</name>
      <anchorfile>QuonDefs_8h.html</anchorfile>
      <anchor>adc5a48b199e542d36b27075cdb579b26a5fafc23b7d5f622908d8d571a946a17f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QPURGESOFT</name>
      <anchorfile>QuonDefs_8h.html</anchorfile>
      <anchor>adc5a48b199e542d36b27075cdb579b26a01f818ce2945704d0a5df32f2301885c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>QUpdateType</name>
      <anchorfile>QuonDefs_8h.html</anchorfile>
      <anchor>ae1c9bee235e07483b1ca6526d3625148</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QDIRECT</name>
      <anchorfile>QuonDefs_8h.html</anchorfile>
      <anchor>ae1c9bee235e07483b1ca6526d3625148a9eda35317bbb785d73e49dc5d9eaf7bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QFOREIGN</name>
      <anchorfile>QuonDefs_8h.html</anchorfile>
      <anchor>ae1c9bee235e07483b1ca6526d3625148af1b898a16f713b1a0b1c0de18986aced</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>QuonHelper.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/quon/</path>
    <filename>QuonHelper_8cc</filename>
    <includes id="QuonHelper_8h" name="QuonHelper.h" local="no" imported="no">QuonHelper.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>QuonHelper_8cc.html</anchorfile>
      <anchor>a3d0abf90dbe1707ae124df89d6ddfc5b</anchor>
      <arglist>(std::ostream &amp;Stream, const QuonAOI &amp;aoi)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>QuonHelper_8cc.html</anchorfile>
      <anchor>a19c6fafdeac29b478e7f95126fa2e985</anchor>
      <arglist>(std::ostream &amp;Stream, const QuonSite &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>QuonHelper.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/quon/</path>
    <filename>QuonHelper_8h</filename>
    <includes id="QuonDefs_8h" name="QuonDefs.h" local="no" imported="no">QuonDefs.h</includes>
    <class kind="class">QuonAOI</class>
    <class kind="class">QuonSite</class>
    <member kind="typedef">
      <type>std::map&lt; OverlayKey, QuonSite * &gt;</type>
      <name>QuonSiteMap</name>
      <anchorfile>QuonHelper_8h.html</anchorfile>
      <anchor>a2b5708283cf10ec2111ad58f7e75af82</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandomChurn.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>RandomChurn_8cc</filename>
    <includes id="TransportAddress_8h" name="TransportAddress.h" local="no" imported="no">TransportAddress.h</includes>
    <includes id="GlobalStatistics_8h" name="GlobalStatistics.h" local="no" imported="no">GlobalStatistics.h</includes>
    <includes id="GlobalStatisticsAccess_8h" name="GlobalStatisticsAccess.h" local="no" imported="no">GlobalStatisticsAccess.h</includes>
    <includes id="UnderlayConfigurator_8h" name="UnderlayConfigurator.h" local="no" imported="no">UnderlayConfigurator.h</includes>
    <includes id="RandomChurn_8h" name="RandomChurn.h" local="yes" imported="no">RandomChurn.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>RandomChurn_8cc.html</anchorfile>
      <anchor>a80669a7e745d938f9fc9c356e76bb280</anchor>
      <arglist>(RandomChurn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandomChurn.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>RandomChurn_8h</filename>
    <includes id="ChurnGenerator_8h" name="ChurnGenerator.h" local="no" imported="no">ChurnGenerator.h</includes>
    <class kind="class">RandomChurn</class>
    <member kind="define">
      <type>#define</type>
      <name>__RABDOMCHURN_H_</name>
      <anchorfile>RandomChurn_8h.html</anchorfile>
      <anchor>ae5f274e4153393abd727c01d154f40bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>randomRoaming.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/simplegameclient/</path>
    <filename>randomRoaming_8cc</filename>
    <includes id="randomRoaming_8h" name="randomRoaming.h" local="yes" imported="no">randomRoaming.h</includes>
  </compound>
  <compound kind="file">
    <name>randomRoaming.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/simplegameclient/</path>
    <filename>randomRoaming_8h</filename>
    <includes id="MovementGenerator_8h" name="MovementGenerator.h" local="yes" imported="no">MovementGenerator.h</includes>
    <class kind="class">randomRoaming</class>
  </compound>
  <compound kind="file">
    <name>realtimescheduler.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/singlehostunderlay/</path>
    <filename>realtimescheduler_8cc</filename>
    <includes id="realtimescheduler_8h" name="realtimescheduler.h" local="yes" imported="no">realtimescheduler.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_PerRunConfigOption</name>
      <anchorfile>realtimescheduler_8cc.html</anchorfile>
      <anchor>aa197c7d7838d11392dfe6343e9a79550</anchor>
      <arglist>(CFGID_EXTERNALAPP_CONNECTION_LIMIT,&quot;externalapp-connection-limit&quot;, CFG_INT, NULL,&quot;TODO some documentation&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Register_PerRunConfigOption</name>
      <anchorfile>realtimescheduler_8cc.html</anchorfile>
      <anchor>a5d16cecc5dafc1c944607ddb031f3389</anchor>
      <arglist>(CFGID_EXTERNALAPP_APP_PORT,&quot;externalapp-app-port&quot;, CFG_INT, NULL,&quot;TODO some documentation&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>realtimescheduler_8cc.html</anchorfile>
      <anchor>aa2334cf153d4e10c1d53b4ff574555c3</anchor>
      <arglist>(std::ostream &amp;os, const timeval &amp;tv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>realtimescheduler.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/singlehostunderlay/</path>
    <filename>realtimescheduler_8h</filename>
    <class kind="class">PacketBufferEntry</class>
    <class kind="class">RealtimeScheduler</class>
    <class kind="class">RealtimeScheduler::SocketContext</class>
    <member kind="define">
      <type>#define</type>
      <name>WANT_WINSOCK2</name>
      <anchorfile>realtimescheduler_8h.html</anchorfile>
      <anchor>a105264025fbdfc308077979bc21a5474</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; PacketBufferEntry &gt;</type>
      <name>PacketBuffer</name>
      <anchorfile>realtimescheduler_8h.html</anchorfile>
      <anchor>a15669b3cdcb219d306b50491cbf95a7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RealworldApp.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/singlehostunderlay/</path>
    <filename>RealworldApp_8cc</filename>
    <includes id="RealworldApp_8h" name="RealworldApp.h" local="yes" imported="no">RealworldApp.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>RealworldApp_8cc.html</anchorfile>
      <anchor>a029b55ab66eb0e40538edf51de7fb351</anchor>
      <arglist>(RealworldApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RealworldApp.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/singlehostunderlay/</path>
    <filename>RealworldApp_8h</filename>
    <includes id="tunoutscheduler_8h" name="tunoutscheduler.h" local="yes" imported="no">tunoutscheduler.h</includes>
    <includes id="RealworldConnector_8h" name="RealworldConnector.h" local="yes" imported="no">RealworldConnector.h</includes>
    <class kind="class">RealworldApp</class>
  </compound>
  <compound kind="file">
    <name>RealworldConnector.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/singlehostunderlay/</path>
    <filename>RealworldConnector_8cc</filename>
    <includes id="RealworldConnector_8h" name="RealworldConnector.h" local="yes" imported="no">RealworldConnector.h</includes>
  </compound>
  <compound kind="file">
    <name>RealworldConnector.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/singlehostunderlay/</path>
    <filename>RealworldConnector_8h</filename>
    <includes id="realtimescheduler_8h" name="realtimescheduler.h" local="yes" imported="no">realtimescheduler.h</includes>
    <includes id="PacketParser_8h" name="PacketParser.h" local="yes" imported="no">PacketParser.h</includes>
    <class kind="class">RealworldConnector</class>
    <member kind="define">
      <type>#define</type>
      <name>BUFFERZITE</name>
      <anchorfile>RealworldConnector_8h.html</anchorfile>
      <anchor>a18c58e056500dc6a736abb359bb10eee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>u_short</type>
      <name>cksum</name>
      <anchorfile>RealworldConnector_8h.html</anchorfile>
      <anchor>ac0bb5cb47c266d03d1214a6b208a89da</anchor>
      <arglist>(uint16_t *buf, int nbytes)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RealworldDevice.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/singlehostunderlay/</path>
    <filename>RealworldDevice_8cc</filename>
    <includes id="RealworldDevice_8h" name="RealworldDevice.h" local="yes" imported="no">RealworldDevice.h</includes>
  </compound>
  <compound kind="file">
    <name>RealworldDevice.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/singlehostunderlay/</path>
    <filename>RealworldDevice_8h</filename>
    <includes id="RealworldConnector_8h" name="RealworldConnector.h" local="yes" imported="no">RealworldConnector.h</includes>
    <class kind="class">RealworldDevice</class>
  </compound>
  <compound kind="file">
    <name>realWorldRoaming.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/simplegameclient/</path>
    <filename>realWorldRoaming_8cc</filename>
    <includes id="realWorldRoaming_8h" name="realWorldRoaming.h" local="yes" imported="no">realWorldRoaming.h</includes>
  </compound>
  <compound kind="file">
    <name>realWorldRoaming.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/simplegameclient/</path>
    <filename>realWorldRoaming_8h</filename>
    <includes id="MovementGenerator_8h" name="MovementGenerator.h" local="yes" imported="no">MovementGenerator.h</includes>
    <class kind="class">realWorldRoaming</class>
  </compound>
  <compound kind="file">
    <name>RealWorldTestApp.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/realworldtestapp/</path>
    <filename>RealWorldTestApp_8cc</filename>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <includes id="RealWorldTestApp_8h" name="RealWorldTestApp.h" local="yes" imported="no">RealWorldTestApp.h</includes>
    <includes id="RealWorldTestMessage__m_8h" name="RealWorldTestMessage_m.h" local="yes" imported="no">RealWorldTestMessage_m.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>RealWorldTestApp_8cc.html</anchorfile>
      <anchor>a6fe5c28515a2597ba05ae088f561d624</anchor>
      <arglist>(RealWorldTestApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RealWorldTestApp.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/realworldtestapp/</path>
    <filename>RealWorldTestApp_8h</filename>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="BaseApp_8h" name="BaseApp.h" local="yes" imported="no">BaseApp.h</includes>
    <class kind="class">RealWorldTestApp</class>
  </compound>
  <compound kind="file">
    <name>RealWorldTestMessage_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/realworldtestapp/</path>
    <filename>RealWorldTestMessage__m_8h</filename>
    <class kind="class">RealWorldTestMessage</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>RealWorldTestMessage__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>RealWorldTestMessage__m_8h.html</anchorfile>
      <anchor>ac32b8357c74428ec7ca37e5592d89c8c</anchor>
      <arglist>(cCommBuffer *b, RealWorldTestMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>RealWorldTestMessage__m_8h.html</anchorfile>
      <anchor>a13ba27ca2624229c69773a37613021c7</anchor>
      <arglist>(cCommBuffer *b, RealWorldTestMessage &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RealWorldTestPacketParser.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/realworldtestapp/</path>
    <filename>RealWorldTestPacketParser_8cc</filename>
    <includes id="RealWorldTestPacketParser_8h" name="RealWorldTestPacketParser.h" local="yes" imported="no">RealWorldTestPacketParser.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>RealWorldTestPacketParser_8cc.html</anchorfile>
      <anchor>a58481049a33ac32f9b3ddcc30694f62f</anchor>
      <arglist>(RealWorldTestPacketParser)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RealWorldTestPacketParser.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/realworldtestapp/</path>
    <filename>RealWorldTestPacketParser_8h</filename>
    <includes id="RealWorldTestMessage__m_8h" name="RealWorldTestMessage_m.h" local="yes" imported="no">RealWorldTestMessage_m.h</includes>
    <includes id="PacketParser_8h" name="PacketParser.h" local="no" imported="no">PacketParser.h</includes>
    <class kind="class">RealWorldTestPacketParser</class>
  </compound>
  <compound kind="file">
    <name>ReaSEInfo.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/reaseunderlay/</path>
    <filename>ReaSEInfo_8cc</filename>
    <includes id="ReaSEInfo_8h" name="ReaSEInfo.h" local="yes" imported="no">ReaSEInfo.h</includes>
  </compound>
  <compound kind="file">
    <name>ReaSEInfo.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/reaseunderlay/</path>
    <filename>ReaSEInfo_8h</filename>
    <includes id="PeerInfo_8h" name="PeerInfo.h" local="no" imported="no">PeerInfo.h</includes>
    <class kind="class">ReaSEInfo</class>
  </compound>
  <compound kind="file">
    <name>ReaSEUnderlayConfigurator.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/reaseunderlay/</path>
    <filename>ReaSEUnderlayConfigurator_8cc</filename>
    <includes id="ReaSEUnderlayConfigurator_8h" name="ReaSEUnderlayConfigurator.h" local="yes" imported="no">ReaSEUnderlayConfigurator.h</includes>
    <includes id="GlobalNodeList_8h" name="GlobalNodeList.h" local="no" imported="no">GlobalNodeList.h</includes>
    <includes id="TransportAddress_8h" name="TransportAddress.h" local="no" imported="no">TransportAddress.h</includes>
    <includes id="StringConvert_8h" name="StringConvert.h" local="no" imported="no">StringConvert.h</includes>
    <includes id="ConnectReaSE_8h" name="ConnectReaSE.h" local="no" imported="no">ConnectReaSE.h</includes>
    <includes id="ReaSEInfo_8h" name="ReaSEInfo.h" local="no" imported="no">ReaSEInfo.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>ReaSEUnderlayConfigurator_8cc.html</anchorfile>
      <anchor>a00b6851d4cefce58606e540dd4be4e95</anchor>
      <arglist>(ReaSEUnderlayConfigurator)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ReaSEUnderlayConfigurator.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/reaseunderlay/</path>
    <filename>ReaSEUnderlayConfigurator_8h</filename>
    <includes id="UnderlayConfigurator_8h" name="UnderlayConfigurator.h" local="no" imported="no">UnderlayConfigurator.h</includes>
    <includes id="ConnectReaSE_8h" name="ConnectReaSE.h" local="no" imported="no">ConnectReaSE.h</includes>
    <class kind="class">ReaSEUnderlayConfigurator</class>
  </compound>
  <compound kind="file">
    <name>RecursiveLookup.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>RecursiveLookup_8cc</filename>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <includes id="BaseOverlay_8h" name="BaseOverlay.h" local="no" imported="no">BaseOverlay.h</includes>
    <includes id="LookupListener_8h" name="LookupListener.h" local="no" imported="no">LookupListener.h</includes>
    <includes id="RecursiveLookup_8h" name="RecursiveLookup.h" local="no" imported="no">RecursiveLookup.h</includes>
  </compound>
  <compound kind="file">
    <name>RecursiveLookup.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>RecursiveLookup_8h</filename>
    <includes id="NodeVector_8h" name="NodeVector.h" local="no" imported="no">NodeVector.h</includes>
    <includes id="AbstractLookup_8h" name="AbstractLookup.h" local="no" imported="no">AbstractLookup.h</includes>
    <includes id="RpcListener_8h" name="RpcListener.h" local="no" imported="no">RpcListener.h</includes>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <class kind="class">RecursiveLookupConfiguration</class>
    <class kind="class">RecursiveLookup</class>
  </compound>
  <compound kind="file">
    <name>RegionDataContainer.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/globalViewBuilder/</path>
    <filename>RegionDataContainer_8cc</filename>
    <includes id="RegionDataContainer_8h" name="RegionDataContainer.h" local="yes" imported="no">RegionDataContainer.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>RegionDataContainer_8cc.html</anchorfile>
      <anchor>a1a04b8c428ac3a1fbfd383d3aae0eb53</anchor>
      <arglist>(std::ostream &amp;os, const regionCountMap &amp;map)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RegionDataContainer.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/globalViewBuilder/</path>
    <filename>RegionDataContainer_8h</filename>
    <includes id="oversim__mapset_8h" name="oversim_mapset.h" local="no" imported="no">oversim_mapset.h</includes>
    <class kind="class">RegionDataContainer</class>
    <member kind="typedef">
      <type>UNORDERED_MAP&lt; long, int &gt;</type>
      <name>regionCountMap</name>
      <anchorfile>RegionDataContainer_8h.html</anchorfile>
      <anchor>ae5727ff6ea79e5b3c0b35b6de24cfc5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>RegionDataContainer_8h.html</anchorfile>
      <anchor>a398b44ed0e7cf24fac50bdcaac663cc9</anchor>
      <arglist>(std::ostream &amp;os, const regionCountMap &amp;info)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RpcListener.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>RpcListener_8cc</filename>
    <includes id="RpcListener_8h" name="RpcListener.h" local="no" imported="no">RpcListener.h</includes>
    <includes id="RpcState_8h" name="RpcState.h" local="no" imported="no">RpcState.h</includes>
  </compound>
  <compound kind="file">
    <name>RpcListener.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>RpcListener_8h</filename>
    <class kind="class">RpcListener</class>
  </compound>
  <compound kind="file">
    <name>RpcMacros.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>RpcMacros_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>RPC_SWITCH_START</name>
      <anchorfile>RpcMacros_8h.html</anchorfile>
      <anchor>aa75b135e279b574267e1a7dc4ab79da4</anchor>
      <arglist>(message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RPC_SWITCH_END</name>
      <anchorfile>RpcMacros_8h.html</anchorfile>
      <anchor>a29a8a3f21e67ecb25f58608a54df5191</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IF_RPC_HANDLED</name>
      <anchorfile>RpcMacros_8h.html</anchorfile>
      <anchor>abc087d344681c5d2f085db5bfaf4aa0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RPC_HANDLED</name>
      <anchorfile>RpcMacros_8h.html</anchorfile>
      <anchor>aa5e964b7c7129c0943237a786e455e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RPC_DELEGATE</name>
      <anchorfile>RpcMacros_8h.html</anchorfile>
      <anchor>ad81d44e9bc59d2fb2cfcacc4d5ecda35</anchor>
      <arglist>(name, method)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RPC_ON_CALL</name>
      <anchorfile>RpcMacros_8h.html</anchorfile>
      <anchor>ae07fad586ce7b9e82ad12848767a32e5</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RPC_ON_RESPONSE</name>
      <anchorfile>RpcMacros_8h.html</anchorfile>
      <anchor>a0394d2dc4f9f1e15d7e99c9f43da10c7</anchor>
      <arglist>(name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RpcState.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>RpcState_8h</filename>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="yes" imported="no">CommonMessages_m.h</includes>
    <class kind="class">RpcState</class>
  </compound>
  <compound kind="file">
    <name>RUNetworkConfigurator.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/reaseunderlay/</path>
    <filename>RUNetworkConfigurator_8cc</filename>
    <includes id="RUNetworkConfigurator_8h" name="RUNetworkConfigurator.h" local="yes" imported="no">RUNetworkConfigurator.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>RUNetworkConfigurator_8cc.html</anchorfile>
      <anchor>a3b828eba0cce1d2b6ce1ac0958a0e174</anchor>
      <arglist>(RUNetworkConfigurator)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RUNetworkConfigurator.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/reaseunderlay/</path>
    <filename>RUNetworkConfigurator_8h</filename>
    <class kind="struct">nodeInfoRL</class>
    <class kind="struct">edgeRouter</class>
    <class kind="struct">nodeInfoAS</class>
    <class kind="class">RUNetworkConfigurator</class>
    <namespace>RUNetConf</namespace>
    <member kind="typedef">
      <type>vector&lt; string &gt;</type>
      <name>StringVector</name>
      <anchorfile>RUNetworkConfigurator_8h.html</anchorfile>
      <anchor>a4cce417a424609bf375981959799ee78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; nodeInfoRL &gt;</type>
      <name>NODE_INFO_RL_VEC</name>
      <anchorfile>RUNetworkConfigurator_8h.html</anchorfile>
      <anchor>a95977589845e8709c910810640eacb7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; int, nodeInfoRL &gt;</type>
      <name>NODE_MAP</name>
      <anchorfile>RUNetworkConfigurator_8h.html</anchorfile>
      <anchor>a6b962e121ac848622180fe3993ad2130</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; int, nodeInfoRL &gt;</type>
      <name>NODE_MAP_PAIR</name>
      <anchorfile>RUNetworkConfigurator_8h.html</anchorfile>
      <anchor>ac1a91224c16d97f2cde479dee994c427</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; edgeRouter &gt;</type>
      <name>EDGE_ROUTER_VEC</name>
      <anchorfile>RUNetworkConfigurator_8h.html</anchorfile>
      <anchor>aef45e0cd8ab53e269435e2654beb1725</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; nodeInfoAS &gt;</type>
      <name>NODE_INFO_AS_VEC</name>
      <anchorfile>RUNetworkConfigurator_8h.html</anchorfile>
      <anchor>a7a920f5509c0db8ac1e38ab066094562</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>getCoreNodes</name>
      <anchorfile>namespaceRUNetConf.html</anchorfile>
      <anchor>ad6241551161840908b615ba2adea3d73</anchor>
      <arglist>(cModule *curMod, void *nullPointer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>getRouterLevelNodes</name>
      <anchorfile>namespaceRUNetConf.html</anchorfile>
      <anchor>a74e4a0730da15bd2adfbc7670aa60c8d</anchor>
      <arglist>(cModule *curMod, void *name)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>INIT_STAGES</name>
      <anchorfile>RUNetworkConfigurator_8h.html</anchorfile>
      <anchor>a3d12ec1c13181fd0fcccc752681b4b86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>TRANSIT_AS</name>
      <anchorfile>RUNetworkConfigurator_8h.html</anchorfile>
      <anchor>adc4ae6ba0050e6227212f666b740fdf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>STUB_AS</name>
      <anchorfile>RUNetworkConfigurator_8h.html</anchorfile>
      <anchor>afc4357d0e8be0a0b0f97c12fc2456e94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>UNSPECIFIED</name>
      <anchorfile>RUNetworkConfigurator_8h.html</anchorfile>
      <anchor>aa0f19c2fb8a3e021c8f2b00831088b55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>CORE</name>
      <anchorfile>RUNetworkConfigurator_8h.html</anchorfile>
      <anchor>a551104da64be7f7ac0ab37a6f05e8af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>GW</name>
      <anchorfile>RUNetworkConfigurator_8h.html</anchorfile>
      <anchor>ae31689faf5eb880227e7b317cc1db5ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>EDGE</name>
      <anchorfile>RUNetworkConfigurator_8h.html</anchorfile>
      <anchor>ab37daea78a5c66c3eb8fa27cd34a8d53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>ENDSYS</name>
      <anchorfile>RUNetworkConfigurator_8h.html</anchorfile>
      <anchor>ade65dea0a340142cca19acc35bac5f81</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SCPacket.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/simplegameclient/</path>
    <filename>SCPacket_8h</filename>
    <class kind="class">SCBasePacket</class>
    <class kind="class">SCAddPacket</class>
    <class kind="class">SCRemovePacket</class>
    <class kind="class">SCMovePacket</class>
    <class kind="class">SCAOIPacket</class>
    <class kind="class">SCParamPacket</class>
    <class kind="class">SCChatPacket</class>
    <class kind="class">SCSnowPacket</class>
    <class kind="class">SCFrozenPacket</class>
    <member kind="define">
      <type>#define</type>
      <name>SC_MOVE_INDICATION</name>
      <anchorfile>SCPacket_8h.html</anchorfile>
      <anchor>a83e78474f8ffd8a5b471cf153bdc53fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_ADD_NEIGHBOR</name>
      <anchorfile>SCPacket_8h.html</anchorfile>
      <anchor>a9b270a30d4a17070f77bea8624474b65</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_REMOVE_NEIGHBOR</name>
      <anchorfile>SCPacket_8h.html</anchorfile>
      <anchor>a177111cd3bc6abc8db155a015a73be56</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_RESIZE_AOI</name>
      <anchorfile>SCPacket_8h.html</anchorfile>
      <anchor>af0a9cee16d187c2b930ee300f8450f5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_PARAM_REQUEST</name>
      <anchorfile>SCPacket_8h.html</anchorfile>
      <anchor>a1877100805044ea9a534e9a5be1f43fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_PARAM_RESPONSE</name>
      <anchorfile>SCPacket_8h.html</anchorfile>
      <anchor>ae84bf49818550fc861a7c6c679fce49e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_EV_CHAT</name>
      <anchorfile>SCPacket_8h.html</anchorfile>
      <anchor>ab7f5c16c3a5d184ea2c0ceadafd8cd37</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_EV_SNOWBALL</name>
      <anchorfile>SCPacket_8h.html</anchorfile>
      <anchor>aae744398cbd2fe23ee9ab16c63ecabf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_EV_FROZEN</name>
      <anchorfile>SCPacket_8h.html</anchorfile>
      <anchor>a1c40718f5af3432ba0aab787cdf8224e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Scribe.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/scribe/</path>
    <filename>Scribe_8cc</filename>
    <includes id="BaseApp_8h" name="BaseApp.h" local="no" imported="no">BaseApp.h</includes>
    <includes id="Scribe_8h" name="Scribe.h" local="yes" imported="no">Scribe.h</includes>
    <includes id="GlobalStatistics_8h" name="GlobalStatistics.h" local="no" imported="no">GlobalStatistics.h</includes>
    <includes id="Comparator_8h" name="Comparator.h" local="yes" imported="no">Comparator.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>Scribe_8cc.html</anchorfile>
      <anchor>ae3223a8d0a292f01d69b51af4eba6302</anchor>
      <arglist>(Scribe)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Scribe.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/scribe/</path>
    <filename>Scribe_8h</filename>
    <includes id="BaseApp_8h" name="BaseApp.h" local="yes" imported="no">BaseApp.h</includes>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="yes" imported="no">CommonMessages_m.h</includes>
    <includes id="GlobalNodeList_8h" name="GlobalNodeList.h" local="yes" imported="no">GlobalNodeList.h</includes>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="yes" imported="no">NodeHandle.h</includes>
    <includes id="ScribeGroup_8h" name="ScribeGroup.h" local="yes" imported="no">ScribeGroup.h</includes>
    <includes id="ScribeMessage__m_8h" name="ScribeMessage_m.h" local="yes" imported="no">ScribeMessage_m.h</includes>
    <class kind="class">Scribe</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>Scribe_8h.html</anchorfile>
      <anchor>a0b6468d98c477f23f4131bc266106b91</anchor>
      <arglist>(std::ostream &amp;o, std::map&lt; OverlayKey, ScribeGroup &gt; m)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ScribeGroup.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/scribe/</path>
    <filename>ScribeGroup_8cc</filename>
    <includes id="ScribeGroup_8h" name="ScribeGroup.h" local="yes" imported="no">ScribeGroup.h</includes>
  </compound>
  <compound kind="file">
    <name>ScribeGroup.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/scribe/</path>
    <filename>ScribeGroup_8h</filename>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="yes" imported="no">OverlayKey.h</includes>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="yes" imported="no">NodeHandle.h</includes>
    <includes id="ScribeMessage__m_8h" name="ScribeMessage_m.h" local="yes" imported="no">ScribeMessage_m.h</includes>
    <class kind="class">ScribeGroup</class>
  </compound>
  <compound kind="file">
    <name>ScribeMessage_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/scribe/</path>
    <filename>ScribeMessage__m_8h</filename>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <includes id="ScribeGroup_8h" name="ScribeGroup.h" local="yes" imported="no">ScribeGroup.h</includes>
    <class kind="class">ScribeJoinCall</class>
    <class kind="class">ScribeJoinResponse</class>
    <class kind="class">ScribePublishCall</class>
    <class kind="class">ScribePublishResponse</class>
    <class kind="class">ScribeSubscriptionRefreshMessage</class>
    <class kind="class">ScribeLeaveMessage</class>
    <class kind="class">ScribeTimer</class>
    <class kind="class">ScribeDataMessage</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>ScribeMessage__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCRIBE_JOINCALL_L</name>
      <anchorfile>ScribeMessage__m_8h.html</anchorfile>
      <anchor>a75df75d7a8ab9a7a3f981aa4cd778a53</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCRIBE_JOINRESPONSE_L</name>
      <anchorfile>ScribeMessage__m_8h.html</anchorfile>
      <anchor>a9b1ecae0f0871c74921ba63c9bfae22e</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCRIBE_PUBLISHCALL_L</name>
      <anchorfile>ScribeMessage__m_8h.html</anchorfile>
      <anchor>a90ad1e0f896bfe781ae37ded820a407b</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCRIBE_PUBLISHRESPONSE_L</name>
      <anchorfile>ScribeMessage__m_8h.html</anchorfile>
      <anchor>abefb9b89c1c104d30e7851d4a3f3f8b0</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCRIBE_SUBSCRIPTIONREFRESH_L</name>
      <anchorfile>ScribeMessage__m_8h.html</anchorfile>
      <anchor>a57716d77449a29aed70dc50ad73906a3</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCRIBE_LEAVE_L</name>
      <anchorfile>ScribeMessage__m_8h.html</anchorfile>
      <anchor>aea2679a6865b1d2fe2423685d050eb10</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCRIBE_DATA_L</name>
      <anchorfile>ScribeMessage__m_8h.html</anchorfile>
      <anchor>af9e5676d8bbb383b6ae2615a990d9998</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="enumeration">
      <name>ScribeTimerType</name>
      <anchorfile>ScribeMessage__m_8h.html</anchorfile>
      <anchor>a7ea659fc2e855bf8098cb295505d1389</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCRIBE_HEARTBEAT</name>
      <anchorfile>ScribeMessage__m_8h.html</anchorfile>
      <anchor>a7ea659fc2e855bf8098cb295505d1389a067db7d950ca6ed16fa6dbfc41effaf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCRIBE_SUBSCRIPTION_REFRESH</name>
      <anchorfile>ScribeMessage__m_8h.html</anchorfile>
      <anchor>a7ea659fc2e855bf8098cb295505d1389ab677cae3fe6259b2a4dbd926fa2af2d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCRIBE_PARENT_TIMEOUT</name>
      <anchorfile>ScribeMessage__m_8h.html</anchorfile>
      <anchor>a7ea659fc2e855bf8098cb295505d1389aeeb9b182a51758e2b1a4c5c495f3bab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCRIBE_CHILD_TIMEOUT</name>
      <anchorfile>ScribeMessage__m_8h.html</anchorfile>
      <anchor>a7ea659fc2e855bf8098cb295505d1389abe20d4b0bc80643bf8bf177921b1c998</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>ScribeMessage__m_8h.html</anchorfile>
      <anchor>ac9828e923803572c776e45d4d1b70ad1</anchor>
      <arglist>(cCommBuffer *b, ScribeJoinCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>ScribeMessage__m_8h.html</anchorfile>
      <anchor>ab14a2f9a12bcb1e6b8065bc854430871</anchor>
      <arglist>(cCommBuffer *b, ScribeJoinCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>ScribeMessage__m_8h.html</anchorfile>
      <anchor>a49c46bd68dd5d42ed811ec65e3728170</anchor>
      <arglist>(cCommBuffer *b, ScribeJoinResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>ScribeMessage__m_8h.html</anchorfile>
      <anchor>af697cfd3b501131afc041ecd739f6ac2</anchor>
      <arglist>(cCommBuffer *b, ScribeJoinResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>ScribeMessage__m_8h.html</anchorfile>
      <anchor>a788fc306450ad51033f43a9b09795ee3</anchor>
      <arglist>(cCommBuffer *b, ScribePublishCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>ScribeMessage__m_8h.html</anchorfile>
      <anchor>a6e92591bf77080c049ad514d7f3a106a</anchor>
      <arglist>(cCommBuffer *b, ScribePublishCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>ScribeMessage__m_8h.html</anchorfile>
      <anchor>a730a3ba5f47ab66e7caab6d12a29a207</anchor>
      <arglist>(cCommBuffer *b, ScribePublishResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>ScribeMessage__m_8h.html</anchorfile>
      <anchor>ad6886413619e1f587fc708f53b3225d6</anchor>
      <arglist>(cCommBuffer *b, ScribePublishResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>ScribeMessage__m_8h.html</anchorfile>
      <anchor>ab0359f053427d5751c6882958a0d57f5</anchor>
      <arglist>(cCommBuffer *b, ScribeSubscriptionRefreshMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>ScribeMessage__m_8h.html</anchorfile>
      <anchor>a5d89a354a481151fec4333ad189996ca</anchor>
      <arglist>(cCommBuffer *b, ScribeSubscriptionRefreshMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>ScribeMessage__m_8h.html</anchorfile>
      <anchor>a2a839b1208f5aa44d3c603f4dbd37a64</anchor>
      <arglist>(cCommBuffer *b, ScribeLeaveMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>ScribeMessage__m_8h.html</anchorfile>
      <anchor>ab693565076a819fcbd09c79cf721c147</anchor>
      <arglist>(cCommBuffer *b, ScribeLeaveMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>ScribeMessage__m_8h.html</anchorfile>
      <anchor>a7efe5b285d2446b7815f7c2b2a833e72</anchor>
      <arglist>(cCommBuffer *b, ScribeTimer &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>ScribeMessage__m_8h.html</anchorfile>
      <anchor>aeb1fc1c3831b207af1bcfb0c8d025f61</anchor>
      <arglist>(cCommBuffer *b, ScribeTimer &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>ScribeMessage__m_8h.html</anchorfile>
      <anchor>a70056b6687eba14bf1c3215aea48ec66</anchor>
      <arglist>(cCommBuffer *b, ScribeDataMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>ScribeMessage__m_8h.html</anchorfile>
      <anchor>a906eaf43d5d386a794f6d38ca9a8469f</anchor>
      <arglist>(cCommBuffer *b, ScribeDataMessage &amp;obj)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>SCRIBE_WRONGROOT_L</name>
      <anchorfile>ScribeMessage__m_8h.html</anchorfile>
      <anchor>a87e0c6dfa6739c4b36af755c764bea2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>SCRIBE_EMPTYFLAG_L</name>
      <anchorfile>ScribeMessage__m_8h.html</anchorfile>
      <anchor>aafddc8554210760e3605c7a05b60b40c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SearchMsgBookkeeping.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/giasearchapp/</path>
    <filename>SearchMsgBookkeeping_8cc</filename>
    <includes id="SearchMsgBookkeeping_8h" name="SearchMsgBookkeeping.h" local="yes" imported="no">SearchMsgBookkeeping.h</includes>
  </compound>
  <compound kind="file">
    <name>SearchMsgBookkeeping.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/giasearchapp/</path>
    <filename>SearchMsgBookkeeping_8h</filename>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <class kind="struct">GiaSearchStats</class>
    <class kind="class">SearchMsgBookkeeping</class>
    <class kind="struct">SearchMsgBookkeeping::SearchMessageItem</class>
  </compound>
  <compound kind="file">
    <name>SendStrategyFactory.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/globalViewBuilder/</path>
    <filename>SendStrategyFactory_8cc</filename>
    <includes id="SendStrategyFactory_8h" name="SendStrategyFactory.h" local="yes" imported="no">SendStrategyFactory.h</includes>
  </compound>
  <compound kind="file">
    <name>SendStrategyFactory.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/globalViewBuilder/</path>
    <filename>SendStrategyFactory_8h</filename>
    <includes id="AbstractSendStrategy_8h" name="AbstractSendStrategy.h" local="no" imported="no">AbstractSendStrategy.h</includes>
    <includes id="StrategyTreeTest_8h" name="StrategyTreeTest.h" local="no" imported="no">StrategyTreeTest.h</includes>
    <includes id="StrategySendAll_8h" name="StrategySendAll.h" local="no" imported="no">StrategySendAll.h</includes>
    <includes id="StrategyRegions_8h" name="StrategyRegions.h" local="no" imported="no">StrategyRegions.h</includes>
    <includes id="StrategyRemoveRandom_8h" name="StrategyRemoveRandom.h" local="no" imported="no">StrategyRemoveRandom.h</includes>
    <includes id="StrategyRemoveInaccurate_8h" name="StrategyRemoveInaccurate.h" local="no" imported="no">StrategyRemoveInaccurate.h</includes>
    <includes id="StrategySimplifyCoords_8h" name="StrategySimplifyCoords.h" local="no" imported="no">StrategySimplifyCoords.h</includes>
    <class kind="class">SendStrategyFactory</class>
  </compound>
  <compound kind="file">
    <name>SHA1.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>SHA1_8cc</filename>
    <includes id="SHA1_8h" name="SHA1.h" local="yes" imported="no">SHA1.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>_CRT_SECURE_NO_WARNINGS</name>
      <anchorfile>SHA1_8cc.html</anchorfile>
      <anchor>af08ec37a8c99d747fb60fa15bc28678b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SHA1_MAX_FILE_BUFFER</name>
      <anchorfile>SHA1_8cc.html</anchorfile>
      <anchor>a877b9c89432081a8887c4001167f39d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROL32</name>
      <anchorfile>SHA1_8cc.html</anchorfile>
      <anchor>ad237eaf33d72a6ceb693fd3b4bb34988</anchor>
      <arglist>(p_val32, p_nBits)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SHABLK0</name>
      <anchorfile>SHA1_8cc.html</anchorfile>
      <anchor>a58fed0196571bcccb55532e7c842efb7</anchor>
      <arglist>(i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SHABLK</name>
      <anchorfile>SHA1_8cc.html</anchorfile>
      <anchor>a9ef67069906f2c864a8c34aaae622718</anchor>
      <arglist>(i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>S_R0</name>
      <anchorfile>SHA1_8cc.html</anchorfile>
      <anchor>adec6ba398444beadbaecaa4f397b225c</anchor>
      <arglist>(v, w, x, y, z, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>S_R1</name>
      <anchorfile>SHA1_8cc.html</anchorfile>
      <anchor>a44173215bbd5ed534369ca4392c74ef7</anchor>
      <arglist>(v, w, x, y, z, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>S_R2</name>
      <anchorfile>SHA1_8cc.html</anchorfile>
      <anchor>a6d417639f54aa9cad31d8bfa1dee575a</anchor>
      <arglist>(v, w, x, y, z, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>S_R3</name>
      <anchorfile>SHA1_8cc.html</anchorfile>
      <anchor>afb83af0990eb773698f2ccf3a3dcf013</anchor>
      <arglist>(v, w, x, y, z, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>S_R4</name>
      <anchorfile>SHA1_8cc.html</anchorfile>
      <anchor>a261228645c08398fdf507a55a9f5e209</anchor>
      <arglist>(v, w, x, y, z, i)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SHA1.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>SHA1_8h</filename>
    <class kind="union">SHA1_WORKSPACE_BLOCK</class>
    <class kind="class">CSHA1</class>
    <member kind="define">
      <type>#define</type>
      <name>SHA1_UTILITY_FUNCTIONS</name>
      <anchorfile>SHA1_8h.html</anchorfile>
      <anchor>a1249969b3fcf33ee3a390eb7bafdbb9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SHA1_STL_FUNCTIONS</name>
      <anchorfile>SHA1_8h.html</anchorfile>
      <anchor>a4c783b9859c5d225a7b505ab87f7a69c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SHA1_LITTLE_ENDIAN</name>
      <anchorfile>SHA1_8h.html</anchorfile>
      <anchor>a9d3800bc4ec1666cd0cf285ffde33e95</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SHA1_WIPE_VARIABLES</name>
      <anchorfile>SHA1_8h.html</anchorfile>
      <anchor>ae9060e21277bf171c2ead5e042dd53a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TCHAR</name>
      <anchorfile>SHA1_8h.html</anchorfile>
      <anchor>a65c91f8d7af3c67b8a21e089fdddd0fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_T</name>
      <anchorfile>SHA1_8h.html</anchorfile>
      <anchor>a4c71513b8c8c9769f63b5a1ce9434513</anchor>
      <arglist>(__x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_tmain</name>
      <anchorfile>SHA1_8h.html</anchorfile>
      <anchor>ab9e9e7992d1bc34d1cd340ff7161898a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_tprintf</name>
      <anchorfile>SHA1_8h.html</anchorfile>
      <anchor>ac642483f39ee6964424790720b48aee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_getts</name>
      <anchorfile>SHA1_8h.html</anchorfile>
      <anchor>a3e97f47613be2c55ac0149b9b4935d60</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_tcslen</name>
      <anchorfile>SHA1_8h.html</anchorfile>
      <anchor>ad253c68ce58b12b277fedc2d785d7977</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_tfopen</name>
      <anchorfile>SHA1_8h.html</anchorfile>
      <anchor>a65d483a46d24b40308cab4b44d147d7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_tcscpy</name>
      <anchorfile>SHA1_8h.html</anchorfile>
      <anchor>a181225a46a4d86ddcbcd23bfc0982dee</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_tcscat</name>
      <anchorfile>SHA1_8h.html</anchorfile>
      <anchor>a170b7aaa68da11593c3cb97699ca7500</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_sntprintf</name>
      <anchorfile>SHA1_8h.html</anchorfile>
      <anchor>aad0cc0637768c5eda50cb458f023066a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UINT_8</name>
      <anchorfile>SHA1_8h.html</anchorfile>
      <anchor>aecffebc452f5b7100c06c3e132297ac4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UINT_32</name>
      <anchorfile>SHA1_8h.html</anchorfile>
      <anchor>af5a2be58a28390f9a494538f34054637</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INT_64</name>
      <anchorfile>SHA1_8h.html</anchorfile>
      <anchor>aa6cdfabb952b040d30b1860ed2ab61b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UINT_64</name>
      <anchorfile>SHA1_8h.html</anchorfile>
      <anchor>ac4116bb9a5e80b5cb845d4f2674c160f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimMud.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier2/simmud/</path>
    <filename>SimMud_8cc</filename>
    <includes id="SimMud_8h" name="SimMud.h" local="yes" imported="no">SimMud.h</includes>
    <includes id="ScribeMessage__m_8h" name="ScribeMessage_m.h" local="yes" imported="no">ScribeMessage_m.h</includes>
    <includes id="GlobalStatistics_8h" name="GlobalStatistics.h" local="no" imported="no">GlobalStatistics.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>SimMud_8cc.html</anchorfile>
      <anchor>ab3fa3ea8e22ef9cdd6c9dfd25526e48d</anchor>
      <arglist>(SimMud)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimMud.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier2/simmud/</path>
    <filename>SimMud_8h</filename>
    <includes id="BaseApp_8h" name="BaseApp.h" local="yes" imported="no">BaseApp.h</includes>
    <includes id="SimMud__m_8h" name="SimMud_m.h" local="yes" imported="no">SimMud_m.h</includes>
    <includes id="Vector2D_8h" name="Vector2D.h" local="yes" imported="no">Vector2D.h</includes>
    <class kind="class">SimMud</class>
    <class kind="struct">SimMud::PlayerInfo</class>
  </compound>
  <compound kind="file">
    <name>SimMud_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier2/simmud/</path>
    <filename>SimMud__m_8h</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <class kind="class">SimMudMoveMessage</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>SimMud__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIMMUD_MOVE_L</name>
      <anchorfile>SimMud__m_8h.html</anchorfile>
      <anchor>af341a47822e167a51356e6849a9e8400</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>SimMud__m_8h.html</anchorfile>
      <anchor>a43f36cd50b4f7014496e8a72de6855c2</anchor>
      <arglist>(cCommBuffer *b, SimMudMoveMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>SimMud__m_8h.html</anchorfile>
      <anchor>afb62182c98284a73a39f403d06b0f223</anchor>
      <arglist>(cCommBuffer *b, SimMudMoveMessage &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimpleCoordDataContainer.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/globalViewBuilder/</path>
    <filename>SimpleCoordDataContainer_8cc</filename>
    <includes id="SimpleCoordDataContainer_8h" name="SimpleCoordDataContainer.h" local="yes" imported="no">SimpleCoordDataContainer.h</includes>
  </compound>
  <compound kind="file">
    <name>SimpleCoordDataContainer.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/globalViewBuilder/</path>
    <filename>SimpleCoordDataContainer_8h</filename>
    <includes id="oversim__mapset_8h" name="oversim_mapset.h" local="no" imported="no">oversim_mapset.h</includes>
    <class kind="class">SimpleCoordinate</class>
    <class kind="class">SimpleCoordinate::hashFcn</class>
    <class kind="class">SimpleCoordDataContainer</class>
    <member kind="define">
      <type>#define</type>
      <name>SIMPLECOORDDATACONTAINER_H_</name>
      <anchorfile>SimpleCoordDataContainer_8h.html</anchorfile>
      <anchor>af3c2c6042d9184b888565293ae0f9fc6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimpleGameClient.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/simplegameclient/</path>
    <filename>SimpleGameClient_8cc</filename>
    <includes id="SimpleGameClient_8h" name="SimpleGameClient.h" local="yes" imported="no">SimpleGameClient.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>SimpleGameClient_8cc.html</anchorfile>
      <anchor>a4a6532dae0a0d9e64d85199af1a08dd9</anchor>
      <arglist>(SimpleGameClient)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimpleGameClient.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/simplegameclient/</path>
    <filename>SimpleGameClient_8h</filename>
    <includes id="tunoutscheduler_8h" name="tunoutscheduler.h" local="no" imported="no">tunoutscheduler.h</includes>
    <includes id="realtimescheduler_8h" name="realtimescheduler.h" local="no" imported="no">realtimescheduler.h</includes>
    <includes id="Vector2D_8h" name="Vector2D.h" local="no" imported="no">Vector2D.h</includes>
    <includes id="BaseApp_8h" name="BaseApp.h" local="no" imported="no">BaseApp.h</includes>
    <includes id="GlobalCoordinator_8h" name="GlobalCoordinator.h" local="no" imported="no">GlobalCoordinator.h</includes>
    <includes id="GlobalStatisticsAccess_8h" name="GlobalStatisticsAccess.h" local="no" imported="no">GlobalStatisticsAccess.h</includes>
    <includes id="MovementGenerator_8h" name="MovementGenerator.h" local="no" imported="no">MovementGenerator.h</includes>
    <includes id="randomRoaming_8h" name="randomRoaming.h" local="no" imported="no">randomRoaming.h</includes>
    <includes id="groupRoaming_8h" name="groupRoaming.h" local="no" imported="no">groupRoaming.h</includes>
    <includes id="hotspotRoaming_8h" name="hotspotRoaming.h" local="no" imported="no">hotspotRoaming.h</includes>
    <includes id="traverseRoaming_8h" name="traverseRoaming.h" local="no" imported="no">traverseRoaming.h</includes>
    <includes id="greatGathering_8h" name="greatGathering.h" local="no" imported="no">greatGathering.h</includes>
    <includes id="realWorldRoaming_8h" name="realWorldRoaming.h" local="no" imported="no">realWorldRoaming.h</includes>
    <includes id="SCPacket_8h" name="SCPacket.h" local="yes" imported="no">SCPacket.h</includes>
    <includes id="SimpleGameClient__m_8h" name="SimpleGameClient_m.h" local="yes" imported="no">SimpleGameClient_m.h</includes>
    <class kind="class">SimpleGameClient</class>
  </compound>
  <compound kind="file">
    <name>SimpleGameClient_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/simplegameclient/</path>
    <filename>SimpleGameClient__m_8h</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="Vector2D_8h" name="Vector2D.h" local="no" imported="no">Vector2D.h</includes>
    <class kind="class">SCSnowTimer</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>SimpleGameClient__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>SimpleGameClient__m_8h.html</anchorfile>
      <anchor>a85a4c690cb4c904777fde2d7c98bb8d7</anchor>
      <arglist>(cCommBuffer *b, SCSnowTimer &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>SimpleGameClient__m_8h.html</anchorfile>
      <anchor>a70932ea9ddc539884f0a3465bc5d3b58</anchor>
      <arglist>(cCommBuffer *b, SCSnowTimer &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimpleInfo.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/simpleunderlay/</path>
    <filename>SimpleInfo_8cc</filename>
    <includes id="SimpleInfo_8h" name="SimpleInfo.h" local="yes" imported="no">SimpleInfo.h</includes>
  </compound>
  <compound kind="file">
    <name>SimpleInfo.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/simpleunderlay/</path>
    <filename>SimpleInfo_8h</filename>
    <includes id="PeerInfo_8h" name="PeerInfo.h" local="no" imported="no">PeerInfo.h</includes>
    <includes id="SimpleNodeEntry_8h" name="SimpleNodeEntry.h" local="no" imported="no">SimpleNodeEntry.h</includes>
    <class kind="class">SimpleInfo</class>
  </compound>
  <compound kind="file">
    <name>SimpleNcs.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>SimpleNcs_8cc</filename>
    <includes id="SimpleNcs_8h" name="SimpleNcs.h" local="yes" imported="no">SimpleNcs.h</includes>
    <includes id="SHA1_8h" name="SHA1.h" local="no" imported="no">SHA1.h</includes>
    <includes id="GlobalNodeListAccess_8h" name="GlobalNodeListAccess.h" local="no" imported="no">GlobalNodeListAccess.h</includes>
    <includes id="OverlayAccess_8h" name="OverlayAccess.h" local="no" imported="no">OverlayAccess.h</includes>
    <includes id="SimpleNodeEntry_8h" name="SimpleNodeEntry.h" local="no" imported="no">SimpleNodeEntry.h</includes>
    <includes id="SimpleInfo_8h" name="SimpleInfo.h" local="no" imported="no">SimpleInfo.h</includes>
  </compound>
  <compound kind="file">
    <name>SimpleNcs.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>SimpleNcs_8h</filename>
    <includes id="NeighborCache_8h" name="NeighborCache.h" local="no" imported="no">NeighborCache.h</includes>
    <includes id="CoordinateSystem_8h" name="CoordinateSystem.h" local="no" imported="no">CoordinateSystem.h</includes>
    <class kind="class">SimpleNcs</class>
  </compound>
  <compound kind="file">
    <name>SimpleNodeEntry.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/simpleunderlay/</path>
    <filename>SimpleNodeEntry_8cc</filename>
    <includes id="SimpleNodeEntry_8h" name="SimpleNodeEntry.h" local="yes" imported="no">SimpleNodeEntry.h</includes>
    <includes id="SimpleUDP_8h" name="SimpleUDP.h" local="yes" imported="no">SimpleUDP.h</includes>
    <includes id="SimpleTCP_8h" name="SimpleTCP.h" local="yes" imported="no">SimpleTCP.h</includes>
    <includes id="SHA1_8h" name="SHA1.h" local="yes" imported="no">SHA1.h</includes>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="yes" imported="no">OverlayKey.h</includes>
    <includes id="BinaryValue_8h" name="BinaryValue.h" local="yes" imported="no">BinaryValue.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>SimpleNodeEntry_8cc.html</anchorfile>
      <anchor>a0b4192804a609ce319462fc307aa5248</anchor>
      <arglist>(std::ostream &amp;out, const SimpleNodeEntry &amp;entry)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimpleNodeEntry.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/simpleunderlay/</path>
    <filename>SimpleNodeEntry_8h</filename>
    <includes id="BaseLocation_8h" name="BaseLocation.h" local="yes" imported="no">BaseLocation.h</includes>
    <class kind="class">NodeRecord</class>
    <class kind="class">SimpleNodeEntry</class>
    <class kind="struct">SimpleNodeEntry::Channel</class>
  </compound>
  <compound kind="file">
    <name>SimpleTCP.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/simpleunderlay/</path>
    <filename>SimpleTCP_8cc</filename>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <includes id="GlobalNodeListAccess_8h" name="GlobalNodeListAccess.h" local="no" imported="no">GlobalNodeListAccess.h</includes>
    <includes id="GlobalStatisticsAccess_8h" name="GlobalStatisticsAccess.h" local="no" imported="no">GlobalStatisticsAccess.h</includes>
    <includes id="SimpleInfo_8h" name="SimpleInfo.h" local="no" imported="no">SimpleInfo.h</includes>
    <includes id="SimpleUDP_8h" name="SimpleUDP.h" local="no" imported="no">SimpleUDP.h</includes>
    <includes id="SimpleTCP_8h" name="SimpleTCP.h" local="yes" imported="no">SimpleTCP.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>EPHEMERAL_PORTRANGE_START</name>
      <anchorfile>SimpleTCP_8cc.html</anchorfile>
      <anchor>ae0f9dd1223cbb93271a6c1d5789b5be5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EPHEMERAL_PORTRANGE_END</name>
      <anchorfile>SimpleTCP_8cc.html</anchorfile>
      <anchor>a689da7c4b794eb247004b316117da9d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>SimpleTCP_8cc.html</anchorfile>
      <anchor>aaa76800ca6a7328e65e0126c96ebcfe0</anchor>
      <arglist>(SimpleTCP)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>SimpleTCP_8cc.html</anchorfile>
      <anchor>ae08c0c9c4940cedb0580aa871f26ff27</anchor>
      <arglist>(std::ostream &amp;os, const TCP::SockPair &amp;sp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>SimpleTCP_8cc.html</anchorfile>
      <anchor>a07d70fcc2d302256f56cfda87e358c02</anchor>
      <arglist>(std::ostream &amp;os, const TCP::AppConnKey &amp;app)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>SimpleTCP_8cc.html</anchorfile>
      <anchor>a20fca7e32e1340fd528c513112b38aeb</anchor>
      <arglist>(std::ostream &amp;os, const TCPConnection &amp;conn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimpleTCP.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/simpleunderlay/</path>
    <filename>SimpleTCP_8h</filename>
    <includes id="InitStages_8h" name="InitStages.h" local="no" imported="no">InitStages.h</includes>
    <class kind="struct">StatisticsAndDelay</class>
    <class kind="class">SimpleTCPConnection</class>
    <class kind="class">SimpleTCP</class>
  </compound>
  <compound kind="file">
    <name>SimpleUDP.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/simpleunderlay/</path>
    <filename>SimpleUDP_8cc</filename>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <includes id="GlobalNodeListAccess_8h" name="GlobalNodeListAccess.h" local="no" imported="no">GlobalNodeListAccess.h</includes>
    <includes id="GlobalStatisticsAccess_8h" name="GlobalStatisticsAccess.h" local="no" imported="no">GlobalStatisticsAccess.h</includes>
    <includes id="SimpleInfo_8h" name="SimpleInfo.h" local="no" imported="no">SimpleInfo.h</includes>
    <includes id="SimpleUDP_8h" name="SimpleUDP.h" local="yes" imported="no">SimpleUDP.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>EPHEMERAL_PORTRANGE_START</name>
      <anchorfile>SimpleUDP_8cc.html</anchorfile>
      <anchor>ae0f9dd1223cbb93271a6c1d5789b5be5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EPHEMERAL_PORTRANGE_END</name>
      <anchorfile>SimpleUDP_8cc.html</anchorfile>
      <anchor>a689da7c4b794eb247004b316117da9d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>SimpleUDP_8cc.html</anchorfile>
      <anchor>a162a54a5e84a6d58cd99f88cfe954f13</anchor>
      <arglist>(SimpleUDP)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>SimpleUDP_8cc.html</anchorfile>
      <anchor>a106c259106fd7fa43fd233d385fb4481</anchor>
      <arglist>(std::ostream &amp;os, const SimpleUDP::SockDesc &amp;sd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>SimpleUDP_8cc.html</anchorfile>
      <anchor>ad2643afb1c92a13b6fdf1a459361cf42</anchor>
      <arglist>(std::ostream &amp;os, const SimpleUDP::SockDescList &amp;list)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimpleUDP.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/simpleunderlay/</path>
    <filename>SimpleUDP_8h</filename>
    <includes id="InitStages_8h" name="InitStages.h" local="no" imported="no">InitStages.h</includes>
    <class kind="class">SimpleUDP</class>
    <member kind="variable">
      <type>const int</type>
      <name>IPv6_HEADER_BYTES</name>
      <anchorfile>SimpleUDP_8h.html</anchorfile>
      <anchor>a8a09101d202f638c784b6d4eec10b0fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimpleUnderlayConfigurator.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/simpleunderlay/</path>
    <filename>SimpleUnderlayConfigurator_8cc</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="TransportAddress_8h" name="TransportAddress.h" local="yes" imported="no">TransportAddress.h</includes>
    <includes id="ChurnGenerator_8h" name="ChurnGenerator.h" local="yes" imported="no">ChurnGenerator.h</includes>
    <includes id="GlobalNodeList_8h" name="GlobalNodeList.h" local="yes" imported="no">GlobalNodeList.h</includes>
    <includes id="StringConvert_8h" name="StringConvert.h" local="no" imported="no">StringConvert.h</includes>
    <includes id="SimpleUDP_8h" name="SimpleUDP.h" local="yes" imported="no">SimpleUDP.h</includes>
    <includes id="SimpleTCP_8h" name="SimpleTCP.h" local="yes" imported="no">SimpleTCP.h</includes>
    <includes id="SimpleUnderlayConfigurator_8h" name="SimpleUnderlayConfigurator.h" local="yes" imported="no">SimpleUnderlayConfigurator.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>SimpleUnderlayConfigurator_8cc.html</anchorfile>
      <anchor>a00060aa15d4d6baf047f82e5af815ac6</anchor>
      <arglist>(SimpleUnderlayConfigurator)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimpleUnderlayConfigurator.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/simpleunderlay/</path>
    <filename>SimpleUnderlayConfigurator_8h</filename>
    <includes id="UnderlayConfigurator_8h" name="UnderlayConfigurator.h" local="no" imported="no">UnderlayConfigurator.h</includes>
    <includes id="InitStages_8h" name="InitStages.h" local="no" imported="no">InitStages.h</includes>
    <includes id="SimpleInfo_8h" name="SimpleInfo.h" local="no" imported="no">SimpleInfo.h</includes>
    <includes id="BaseLocation_8h" name="BaseLocation.h" local="no" imported="no">BaseLocation.h</includes>
    <class kind="class">SimpleUnderlayConfigurator</class>
  </compound>
  <compound kind="file">
    <name>SimpleUnderlayNCS.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>SimpleUnderlayNCS_8cc</filename>
    <includes id="SimpleUnderlayNCS_8h" name="SimpleUnderlayNCS.h" local="yes" imported="no">SimpleUnderlayNCS.h</includes>
    <includes id="GlobalNodeListAccess_8h" name="GlobalNodeListAccess.h" local="no" imported="no">GlobalNodeListAccess.h</includes>
    <includes id="OverlayAccess_8h" name="OverlayAccess.h" local="no" imported="no">OverlayAccess.h</includes>
    <includes id="SimpleNodeEntry_8h" name="SimpleNodeEntry.h" local="no" imported="no">SimpleNodeEntry.h</includes>
    <includes id="SimpleInfo_8h" name="SimpleInfo.h" local="no" imported="no">SimpleInfo.h</includes>
  </compound>
  <compound kind="file">
    <name>SimpleUnderlayNCS.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>SimpleUnderlayNCS_8h</filename>
    <includes id="CoordinateSystem_8h" name="CoordinateSystem.h" local="yes" imported="no">CoordinateSystem.h</includes>
    <includes id="NeighborCache_8h" name="NeighborCache.h" local="no" imported="no">NeighborCache.h</includes>
    <class kind="class">SimpleUnderlayNCS</class>
  </compound>
  <compound kind="file">
    <name>simplex.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/</path>
    <filename>simplex_8cc</filename>
    <includes id="simplex_8h" name="simplex.h" local="yes" imported="no">simplex.h</includes>
    <includes id="NeighborCache_8h" name="NeighborCache.h" local="no" imported="no">NeighborCache.h</includes>
  </compound>
  <compound kind="file">
    <name>simplex.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/</path>
    <filename>simplex_8h</filename>
    <includes id="yang_8h" name="yang.h" local="yes" imported="no">yang.h</includes>
    <class kind="class">Simplex</class>
  </compound>
  <compound kind="file">
    <name>SingleHostUnderlayConfigurator.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/singlehostunderlay/</path>
    <filename>SingleHostUnderlayConfigurator_8cc</filename>
    <includes id="PeerInfo_8h" name="PeerInfo.h" local="no" imported="no">PeerInfo.h</includes>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="GlobalNodeListAccess_8h" name="GlobalNodeListAccess.h" local="no" imported="no">GlobalNodeListAccess.h</includes>
    <includes id="SingleHostUnderlayConfigurator_8h" name="SingleHostUnderlayConfigurator.h" local="yes" imported="no">SingleHostUnderlayConfigurator.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>WANT_WINSOCK2</name>
      <anchorfile>SingleHostUnderlayConfigurator_8cc.html</anchorfile>
      <anchor>a105264025fbdfc308077979bc21a5474</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>SingleHostUnderlayConfigurator_8cc.html</anchorfile>
      <anchor>a3233e9593f24d9a978afa593c937ae4f</anchor>
      <arglist>(SingleHostUnderlayConfigurator)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SingleHostUnderlayConfigurator.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/singlehostunderlay/</path>
    <filename>SingleHostUnderlayConfigurator_8h</filename>
    <includes id="UnderlayConfigurator_8h" name="UnderlayConfigurator.h" local="no" imported="no">UnderlayConfigurator.h</includes>
    <includes id="InitStages_8h" name="InitStages.h" local="no" imported="no">InitStages.h</includes>
    <class kind="class">SingleHostUnderlayConfigurator</class>
  </compound>
  <compound kind="file">
    <name>StrategyRegions.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/globalViewBuilder/</path>
    <filename>StrategyRegions_8cc</filename>
    <includes id="StrategyRegions_8h" name="StrategyRegions.h" local="yes" imported="no">StrategyRegions.h</includes>
    <includes id="GlobalViewBuilder_8h" name="GlobalViewBuilder.h" local="no" imported="no">GlobalViewBuilder.h</includes>
  </compound>
  <compound kind="file">
    <name>StrategyRegions.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/globalViewBuilder/</path>
    <filename>StrategyRegions_8h</filename>
    <includes id="oversim__mapset_8h" name="oversim_mapset.h" local="no" imported="no">oversim_mapset.h</includes>
    <includes id="RegionDataContainer_8h" name="RegionDataContainer.h" local="no" imported="no">RegionDataContainer.h</includes>
    <includes id="AbstractSendStrategy_8h" name="AbstractSendStrategy.h" local="no" imported="no">AbstractSendStrategy.h</includes>
    <class kind="class">StrategyRegions</class>
    <member kind="typedef">
      <type>std::pair&lt; long, int &gt;</type>
      <name>regionCountPair</name>
      <anchorfile>StrategyRegions_8h.html</anchorfile>
      <anchor>ad12fddedef1ff1582b668f9eff20e742</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UNORDERED_MAP&lt; long, int &gt;</type>
      <name>regionCountMap</name>
      <anchorfile>StrategyRegions_8h.html</anchorfile>
      <anchor>ae5727ff6ea79e5b3c0b35b6de24cfc5c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StrategyRemoveCoords.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/globalViewBuilder/</path>
    <filename>StrategyRemoveCoords_8cc</filename>
    <includes id="StrategyRemoveCoords_8h" name="StrategyRemoveCoords.h" local="yes" imported="no">StrategyRemoveCoords.h</includes>
    <includes id="GlobalViewBuilder_8h" name="GlobalViewBuilder.h" local="no" imported="no">GlobalViewBuilder.h</includes>
  </compound>
  <compound kind="file">
    <name>StrategyRemoveCoords.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/globalViewBuilder/</path>
    <filename>StrategyRemoveCoords_8h</filename>
    <includes id="StrategySendAll_8h" name="StrategySendAll.h" local="no" imported="no">StrategySendAll.h</includes>
    <class kind="class">StrategyRemoveCoords</class>
  </compound>
  <compound kind="file">
    <name>StrategyRemoveInaccurate.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/globalViewBuilder/</path>
    <filename>StrategyRemoveInaccurate_8cc</filename>
    <includes id="StrategyRemoveInaccurate_8h" name="StrategyRemoveInaccurate.h" local="yes" imported="no">StrategyRemoveInaccurate.h</includes>
    <member kind="function">
      <type>bool</type>
      <name>compareCoordsByErrorVector</name>
      <anchorfile>StrategyRemoveInaccurate_8cc.html</anchorfile>
      <anchor>aebf5e34ac01d098023b0e885469ee2d7</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;va, const std::vector&lt; double &gt; &amp;vb)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StrategyRemoveInaccurate.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/globalViewBuilder/</path>
    <filename>StrategyRemoveInaccurate_8h</filename>
    <includes id="StrategyRemoveCoords_8h" name="StrategyRemoveCoords.h" local="no" imported="no">StrategyRemoveCoords.h</includes>
    <class kind="class">StrategyRemoveInaccurate</class>
  </compound>
  <compound kind="file">
    <name>StrategyRemoveRandom.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/globalViewBuilder/</path>
    <filename>StrategyRemoveRandom_8cc</filename>
    <includes id="StrategyRemoveRandom_8h" name="StrategyRemoveRandom.h" local="yes" imported="no">StrategyRemoveRandom.h</includes>
    <includes id="GlobalViewBuilder_8h" name="GlobalViewBuilder.h" local="no" imported="no">GlobalViewBuilder.h</includes>
  </compound>
  <compound kind="file">
    <name>StrategyRemoveRandom.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/globalViewBuilder/</path>
    <filename>StrategyRemoveRandom_8h</filename>
    <includes id="StrategyRemoveCoords_8h" name="StrategyRemoveCoords.h" local="no" imported="no">StrategyRemoveCoords.h</includes>
    <class kind="class">StrategyRemoveRandom</class>
  </compound>
  <compound kind="file">
    <name>StrategySendAll.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/globalViewBuilder/</path>
    <filename>StrategySendAll_8cc</filename>
    <includes id="TreeManagement_8h" name="TreeManagement.h" local="no" imported="no">TreeManagement.h</includes>
    <includes id="StrategySendAll_8h" name="StrategySendAll.h" local="yes" imported="no">StrategySendAll.h</includes>
  </compound>
  <compound kind="file">
    <name>StrategySendAll.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/globalViewBuilder/</path>
    <filename>StrategySendAll_8h</filename>
    <includes id="oversim__mapset_8h" name="oversim_mapset.h" local="no" imported="no">oversim_mapset.h</includes>
    <includes id="CoordDataContainer_8h" name="CoordDataContainer.h" local="no" imported="no">CoordDataContainer.h</includes>
    <includes id="AbstractSendStrategy_8h" name="AbstractSendStrategy.h" local="no" imported="no">AbstractSendStrategy.h</includes>
    <class kind="class">StrategySendAll</class>
  </compound>
  <compound kind="file">
    <name>StrategySimplifyCoords.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/globalViewBuilder/</path>
    <filename>StrategySimplifyCoords_8cc</filename>
    <includes id="StrategySimplifyCoords_8h" name="StrategySimplifyCoords.h" local="yes" imported="no">StrategySimplifyCoords.h</includes>
    <includes id="GlobalViewBuilder_8h" name="GlobalViewBuilder.h" local="no" imported="no">GlobalViewBuilder.h</includes>
  </compound>
  <compound kind="file">
    <name>StrategySimplifyCoords.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/globalViewBuilder/</path>
    <filename>StrategySimplifyCoords_8h</filename>
    <includes id="oversim__mapset_8h" name="oversim_mapset.h" local="no" imported="no">oversim_mapset.h</includes>
    <includes id="SimpleCoordDataContainer_8h" name="SimpleCoordDataContainer.h" local="no" imported="no">SimpleCoordDataContainer.h</includes>
    <includes id="AbstractSendStrategy_8h" name="AbstractSendStrategy.h" local="no" imported="no">AbstractSendStrategy.h</includes>
    <class kind="class">StrategySimplifyCoords</class>
    <member kind="typedef">
      <type>std::pair&lt; SimpleCoordinate, int &gt;</type>
      <name>simpleCoordPair</name>
      <anchorfile>StrategySimplifyCoords_8h.html</anchorfile>
      <anchor>ac55207b947d99a1f7ab93bc14d71a92c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UNORDERED_MAP&lt; SimpleCoordinate, int, SimpleCoordinate::hashFcn &gt;</type>
      <name>simpleCoordCountMap</name>
      <anchorfile>StrategySimplifyCoords_8h.html</anchorfile>
      <anchor>a45a2ff6e3c1e09fef4ba0f97e3692f31</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StrategyTreeTest.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/globalViewBuilder/</path>
    <filename>StrategyTreeTest_8cc</filename>
    <includes id="StrategyTreeTest_8h" name="StrategyTreeTest.h" local="yes" imported="no">StrategyTreeTest.h</includes>
  </compound>
  <compound kind="file">
    <name>StrategyTreeTest.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/globalViewBuilder/</path>
    <filename>StrategyTreeTest_8h</filename>
    <includes id="oversim__mapset_8h" name="oversim_mapset.h" local="no" imported="no">oversim_mapset.h</includes>
    <includes id="TransportAddress_8h" name="TransportAddress.h" local="no" imported="no">TransportAddress.h</includes>
    <includes id="AbstractSendStrategy_8h" name="AbstractSendStrategy.h" local="no" imported="no">AbstractSendStrategy.h</includes>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="GlobalNodeList_8h" name="GlobalNodeList.h" local="no" imported="no">GlobalNodeList.h</includes>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="TreeManagementMessage__m_8h" name="TreeManagementMessage_m.h" local="no" imported="no">TreeManagementMessage_m.h</includes>
    <class kind="class">StrategyTreeTest</class>
  </compound>
  <compound kind="file">
    <name>StringConvert.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>StringConvert_8h</filename>
    <member kind="function">
      <type>t</type>
      <name>convertString</name>
      <anchorfile>StringConvert_8h.html</anchorfile>
      <anchor>a48e31aee61ecf1668f1dcde29570168b</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>convertToString</name>
      <anchorfile>StringConvert_8h.html</anchorfile>
      <anchor>a1b75cd6d0f2a4617d6b7d0c82661fad5</anchor>
      <arglist>(const t &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SVivaldi.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>SVivaldi_8cc</filename>
    <includes id="NeighborCache_8h" name="NeighborCache.h" local="no" imported="no">NeighborCache.h</includes>
    <includes id="SVivaldi_8h" name="SVivaldi.h" local="yes" imported="no">SVivaldi.h</includes>
  </compound>
  <compound kind="file">
    <name>SVivaldi.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>SVivaldi_8h</filename>
    <includes id="Vivaldi_8h" name="Vivaldi.h" local="no" imported="no">Vivaldi.h</includes>
    <class kind="class">SVivaldi</class>
  </compound>
  <compound kind="file">
    <name>TCPExampleApp.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/tcpexampleapp/</path>
    <filename>TCPExampleApp_8cc</filename>
    <includes id="UnderlayConfigurator_8h" name="UnderlayConfigurator.h" local="yes" imported="no">UnderlayConfigurator.h</includes>
    <includes id="GlobalStatistics_8h" name="GlobalStatistics.h" local="yes" imported="no">GlobalStatistics.h</includes>
    <includes id="GlobalNodeList_8h" name="GlobalNodeList.h" local="yes" imported="no">GlobalNodeList.h</includes>
    <includes id="BootstrapList_8h" name="BootstrapList.h" local="yes" imported="no">BootstrapList.h</includes>
    <includes id="TCPExampleApp_8h" name="TCPExampleApp.h" local="yes" imported="no">TCPExampleApp.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>TCPExampleApp_8cc.html</anchorfile>
      <anchor>a3233c2ae3b019eadf43d6a211c8b9bc3</anchor>
      <arglist>(TCPExampleApp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TCPExampleApp.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/tcpexampleapp/</path>
    <filename>TCPExampleApp_8h</filename>
    <includes id="BaseApp_8h" name="BaseApp.h" local="no" imported="no">BaseApp.h</includes>
    <includes id="TCPExampleMessage__m_8h" name="TCPExampleMessage_m.h" local="yes" imported="no">TCPExampleMessage_m.h</includes>
    <class kind="class">TCPExampleApp</class>
  </compound>
  <compound kind="file">
    <name>TCPExampleMessage_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/tcpexampleapp/</path>
    <filename>TCPExampleMessage__m_8h</filename>
    <includes id="TransportAddress_8h" name="TransportAddress.h" local="no" imported="no">TransportAddress.h</includes>
    <class kind="class">TCPExampleMessage</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>TCPExampleMessage__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>MessageType</name>
      <anchorfile>TCPExampleMessage__m_8h.html</anchorfile>
      <anchor>ac6606ebe91c8ac66a2c314c79f5ab013</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MYMSG_PING</name>
      <anchorfile>TCPExampleMessage__m_8h.html</anchorfile>
      <anchor>ac6606ebe91c8ac66a2c314c79f5ab013a460221e053aedd5c97e2614abf6f14ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MYMSG_PONG</name>
      <anchorfile>TCPExampleMessage__m_8h.html</anchorfile>
      <anchor>ac6606ebe91c8ac66a2c314c79f5ab013a2970f35929b2f861889f758349b564f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCPEXMSG_PING</name>
      <anchorfile>TCPExampleMessage__m_8h.html</anchorfile>
      <anchor>ac6606ebe91c8ac66a2c314c79f5ab013a7d216e14f2cada95987fb4acb26d7d55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCPEXMSG_PONG</name>
      <anchorfile>TCPExampleMessage__m_8h.html</anchorfile>
      <anchor>ac6606ebe91c8ac66a2c314c79f5ab013a381fa72411d7ec03ebf83c2fad99e7c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>M_JOIN</name>
      <anchorfile>TCPExampleMessage__m_8h.html</anchorfile>
      <anchor>ac6606ebe91c8ac66a2c314c79f5ab013acd29641e94a490eff42f9405ff3bfadd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>M_LEAVE</name>
      <anchorfile>TCPExampleMessage__m_8h.html</anchorfile>
      <anchor>ac6606ebe91c8ac66a2c314c79f5ab013a2b7a0f4663b009a55deb3d397a72f1d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>M_QUERY_NODE</name>
      <anchorfile>TCPExampleMessage__m_8h.html</anchorfile>
      <anchor>ac6606ebe91c8ac66a2c314c79f5ab013a44576a84484d57925ed8848278d4defb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>M_QUERY_SEGMENT</name>
      <anchorfile>TCPExampleMessage__m_8h.html</anchorfile>
      <anchor>ac6606ebe91c8ac66a2c314c79f5ab013a19bf83a01d9cdeb9d6f6b65f62f67346</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>M_RESCUE</name>
      <anchorfile>TCPExampleMessage__m_8h.html</anchorfile>
      <anchor>ac6606ebe91c8ac66a2c314c79f5ab013a0579bc3b657a2fab0696e13e02439d99</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>TCPExampleMessage__m_8h.html</anchorfile>
      <anchor>ad3bf0c49ebcdf99af6aceea0e84d79be</anchor>
      <arglist>(cCommBuffer *b, TCPExampleMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>TCPExampleMessage__m_8h.html</anchorfile>
      <anchor>a541f995c2fc031364149afb92aaa8292</anchor>
      <arglist>(cCommBuffer *b, TCPExampleMessage &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TierDummy.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/tierdummy/</path>
    <filename>TierDummy_8cc</filename>
    <includes id="TierDummy_8h" name="TierDummy.h" local="no" imported="no">TierDummy.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>TierDummy_8cc.html</anchorfile>
      <anchor>a9b42a6e1209003d52e50ba0bebb5d7c6</anchor>
      <arglist>(TierDummy)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TierDummy.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/tierdummy/</path>
    <filename>TierDummy_8h</filename>
    <includes id="BaseApp_8h" name="BaseApp.h" local="no" imported="no">BaseApp.h</includes>
    <class kind="class">TierDummy</class>
  </compound>
  <compound kind="file">
    <name>TopologyVis.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>TopologyVis_8cc</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="GlobalNodeList_8h" name="GlobalNodeList.h" local="no" imported="no">GlobalNodeList.h</includes>
    <includes id="GlobalNodeListAccess_8h" name="GlobalNodeListAccess.h" local="no" imported="no">GlobalNodeListAccess.h</includes>
    <includes id="PeerInfo_8h" name="PeerInfo.h" local="no" imported="no">PeerInfo.h</includes>
    <includes id="TopologyVis_8h" name="TopologyVis.h" local="yes" imported="no">TopologyVis.h</includes>
  </compound>
  <compound kind="file">
    <name>TopologyVis.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>TopologyVis_8h</filename>
    <class kind="class">TopologyVis</class>
    <member kind="enumeration">
      <name>VisDrawDirection</name>
      <anchorfile>TopologyVis_8h.html</anchorfile>
      <anchor>a38f1f44e96ebcd9c2e18f56bcebaf29a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VIS_IN</name>
      <anchorfile>TopologyVis_8h.html</anchorfile>
      <anchor>a38f1f44e96ebcd9c2e18f56bcebaf29aa211d73a8c4a3fb5481d3a25f82a7b404</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VIS_OUT</name>
      <anchorfile>TopologyVis_8h.html</anchorfile>
      <anchor>a38f1f44e96ebcd9c2e18f56bcebaf29aaa7636105c15735b3bd57edecd2d8b40f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraceChurn.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>TraceChurn_8cc</filename>
    <includes id="PeerInfo_8h" name="PeerInfo.h" local="no" imported="no">PeerInfo.h</includes>
    <includes id="GlobalNodeListAccess_8h" name="GlobalNodeListAccess.h" local="no" imported="no">GlobalNodeListAccess.h</includes>
    <includes id="UnderlayConfigurator_8h" name="UnderlayConfigurator.h" local="no" imported="no">UnderlayConfigurator.h</includes>
    <includes id="TraceChurn_8h" name="TraceChurn.h" local="yes" imported="no">TraceChurn.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>TraceChurn_8cc.html</anchorfile>
      <anchor>a22b6f1d9c0de885133ccdd87de4278b0</anchor>
      <arglist>(TraceChurn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraceChurn.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>TraceChurn_8h</filename>
    <includes id="ChurnGenerator_8h" name="ChurnGenerator.h" local="no" imported="no">ChurnGenerator.h</includes>
    <includes id="oversim__mapset_8h" name="oversim_mapset.h" local="no" imported="no">oversim_mapset.h</includes>
    <class kind="class">TraceChurn</class>
  </compound>
  <compound kind="file">
    <name>TransportAddress.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>TransportAddress_8cc</filename>
    <includes id="TransportAddress_8h" name="TransportAddress.h" local="yes" imported="no">TransportAddress.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>TransportAddress_8cc.html</anchorfile>
      <anchor>a4e31f3768335d4310504c4742603ec33</anchor>
      <arglist>(std::ostream &amp;os, const TransportAddress &amp;n)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TransportAddress.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>TransportAddress_8h</filename>
    <includes id="oversim__mapset_8h" name="oversim_mapset.h" local="no" imported="no">oversim_mapset.h</includes>
    <class kind="class">TransportAddress</class>
    <class kind="class">TransportAddress::hashFcn</class>
    <member kind="typedef">
      <type>std::vector&lt; TransportAddress &gt;</type>
      <name>TransportAddressVector</name>
      <anchorfile>TransportAddress_8h.html</anchorfile>
      <anchor>af576175d1c89f8bda4df3a0dc0da1200</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>TransportAddress_8h.html</anchorfile>
      <anchor>a631ed3d896dc3bea25a8aa0f6143d45a</anchor>
      <arglist>(cCommBuffer *buf, TransportAddress &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>TransportAddress_8h.html</anchorfile>
      <anchor>ac43748e4c29e064b4e059891d3eb5d7c</anchor>
      <arglist>(cCommBuffer *buf, TransportAddress &amp;addr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>traverseRoaming.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/simplegameclient/</path>
    <filename>traverseRoaming_8cc</filename>
    <includes id="traverseRoaming_8h" name="traverseRoaming.h" local="yes" imported="no">traverseRoaming.h</includes>
    <includes id="GlobalStatisticsAccess_8h" name="GlobalStatisticsAccess.h" local="yes" imported="no">GlobalStatisticsAccess.h</includes>
  </compound>
  <compound kind="file">
    <name>traverseRoaming.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/simplegameclient/</path>
    <filename>traverseRoaming_8h</filename>
    <includes id="MovementGenerator_8h" name="MovementGenerator.h" local="yes" imported="no">MovementGenerator.h</includes>
    <class kind="class">traverseRoaming</class>
  </compound>
  <compound kind="file">
    <name>TreeManagement.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>TreeManagement_8cc</filename>
    <includes id="GlobalNodeListAccess_8h" name="GlobalNodeListAccess.h" local="no" imported="no">GlobalNodeListAccess.h</includes>
    <includes id="NeighborCache_8h" name="NeighborCache.h" local="no" imported="no">NeighborCache.h</includes>
    <includes id="OverlayAccess_8h" name="OverlayAccess.h" local="no" imported="no">OverlayAccess.h</includes>
    <includes id="GlobalNodeList_8h" name="GlobalNodeList.h" local="no" imported="no">GlobalNodeList.h</includes>
    <includes id="PeerInfo_8h" name="PeerInfo.h" local="no" imported="no">PeerInfo.h</includes>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <includes id="GlobalViewBuilder_8h" name="GlobalViewBuilder.h" local="no" imported="no">GlobalViewBuilder.h</includes>
    <includes id="TreeManagement_8h" name="TreeManagement.h" local="yes" imported="no">TreeManagement.h</includes>
  </compound>
  <compound kind="file">
    <name>TreeManagement.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>TreeManagement_8h</filename>
    <includes id="oversim__mapset_8h" name="oversim_mapset.h" local="no" imported="no">oversim_mapset.h</includes>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="GlobalNodeList_8h" name="GlobalNodeList.h" local="no" imported="no">GlobalNodeList.h</includes>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="NeighborCache_8h" name="NeighborCache.h" local="no" imported="no">NeighborCache.h</includes>
    <includes id="TreeManagementMessage__m_8h" name="TreeManagementMessage_m.h" local="no" imported="no">TreeManagementMessage_m.h</includes>
    <class kind="struct">treeNodeEntry</class>
    <class kind="class">TreeManagement</class>
    <member kind="define">
      <type>#define</type>
      <name>MAXTREELEVEL</name>
      <anchorfile>TreeManagement_8h.html</anchorfile>
      <anchor>abc024d494863300fffc1ae8279a7cf46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; TransportAddress, treeNodeEntry &gt;</type>
      <name>treeNodePair</name>
      <anchorfile>TreeManagement_8h.html</anchorfile>
      <anchor>a8adb427f80d14b67213875e3b032f993</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UNORDERED_MAP&lt; TransportAddress, treeNodeEntry, TransportAddress::hashFcn &gt;</type>
      <name>treeNodeMap</name>
      <anchorfile>TreeManagement_8h.html</anchorfile>
      <anchor>ae5fdca572efd0610e98a2d32d96f6f73</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TreeManagementMessage_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>TreeManagementMessage__m_8h</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="TransportAddress_8h" name="TransportAddress.h" local="no" imported="no">TransportAddress.h</includes>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <includes id="CoordDataContainer_8h" name="CoordDataContainer.h" local="no" imported="no">CoordDataContainer.h</includes>
    <includes id="SimpleCoordDataContainer_8h" name="SimpleCoordDataContainer.h" local="no" imported="no">SimpleCoordDataContainer.h</includes>
    <includes id="RegionDataContainer_8h" name="RegionDataContainer.h" local="no" imported="no">RegionDataContainer.h</includes>
    <includes id="AreaDataContainer_8h" name="AreaDataContainer.h" local="no" imported="no">AreaDataContainer.h</includes>
    <class kind="class">ParentRequestCall</class>
    <class kind="class">ParentRequestResponse</class>
    <class kind="class">TreeAppCall</class>
    <class kind="class">TreeAppResponse</class>
    <class kind="class">GlobalViewBuilderCall</class>
    <class kind="class">GlobalViewBuilderResponse</class>
    <class kind="class">ChildReleaseCall</class>
    <class kind="class">ChildReleaseResponse</class>
    <class kind="class">ChildCheckCall</class>
    <class kind="class">ChildCheckResponse</class>
    <class kind="class">SendCoordinatesCall</class>
    <class kind="class">SendAllStrategyCall</class>
    <class kind="class">RemoveRandomStrategyCall</class>
    <class kind="class">TreeTestStrategyCall</class>
    <class kind="class">RegionsStrategyCall</class>
    <class kind="class">SimpleCoordStrategyCall</class>
    <class kind="class">AreaDataCall</class>
    <class kind="class">CapReqCall</class>
    <class kind="class">CapReqResponse</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TREETESTSTRATEGYCALL_L</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>ae4b1dec07cb1ae1f933bfa75ffdf7997</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PARENTREQUESTCALL_L</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>ada2761cd78fb7b35c2523db601dcc790</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PARENTREQUESTRESPONSE_L</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>ab7cccbc47096f221c6d432305aaf4fda</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CHILDRELEASECALL_L</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>ac8c7ed7adddfdb10ad600b8bfc19d346</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CHILDRELEASERESPONSE_L</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>aefc29435e285335f228feb4aa550b88b</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CHILDCHECKCALL_L</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>a5fa11f996765092d8d2c1581be3199f2</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CHILDCHECKRESPONSE_L</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>a6ab2f837311b77f1738681759a7e876c</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TREEAPPCALL_L</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>a7de76e9ae735255c4771c8e8cd867b00</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TREEAPPRESPONSE_L</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>a251bdb5cc611b73ab756376109209fb2</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GLOBALVIEWBUILDERCALL_L</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>af11b4ae957cd2b6ce945da60396aa3b3</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GLOBALVIEWBUILDERRESPONSE_L</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>ab0836c98cbc9dc20eaf835f4177ae683</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SENDCOORDINATESCALL_L</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>a7c98a8f2d9bd96155e8d2b7e64fa9fb1</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SENDALLSTRATEGYCALL_L</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>a75516141cf75276254a161cee2763147</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REMOVERANDOMSTRATEGYCALL_L</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>a29065f4127ba580a8ef16e53c342773a</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REGIONSSTRATEGYCALL_L</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>ab6da24f9ec5e6b631ffa40abf7e361d5</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIMPLECOORDSTRATEGYCALL_L</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>a81004884202a0b70bc0ccbd761d11161</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>a46fed404f0deb12e7ebbc0edb71c642b</anchor>
      <arglist>(cCommBuffer *b, ParentRequestCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>a4948fa3c259b6ca23e92d15f5a63792a</anchor>
      <arglist>(cCommBuffer *b, ParentRequestCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>a7e61c437445c955250c209c286616f90</anchor>
      <arglist>(cCommBuffer *b, ParentRequestResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>af4a3497c3cd56756ef3daf21d8bc2d79</anchor>
      <arglist>(cCommBuffer *b, ParentRequestResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>afc52395203b47aaf8151058479f71446</anchor>
      <arglist>(cCommBuffer *b, TreeAppCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>a9d812aaf1611f704d556ff83d482bca1</anchor>
      <arglist>(cCommBuffer *b, TreeAppCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>afdf60bb2b31d418fd2d18d1f973cf5d7</anchor>
      <arglist>(cCommBuffer *b, TreeAppResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>a07f387346fe5ed3106e82d1eef093af4</anchor>
      <arglist>(cCommBuffer *b, TreeAppResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>ae42cb32f13f6304e3deff33eb5838c1e</anchor>
      <arglist>(cCommBuffer *b, GlobalViewBuilderCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>a9cadd9e1ab0691fb58561b4c55fbdba9</anchor>
      <arglist>(cCommBuffer *b, GlobalViewBuilderCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>aa73037c2de24cc729614e9bb49b37093</anchor>
      <arglist>(cCommBuffer *b, GlobalViewBuilderResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>a12253ee48e7402eba2a880a41beee37e</anchor>
      <arglist>(cCommBuffer *b, GlobalViewBuilderResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>a9b413a522e6c87566f8386faeb0abbe5</anchor>
      <arglist>(cCommBuffer *b, ChildReleaseCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>ac28fb390212e1f49fc3542a5b964c4cf</anchor>
      <arglist>(cCommBuffer *b, ChildReleaseCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>a5ac7c8b5e48b35f14624859bd316bede</anchor>
      <arglist>(cCommBuffer *b, ChildReleaseResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>a6f2d8a50ec522c1f37458179de68143f</anchor>
      <arglist>(cCommBuffer *b, ChildReleaseResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>a82edcd94345f58d0ff03593ade73b884</anchor>
      <arglist>(cCommBuffer *b, ChildCheckCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>aaab6d27d46f45f07acea245f24c97005</anchor>
      <arglist>(cCommBuffer *b, ChildCheckCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>ab8c39c1433623d3747ba64666d200f18</anchor>
      <arglist>(cCommBuffer *b, ChildCheckResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>aa9e8abd8c6a0ab65fd6e0d8057cbdb15</anchor>
      <arglist>(cCommBuffer *b, ChildCheckResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>a5dc2c500bbf13f0345c0d90f6e9e5bce</anchor>
      <arglist>(cCommBuffer *b, SendCoordinatesCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>a7b47468cda6ca1f9382954b6f9fc2514</anchor>
      <arglist>(cCommBuffer *b, SendCoordinatesCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>af9fc1c4fa28acc47404f1add00fd2ac8</anchor>
      <arglist>(cCommBuffer *b, SendAllStrategyCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>aa432bce0b33a3dac0a391b4ff2830e60</anchor>
      <arglist>(cCommBuffer *b, SendAllStrategyCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>a1a653dee97b87b0183ae8c0ee14c032b</anchor>
      <arglist>(cCommBuffer *b, RemoveRandomStrategyCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>a5cf0533c80b5a7f7a45d33ab70d26e23</anchor>
      <arglist>(cCommBuffer *b, RemoveRandomStrategyCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>a1b38d4a6a3b990db65fcb84e927a7c7b</anchor>
      <arglist>(cCommBuffer *b, TreeTestStrategyCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>a44c165f9152e7fcf52aa4055d9a128aa</anchor>
      <arglist>(cCommBuffer *b, TreeTestStrategyCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>a53a5e6cf7dc11c16cb7dc480dbefac2d</anchor>
      <arglist>(cCommBuffer *b, RegionsStrategyCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>a280275b2c68c0b8c9f4925c6b1036d36</anchor>
      <arglist>(cCommBuffer *b, RegionsStrategyCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>a3ad7fc8493a5b1c026eff80e8287397e</anchor>
      <arglist>(cCommBuffer *b, SimpleCoordStrategyCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>aab9fd7b504e2b75fdb59f77c5ae34a29</anchor>
      <arglist>(cCommBuffer *b, SimpleCoordStrategyCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>a04344558b1191aa57e2b5d7bcecd3a3a</anchor>
      <arglist>(cCommBuffer *b, AreaDataCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>aac092beeeeb6b97711826542425f920a</anchor>
      <arglist>(cCommBuffer *b, AreaDataCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>a674068a8d7e0aefcda4b2cdd550d4e62</anchor>
      <arglist>(cCommBuffer *b, CapReqCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>aa940f12cea0f6bf3f2394e92ba887da1</anchor>
      <arglist>(cCommBuffer *b, CapReqCall &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>abebf21339229858d6815306ab5243cdf</anchor>
      <arglist>(cCommBuffer *b, CapReqResponse &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>adcab079228e1d8e8f647542cddf0d215</anchor>
      <arglist>(cCommBuffer *b, CapReqResponse &amp;obj)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>NODECOUNT_L</name>
      <anchorfile>TreeManagementMessage__m_8h.html</anchorfile>
      <anchor>aa76488936f5d35b0416477b90deca16d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TriggerTable.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/i3/</path>
    <filename>TriggerTable_8cc</filename>
    <includes id="TriggerTable_8h" name="TriggerTable.h" local="yes" imported="no">TriggerTable.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>TriggerTable_8cc.html</anchorfile>
      <anchor>ada543cdb5e977bcf8626b6baa2f34a0f</anchor>
      <arglist>(TriggerTable)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TriggerTable.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/applications/i3/</path>
    <filename>TriggerTable_8h</filename>
    <includes id="I3_8h" name="I3.h" local="yes" imported="no">I3.h</includes>
    <class kind="struct">TriggerTable</class>
  </compound>
  <compound kind="file">
    <name>TunOutDevice.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/singlehostunderlay/</path>
    <filename>TunOutDevice_8cc</filename>
    <includes id="TunOutDevice_8h" name="TunOutDevice.h" local="yes" imported="no">TunOutDevice.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>TunOutDevice_8cc.html</anchorfile>
      <anchor>a907806d09eff1f4a62b6f0551c149d81</anchor>
      <arglist>(TunOutDevice)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TunOutDevice.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/singlehostunderlay/</path>
    <filename>TunOutDevice_8h</filename>
    <includes id="tunoutscheduler_8h" name="tunoutscheduler.h" local="yes" imported="no">tunoutscheduler.h</includes>
    <includes id="RealworldDevice_8h" name="RealworldDevice.h" local="yes" imported="no">RealworldDevice.h</includes>
    <class kind="class">TunOutDevice</class>
  </compound>
  <compound kind="file">
    <name>tunoutscheduler.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/singlehostunderlay/</path>
    <filename>tunoutscheduler_8cc</filename>
    <includes id="tunoutscheduler_8h" name="tunoutscheduler.h" local="yes" imported="no">tunoutscheduler.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>tunoutscheduler_8cc.html</anchorfile>
      <anchor>a14435a82e6baa4417ee169321a21659c</anchor>
      <arglist>(TunOutScheduler)</arglist>
    </member>
    <member kind="variable">
      <type>cConfigOption *</type>
      <name>CFGID_EXTERNALAPP_APP_PORT</name>
      <anchorfile>tunoutscheduler_8cc.html</anchorfile>
      <anchor>ab909f74fd837f0c0ddf41a7041a197b0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tunoutscheduler.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/singlehostunderlay/</path>
    <filename>tunoutscheduler_8h</filename>
    <includes id="realtimescheduler_8h" name="realtimescheduler.h" local="yes" imported="no">realtimescheduler.h</includes>
    <class kind="class">TunOutScheduler</class>
  </compound>
  <compound kind="file">
    <name>UdpOutDevice.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/singlehostunderlay/</path>
    <filename>UdpOutDevice_8cc</filename>
    <includes id="UdpOutDevice_8h" name="UdpOutDevice.h" local="yes" imported="no">UdpOutDevice.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>WANT_WINSOCK2</name>
      <anchorfile>UdpOutDevice_8cc.html</anchorfile>
      <anchor>a105264025fbdfc308077979bc21a5474</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>UdpOutDevice_8cc.html</anchorfile>
      <anchor>ae9917071dbb11d5f35b0c01b5120b144</anchor>
      <arglist>(UdpOutDevice)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UdpOutDevice.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/singlehostunderlay/</path>
    <filename>UdpOutDevice_8h</filename>
    <includes id="tunoutscheduler_8h" name="tunoutscheduler.h" local="yes" imported="no">tunoutscheduler.h</includes>
    <includes id="RealworldDevice_8h" name="RealworldDevice.h" local="yes" imported="no">RealworldDevice.h</includes>
    <class kind="class">UdpOutDevice</class>
  </compound>
  <compound kind="file">
    <name>udpoutscheduler.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/singlehostunderlay/</path>
    <filename>udpoutscheduler_8cc</filename>
    <includes id="udpoutscheduler_8h" name="udpoutscheduler.h" local="yes" imported="no">udpoutscheduler.h</includes>
    <member kind="function">
      <type></type>
      <name>Register_Class</name>
      <anchorfile>udpoutscheduler_8cc.html</anchorfile>
      <anchor>a026b35705995ea317a8b0adec901019f</anchor>
      <arglist>(UdpOutScheduler)</arglist>
    </member>
    <member kind="variable">
      <type>cConfigOption *</type>
      <name>CFGID_EXTERNALAPP_APP_PORT</name>
      <anchorfile>udpoutscheduler_8cc.html</anchorfile>
      <anchor>ab909f74fd837f0c0ddf41a7041a197b0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>udpoutscheduler.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/singlehostunderlay/</path>
    <filename>udpoutscheduler_8h</filename>
    <includes id="realtimescheduler_8h" name="realtimescheduler.h" local="yes" imported="no">realtimescheduler.h</includes>
    <class kind="class">UdpOutScheduler</class>
    <member kind="define">
      <type>#define</type>
      <name>WANT_WINSOCK2</name>
      <anchorfile>udpoutscheduler_8h.html</anchorfile>
      <anchor>a105264025fbdfc308077979bc21a5474</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UnderlayConfigurator.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>UnderlayConfigurator_8cc</filename>
    <includes id="GlobalNodeListAccess_8h" name="GlobalNodeListAccess.h" local="no" imported="no">GlobalNodeListAccess.h</includes>
    <includes id="ChurnGeneratorAccess_8h" name="ChurnGeneratorAccess.h" local="no" imported="no">ChurnGeneratorAccess.h</includes>
    <includes id="GlobalStatisticsAccess_8h" name="GlobalStatisticsAccess.h" local="no" imported="no">GlobalStatisticsAccess.h</includes>
    <includes id="UnderlayConfigurator_8h" name="UnderlayConfigurator.h" local="yes" imported="no">UnderlayConfigurator.h</includes>
  </compound>
  <compound kind="file">
    <name>UnderlayConfigurator.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>UnderlayConfigurator_8h</filename>
    <class kind="class">UnderlayConfigurator</class>
    <member kind="define">
      <type>#define</type>
      <name>timersub</name>
      <anchorfile>UnderlayConfigurator_8h.html</anchorfile>
      <anchor>a8b18f762e42417ce5d86090331d3e4eb</anchor>
      <arglist>(a, b, result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UnderlayConfiguratorAccess.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>UnderlayConfiguratorAccess_8h</filename>
    <includes id="UnderlayConfigurator_8h" name="UnderlayConfigurator.h" local="yes" imported="no">UnderlayConfigurator.h</includes>
    <class kind="class">UnderlayConfiguratorAccess</class>
  </compound>
  <compound kind="file">
    <name>Vast.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/vast/</path>
    <filename>Vast_8cc</filename>
    <includes id="Vast_8h" name="Vast.h" local="yes" imported="no">Vast.h</includes>
    <includes id="GlobalNodeList_8h" name="GlobalNodeList.h" local="no" imported="no">GlobalNodeList.h</includes>
    <includes id="GlobalStatistics_8h" name="GlobalStatistics.h" local="no" imported="no">GlobalStatistics.h</includes>
    <includes id="BootstrapList_8h" name="BootstrapList.h" local="no" imported="no">BootstrapList.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>Vast_8cc.html</anchorfile>
      <anchor>aae8ade8528eeaf9fdc1c021f71aa85b4</anchor>
      <arglist>(Vast)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Vast.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/vast/</path>
    <filename>Vast_8h</filename>
    <includes id="BaseOverlay_8h" name="BaseOverlay.h" local="no" imported="no">BaseOverlay.h</includes>
    <includes id="VastDefs_8h" name="VastDefs.h" local="no" imported="no">VastDefs.h</includes>
    <includes id="Vast__m_8h" name="Vast_m.h" local="no" imported="no">Vast_m.h</includes>
    <class kind="class">Vast</class>
  </compound>
  <compound kind="file">
    <name>Vast_m.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/vast/</path>
    <filename>Vast__m_8h</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="OverlayKey_8h" name="OverlayKey.h" local="no" imported="no">OverlayKey.h</includes>
    <includes id="Vector2D_8h" name="Vector2D.h" local="no" imported="no">Vector2D.h</includes>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <class kind="class">VastMessage</class>
    <class kind="class">VastListMessage</class>
    <class kind="class">VastMoveMessage</class>
    <class kind="class">VastDiscardMessage</class>
    <class kind="class">VastEventMessage</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>Vast__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VAST_L</name>
      <anchorfile>Vast__m_8h.html</anchorfile>
      <anchor>ab6942347876cb4befb4da670eb90871f</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VASTLIST_L</name>
      <anchorfile>Vast__m_8h.html</anchorfile>
      <anchor>afd61f02ed0c547b46d3376a4e4e7dc1c</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VASTMOVE_L</name>
      <anchorfile>Vast__m_8h.html</anchorfile>
      <anchor>a865e3b42837bb08abf934321cf8ea6a7</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VASTDISCARD_L</name>
      <anchorfile>Vast__m_8h.html</anchorfile>
      <anchor>afd16ed69aea89cb14af62cfcf3ebaf64</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="enumeration">
      <name>VASTCommand</name>
      <anchorfile>Vast__m_8h.html</anchorfile>
      <anchor>affe4c21be5de8586938eff67f154b607</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JOIN_REQUEST</name>
      <anchorfile>Vast__m_8h.html</anchorfile>
      <anchor>affe4c21be5de8586938eff67f154b607a71fec090ff88ece51771bbbf434064ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JOIN_ACKNOWLEDGE</name>
      <anchorfile>Vast__m_8h.html</anchorfile>
      <anchor>affe4c21be5de8586938eff67f154b607ad2045a15ed8b82d3db379cc54ba0b7d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NODE_MOVE</name>
      <anchorfile>Vast__m_8h.html</anchorfile>
      <anchor>affe4c21be5de8586938eff67f154b607ad9745223990da14f545a02e12e727b63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEW_NEIGHBORS</name>
      <anchorfile>Vast__m_8h.html</anchorfile>
      <anchor>affe4c21be5de8586938eff67f154b607a3aafac4a63883acb0402e9a5dcae8110</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NODE_LEAVE</name>
      <anchorfile>Vast__m_8h.html</anchorfile>
      <anchor>affe4c21be5de8586938eff67f154b607ac2f6b0a84b96ac134911c0d532a4a91c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENCLOSING_NEIGHBORS_REQUEST</name>
      <anchorfile>Vast__m_8h.html</anchorfile>
      <anchor>affe4c21be5de8586938eff67f154b607a328174aefc34e2aa1577e73ca6e0eb70</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BACKUP_NEIGHBORS</name>
      <anchorfile>Vast__m_8h.html</anchorfile>
      <anchor>affe4c21be5de8586938eff67f154b607a7157cf88037067097b25279589eec51c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PING</name>
      <anchorfile>Vast__m_8h.html</anchorfile>
      <anchor>affe4c21be5de8586938eff67f154b607a3a95ef902bc659901cceef98e0bc8041</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PONG</name>
      <anchorfile>Vast__m_8h.html</anchorfile>
      <anchor>affe4c21be5de8586938eff67f154b607ae911a27de4bca30604be3515f31b2057</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISCARD_NODE</name>
      <anchorfile>Vast__m_8h.html</anchorfile>
      <anchor>affe4c21be5de8586938eff67f154b607ad62d6ba53c9c3efbda433545708a79b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VAST_EVENT</name>
      <anchorfile>Vast__m_8h.html</anchorfile>
      <anchor>affe4c21be5de8586938eff67f154b607a0e3f3deef32a4742dc7a553c15c71f51</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>Vast__m_8h.html</anchorfile>
      <anchor>a44f06320a0a1be98de62f7612aea7306</anchor>
      <arglist>(cCommBuffer *b, VastMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>Vast__m_8h.html</anchorfile>
      <anchor>a0c7edd7039c9eab5f8916e56e854526a</anchor>
      <arglist>(cCommBuffer *b, VastMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>Vast__m_8h.html</anchorfile>
      <anchor>ae5aaab5810d587b2313ae8b041f3a35a</anchor>
      <arglist>(cCommBuffer *b, VastListMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>Vast__m_8h.html</anchorfile>
      <anchor>a243ff4ca6a60855721b9d16dd82cadf1</anchor>
      <arglist>(cCommBuffer *b, VastListMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>Vast__m_8h.html</anchorfile>
      <anchor>a6cdd8e9ae643354aeb25b0de434cd0a3</anchor>
      <arglist>(cCommBuffer *b, VastMoveMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>Vast__m_8h.html</anchorfile>
      <anchor>a38e10ec5a71c683bb6f938442e40b049</anchor>
      <arglist>(cCommBuffer *b, VastMoveMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>Vast__m_8h.html</anchorfile>
      <anchor>af4e29e97aea7b363f06977856ee0656a</anchor>
      <arglist>(cCommBuffer *b, VastDiscardMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>Vast__m_8h.html</anchorfile>
      <anchor>a0a641630b9d8771763387f31eb4cd288</anchor>
      <arglist>(cCommBuffer *b, VastDiscardMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>Vast__m_8h.html</anchorfile>
      <anchor>aa2eccba591b8d25b4b87689d36c6bf8f</anchor>
      <arglist>(cCommBuffer *b, VastEventMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>Vast__m_8h.html</anchorfile>
      <anchor>a16dd353f036c90383591eaf4aea521de</anchor>
      <arglist>(cCommBuffer *b, VastEventMessage &amp;obj)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>VASTCOMMAND_L</name>
      <anchorfile>Vast__m_8h.html</anchorfile>
      <anchor>a4ba5fe9d26d142c9fc64e6a2c1fc70c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>POSITION_L</name>
      <anchorfile>Vast__m_8h.html</anchorfile>
      <anchor>a01b233e5609ae3fe31802d8a479453be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>ENTRYCOUNT_L</name>
      <anchorfile>Vast__m_8h.html</anchorfile>
      <anchor>a9ecd11ef44907aba1079a0ea6f689874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>COUNT_L</name>
      <anchorfile>Vast__m_8h.html</anchorfile>
      <anchor>ac0e88b4f38efc95de19684387ca6ca7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>FLAG_L</name>
      <anchorfile>Vast__m_8h.html</anchorfile>
      <anchor>a6b803a6d64ff53743dafe12de4202fc1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VastDefs.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/vast/</path>
    <filename>VastDefs_8cc</filename>
    <includes id="VastDefs_8h" name="VastDefs.h" local="yes" imported="no">VastDefs.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>VastDefs_8cc.html</anchorfile>
      <anchor>a570266e98dc206baab659a39e5b85a2f</anchor>
      <arglist>(std::ostream &amp;Stream, const Site s)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VastDefs.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/overlay/vast/</path>
    <filename>VastDefs_8h</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <includes id="Vector2D_8h" name="Vector2D.h" local="no" imported="no">Vector2D.h</includes>
    <class kind="class">Site</class>
    <class kind="class">Edge</class>
    <class kind="class">Halfedge</class>
    <class kind="class">HeapPQ</class>
    <class kind="class">Geometry</class>
    <class kind="class">EdgeList</class>
    <member kind="define">
      <type>#define</type>
      <name>UNDEF</name>
      <anchorfile>VastDefs_8h.html</anchorfile>
      <anchor>abde25a67f4046530ae1c572cefeb5869</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>THIS</name>
      <anchorfile>VastDefs_8h.html</anchorfile>
      <anchor>ac048bf3907733b6148c78e7345a30525</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENCLOSING</name>
      <anchorfile>VastDefs_8h.html</anchorfile>
      <anchor>a2aedfe59324ff558559ff9932c649443</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NEIGHBOR</name>
      <anchorfile>VastDefs_8h.html</anchorfile>
      <anchor>ac37458b05fa7ffc23c7d126c12990a7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BOUNDARY</name>
      <anchorfile>VastDefs_8h.html</anchorfile>
      <anchor>a985bae7b67bcb96c5565a24a5f6d4cba</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NEW</name>
      <anchorfile>VastDefs_8h.html</anchorfile>
      <anchor>ab6bca16ed021b1e211fde8669758f199</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>le</name>
      <anchorfile>VastDefs_8h.html</anchorfile>
      <anchor>a3548ca9d636286bea86afc96a7a947d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>re</name>
      <anchorfile>VastDefs_8h.html</anchorfile>
      <anchor>a51f63d24f02be00251e895721eae51b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DELETED</name>
      <anchorfile>VastDefs_8h.html</anchorfile>
      <anchor>ab792dfd97ab00abb6a5fc20191a9e952</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; Vector2D &gt;</type>
      <name>PositionSet</name>
      <anchorfile>VastDefs_8h.html</anchorfile>
      <anchor>aba713d0046c49fb23c12ac880a9eb8e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; NodeHandle &gt;</type>
      <name>EnclosingSet</name>
      <anchorfile>VastDefs_8h.html</anchorfile>
      <anchor>af7e187da8eee1d61845d295980b88848</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; NodeHandle &gt;</type>
      <name>StockList</name>
      <anchorfile>VastDefs_8h.html</anchorfile>
      <anchor>aad88cf774ac0f22b8d7d61dc28589662</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; NodeHandle, Site * &gt;</type>
      <name>SiteMap</name>
      <anchorfile>VastDefs_8h.html</anchorfile>
      <anchor>ad41236870dd150736adba869c442c2c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Vector2D.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>Vector2D_8cc</filename>
    <includes id="Vector2D_8h" name="Vector2D.h" local="no" imported="no">Vector2D.h</includes>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>Vector2D_8cc.html</anchorfile>
      <anchor>a6a34eeff8daedb4141f46609905271cf</anchor>
      <arglist>(const Vector2D &amp;a, const Vector2D &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>Vector2D_8cc.html</anchorfile>
      <anchor>a141227592beb1c3714fdf1f357f221a6</anchor>
      <arglist>(std::ostream &amp;Stream, const Vector2D &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Vector2D.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>Vector2D_8h</filename>
    <class kind="class">Vector2D</class>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>Vector2D_8h.html</anchorfile>
      <anchor>a95a2af2275d16c38e8a55c8455d8ab50</anchor>
      <arglist>(cCommBuffer *b, Vector2D &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>Vector2D_8h.html</anchorfile>
      <anchor>add84eace4a82ee2e216fd1a5e59daa1b</anchor>
      <arglist>(cCommBuffer *b, Vector2D &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Vivaldi.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>Vivaldi_8cc</filename>
    <includes id="NeighborCache_8h" name="NeighborCache.h" local="no" imported="no">NeighborCache.h</includes>
    <includes id="Vivaldi_8h" name="Vivaldi.h" local="yes" imported="no">Vivaldi.h</includes>
  </compound>
  <compound kind="file">
    <name>Vivaldi.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/</path>
    <filename>Vivaldi_8h</filename>
    <includes id="GlobalStatisticsAccess_8h" name="GlobalStatisticsAccess.h" local="no" imported="no">GlobalStatisticsAccess.h</includes>
    <includes id="NeighborCache_8h" name="NeighborCache.h" local="no" imported="no">NeighborCache.h</includes>
    <includes id="CoordinateSystem_8h" name="CoordinateSystem.h" local="no" imported="no">CoordinateSystem.h</includes>
    <class kind="class">Vivaldi</class>
  </compound>
  <compound kind="file">
    <name>XmlRpc.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier3/xmlrpcinterface/xmlrpc++/</path>
    <filename>XmlRpc_8h</filename>
    <includes id="XmlRpcClient_8h" name="XmlRpcClient.h" local="yes" imported="no">XmlRpcClient.h</includes>
    <includes id="XmlRpcException_8h" name="XmlRpcException.h" local="yes" imported="no">XmlRpcException.h</includes>
    <includes id="XmlRpcServer_8h" name="XmlRpcServer.h" local="yes" imported="no">XmlRpcServer.h</includes>
    <includes id="XmlRpcServerMethod_8h" name="XmlRpcServerMethod.h" local="yes" imported="no">XmlRpcServerMethod.h</includes>
    <includes id="XmlRpcValue_8h" name="XmlRpcValue.h" local="yes" imported="no">XmlRpcValue.h</includes>
    <includes id="XmlRpcUtil_8h" name="XmlRpcUtil.h" local="yes" imported="no">XmlRpcUtil.h</includes>
    <class kind="class">XmlRpc::XmlRpcErrorHandler</class>
    <class kind="class">XmlRpc::XmlRpcLogHandler</class>
    <namespace>XmlRpc</namespace>
    <member kind="function">
      <type>int</type>
      <name>getVerbosity</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>a0fa39c1bb4d9d258eb71ddd775d67a82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVerbosity</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>adbb0a79191037f0d3173d2dfa9cc820c</anchor>
      <arglist>(int level)</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>XMLRPC_VERSION</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>a6e869daf0be5c7c473298467413f960d</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>XmlRpcClient.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier3/xmlrpcinterface/xmlrpc++/</path>
    <filename>XmlRpcClient_8cc</filename>
    <includes id="XmlRpcClient_8h" name="XmlRpcClient.h" local="yes" imported="no">XmlRpcClient.h</includes>
    <includes id="XmlRpcSocket_8h" name="XmlRpcSocket.h" local="yes" imported="no">XmlRpcSocket.h</includes>
    <includes id="XmlRpc_8h" name="XmlRpc.h" local="yes" imported="no">XmlRpc.h</includes>
    <includes id="base64_8h" name="base64.h" local="yes" imported="no">base64.h</includes>
    <class kind="struct">ClearFlagOnExit</class>
  </compound>
  <compound kind="file">
    <name>XmlRpcClient.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier3/xmlrpcinterface/xmlrpc++/</path>
    <filename>XmlRpcClient_8h</filename>
    <includes id="XmlRpcDispatch_8h" name="XmlRpcDispatch.h" local="yes" imported="no">XmlRpcDispatch.h</includes>
    <includes id="XmlRpcSource_8h" name="XmlRpcSource.h" local="yes" imported="no">XmlRpcSource.h</includes>
    <class kind="class">XmlRpc::XmlRpcClient</class>
    <namespace>XmlRpc</namespace>
  </compound>
  <compound kind="file">
    <name>XmlRpcDispatch.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier3/xmlrpcinterface/xmlrpc++/</path>
    <filename>XmlRpcDispatch_8cc</filename>
    <includes id="XmlRpcDispatch_8h" name="XmlRpcDispatch.h" local="yes" imported="no">XmlRpcDispatch.h</includes>
    <includes id="XmlRpcSource_8h" name="XmlRpcSource.h" local="yes" imported="no">XmlRpcSource.h</includes>
    <includes id="XmlRpcUtil_8h" name="XmlRpcUtil.h" local="yes" imported="no">XmlRpcUtil.h</includes>
  </compound>
  <compound kind="file">
    <name>XmlRpcDispatch.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier3/xmlrpcinterface/xmlrpc++/</path>
    <filename>XmlRpcDispatch_8h</filename>
    <class kind="class">XmlRpc::XmlRpcDispatch</class>
    <class kind="struct">XmlRpc::XmlRpcDispatch::MonitoredSource</class>
    <namespace>XmlRpc</namespace>
  </compound>
  <compound kind="file">
    <name>XmlRpcException.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier3/xmlrpcinterface/xmlrpc++/</path>
    <filename>XmlRpcException_8h</filename>
    <class kind="class">XmlRpc::XmlRpcException</class>
    <namespace>XmlRpc</namespace>
  </compound>
  <compound kind="file">
    <name>XmlRpcInterface.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier3/xmlrpcinterface/</path>
    <filename>XmlRpcInterface_8cc</filename>
    <includes id="NodeVector_8h" name="NodeVector.h" local="no" imported="no">NodeVector.h</includes>
    <includes id="P2pns_8h" name="P2pns.h" local="no" imported="no">P2pns.h</includes>
    <includes id="XmlRpcInterface_8h" name="XmlRpcInterface.h" local="yes" imported="no">XmlRpcInterface.h</includes>
    <class kind="class">P2pnsRegister</class>
    <class kind="class">P2pnsResolve</class>
    <class kind="class">LocalLookup</class>
    <class kind="class">Lookup</class>
    <class kind="class">Put</class>
    <class kind="class">Get</class>
    <class kind="class">DumpDht</class>
    <class kind="class">JoinOverlay</class>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>XmlRpcInterface_8cc.html</anchorfile>
      <anchor>ad0a93e4d6097944261f29e281a9f9573</anchor>
      <arglist>(XmlRpcInterface)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>XmlRpcInterface.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier3/xmlrpcinterface/</path>
    <filename>XmlRpcInterface_8h</filename>
    <includes id="tunoutscheduler_8h" name="tunoutscheduler.h" local="no" imported="no">tunoutscheduler.h</includes>
    <includes id="realtimescheduler_8h" name="realtimescheduler.h" local="no" imported="no">realtimescheduler.h</includes>
    <includes id="CommonMessages__m_8h" name="CommonMessages_m.h" local="no" imported="no">CommonMessages_m.h</includes>
    <includes id="DHTMessage__m_8h" name="DHTMessage_m.h" local="no" imported="no">DHTMessage_m.h</includes>
    <includes id="BaseOverlay_8h" name="BaseOverlay.h" local="no" imported="no">BaseOverlay.h</includes>
    <includes id="BaseApp_8h" name="BaseApp.h" local="no" imported="no">BaseApp.h</includes>
    <includes id="XmlRpc_8h" name="XmlRpc.h" local="no" imported="no">XmlRpc.h</includes>
    <class kind="class">XmlRpcInterface</class>
    <class kind="struct">XmlRpcInterface::XmlRpcConnectionState</class>
    <member kind="variable">
      <type>const int</type>
      <name>XMLRPC_TIMEOUT</name>
      <anchorfile>XmlRpcInterface_8h.html</anchorfile>
      <anchor>abacf0e8f4b926d08dce3e7974816650c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>XmlRpcMutex.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier3/xmlrpcinterface/xmlrpc++/</path>
    <filename>XmlRpcMutex_8cc</filename>
  </compound>
  <compound kind="file">
    <name>XmlRpcMutex.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier3/xmlrpcinterface/xmlrpc++/</path>
    <filename>XmlRpcMutex_8h</filename>
    <class kind="class">XmlRpc::XmlRpcMutex</class>
    <class kind="struct">XmlRpc::XmlRpcMutex::AutoLock</class>
    <namespace>XmlRpc</namespace>
  </compound>
  <compound kind="file">
    <name>XmlRpcServer.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier3/xmlrpcinterface/xmlrpc++/</path>
    <filename>XmlRpcServer_8cc</filename>
    <includes id="XmlRpcServer_8h" name="XmlRpcServer.h" local="yes" imported="no">XmlRpcServer.h</includes>
    <includes id="XmlRpcServerConnection_8h" name="XmlRpcServerConnection.h" local="yes" imported="no">XmlRpcServerConnection.h</includes>
    <includes id="XmlRpcServerMethod_8h" name="XmlRpcServerMethod.h" local="yes" imported="no">XmlRpcServerMethod.h</includes>
    <includes id="XmlRpcSocket_8h" name="XmlRpcSocket.h" local="yes" imported="no">XmlRpcSocket.h</includes>
    <includes id="XmlRpcUtil_8h" name="XmlRpcUtil.h" local="yes" imported="no">XmlRpcUtil.h</includes>
    <includes id="XmlRpcException_8h" name="XmlRpcException.h" local="yes" imported="no">XmlRpcException.h</includes>
    <includes id="XmlRpc_8h" name="XmlRpc.h" local="yes" imported="no">XmlRpc.h</includes>
    <class kind="class">ListMethods</class>
    <class kind="class">MethodHelp</class>
    <member kind="function" static="yes">
      <type>static const std::string</type>
      <name>LIST_METHODS</name>
      <anchorfile>XmlRpcServer_8cc.html</anchorfile>
      <anchor>a456b0f8e376882650810dab71054f1c1</anchor>
      <arglist>(&quot;system.listMethods&quot;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string</type>
      <name>METHOD_HELP</name>
      <anchorfile>XmlRpcServer_8cc.html</anchorfile>
      <anchor>a0decc83a880176d4179ed88636082a1a</anchor>
      <arglist>(&quot;system.methodHelp&quot;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string</type>
      <name>MULTICALL</name>
      <anchorfile>XmlRpcServer_8cc.html</anchorfile>
      <anchor>a9b11830d266ccec140d096e63ad8be2f</anchor>
      <arglist>(&quot;system.multicall&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>XmlRpcServer.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier3/xmlrpcinterface/xmlrpc++/</path>
    <filename>XmlRpcServer_8h</filename>
    <includes id="XmlRpcDispatch_8h" name="XmlRpcDispatch.h" local="yes" imported="no">XmlRpcDispatch.h</includes>
    <includes id="XmlRpcSource_8h" name="XmlRpcSource.h" local="yes" imported="no">XmlRpcSource.h</includes>
    <class kind="class">XmlRpc::XmlRpcServer</class>
    <namespace>XmlRpc</namespace>
  </compound>
  <compound kind="file">
    <name>XmlRpcServerConnection.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier3/xmlrpcinterface/xmlrpc++/</path>
    <filename>XmlRpcServerConnection_8cc</filename>
    <includes id="XmlRpcServerConnection_8h" name="XmlRpcServerConnection.h" local="yes" imported="no">XmlRpcServerConnection.h</includes>
    <includes id="XmlRpcSocket_8h" name="XmlRpcSocket.h" local="yes" imported="no">XmlRpcSocket.h</includes>
    <includes id="XmlRpcDispatch_8h" name="XmlRpcDispatch.h" local="yes" imported="no">XmlRpcDispatch.h</includes>
    <includes id="XmlRpcServer_8h" name="XmlRpcServer.h" local="yes" imported="no">XmlRpcServer.h</includes>
    <includes id="XmlRpcUtil_8h" name="XmlRpcUtil.h" local="yes" imported="no">XmlRpcUtil.h</includes>
  </compound>
  <compound kind="file">
    <name>XmlRpcServerConnection.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier3/xmlrpcinterface/xmlrpc++/</path>
    <filename>XmlRpcServerConnection_8h</filename>
    <includes id="XmlRpcValue_8h" name="XmlRpcValue.h" local="yes" imported="no">XmlRpcValue.h</includes>
    <includes id="XmlRpcSource_8h" name="XmlRpcSource.h" local="yes" imported="no">XmlRpcSource.h</includes>
    <class kind="class">XmlRpc::XmlRpcServerConnection</class>
    <namespace>XmlRpc</namespace>
  </compound>
  <compound kind="file">
    <name>XmlRpcServerMethod.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier3/xmlrpcinterface/xmlrpc++/</path>
    <filename>XmlRpcServerMethod_8cc</filename>
    <includes id="XmlRpcServerMethod_8h" name="XmlRpcServerMethod.h" local="yes" imported="no">XmlRpcServerMethod.h</includes>
    <includes id="XmlRpcServer_8h" name="XmlRpcServer.h" local="yes" imported="no">XmlRpcServer.h</includes>
    <namespace>XmlRpc</namespace>
  </compound>
  <compound kind="file">
    <name>XmlRpcServerMethod.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier3/xmlrpcinterface/xmlrpc++/</path>
    <filename>XmlRpcServerMethod_8h</filename>
    <class kind="class">XmlRpc::XmlRpcServerMethod</class>
    <namespace>XmlRpc</namespace>
  </compound>
  <compound kind="file">
    <name>XmlRpcSocket.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier3/xmlrpcinterface/xmlrpc++/</path>
    <filename>XmlRpcSocket_8cc</filename>
    <includes id="XmlRpcSocket_8h" name="XmlRpcSocket.h" local="yes" imported="no">XmlRpcSocket.h</includes>
    <includes id="XmlRpcUtil_8h" name="XmlRpcUtil.h" local="yes" imported="no">XmlRpcUtil.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>initWinSock</name>
      <anchorfile>XmlRpcSocket_8cc.html</anchorfile>
      <anchor>ae011cdcec15e81d8d2e14cd386debf32</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>XmlRpcSocket.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier3/xmlrpcinterface/xmlrpc++/</path>
    <filename>XmlRpcSocket_8h</filename>
    <class kind="class">XmlRpc::XmlRpcSocket</class>
    <namespace>XmlRpc</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SSL</name>
      <anchorfile>XmlRpcSocket_8h.html</anchorfile>
      <anchor>adc3d9d4ae62abe565893e214a6e6401e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SSL_read</name>
      <anchorfile>XmlRpcSocket_8h.html</anchorfile>
      <anchor>aae68723650f0ed53b36894d426afdbc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SSL_write</name>
      <anchorfile>XmlRpcSocket_8h.html</anchorfile>
      <anchor>a7ca4a51d411e5c43e3b6e57b8ea19f2c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>XmlRpcSource.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier3/xmlrpcinterface/xmlrpc++/</path>
    <filename>XmlRpcSource_8cc</filename>
    <includes id="XmlRpcSource_8h" name="XmlRpcSource.h" local="yes" imported="no">XmlRpcSource.h</includes>
    <includes id="XmlRpcSocket_8h" name="XmlRpcSocket.h" local="yes" imported="no">XmlRpcSocket.h</includes>
    <includes id="XmlRpcUtil_8h" name="XmlRpcUtil.h" local="yes" imported="no">XmlRpcUtil.h</includes>
    <namespace>XmlRpc</namespace>
  </compound>
  <compound kind="file">
    <name>XmlRpcSource.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier3/xmlrpcinterface/xmlrpc++/</path>
    <filename>XmlRpcSource_8h</filename>
    <class kind="class">XmlRpc::XmlRpcSource</class>
    <namespace>XmlRpc</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SSL</name>
      <anchorfile>XmlRpcSource_8h.html</anchorfile>
      <anchor>adc3d9d4ae62abe565893e214a6e6401e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SSL_CTX</name>
      <anchorfile>XmlRpcSource_8h.html</anchorfile>
      <anchor>a46f74ff785aac4f5b4ddc9c13ac9e66c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SSL_METHOD</name>
      <anchorfile>XmlRpcSource_8h.html</anchorfile>
      <anchor>adb1ca8cc1eff03a4c4f0d2209b2a7447</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SSL_shutdown</name>
      <anchorfile>XmlRpcSource_8h.html</anchorfile>
      <anchor>a15e99abfd6e6241f1424fd71331a12ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SSL_free</name>
      <anchorfile>XmlRpcSource_8h.html</anchorfile>
      <anchor>a706c82bfae7ce618d3f0e39a0d72a988</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SSL_connect</name>
      <anchorfile>XmlRpcSource_8h.html</anchorfile>
      <anchor>aff3b619d1881322570e9689338c26baa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SSL_set_fd</name>
      <anchorfile>XmlRpcSource_8h.html</anchorfile>
      <anchor>a9623d65824dcc16b639b1d5cf0bf8107</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SSL_new</name>
      <anchorfile>XmlRpcSource_8h.html</anchorfile>
      <anchor>a02e6c397c6763f0c0be42921bdb1a3c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SSL_load_error_strings</name>
      <anchorfile>XmlRpcSource_8h.html</anchorfile>
      <anchor>a18498436deaef8bd0ca75406c504ea54</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SSL_CTX_free</name>
      <anchorfile>XmlRpcSource_8h.html</anchorfile>
      <anchor>a94cf6f18d4f14d23153cdeb90fa5923d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SSL_CTX_new</name>
      <anchorfile>XmlRpcSource_8h.html</anchorfile>
      <anchor>a6d72286382ff2d3d13954e512d23165f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SSLeay_add_ssl_algorithms</name>
      <anchorfile>XmlRpcSource_8h.html</anchorfile>
      <anchor>aeca1020260375937cc499f09efac4e37</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SSLv23_client_method</name>
      <anchorfile>XmlRpcSource_8h.html</anchorfile>
      <anchor>a4d0579ef3ac599f56ba3fa39076a8928</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>XmlRpcThread.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier3/xmlrpcinterface/xmlrpc++/</path>
    <filename>XmlRpcThread_8cc</filename>
  </compound>
  <compound kind="file">
    <name>XmlRpcThread.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier3/xmlrpcinterface/xmlrpc++/</path>
    <filename>XmlRpcThread_8h</filename>
    <class kind="class">XmlRpc::XmlRpcRunnable</class>
    <class kind="class">XmlRpc::XmlRpcThread</class>
    <namespace>XmlRpc</namespace>
  </compound>
  <compound kind="file">
    <name>XmlRpcThreadedServer.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier3/xmlrpcinterface/xmlrpc++/</path>
    <filename>XmlRpcThreadedServer_8cc</filename>
  </compound>
  <compound kind="file">
    <name>XmlRpcThreadedServer.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier3/xmlrpcinterface/xmlrpc++/</path>
    <filename>XmlRpcThreadedServer_8h</filename>
    <includes id="XmlRpcMutex_8h" name="XmlRpcMutex.h" local="yes" imported="no">XmlRpcMutex.h</includes>
    <includes id="XmlRpcServer_8h" name="XmlRpcServer.h" local="yes" imported="no">XmlRpcServer.h</includes>
    <includes id="XmlRpcThread_8h" name="XmlRpcThread.h" local="yes" imported="no">XmlRpcThread.h</includes>
    <class kind="class">XmlRpc::XmlRpcThreadedServer</class>
    <class kind="class">XmlRpc::XmlRpcThreadedServer::Worker</class>
    <namespace>XmlRpc</namespace>
  </compound>
  <compound kind="file">
    <name>XmlRpcUtil.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier3/xmlrpcinterface/xmlrpc++/</path>
    <filename>XmlRpcUtil_8cc</filename>
    <includes id="XmlRpcUtil_8h" name="XmlRpcUtil.h" local="yes" imported="no">XmlRpcUtil.h</includes>
    <includes id="XmlRpc_8h" name="XmlRpc.h" local="yes" imported="no">XmlRpc.h</includes>
    <class kind="class">DefaultLogHandler</class>
    <class kind="class">DefaultErrorHandler</class>
    <member kind="variable" static="yes">
      <type>DefaultLogHandler</type>
      <name>defaultLogHandler</name>
      <anchorfile>XmlRpcUtil_8cc.html</anchorfile>
      <anchor>acf4753f6a2be0992498b2ab46aa43cb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>DefaultErrorHandler</type>
      <name>defaultErrorHandler</name>
      <anchorfile>XmlRpcUtil_8cc.html</anchorfile>
      <anchor>a22a120cb41fcd1751ab7e39e668d944a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>AMP</name>
      <anchorfile>XmlRpcUtil_8cc.html</anchorfile>
      <anchor>ae03be254a8892027361c7f5830bd138c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>rawEntity</name>
      <anchorfile>XmlRpcUtil_8cc.html</anchorfile>
      <anchor>add8dd07abb5251c20cd768094902036c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>xmlEntity</name>
      <anchorfile>XmlRpcUtil_8cc.html</anchorfile>
      <anchor>ab02a0e5ab7789531bff6c27d729b7976</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>xmlEntLen</name>
      <anchorfile>XmlRpcUtil_8cc.html</anchorfile>
      <anchor>a86251f3c24454954769d55460005edcb</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>XmlRpcUtil.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier3/xmlrpcinterface/xmlrpc++/</path>
    <filename>XmlRpcUtil_8h</filename>
    <class kind="class">XmlRpc::XmlRpcUtil</class>
    <namespace>XmlRpc</namespace>
  </compound>
  <compound kind="file">
    <name>XmlRpcValue.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier3/xmlrpcinterface/xmlrpc++/</path>
    <filename>XmlRpcValue_8cc</filename>
    <includes id="XmlRpcValue_8h" name="XmlRpcValue.h" local="yes" imported="no">XmlRpcValue.h</includes>
    <includes id="XmlRpcException_8h" name="XmlRpcException.h" local="yes" imported="no">XmlRpcException.h</includes>
    <includes id="XmlRpcUtil_8h" name="XmlRpcUtil.h" local="yes" imported="no">XmlRpcUtil.h</includes>
    <includes id="base64_8h" name="base64.h" local="yes" imported="no">base64.h</includes>
    <namespace>XmlRpc</namespace>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>tmEq</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>ad8f8ff6586074409afba65257b0fd8c4</anchor>
      <arglist>(struct tm const &amp;t1, struct tm const &amp;t2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>XmlRpcValue_8cc.html</anchorfile>
      <anchor>a14f1945ad5c67cb3cd696ff712752829</anchor>
      <arglist>(std::ostream &amp;os, XmlRpc::XmlRpcValue &amp;v)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>VALUE_TAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>af1b01d1d5787d9ac80b9b21042253189</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>VALUE_ETAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>a63f350b2af42a65501a491897ceacc70</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>BOOLEAN_TAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>a0f6167a2bd28e58de90b43bac4a26bab</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>BOOLEAN_ETAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>a68cf1f3bef8845f42c852286421c1c7b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>DOUBLE_TAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>a3abdd40d69d2c07b3e0d7fcfe9595a04</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>DOUBLE_ETAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>ab264ddf4ec040711b3b5c406412397d4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>INT_TAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>a83e9ee700fe4257106b1339af3034309</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>I4_TAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>aa695362e146693bdd3fcec1bebd7c1e0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>I4_ETAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>a8a5acaae7dbcd1596879889df379408d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>STRING_TAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>a0efa0718086fcc7ffe8799160b8de32a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>DATETIME_TAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>a7db6c5d65646688a5267891eba8a6bee</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>DATETIME_ETAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>aa94610af16b91b0efb6d289c6390e3ec</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>BASE64_TAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>a12774d1d643bb80f6f8072510a35a225</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>BASE64_ETAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>aa85ff1cc9643f6ae5edbf4e5ec23cfc8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>ARRAY_TAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>aca9e3617e3e18aa3b90317ac5edf4863</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>DATA_TAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>a93e5d734fb19c8e8efe38a8471221c6f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>DATA_ETAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>ab1d351f57700f255f19c0ab6ef5b8e87</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>ARRAY_ETAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>a2adde1303b2d7c71e37cc1a092e2c1e9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>STRUCT_TAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>a3df03d8213dd5245740f600eb67875dc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>MEMBER_TAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>aae3ac07b339f1dd2aae1321f59ca05a4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>NAME_TAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>a2dc41b5182cff0a717cdbedd5207b1bd</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>NAME_ETAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>a28347db9c048f216596b1993203823f9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>MEMBER_ETAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>a13ab4e9cd24abd23e2541780cb3914ea</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>STRUCT_ETAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>adbc2768217f424a19cbb02d3e1c937e9</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>XmlRpcValue.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/tier3/xmlrpcinterface/xmlrpc++/</path>
    <filename>XmlRpcValue_8h</filename>
    <class kind="class">XmlRpc::XmlRpcValue</class>
    <namespace>XmlRpc</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>XmlRpcValue_8h.html</anchorfile>
      <anchor>a14f1945ad5c67cb3cd696ff712752829</anchor>
      <arglist>(std::ostream &amp;os, XmlRpc::XmlRpcValue &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>yang.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/</path>
    <filename>yang_8cc</filename>
    <includes id="yang_8h" name="yang.h" local="yes" imported="no">yang.h</includes>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>yang_8cc.html</anchorfile>
      <anchor>adb989392f8aada21b0f7ec2f7a41dc00</anchor>
      <arglist>(const char *v)</arglist>
    </member>
    <member kind="function">
      <type>Vtr</type>
      <name>operator+</name>
      <anchorfile>yang_8cc.html</anchorfile>
      <anchor>aaa496c40d6ee96c1fc7ee1313ba3078c</anchor>
      <arglist>(const Vtr &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vtr</type>
      <name>operator-</name>
      <anchorfile>yang_8cc.html</anchorfile>
      <anchor>a49936d5a24b6baf16c58176dc2546c37</anchor>
      <arglist>(const Vtr &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vtr</type>
      <name>operator+</name>
      <anchorfile>yang_8cc.html</anchorfile>
      <anchor>a651d261bab7f79d1269677e39295042b</anchor>
      <arglist>(const Vtr &amp;v1, const Vtr &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>Vtr</type>
      <name>operator-</name>
      <anchorfile>yang_8cc.html</anchorfile>
      <anchor>aa933d3657687bcd9de0d66aa0b8d3b58</anchor>
      <arglist>(const Vtr &amp;v1, const Vtr &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>yang_8cc.html</anchorfile>
      <anchor>aa359fee5bee369b46974483778f5ec10</anchor>
      <arglist>(std::ostream &amp;s, const Vtr &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vtr</type>
      <name>operator*</name>
      <anchorfile>yang_8cc.html</anchorfile>
      <anchor>abf68cef93dd1444c721a5daf83667c1b</anchor>
      <arglist>(const double scalar, const Vtr &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vtr</type>
      <name>operator*</name>
      <anchorfile>yang_8cc.html</anchorfile>
      <anchor>aabb1e2f71813195486194e4db89b45dd</anchor>
      <arglist>(const Vtr &amp;v1, const Vtr &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>Vtr</type>
      <name>operator/</name>
      <anchorfile>yang_8cc.html</anchorfile>
      <anchor>a01c70b7a5bb9cb7f46baaab86569ccff</anchor>
      <arglist>(const Vtr &amp;v, const double scalar)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>yang_8cc.html</anchorfile>
      <anchor>a1ece576b38a91f507d3130d721ad1666</anchor>
      <arglist>(const Vtr &amp;v1, const Vtr &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>Mtx</type>
      <name>operator-</name>
      <anchorfile>yang_8cc.html</anchorfile>
      <anchor>a5fb40a9b847a8aa7c4a346509f27dc79</anchor>
      <arglist>(const Mtx &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>Vtr</type>
      <name>operator*</name>
      <anchorfile>yang_8cc.html</anchorfile>
      <anchor>a4352e4a940fce656be7571c64cd4f65a</anchor>
      <arglist>(const Vtr &amp;v, const Mtx &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>Mtx</type>
      <name>operator-</name>
      <anchorfile>yang_8cc.html</anchorfile>
      <anchor>add135ccdbd9042aeb6e35c68c36e904b</anchor>
      <arglist>(const Mtx &amp;m1, const Mtx &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>yang_8cc.html</anchorfile>
      <anchor>afc6dc7a1a6761884655ee41484e39ce5</anchor>
      <arglist>(std::ostream &amp;s, const Mtx &amp;mat)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>yang.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/common/cbr/</path>
    <filename>yang_8h</filename>
    <class kind="class">Vtr</class>
    <class kind="class">Mtx</class>
    <member kind="typedef">
      <type>Vtr</type>
      <name>Vec_DP</name>
      <anchorfile>yang_8h.html</anchorfile>
      <anchor>a24c53b6b966b810660877f074db27853</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mtx</type>
      <name>Mat_DP</name>
      <anchorfile>yang_8h.html</anchorfile>
      <anchor>a3faa0391d304eaedd33c53f6813efea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Vtr</type>
      <name>operator*</name>
      <anchorfile>yang_8h.html</anchorfile>
      <anchor>a45f9e9ab956e614c131c9167da00ee7d</anchor>
      <arglist>(const Vtr &amp;v, const double scalar)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ZeroconfConnector.cc</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/singlehostunderlay/</path>
    <filename>ZeroconfConnector_8cc</filename>
    <includes id="ZeroconfConnector_8h" name="ZeroconfConnector.h" local="yes" imported="no">ZeroconfConnector.h</includes>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>ZeroconfConnector_8cc.html</anchorfile>
      <anchor>a6d29a68950c8002c26fe4fb74fd9053a</anchor>
      <arglist>(ZeroconfConnector)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ZeroconfConnector.h</name>
    <path>E:/omnetpp-4.3/git/HTopology/OverSim/src/underlay/singlehostunderlay/</path>
    <filename>ZeroconfConnector_8h</filename>
    <includes id="NodeHandle_8h" name="NodeHandle.h" local="no" imported="no">NodeHandle.h</includes>
    <class kind="class">ZeroconfConnector</class>
  </compound>
  <compound kind="page">
    <name>GPL</name>
    <title></title>
    <filename>GPL</filename>
  </compound>
  <compound kind="class">
    <name>AbstractLookup</name>
    <filename>classAbstractLookup.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractLookup</name>
      <anchorfile>classAbstractLookup.html</anchorfile>
      <anchor>a9ee9fe8a73b6e41dfd2f3e977076e4b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>lookup</name>
      <anchorfile>classAbstractLookup.html</anchorfile>
      <anchor>aa1bda70950cbd160ea78d1fcbd8c7767</anchor>
      <arglist>(const OverlayKey &amp;key, int numSiblings=1, int hopCountMax=0, int retries=0, LookupListener *listener=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const NodeVector &amp;</type>
      <name>getResult</name>
      <anchorfile>classAbstractLookup.html</anchorfile>
      <anchor>a0ad852a71fdafed808e0ebb8dcd3723e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isValid</name>
      <anchorfile>classAbstractLookup.html</anchorfile>
      <anchor>a698d5d467c714e4d114359d1078b505d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>abortLookup</name>
      <anchorfile>classAbstractLookup.html</anchorfile>
      <anchor>a96c85e82086c9e12b9bd92ac4e66ed68</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint32_t</type>
      <name>getAccumulatedHops</name>
      <anchorfile>classAbstractLookup.html</anchorfile>
      <anchor>adf3affffd7d97d965f984f54eb3de415</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractNcs</name>
    <filename>classAbstractNcs.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractNcs</name>
      <anchorfile>classAbstractNcs.html</anchorfile>
      <anchor>a5df2830fb57a8ae8a37bebeacbf995dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classAbstractNcs.html</anchorfile>
      <anchor>ab7fa98f9830542958ad75f715abf2b61</anchor>
      <arglist>(NeighborCache *neighorCache)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isReady</name>
      <anchorfile>classAbstractNcs.html</anchorfile>
      <anchor>a6b1e719e74653d4b8e7ee70a4862105f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AbstractNcsNodeInfo *</type>
      <name>getUnvalidNcsInfo</name>
      <anchorfile>classAbstractNcs.html</anchorfile>
      <anchor>a2fa10cf709bc05c46a87fccb1a5a7020</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Prox</type>
      <name>getCoordinateBasedProx</name>
      <anchorfile>classAbstractNcs.html</anchorfile>
      <anchor>a448ab29cb9bd376b3181f1e5f282a98c</anchor>
      <arglist>(const AbstractNcsNodeInfo &amp;node) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processCoordinates</name>
      <anchorfile>classAbstractNcs.html</anchorfile>
      <anchor>aa967cf8c9d1c8ef4ab4c8f269256ea61</anchor>
      <arglist>(const simtime_t &amp;rtt, const AbstractNcsNodeInfo &amp;nodeInfo)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const AbstractNcsNodeInfo &amp;</type>
      <name>getOwnNcsInfo</name>
      <anchorfile>classAbstractNcs.html</anchorfile>
      <anchor>afb2c12a5b86a18f15f7a47a95d8bfc4e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AbstractNcsNodeInfo *</type>
      <name>createNcsInfo</name>
      <anchorfile>classAbstractNcs.html</anchorfile>
      <anchor>a5e4016ca69bef7e7faf03e91a46b458c</anchor>
      <arglist>(const Coords &amp;coords) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classAbstractNcs.html</anchorfile>
      <anchor>a162e9b1dc50c85190c0da04b58fc0053</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>handleRpcCall</name>
      <anchorfile>classAbstractNcs.html</anchorfile>
      <anchor>ad4866b8d1f605a32ec74e27eef5bfcd4</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractNcsNodeInfo</name>
    <filename>classAbstractNcsNodeInfo.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractNcsNodeInfo</name>
      <anchorfile>classAbstractNcsNodeInfo.html</anchorfile>
      <anchor>aecebf2cd895588e614c25e074a873fb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isValid</name>
      <anchorfile>classAbstractNcsNodeInfo.html</anchorfile>
      <anchor>a67b2a34b45f51cee15f9a6b5736e3e77</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Prox</type>
      <name>getDistance</name>
      <anchorfile>classAbstractNcsNodeInfo.html</anchorfile>
      <anchor>aeafc338042632a38a41e25bf203aa169</anchor>
      <arglist>(const AbstractNcsNodeInfo &amp;node) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>update</name>
      <anchorfile>classAbstractNcsNodeInfo.html</anchorfile>
      <anchor>aa0c5f29e86ba5c0c9e42f2c1cf5da6e5</anchor>
      <arglist>(const AbstractNcsNodeInfo &amp;info)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Coords &amp;</type>
      <name>getCoords</name>
      <anchorfile>classAbstractNcsNodeInfo.html</anchorfile>
      <anchor>abf74d96cce7b22eb017f382b2394936f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>operator Coords</name>
      <anchorfile>classAbstractNcsNodeInfo.html</anchorfile>
      <anchor>ab25402c0885ac55a57dfd746e46a69d8</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractProxComparator</name>
    <filename>classAbstractProxComparator.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractProxComparator</name>
      <anchorfile>classAbstractProxComparator.html</anchorfile>
      <anchor>afe52b5af525b034d9065c1707c11785b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classAbstractProxComparator.html</anchorfile>
      <anchor>a8f588879305ce6a874221d22b0d5f0eb</anchor>
      <arglist>(const Prox &amp;lhs, const Prox &amp;rhs) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractProxKeyComparator</name>
    <filename>classAbstractProxKeyComparator.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractProxKeyComparator</name>
      <anchorfile>classAbstractProxKeyComparator.html</anchorfile>
      <anchor>a502f4aadf19f6b1148020a42e04c4eff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classAbstractProxKeyComparator.html</anchorfile>
      <anchor>a936018ef8c3aeb8f518ce2a7d547ccd1</anchor>
      <arglist>(const ProxKey &amp;lhs, const ProxKey &amp;rhs) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractSendStrategy</name>
    <filename>classAbstractSendStrategy.html</filename>
    <member kind="function">
      <type></type>
      <name>AbstractSendStrategy</name>
      <anchorfile>classAbstractSendStrategy.html</anchorfile>
      <anchor>ab145652f7d70c116d04fdb7860225501</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractSendStrategy</name>
      <anchorfile>classAbstractSendStrategy.html</anchorfile>
      <anchor>aea9765eba812ba7249f731cb9b407450</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classAbstractSendStrategy.html</anchorfile>
      <anchor>a5867f3e94f0492dc6c352dd4fc669b55</anchor>
      <arglist>(GlobalViewBuilder *globalViewBuilder)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeStrategy</name>
      <anchorfile>classAbstractSendStrategy.html</anchorfile>
      <anchor>ac07e3608e0f571a020ab0bab4d339cbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleCoordinateRpcCall</name>
      <anchorfile>classAbstractSendStrategy.html</anchorfile>
      <anchor>a5bea7ce5c4d7b5dbb986fe9fbcad1341</anchor>
      <arglist>(GlobalViewBuilderCall *globalViewBuilderCall)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GlobalViewBuilderCall *</type>
      <name>getCoordinateMessage</name>
      <anchorfile>classAbstractSendStrategy.html</anchorfile>
      <anchor>a8d252d74a37bf5630c8e6d3f72e0ac06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMyCoordinates</name>
      <anchorfile>classAbstractSendStrategy.html</anchorfile>
      <anchor>a22655321f1a44801b516eb5e31cc45aa</anchor>
      <arglist>(const AbstractNcsNodeInfo &amp;ncsInfo)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>getGlobalViewData</name>
      <anchorfile>classAbstractSendStrategy.html</anchorfile>
      <anchor>a819eb4902a780e0c126df67867eabd1c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThisNode</name>
      <anchorfile>classAbstractSendStrategy.html</anchorfile>
      <anchor>a04f69062088821181341dd376e6e8524</anchor>
      <arglist>(const NodeHandle thisNode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getStrategyDataStatus</name>
      <anchorfile>classAbstractSendStrategy.html</anchorfile>
      <anchor>a82409fcac368729fe914dfccacbcaf8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getStrategyCombinedParams</name>
      <anchorfile>classAbstractSendStrategy.html</anchorfile>
      <anchor>aded7b5ee8225ed995b4605d359b332cd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cleanUpCoordData</name>
      <anchorfile>classAbstractSendStrategy.html</anchorfile>
      <anchor>a085687ebc156f6c21a4346246a5e6780</anchor>
      <arglist>(const treeNodeMap &amp;currentTreeChildNodes)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>thisNode</name>
      <anchorfile>classAbstractSendStrategy.html</anchorfile>
      <anchor>aadc1c96695f6e2fde6bd3f2a8903953c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GlobalViewBuilder *</type>
      <name>globalViewBuilder</name>
      <anchorfile>classAbstractSendStrategy.html</anchorfile>
      <anchor>afb20c7feef11694f4e31780932fc408e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lastSendCount</name>
      <anchorfile>classAbstractSendStrategy.html</anchorfile>
      <anchor>aca165e0d08a234f5aa6ab5e162c13a24</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractTreeMsgClient</name>
    <filename>classAbstractTreeMsgClient.html</filename>
    <base>RpcListener</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>handleRpcCall</name>
      <anchorfile>classAbstractTreeMsgClient.html</anchorfile>
      <anchor>ad95c829c3b1b889b24673a9378a4499c</anchor>
      <arglist>(BaseCallMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>newParent</name>
      <anchorfile>classAbstractTreeMsgClient.html</anchorfile>
      <anchor>a952a36c915db9a987b52f6dbec608a6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>newChild</name>
      <anchorfile>classAbstractTreeMsgClient.html</anchorfile>
      <anchor>aab9183f514c4e150a1596fc2517057bf</anchor>
      <arglist>(const TransportAddress &amp;child=TransportAddress::UNSPECIFIED_NODE)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AccessInfo</name>
    <filename>classAccessInfo.html</filename>
    <member kind="variable">
      <type>edgeRoutes *</type>
      <name>edge</name>
      <anchorfile>classAccessInfo.html</anchorfile>
      <anchor>a669108287d313f4f14584077e8b8f20d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cModule *</type>
      <name>terminal</name>
      <anchorfile>classAccessInfo.html</anchorfile>
      <anchor>a48944dd1e43c1bd33426702a407d03df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>IPAddress</name>
      <anchorfile>classAccessInfo.html</anchorfile>
      <anchor>ae05b16041d0b945d32ea3125f0cb6407</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ASindex</name>
      <anchorfile>classAccessInfo.html</anchorfile>
      <anchor>a74b813f7ff1a23b64c2eb801cee8e70c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AccessNet</name>
    <filename>classAccessNet.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classAccessNet.html</anchorfile>
      <anchor>ae58b8e6d1f7031637a359255b977d224</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>getAccessNode</name>
      <anchorfile>classAccessNet.html</anchorfile>
      <anchor>ae118b07d63cf48646f3764a621a214ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress</type>
      <name>addOverlayNode</name>
      <anchorfile>classAccessNet.html</anchorfile>
      <anchor>a0fbbc43fd47f107e7f769e2602f0fdad</anchor>
      <arglist>(cModule *overlayNode, bool migrate=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRandomNodeId</name>
      <anchorfile>classAccessNet.html</anchorfile>
      <anchor>aa984db75d1ddb20ae64cee04e2682f5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>removeOverlayNode</name>
      <anchorfile>classAccessNet.html</anchorfile>
      <anchor>a24b138a835855095b3e4482e40c546bc</anchor>
      <arglist>(int ID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>getOverlayNode</name>
      <anchorfile>classAccessNet.html</anchorfile>
      <anchor>ae8fe2ceae197c110c0da3024082c3fcf</anchor>
      <arglist>(int ID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectChannel</name>
      <anchorfile>classAccessNet.html</anchorfile>
      <anchor>a4e5463be0cb8610d9ffca450ddbf9029</anchor>
      <arglist>(const std::string &amp;typeRx, const std::string &amp;typeTx)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IPvXAddress</type>
      <name>getAssignedPrefix</name>
      <anchorfile>classAccessNet.html</anchorfile>
      <anchor>a5b634e5581b4a158e9ca7e23e0b9ef5a</anchor>
      <arglist>(IInterfaceTable *ift)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classAccessNet.html</anchorfile>
      <anchor>acd4d82fb803a2020773fef2572c40bf4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classAccessNet.html</anchorfile>
      <anchor>ad716fd857208f5b5b8802d14d09a945e</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classAccessNet.html</anchorfile>
      <anchor>a15f6234c7e8abe5145ce66bbe94d499f</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateDisplayString</name>
      <anchorfile>classAccessNet.html</anchorfile>
      <anchor>ac7e78d72e60d4d64e9ee85a1ed678be1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeInfo</type>
      <name>router</name>
      <anchorfile>classAccessNet.html</anchorfile>
      <anchor>a7ccb579bbc8d9a942b35c96658a036ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; TerminalInfo &gt;</type>
      <name>overlayTerminal</name>
      <anchorfile>classAccessNet.html</anchorfile>
      <anchor>ad68c733a73390c69d1d4c3d3d0c91c46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IPvXAddress &gt;</type>
      <name>returnedIPs</name>
      <anchorfile>classAccessNet.html</anchorfile>
      <anchor>a27940294cf0c5f250b35ff64e19ec357</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>lastIP</name>
      <anchorfile>classAccessNet.html</anchorfile>
      <anchor>abb5ed6bbefe4c7cfc886f3b43faff1e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useIPv6</name>
      <anchorfile>classAccessNet.html</anchorfile>
      <anchor>ad010d8c5262a7b585d3f49e10ff59a8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>channelTypesRx</name>
      <anchorfile>classAccessNet.html</anchorfile>
      <anchor>afba3ef86ffdc7ec8af644a76558a7aed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>channelTypeRxStr</name>
      <anchorfile>classAccessNet.html</anchorfile>
      <anchor>ac41b200a8e79b8f628c20c59e480bd5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>channelTypesTx</name>
      <anchorfile>classAccessNet.html</anchorfile>
      <anchor>a79d1026a8d36994617345002d2509a1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>channelTypeTxStr</name>
      <anchorfile>classAccessNet.html</anchorfile>
      <anchor>a66599a3b2feac15cac9394f1223f64e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>lifetimeVector</name>
      <anchorfile>classAccessNet.html</anchorfile>
      <anchor>a614e8b71ca1f07080f63ee94d4b4eacb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AccordionPRComparator</name>
    <filename>classAccordionPRComparator.html</filename>
    <base>ProxKeyComparator&lt; KeyPrefixMetric &gt;</base>
    <member kind="function">
      <type></type>
      <name>AccordionPRComparator</name>
      <anchorfile>classAccordionPRComparator.html</anchorfile>
      <anchor>ab0c5897ec72041a2302f0690d5839a36</anchor>
      <arglist>(const OverlayKey &amp;relativeKey, uint32_t bitsPerDigit=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classAccordionPRComparator.html</anchorfile>
      <anchor>abea867a123365580aa863b507df62ef7</anchor>
      <arglist>(const ProxKey &amp;lhs, const ProxKey &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AddressExtractor</name>
    <filename>structAddressExtractor.html</filename>
    <templarg>T</templarg>
    <member kind="function" static="yes">
      <type>static TransportAddress</type>
      <name>address</name>
      <anchorfile>structAddressExtractor.html</anchorfile>
      <anchor>a95ecc5323807fb067736f20603277d1f</anchor>
      <arglist>(const T &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AddressExtractor&lt; NodeHandle &gt;</name>
    <filename>structAddressExtractor_3_01NodeHandle_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static TransportAddress</type>
      <name>address</name>
      <anchorfile>structAddressExtractor_3_01NodeHandle_01_4.html</anchorfile>
      <anchor>a79bed61929eda7039a261f05df35a987</anchor>
      <arglist>(const NodeHandle &amp;node)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AddressExtractor&lt; ProxTransportAddress &gt;</name>
    <filename>structAddressExtractor_3_01ProxTransportAddress_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static TransportAddress</type>
      <name>address</name>
      <anchorfile>structAddressExtractor_3_01ProxTransportAddress_01_4.html</anchorfile>
      <anchor>a30c06218f062d5f6e67955dd57e77edc</anchor>
      <arglist>(const ProxTransportAddress &amp;address)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AddrPerOverlay</name>
    <filename>structAddrPerOverlay.html</filename>
    <member kind="variable">
      <type>int32_t</type>
      <name>overlayId</name>
      <anchorfile>structAddrPerOverlay.html</anchorfile>
      <anchor>a365124184de645abe78638a766a6e05f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TransportAddress *</type>
      <name>ta</name>
      <anchorfile>structAddrPerOverlay.html</anchorfile>
      <anchor>a707bc0ec199952af3bce635fe2a9ca04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>bootstrapped</name>
      <anchorfile>structAddrPerOverlay.html</anchorfile>
      <anchor>ad213c7ab4f2a07f49c7d13d640a56214</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>overlayPeerVectorIndex</name>
      <anchorfile>structAddrPerOverlay.html</anchorfile>
      <anchor>a300259f07e9f213a29d23edf964d4c17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AddrPerOverlayVector</name>
    <filename>classAddrPerOverlayVector.html</filename>
    <base>std::vector</base>
    <member kind="function">
      <type></type>
      <name>~AddrPerOverlayVector</name>
      <anchorfile>classAddrPerOverlayVector.html</anchorfile>
      <anchor>a704080fd7436ccc31236f45f1e68266b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const AddrPerOverlayVector::iterator</type>
      <name>getIterForOverlayId</name>
      <anchorfile>classAddrPerOverlayVector.html</anchorfile>
      <anchor>a5549d1663cd4637c052666318122f0c9</anchor>
      <arglist>(int32_t overlayId)</arglist>
    </member>
    <member kind="function">
      <type>TransportAddress *</type>
      <name>getAddrForOverlayId</name>
      <anchorfile>classAddrPerOverlayVector.html</anchorfile>
      <anchor>afd39f0a4af41973c49ff1e31f5b09e74</anchor>
      <arglist>(int32_t overlayId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAddrForOverlayId</name>
      <anchorfile>classAddrPerOverlayVector.html</anchorfile>
      <anchor>aa3b187480f5409b05cfbe000ac232a2c</anchor>
      <arglist>(TransportAddress *addr, int32_t overlayId)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALMAnycastMessage</name>
    <filename>classALMAnycastMessage.html</filename>
    <base>ALMMessage</base>
    <member kind="function">
      <type></type>
      <name>ALMAnycastMessage</name>
      <anchorfile>classALMAnycastMessage.html</anchorfile>
      <anchor>a12688e9672a676d1384638c03034cc89</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALMAnycastMessage</name>
      <anchorfile>classALMAnycastMessage.html</anchorfile>
      <anchor>ae77fba3cdbedb33eb0b07ac2b3ac1eb3</anchor>
      <arglist>(const ALMAnycastMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ALMAnycastMessage</name>
      <anchorfile>classALMAnycastMessage.html</anchorfile>
      <anchor>a47bd0f754f2f81bb9eec9fa33c8748ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ALMAnycastMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classALMAnycastMessage.html</anchorfile>
      <anchor>a6ea54dbe4219155ed42f8c4564d1aba7</anchor>
      <arglist>(const ALMAnycastMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ALMAnycastMessage *</type>
      <name>dup</name>
      <anchorfile>classALMAnycastMessage.html</anchorfile>
      <anchor>acc5c4e17a1b33ef845f9b2a0a062bed7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classALMAnycastMessage.html</anchorfile>
      <anchor>a825e3fd2b6276c9f6446c3eb5a8c39b8</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classALMAnycastMessage.html</anchorfile>
      <anchor>a0631b4c47dc4690467d8881f2d159cfd</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classALMAnycastMessage.html</anchorfile>
      <anchor>a62179fc4ecd375c09cb8d609c29da27c</anchor>
      <arglist>(const ALMAnycastMessage &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classALMAnycastMessage.html</anchorfile>
      <anchor>acf5ccba794fc25579cabc272129aff42</anchor>
      <arglist>(const ALMAnycastMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALMCreateMessage</name>
    <filename>classALMCreateMessage.html</filename>
    <base>ALMMessage</base>
    <member kind="function">
      <type></type>
      <name>ALMCreateMessage</name>
      <anchorfile>classALMCreateMessage.html</anchorfile>
      <anchor>a670c6eddee215cdf7f4bafb8da396d6a</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALMCreateMessage</name>
      <anchorfile>classALMCreateMessage.html</anchorfile>
      <anchor>a7159227911d2f91ec50dc643faac703a</anchor>
      <arglist>(const ALMCreateMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ALMCreateMessage</name>
      <anchorfile>classALMCreateMessage.html</anchorfile>
      <anchor>afa465b6fd72eed18b9bf846a0ba81a07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ALMCreateMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classALMCreateMessage.html</anchorfile>
      <anchor>a64a66729c866fafcc2fdc10e88bce4c0</anchor>
      <arglist>(const ALMCreateMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ALMCreateMessage *</type>
      <name>dup</name>
      <anchorfile>classALMCreateMessage.html</anchorfile>
      <anchor>a5e63db07fcd0a3250748fcf731cb3554</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classALMCreateMessage.html</anchorfile>
      <anchor>af361a1407d0418cbb540fd537e677d6e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classALMCreateMessage.html</anchorfile>
      <anchor>aec38ce9f26ca8ccb715831784dafd197</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classALMCreateMessage.html</anchorfile>
      <anchor>ac62744fa44e996c03f9834b326d4fa1f</anchor>
      <arglist>(const ALMCreateMessage &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classALMCreateMessage.html</anchorfile>
      <anchor>a3d7ea963adeca3c14dd3711067c1b5ac</anchor>
      <arglist>(const ALMCreateMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALMDeleteMessage</name>
    <filename>classALMDeleteMessage.html</filename>
    <base>ALMMessage</base>
    <member kind="function">
      <type></type>
      <name>ALMDeleteMessage</name>
      <anchorfile>classALMDeleteMessage.html</anchorfile>
      <anchor>abe4051b061af876b28a3766403353dc5</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALMDeleteMessage</name>
      <anchorfile>classALMDeleteMessage.html</anchorfile>
      <anchor>a3c2de4e79e59c8aa191e58b6de1754ad</anchor>
      <arglist>(const ALMDeleteMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ALMDeleteMessage</name>
      <anchorfile>classALMDeleteMessage.html</anchorfile>
      <anchor>a96d0322472950a8394458963beded802</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ALMDeleteMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classALMDeleteMessage.html</anchorfile>
      <anchor>ae729837845936a265717dc667e09665a</anchor>
      <arglist>(const ALMDeleteMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ALMDeleteMessage *</type>
      <name>dup</name>
      <anchorfile>classALMDeleteMessage.html</anchorfile>
      <anchor>aadd8f4af484d2231cbaf17faae85a7e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classALMDeleteMessage.html</anchorfile>
      <anchor>a671c1981796146da50836f5d429ce875</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classALMDeleteMessage.html</anchorfile>
      <anchor>aaebc63b7076333381e39291501252918</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classALMDeleteMessage.html</anchorfile>
      <anchor>ab10c587fe33f399d17b9a34ec68ef270</anchor>
      <arglist>(const ALMDeleteMessage &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classALMDeleteMessage.html</anchorfile>
      <anchor>a45b777c7a5e84378c7bc8c46d5134fa3</anchor>
      <arglist>(const ALMDeleteMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALMLeaveMessage</name>
    <filename>classALMLeaveMessage.html</filename>
    <base>ALMMessage</base>
    <member kind="function">
      <type></type>
      <name>ALMLeaveMessage</name>
      <anchorfile>classALMLeaveMessage.html</anchorfile>
      <anchor>af46e529d29f03173066efdce21dc62a6</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALMLeaveMessage</name>
      <anchorfile>classALMLeaveMessage.html</anchorfile>
      <anchor>a071e74cb70d3adf2a663b6b0b5998168</anchor>
      <arglist>(const ALMLeaveMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ALMLeaveMessage</name>
      <anchorfile>classALMLeaveMessage.html</anchorfile>
      <anchor>ac5b566502257fa37a4ffaa3b20aa87c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ALMLeaveMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classALMLeaveMessage.html</anchorfile>
      <anchor>a29d97082dbc543ea74a043f6dd76554b</anchor>
      <arglist>(const ALMLeaveMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ALMLeaveMessage *</type>
      <name>dup</name>
      <anchorfile>classALMLeaveMessage.html</anchorfile>
      <anchor>acc71bb6db7b58b5f0330f457aec9e0de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classALMLeaveMessage.html</anchorfile>
      <anchor>a13721a3be67436f58510b9550f40fab9</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classALMLeaveMessage.html</anchorfile>
      <anchor>ad7d1ce3052fcc5c1ff99df2446444f64</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classALMLeaveMessage.html</anchorfile>
      <anchor>af59de65bb59f7928283f8e6d36f69309</anchor>
      <arglist>(const ALMLeaveMessage &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classALMLeaveMessage.html</anchorfile>
      <anchor>a2b5e1b4fe5e9e59bb68adb18b9a20474</anchor>
      <arglist>(const ALMLeaveMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALMMessage</name>
    <filename>classALMMessage.html</filename>
    <member kind="function">
      <type></type>
      <name>ALMMessage</name>
      <anchorfile>classALMMessage.html</anchorfile>
      <anchor>a96c3ae97947c0731ea2e1a5221112ff3</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALMMessage</name>
      <anchorfile>classALMMessage.html</anchorfile>
      <anchor>a5e5e9528ebcd895cb954c85b47fe161f</anchor>
      <arglist>(const ALMMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ALMMessage</name>
      <anchorfile>classALMMessage.html</anchorfile>
      <anchor>aac538caf0ecaf93f58e5570fff386295</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ALMMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classALMMessage.html</anchorfile>
      <anchor>a2486a9ee5f8b6db30331bb76f5430548</anchor>
      <arglist>(const ALMMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ALMMessage *</type>
      <name>dup</name>
      <anchorfile>classALMMessage.html</anchorfile>
      <anchor>a2a776b955816b328c8206e94422f8f0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classALMMessage.html</anchorfile>
      <anchor>adc14ddf68506998938429849b3907b34</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classALMMessage.html</anchorfile>
      <anchor>ad7a2561fdd62ecde23d67153984bd023</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getGroupId</name>
      <anchorfile>classALMMessage.html</anchorfile>
      <anchor>a57eefb2d1d941d8457779395909fa089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getGroupId</name>
      <anchorfile>classALMMessage.html</anchorfile>
      <anchor>af60a1b23007bb8cf8051cbd6c3be0638</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setGroupId</name>
      <anchorfile>classALMMessage.html</anchorfile>
      <anchor>a5503734daf581e6b27b2e545c0aeb5ea</anchor>
      <arglist>(const OverlayKey &amp;groupId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classALMMessage.html</anchorfile>
      <anchor>afc7429d02e8ff68f5029a3477d10c455</anchor>
      <arglist>(const ALMMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>groupId_var</name>
      <anchorfile>classALMMessage.html</anchorfile>
      <anchor>afd2fcc048b7b1a1658b0284679536b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classALMMessage.html</anchorfile>
      <anchor>a415476371fee1bedda1fe2d96833bf2f</anchor>
      <arglist>(const ALMMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALMMulticastMessage</name>
    <filename>classALMMulticastMessage.html</filename>
    <base>ALMMessage</base>
    <member kind="function">
      <type></type>
      <name>ALMMulticastMessage</name>
      <anchorfile>classALMMulticastMessage.html</anchorfile>
      <anchor>a17b5d97e86f7e073df1c276d47c68bf6</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALMMulticastMessage</name>
      <anchorfile>classALMMulticastMessage.html</anchorfile>
      <anchor>aa5c34ae6352891375ea5f90735cbde1e</anchor>
      <arglist>(const ALMMulticastMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ALMMulticastMessage</name>
      <anchorfile>classALMMulticastMessage.html</anchorfile>
      <anchor>a0333d08fc575dfb088a02dd180eae2a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ALMMulticastMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classALMMulticastMessage.html</anchorfile>
      <anchor>a969fc67cdf41ca1615b76d665dd0f910</anchor>
      <arglist>(const ALMMulticastMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ALMMulticastMessage *</type>
      <name>dup</name>
      <anchorfile>classALMMulticastMessage.html</anchorfile>
      <anchor>a2eac2b396ca09b279c6edb60673bff21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classALMMulticastMessage.html</anchorfile>
      <anchor>ae6d5e8ed8937e27a629d9413183c18ba</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classALMMulticastMessage.html</anchorfile>
      <anchor>af7d3eaa7a55cf566f7dd89dd96274e40</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classALMMulticastMessage.html</anchorfile>
      <anchor>ad9bd39b5fd1b7e2d56b80f4a16a7b936</anchor>
      <arglist>(const ALMMulticastMessage &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classALMMulticastMessage.html</anchorfile>
      <anchor>a6bc8ef443b1c100621e29d250f514550</anchor>
      <arglist>(const ALMMulticastMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALMSubscribeMessage</name>
    <filename>classALMSubscribeMessage.html</filename>
    <base>ALMMessage</base>
    <member kind="function">
      <type></type>
      <name>ALMSubscribeMessage</name>
      <anchorfile>classALMSubscribeMessage.html</anchorfile>
      <anchor>ac733e9a64fdf61a1433051d2c6f6c194</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALMSubscribeMessage</name>
      <anchorfile>classALMSubscribeMessage.html</anchorfile>
      <anchor>a9f3a075320ee30526dd2a64c2e46bd2c</anchor>
      <arglist>(const ALMSubscribeMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ALMSubscribeMessage</name>
      <anchorfile>classALMSubscribeMessage.html</anchorfile>
      <anchor>ad2caeaaa36f7d6c67c97e57ada3e6514</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ALMSubscribeMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classALMSubscribeMessage.html</anchorfile>
      <anchor>ac2d14cca5faa435da2b714eccd1ee816</anchor>
      <arglist>(const ALMSubscribeMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ALMSubscribeMessage *</type>
      <name>dup</name>
      <anchorfile>classALMSubscribeMessage.html</anchorfile>
      <anchor>ab7acc1caa94e2d9d0f113ff541b96e46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classALMSubscribeMessage.html</anchorfile>
      <anchor>a6f9ad98ca2878dfcb8ef571ccd175e1d</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classALMSubscribeMessage.html</anchorfile>
      <anchor>af372912532184cddbf53f0e7c4925f9d</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classALMSubscribeMessage.html</anchorfile>
      <anchor>ab2703200324e5e56a9c4364a888e759a</anchor>
      <arglist>(const ALMSubscribeMessage &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classALMSubscribeMessage.html</anchorfile>
      <anchor>a8de51b389b2d9a2e1c44142dd0c2c920</anchor>
      <arglist>(const ALMSubscribeMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALMTest</name>
    <filename>classALMTest.html</filename>
    <base>BaseApp</base>
    <member kind="function">
      <type></type>
      <name>ALMTest</name>
      <anchorfile>classALMTest.html</anchorfile>
      <anchor>a80fdc0bc83da79f2152af1772e7d2835</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ALMTest</name>
      <anchorfile>classALMTest.html</anchorfile>
      <anchor>aae5fb94986f4401e67ae287e5fd53dd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeApp</name>
      <anchorfile>classALMTest.html</anchorfile>
      <anchor>a8e569bdd77281b401a64725859e12da3</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finishApp</name>
      <anchorfile>classALMTest.html</anchorfile>
      <anchor>a4e23cfd45556c81ffe5c695a2e04485e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleLowerMessage</name>
      <anchorfile>classALMTest.html</anchorfile>
      <anchor>a0c4f2be2cfa14a9ae766e6ddb8bba1a0</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleReadyMessage</name>
      <anchorfile>classALMTest.html</anchorfile>
      <anchor>adb75af8b4c893aec0f87949bbd320f8e</anchor>
      <arglist>(CompReadyMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleTransportAddressChangedNotification</name>
      <anchorfile>classALMTest.html</anchorfile>
      <anchor>a8ed9302b06ed5e734fa5b5a57279eb80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleUDPMessage</name>
      <anchorfile>classALMTest.html</anchorfile>
      <anchor>a1d359249faee498f644b8b4a23cfe5d8</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleUpperMessage</name>
      <anchorfile>classALMTest.html</anchorfile>
      <anchor>a577770e713a23a41c58e311b465eb643</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classALMTest.html</anchorfile>
      <anchor>a342be0b9131b4b028cb1cdeb98d39512</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>joinGroup</name>
      <anchorfile>classALMTest.html</anchorfile>
      <anchor>a05728b80b5870d654fa51623443c9b4b</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>leaveGroup</name>
      <anchorfile>classALMTest.html</anchorfile>
      <anchor>a00079f36809d31c5305967331b0e3f99</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendDataToGroup</name>
      <anchorfile>classALMTest.html</anchorfile>
      <anchor>ace0ff722e93502f61c7f88ef97589fc6</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMCast</name>
      <anchorfile>classALMTest.html</anchorfile>
      <anchor>a38f146892906cac78ff46db96968fcf8</anchor>
      <arglist>(ALMMulticastMessage *mcast)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>timer</name>
      <anchorfile>classALMTest.html</anchorfile>
      <anchor>acc0c09fea9962a517872b1ebcfe20750</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>groupNum</name>
      <anchorfile>classALMTest.html</anchorfile>
      <anchor>a515500ca48f7bcd5a69e523c705c72a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>joinGroups</name>
      <anchorfile>classALMTest.html</anchorfile>
      <anchor>ac59a9b6ee27bdc8ac63419feca4c7849</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>sendMessages</name>
      <anchorfile>classALMTest.html</anchorfile>
      <anchor>a8e0068bc7150b0322efcc8a171e7ee8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MessageObserver *</type>
      <name>observer</name>
      <anchorfile>classALMTest.html</anchorfile>
      <anchor>a83a87a3f4d657ab9710f65b82227efb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>msglen</name>
      <anchorfile>classALMTest.html</anchorfile>
      <anchor>a02246974151fb750895757f36482f618</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALMTestTracedMessage</name>
    <filename>classALMTestTracedMessage.html</filename>
    <member kind="function">
      <type></type>
      <name>ALMTestTracedMessage</name>
      <anchorfile>classALMTestTracedMessage.html</anchorfile>
      <anchor>abda84c574747b6ba13aed6671430fde5</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALMTestTracedMessage</name>
      <anchorfile>classALMTestTracedMessage.html</anchorfile>
      <anchor>a2e9c4aceb4b59c459a419f2c6250647f</anchor>
      <arglist>(const ALMTestTracedMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ALMTestTracedMessage</name>
      <anchorfile>classALMTestTracedMessage.html</anchorfile>
      <anchor>a5aa57c4e90d8dc3ac2a5dd9eb7206823</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ALMTestTracedMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classALMTestTracedMessage.html</anchorfile>
      <anchor>ad36857c7cea44b12bba3f2168f1258a7</anchor>
      <arglist>(const ALMTestTracedMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ALMTestTracedMessage *</type>
      <name>dup</name>
      <anchorfile>classALMTestTracedMessage.html</anchorfile>
      <anchor>ad2b1cb10d00687c018a42684a2f9a160</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classALMTestTracedMessage.html</anchorfile>
      <anchor>a76a96cf4c0052d091a65c60baeb7d110</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classALMTestTracedMessage.html</anchorfile>
      <anchor>a71b4752d1482304a4db0b6ff4917aa6a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getGroupId</name>
      <anchorfile>classALMTestTracedMessage.html</anchorfile>
      <anchor>a94ff636b991b5960f964f7bdaba0e50c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getGroupId</name>
      <anchorfile>classALMTestTracedMessage.html</anchorfile>
      <anchor>a753a804f32067c566aad4b98027d071d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setGroupId</name>
      <anchorfile>classALMTestTracedMessage.html</anchorfile>
      <anchor>a0847361575eb50bad40cf81a798a3e8f</anchor>
      <arglist>(const OverlayKey &amp;groupId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getMcastId</name>
      <anchorfile>classALMTestTracedMessage.html</anchorfile>
      <anchor>a2c93707314f4c6f028e927af1e4b113c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMcastId</name>
      <anchorfile>classALMTestTracedMessage.html</anchorfile>
      <anchor>aefdc5beb8dae2a01b4b1cfb7aaf1ecce</anchor>
      <arglist>(long mcastId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSenderId</name>
      <anchorfile>classALMTestTracedMessage.html</anchorfile>
      <anchor>a98ec01f320fa2ddd1577cc3496dfb62d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSenderId</name>
      <anchorfile>classALMTestTracedMessage.html</anchorfile>
      <anchor>a7bf74ce1d5b274abd134abeffcc62258</anchor>
      <arglist>(int senderId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getReceiverId</name>
      <anchorfile>classALMTestTracedMessage.html</anchorfile>
      <anchor>a02c018dbdf9e13732632f02bec9831a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReceiverId</name>
      <anchorfile>classALMTestTracedMessage.html</anchorfile>
      <anchor>addc42efd14e89ff36e66fca8deebf6ed</anchor>
      <arglist>(int receiverId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classALMTestTracedMessage.html</anchorfile>
      <anchor>a2e03ef6b37400b43342152c890ae6cdb</anchor>
      <arglist>(const ALMTestTracedMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>groupId_var</name>
      <anchorfile>classALMTestTracedMessage.html</anchorfile>
      <anchor>a3e0484e16bb0ca54864617bd0e013cd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>mcastId_var</name>
      <anchorfile>classALMTestTracedMessage.html</anchorfile>
      <anchor>afd5f18de4c5067758575b53fdf85c3b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>senderId_var</name>
      <anchorfile>classALMTestTracedMessage.html</anchorfile>
      <anchor>a290bcab73bd38b615e395d286328e232</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>receiverId_var</name>
      <anchorfile>classALMTestTracedMessage.html</anchorfile>
      <anchor>afaa00e42f8403764cfd5526df67d8d1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classALMTestTracedMessage.html</anchorfile>
      <anchor>a9c858e4322934b3d5c6af25eae997eca</anchor>
      <arglist>(const ALMTestTracedMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AppTunOutScheduler</name>
    <filename>classAppTunOutScheduler.html</filename>
    <base>RealtimeScheduler</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AppTunOutScheduler</name>
      <anchorfile>classAppTunOutScheduler.html</anchorfile>
      <anchor>a2dc17aaa2bfc6eb557ea62bc99153313</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>initializeNetwork</name>
      <anchorfile>classAppTunOutScheduler.html</anchorfile>
      <anchor>ab04f51526f23eeb636af6748e717f35b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>additionalFD</name>
      <anchorfile>classAppTunOutScheduler.html</anchorfile>
      <anchor>a3bb1c3c26df0ca88c0afc9c6ed7a0f7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>dev</name>
      <anchorfile>classAppTunOutScheduler.html</anchorfile>
      <anchor>adc898f1c23701e6410a21955e3d47403</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AreaDataCall</name>
    <filename>classAreaDataCall.html</filename>
    <base>GlobalViewBuilderCall</base>
    <member kind="function">
      <type></type>
      <name>AreaDataCall</name>
      <anchorfile>classAreaDataCall.html</anchorfile>
      <anchor>ae6563d0d17b5066b382c63798cf3b524</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AreaDataCall</name>
      <anchorfile>classAreaDataCall.html</anchorfile>
      <anchor>afe8e7410eb61afaaf8b0a2c885a06453</anchor>
      <arglist>(const AreaDataCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AreaDataCall</name>
      <anchorfile>classAreaDataCall.html</anchorfile>
      <anchor>a5f6c519555f55bc184863c4de5b1d9c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AreaDataCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classAreaDataCall.html</anchorfile>
      <anchor>a19cd0da827cfed200ba5b2019fa13178</anchor>
      <arglist>(const AreaDataCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AreaDataCall *</type>
      <name>dup</name>
      <anchorfile>classAreaDataCall.html</anchorfile>
      <anchor>abfd9a8339d99f36527879c9d9b04550c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classAreaDataCall.html</anchorfile>
      <anchor>a6e852bee4fc43c96d57af46b740cfb82</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classAreaDataCall.html</anchorfile>
      <anchor>a434a99943eba8c0a913219ab50518a6c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AreaDataContainer &amp;</type>
      <name>getAreaData</name>
      <anchorfile>classAreaDataCall.html</anchorfile>
      <anchor>a426320d97fbaed86fccfd038880794b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const AreaDataContainer &amp;</type>
      <name>getAreaData</name>
      <anchorfile>classAreaDataCall.html</anchorfile>
      <anchor>af935080a39b5b1f162505223e3f16aa8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAreaData</name>
      <anchorfile>classAreaDataCall.html</anchorfile>
      <anchor>a99d417c9f01185860eea38f097d1a4c4</anchor>
      <arglist>(const AreaDataContainer &amp;areaData)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classAreaDataCall.html</anchorfile>
      <anchor>adc103cb6f2b70e07d0b81fb669a80580</anchor>
      <arglist>(const AreaDataCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AreaDataContainer</type>
      <name>areaData_var</name>
      <anchorfile>classAreaDataCall.html</anchorfile>
      <anchor>a88ddafa9d12a4f409f032b03500d2af6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classAreaDataCall.html</anchorfile>
      <anchor>aa11220dcefa93524b8396ecbf291a8fb</anchor>
      <arglist>(const AreaDataCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AreaDataContainer</name>
    <filename>classAreaDataContainer.html</filename>
    <member kind="function">
      <type></type>
      <name>AreaDataContainer</name>
      <anchorfile>classAreaDataContainer.html</anchorfile>
      <anchor>a957cc5fa57a305c2a3700137915374e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AreaDataContainer</name>
      <anchorfile>classAreaDataContainer.html</anchorfile>
      <anchor>a542d161a19aef4ce259a824eecc67651</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>AP</type>
      <name>CBRAreaPool</name>
      <anchorfile>classAreaDataContainer.html</anchorfile>
      <anchor>a38154e198ac75557255c97b00b840efc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AuthBlock</name>
    <filename>classAuthBlock.html</filename>
    <member kind="function">
      <type></type>
      <name>AuthBlock</name>
      <anchorfile>classAuthBlock.html</anchorfile>
      <anchor>a46e3783fc16b3aedec61881bdef884f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AuthBlock</name>
      <anchorfile>classAuthBlock.html</anchorfile>
      <anchor>ae1dbd6fe0287c598072d5c0991a5fef4</anchor>
      <arglist>(const AuthBlock &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AuthBlock</name>
      <anchorfile>classAuthBlock.html</anchorfile>
      <anchor>a8f1179e1d0884dd46d8e8fc93070ae42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AuthBlock &amp;</type>
      <name>operator=</name>
      <anchorfile>classAuthBlock.html</anchorfile>
      <anchor>a05bdcdf807f89d0b7005bae48b2aa2de</anchor>
      <arglist>(const AuthBlock &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AuthBlock *</type>
      <name>dup</name>
      <anchorfile>classAuthBlock.html</anchorfile>
      <anchor>a684c8f15bb1e1bd3366f61a54b0883e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classAuthBlock.html</anchorfile>
      <anchor>ac170af095aeae2d0c154f86038743173</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classAuthBlock.html</anchorfile>
      <anchor>a5e830f5ebba0e8fd4a7124cb8a23a6a7</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BinaryValue &amp;</type>
      <name>getSignature</name>
      <anchorfile>classAuthBlock.html</anchorfile>
      <anchor>ac2c1ac3adbebe516c23ce0417ddf2363</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const BinaryValue &amp;</type>
      <name>getSignature</name>
      <anchorfile>classAuthBlock.html</anchorfile>
      <anchor>ab7f065655ba62f05fa1dd0628d9501d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSignature</name>
      <anchorfile>classAuthBlock.html</anchorfile>
      <anchor>aa5b7274b84436268e68d7fa6b4ed3796</anchor>
      <arglist>(const BinaryValue &amp;signature)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BinaryValue &amp;</type>
      <name>getPubKey</name>
      <anchorfile>classAuthBlock.html</anchorfile>
      <anchor>a50ff4c2269c2840539d58011f82befc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const BinaryValue &amp;</type>
      <name>getPubKey</name>
      <anchorfile>classAuthBlock.html</anchorfile>
      <anchor>ab6ac04d0fea6e2e5728dd830a9c9477f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPubKey</name>
      <anchorfile>classAuthBlock.html</anchorfile>
      <anchor>a7a589df643af1dc95d4d7bc8a948f4fb</anchor>
      <arglist>(const BinaryValue &amp;pubKey)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BinaryValue &amp;</type>
      <name>getCert</name>
      <anchorfile>classAuthBlock.html</anchorfile>
      <anchor>afd0e503a2cdfc654cfc41b18f7a8566f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const BinaryValue &amp;</type>
      <name>getCert</name>
      <anchorfile>classAuthBlock.html</anchorfile>
      <anchor>a597a472772f0c5aa8c2232e03f799b3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCert</name>
      <anchorfile>classAuthBlock.html</anchorfile>
      <anchor>aef5e07052630dd5863360f693d19c611</anchor>
      <arglist>(const BinaryValue &amp;cert)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classAuthBlock.html</anchorfile>
      <anchor>a1b25665a7bb1b612aebdadacdf3399ea</anchor>
      <arglist>(const AuthBlock &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BinaryValue</type>
      <name>signature_var</name>
      <anchorfile>classAuthBlock.html</anchorfile>
      <anchor>a0015b17c02956556a1f3e16d3b38f1cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BinaryValue</type>
      <name>pubKey_var</name>
      <anchorfile>classAuthBlock.html</anchorfile>
      <anchor>a18ce8be83266ca3a9d1a4f1b8f8a92ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BinaryValue</type>
      <name>cert_var</name>
      <anchorfile>classAuthBlock.html</anchorfile>
      <anchor>aaf5f4e778769a838e3336b743d2aa1b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classAuthBlock.html</anchorfile>
      <anchor>a0c685c4aa43bc957319bd7952549a2a2</anchor>
      <arglist>(const AuthBlock &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>autoSystem</name>
    <filename>structautoSystem.html</filename>
    <member kind="variable">
      <type>std::vector&lt; edgeRoutes &gt;</type>
      <name>edgeRouter</name>
      <anchorfile>structautoSystem.html</anchorfile>
      <anchor>afe33fc2285be428f35ab6c22ce376fe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>edgeShift</name>
      <anchorfile>structautoSystem.html</anchorfile>
      <anchor>a9af673be4fcdbada7561a6e41fd58ec9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Bamboo</name>
    <filename>classBamboo.html</filename>
    <base>BasePastry</base>
    <base>LookupListener</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Bamboo</name>
      <anchorfile>classBamboo.html</anchorfile>
      <anchor>a8e2d71e2abf9ca5e7a1ddbbad5381757</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeOverlay</name>
      <anchorfile>classBamboo.html</anchorfile>
      <anchor>a52bd33a4d9a8418e9027284cc74f72d1</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classBamboo.html</anchorfile>
      <anchor>a6d3f0705b1495c225432238094a38cea</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleRpcResponse</name>
      <anchorfile>classBamboo.html</anchorfile>
      <anchor>a8efba5b237b7985672ea27dbe9d67bdd</anchor>
      <arglist>(BaseResponseMessage *msg, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleRequestLeafSetResponse</name>
      <anchorfile>classBamboo.html</anchorfile>
      <anchor>a143d3d0fa491f4bd177b69a934182f90</anchor>
      <arglist>(RequestLeafSetResponse *response)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleStateMessage</name>
      <anchorfile>classBamboo.html</anchorfile>
      <anchor>af7e2ea2c6f6d654980310005a230f6a3</anchor>
      <arglist>(PastryStateMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>lookupFinished</name>
      <anchorfile>classBamboo.html</anchorfile>
      <anchor>a37816e3b77076881120a13606d836489</anchor>
      <arglist>(AbstractLookup *lookup)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>changeState</name>
      <anchorfile>classBamboo.html</anchorfile>
      <anchor>ae987647d2b516c6bcaa1c93257b6be3f</anchor>
      <arglist>(int toState)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doLeafsetMaintenance</name>
      <anchorfile>classBamboo.html</anchorfile>
      <anchor>ab28c657a75980f968defb032f4aa9002</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getNextRowToMaintain</name>
      <anchorfile>classBamboo.html</anchorfile>
      <anchor>a7d9390f517830e44e35e3cd475730724</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doLocalTuning</name>
      <anchorfile>classBamboo.html</anchorfile>
      <anchor>acde8e02f731fe1a26a5c21d47ee84188</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doGlobalTuning</name>
      <anchorfile>classBamboo.html</anchorfile>
      <anchor>acc2e50c06119f74386cc083431f86675</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>handleFailedNode</name>
      <anchorfile>classBamboo.html</anchorfile>
      <anchor>ac33bbf6ffd5a95bb730ce046f921a335</anchor>
      <arglist>(const TransportAddress &amp;failed)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkProxCache</name>
      <anchorfile>classBamboo.html</anchorfile>
      <anchor>a4efad1712615507ca730b86006513d9e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>joinOverlay</name>
      <anchorfile>classBamboo.html</anchorfile>
      <anchor>a1b8dba4c0d42b0dbf6b6b2a693c6dc29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint16_t</type>
      <name>rowToAsk</name>
      <anchorfile>classBamboo.html</anchorfile>
      <anchor>a06b850d5351d33617171bc92f26d88c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>leafsetMaintenanceInterval</name>
      <anchorfile>classBamboo.html</anchorfile>
      <anchor>a05f92ae31d195ee37d78f45ab7f5f5bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>localTuningInterval</name>
      <anchorfile>classBamboo.html</anchorfile>
      <anchor>a703829a0001a2396b500aff8eb823242</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>globalTuningInterval</name>
      <anchorfile>classBamboo.html</anchorfile>
      <anchor>a8a4593a1108a8d18b11799bbbe1c63dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>leafsetMaintenanceTimer</name>
      <anchorfile>classBamboo.html</anchorfile>
      <anchor>a27b7c5753ca505d9405088db5b992abb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>globalTuningTimer</name>
      <anchorfile>classBamboo.html</anchorfile>
      <anchor>a18101007aa88fae455a40c512b964a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>localTuningTimer</name>
      <anchorfile>classBamboo.html</anchorfile>
      <anchor>aab00eaa43352d0f3d1529d2f03ebc6c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BambooLookupListener</name>
      <anchorfile>classBamboo.html</anchorfile>
      <anchor>aefc36fb7b441daba48500acc1fec62d4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BambooLookupListener</name>
    <filename>classBambooLookupListener.html</filename>
    <base>LookupListener</base>
    <member kind="function">
      <type></type>
      <name>BambooLookupListener</name>
      <anchorfile>classBambooLookupListener.html</anchorfile>
      <anchor>aa0ab63b37366d53a4468852693447a08</anchor>
      <arglist>(Bamboo *overlay)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lookupFinished</name>
      <anchorfile>classBambooLookupListener.html</anchorfile>
      <anchor>a7a546b2f66078cfc114b7f406495b7ff</anchor>
      <arglist>(AbstractLookup *lookup)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Bamboo *</type>
      <name>overlay</name>
      <anchorfile>classBambooLookupListener.html</anchorfile>
      <anchor>ab2075c16e89de20284562978d3dcd600</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>base64</name>
    <filename>classbase64.html</filename>
    <templarg>_E</templarg>
    <templarg>_Tr</templarg>
    <class kind="struct">base64::crlf</class>
    <class kind="struct">base64::crlfsp</class>
    <class kind="struct">base64::noline</class>
    <class kind="struct">base64::three2four</class>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>byte_t</name>
      <anchorfile>classbase64.html</anchorfile>
      <anchor>ab6ef9be8f9b32e4349a844a5a8730347</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_E</type>
      <name>char_type</name>
      <anchorfile>classbase64.html</anchorfile>
      <anchor>af79d31c0900c2efed710122fa71e5c54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_Tr</type>
      <name>traits_type</name>
      <anchorfile>classbase64.html</anchorfile>
      <anchor>acdf8406b84bdfe838596428eaf103594</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>_II</type>
      <name>put</name>
      <anchorfile>classbase64.html</anchorfile>
      <anchor>a311a2373259c5a78a93201e7c968d970</anchor>
      <arglist>(_II _First, _II _Last, _OI _To, _State &amp;_St, _Endline _Endl) const </arglist>
    </member>
    <member kind="function">
      <type>_II</type>
      <name>get</name>
      <anchorfile>classbase64.html</anchorfile>
      <anchor>a88e56ff139bffac7a7037854946562c4</anchor>
      <arglist>(_II _First, _II _Last, _OI _To, _State &amp;_St) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>_getCharType</name>
      <anchorfile>classbase64.html</anchorfile>
      <anchor>adef3c2f0a04ef9cab59e135df58d3c8f</anchor>
      <arglist>(int _Ch) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>base64::crlf</name>
    <filename>structbase64_1_1crlf.html</filename>
    <member kind="function">
      <type>_OI</type>
      <name>operator()</name>
      <anchorfile>structbase64_1_1crlf.html</anchorfile>
      <anchor>a8535d44acb8e006239251e81095421e1</anchor>
      <arglist>(_OI _To) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>base64::crlfsp</name>
    <filename>structbase64_1_1crlfsp.html</filename>
    <member kind="function">
      <type>_OI</type>
      <name>operator()</name>
      <anchorfile>structbase64_1_1crlfsp.html</anchorfile>
      <anchor>ad1fad8811e3c0a1a91da23c098dab0e7</anchor>
      <arglist>(_OI _To) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>base64::noline</name>
    <filename>structbase64_1_1noline.html</filename>
    <member kind="function">
      <type>_OI</type>
      <name>operator()</name>
      <anchorfile>structbase64_1_1noline.html</anchorfile>
      <anchor>adcd1e88af02240dfd3acb8401412cf77</anchor>
      <arglist>(_OI _To) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>base64::three2four</name>
    <filename>structbase64_1_1three2four.html</filename>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>structbase64_1_1three2four.html</anchorfile>
      <anchor>a9c641361e7b25e585abaa16bd30c3040</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>byte_t</type>
      <name>get_0</name>
      <anchorfile>structbase64_1_1three2four.html</anchorfile>
      <anchor>a0b41422e065c1a50e95311e95ccdb4cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>byte_t</type>
      <name>get_1</name>
      <anchorfile>structbase64_1_1three2four.html</anchorfile>
      <anchor>a6a32366c6d6197f2f43b8646526337c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>byte_t</type>
      <name>get_2</name>
      <anchorfile>structbase64_1_1three2four.html</anchorfile>
      <anchor>aeab7f1cd375af13d41d002c9b824c952</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_0</name>
      <anchorfile>structbase64_1_1three2four.html</anchorfile>
      <anchor>a608bfce49f1fd19ab81fe9b255a39fb9</anchor>
      <arglist>(byte_t _ch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_1</name>
      <anchorfile>structbase64_1_1three2four.html</anchorfile>
      <anchor>a0c40e81de235dbc0fe7eb6c251d99109</anchor>
      <arglist>(byte_t _ch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_2</name>
      <anchorfile>structbase64_1_1three2four.html</anchorfile>
      <anchor>a6df8493bc84b4cbe73386f801f8efc46</anchor>
      <arglist>(byte_t _ch)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>b64_0</name>
      <anchorfile>structbase64_1_1three2four.html</anchorfile>
      <anchor>a9a7f3e490ddcf067f4dbef67cf21a0a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>b64_1</name>
      <anchorfile>structbase64_1_1three2four.html</anchorfile>
      <anchor>a390a1e036d8079cbbb4eba2fe5643eaa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>b64_2</name>
      <anchorfile>structbase64_1_1three2four.html</anchorfile>
      <anchor>a6f255f52e506b7c8a41698987dc54147</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>b64_3</name>
      <anchorfile>structbase64_1_1three2four.html</anchorfile>
      <anchor>a3aeb18099296040c2836c0774bbfcdc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>b64_0</name>
      <anchorfile>structbase64_1_1three2four.html</anchorfile>
      <anchor>ab4918ddce3c924ce1c96d652da6ac9a2</anchor>
      <arglist>(int _ch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>b64_1</name>
      <anchorfile>structbase64_1_1three2four.html</anchorfile>
      <anchor>a6272b93e9faf0320586b6bb7ea208cac</anchor>
      <arglist>(int _ch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>b64_2</name>
      <anchorfile>structbase64_1_1three2four.html</anchorfile>
      <anchor>ad8a859360de6ea1be87e19503df2d1c4</anchor>
      <arglist>(int _ch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>b64_3</name>
      <anchorfile>structbase64_1_1three2four.html</anchorfile>
      <anchor>a1365b83fc68a312f3d8825af4832496b</anchor>
      <arglist>(int _ch)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>byte_t</type>
      <name>_data</name>
      <anchorfile>structbase64_1_1three2four.html</anchorfile>
      <anchor>ae0cfad5f7120f1525f6ad7259bb81d3c</anchor>
      <arglist>[3]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseApp</name>
    <filename>classBaseApp.html</filename>
    <base>BaseRpc</base>
    <base>BaseTcpSupport</base>
    <member kind="function">
      <type></type>
      <name>BaseApp</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>ae8f97fc28ca93c7c08a616cee9a6eb58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseApp</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>acd5dea4cb74bc7bbdc200426873723f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>numInitStages</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>a89836f3b6ddff37e3f101ef463938fd4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>a8436840c732b2dd50ad69c68d1425e5d</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeApp</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>ac9a059a2cfb67f4c38f462bb1383e795</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>a98800700e14545cd84636ca4413f605a</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>ae24a6232ffb93812b0e89363a9a1a4b6</anchor>
      <arglist>(int category, const cPolymorphic *details)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTransportAddressChangedNotification</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>a70b13c2c5d5c02121fd4b7d0665db1f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleNodeLeaveNotification</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>a6de99518e6f58cd2cb3bbc639e198d82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleNodeGracefulLeaveNotification</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>af7be216d5b28f404cd44f0039aaf75d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>a754a4b87c7372bce4772db1d4d6175b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finishApp</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>a9702f80de642a3e090aaf5bedea8e4a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>callRoute</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>a629659835cf4ccd86a995fd00e5f4794</anchor>
      <arglist>(const OverlayKey &amp;key, cPacket *msg, const TransportAddress &amp;hint=TransportAddress::UNSPECIFIED_NODE, RoutingType routingType=DEFAULT_ROUTING)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>callRoute</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>ab145028fbce9b8e2cbf44afdcef88fad</anchor>
      <arglist>(const OverlayKey &amp;key, cPacket *msg, const std::vector&lt; TransportAddress &gt; &amp;sourceRoute, RoutingType routingType=DEFAULT_ROUTING)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deliver</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>ad9bfd86cefb67c31a2bcc082df3aa04c</anchor>
      <arglist>(OverlayKey &amp;key, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>forward</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>ad9ad1b23f2fe54f2355d6faad2ef7c9f</anchor>
      <arglist>(OverlayKey *key, cPacket **msg, NodeHandle *nextHopNode)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>a129d228137df46b04c8b3272b6a32fcc</anchor>
      <arglist>(const NodeHandle &amp;node, bool joined)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeVector *</type>
      <name>callLocalLookup</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>a8b8b965890ce3395dc52a2009f9f6de7</anchor>
      <arglist>(const OverlayKey &amp;key, int num, bool safe)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeVector *</type>
      <name>callNeighborSet</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>a02642da2ecd1d59c8a4377876bdf48b8</anchor>
      <arglist>(int num)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isSiblingFor</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>a4597db9333dc0a779802cc148554f859</anchor>
      <arglist>(const NodeHandle &amp;node, const OverlayKey &amp;key, int numSiblings, bool *err)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMessage</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>aaf53c217f8b3dfefff346ed7865be12b</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMessage</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>a621d25b1cb1f6aac033860fe8c1dcc80</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUDPMessage</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>a86914395123f871fd67197db7310cdfa</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleReadyMessage</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>a4f1c969fd41786127717f15e8a357130</anchor>
      <arglist>(CompReadyMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>bindToPort</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>a3fb90c6906b6a742246af14e4626dfef</anchor>
      <arglist>(int port)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendMessageToUDP</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>a82df6d5b93be11580514c2b0c937208a</anchor>
      <arglist>(const TransportAddress &amp;destAddr, cPacket *msg, simtime_t delay=SIMTIME_ZERO)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTraceMessage</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>a8536a8adf715cab0d04c59d02ac318a4</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMessageToLowerTier</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>a9757b716a23dcd65d43f4fd704243ad2</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>internalHandleRpcCall</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>a2d827aeca70a404e673e8be9268659c0</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>internalHandleRpcResponse</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>ab3577433bc200bc7a6f533312c58b91c</anchor>
      <arglist>(BaseResponseMessage *msg, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>internalSendRouteRpc</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>a766d0849fb0786ce51269e73fd4c9f84</anchor>
      <arglist>(BaseRpcMessage *message, const OverlayKey &amp;destKey, const std::vector&lt; TransportAddress &gt; &amp;sourceRoute, RoutingType routingType)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CompType</type>
      <name>getThisCompType</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>a5125ad4468014966598aeb9630242a45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendReadyMessage</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>a3e030ef74292c6c2ffba4957d3275353</anchor>
      <arglist>(bool ready=true, const OverlayKey &amp;nodeId=OverlayKey::UNSPECIFIED_KEY)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UnderlayConfigurator *</type>
      <name>underlayConfigurator</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>a0587e13700e8641eec8143628dfd34cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GlobalNodeList *</type>
      <name>globalNodeList</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>ac8a54fad527bfd03a05ee6aed434243e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GlobalStatistics *</type>
      <name>globalStatistics</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>a70bdab2d4ea3553205115f057194f692</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NotificationBoard *</type>
      <name>notificationBoard</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>a5bb3d74943a67339d38a58a275d3094e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debugOutput</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>afbdeb4fb8c437056bb934cca461e89b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numOverlaySent</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>aee53a66f950f2069e4cc42aead491d14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bytesOverlaySent</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>a65263e862b5a4bade718a2666c3eca4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numOverlayReceived</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>a043ef9c8776a16ffe09341efcfafc156</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bytesOverlayReceived</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>a8e131636ea17df1e1b6d772e61874812</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numUdpSent</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>a58844be8525eeb748bc4b6804a955764</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bytesUdpSent</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>af0330dbdf7a1f2311541f1406dab6ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numUdpReceived</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>a295df65b0c3356b9880c507d32ffca02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bytesUdpReceived</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>ae0fb70eef76379c9291e2757f0c6dcb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>creationTime</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>ac365b8c1cb45fb1e37f95535936a0f31</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>forwardResponse</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>a4c39a1db31336e05fac08dc66d62320d</anchor>
      <arglist>(const OverlayKey &amp;key, cPacket *msg, const NodeHandle &amp;nextHopNode)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleCommonAPIMessage</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>ae068e2f6b63cd429cd00150e56144686</anchor>
      <arglist>(CommonAPIMessage *commonAPIMsg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>internalSendRpcResponse</name>
      <anchorfile>classBaseApp.html</anchorfile>
      <anchor>a286d01727e3a18377232ac9f5e8b07c7</anchor>
      <arglist>(BaseCallMessage *call, BaseResponseMessage *response)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseAppDataMessage</name>
    <filename>classBaseAppDataMessage.html</filename>
    <base>BaseOverlayMessage</base>
    <member kind="function">
      <type></type>
      <name>BaseAppDataMessage</name>
      <anchorfile>classBaseAppDataMessage.html</anchorfile>
      <anchor>ad0f98b5e5867730261869981e3d789cd</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseAppDataMessage</name>
      <anchorfile>classBaseAppDataMessage.html</anchorfile>
      <anchor>a7025815f3f96d3d82dc53a2ee76b163d</anchor>
      <arglist>(const BaseAppDataMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseAppDataMessage</name>
      <anchorfile>classBaseAppDataMessage.html</anchorfile>
      <anchor>aaef9945cef134e160a2eb17c9324c84a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BaseAppDataMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classBaseAppDataMessage.html</anchorfile>
      <anchor>a93cf856c2dd8a833f3621fc9f8330e7d</anchor>
      <arglist>(const BaseAppDataMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseAppDataMessage *</type>
      <name>dup</name>
      <anchorfile>classBaseAppDataMessage.html</anchorfile>
      <anchor>ad3c29ede803c7e150dc2294be5afc340</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classBaseAppDataMessage.html</anchorfile>
      <anchor>a908d7886dadd34bfa6b5edb4c935c284</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classBaseAppDataMessage.html</anchorfile>
      <anchor>a61d20aa081660cc759004255781ca2f0</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDestComp</name>
      <anchorfile>classBaseAppDataMessage.html</anchorfile>
      <anchor>afe1c9c162e083220d509508fcc7c483a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestComp</name>
      <anchorfile>classBaseAppDataMessage.html</anchorfile>
      <anchor>a092231658f48cbed0893ffb17317b28a</anchor>
      <arglist>(int destComp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSrcComp</name>
      <anchorfile>classBaseAppDataMessage.html</anchorfile>
      <anchor>aecdd6291afa442489e4685e62a475382</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcComp</name>
      <anchorfile>classBaseAppDataMessage.html</anchorfile>
      <anchor>a16908cd61320fb16c58baab9d9973a23</anchor>
      <arglist>(int srcComp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classBaseAppDataMessage.html</anchorfile>
      <anchor>a692421a372f2ef62a5e9ae58c19c49a8</anchor>
      <arglist>(const BaseAppDataMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>destComp_var</name>
      <anchorfile>classBaseAppDataMessage.html</anchorfile>
      <anchor>ae03394d1722c2787f4ad0e172dc0a4c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>srcComp_var</name>
      <anchorfile>classBaseAppDataMessage.html</anchorfile>
      <anchor>af894422dad1cb3e953550eda3aae168b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classBaseAppDataMessage.html</anchorfile>
      <anchor>ad1f591827b1a02961fd0723b72281661</anchor>
      <arglist>(const BaseAppDataMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseCallMessage</name>
    <filename>classBaseCallMessage.html</filename>
    <base>BaseRpcMessage</base>
    <member kind="function">
      <type></type>
      <name>BaseCallMessage</name>
      <anchorfile>classBaseCallMessage.html</anchorfile>
      <anchor>a1c059c2652768ceb28d5b37ebaba0510</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseCallMessage</name>
      <anchorfile>classBaseCallMessage.html</anchorfile>
      <anchor>a0faa49182d51f437d056b112942186b9</anchor>
      <arglist>(const BaseCallMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseCallMessage</name>
      <anchorfile>classBaseCallMessage.html</anchorfile>
      <anchor>af9336854b33cba77746c3333cadeb529</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BaseCallMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classBaseCallMessage.html</anchorfile>
      <anchor>a5dd374672dc48cfa9b36a60248c7d4d5</anchor>
      <arglist>(const BaseCallMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseCallMessage *</type>
      <name>dup</name>
      <anchorfile>classBaseCallMessage.html</anchorfile>
      <anchor>a2e1b28efce2f3b0b45c6b101b9515704</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classBaseCallMessage.html</anchorfile>
      <anchor>a47cc391417242f0dd8d63aa80f5e3386</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classBaseCallMessage.html</anchorfile>
      <anchor>a365f44460128ea6a7e8c4b57fe38431f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classBaseCallMessage.html</anchorfile>
      <anchor>a3a2d4ff04282125346fb13791f81b09e</anchor>
      <arglist>(const BaseCallMessage &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classBaseCallMessage.html</anchorfile>
      <anchor>aa9e75241527678b5b4eebcabd94df36c</anchor>
      <arglist>(const BaseCallMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseKeySortedVector</name>
    <filename>classBaseKeySortedVector.html</filename>
    <templarg>T</templarg>
    <templarg>T_key</templarg>
    <templarg>T_prox</templarg>
    <templarg>T_address</templarg>
    <base>std::vector</base>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;::iterator</type>
      <name>iterator</name>
      <anchorfile>classBaseKeySortedVector.html</anchorfile>
      <anchor>adda2ae09639f7600c0f7ab759f4c9c0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classBaseKeySortedVector.html</anchorfile>
      <anchor>ae515dd1aaec0a9a300fd122a3d8b0867</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseKeySortedVector</name>
      <anchorfile>classBaseKeySortedVector.html</anchorfile>
      <anchor>a1805b49667c70212f6b02e4895c5e98c</anchor>
      <arglist>(uint16_t maxSize=0, const Comparator&lt; OverlayKey &gt; *comparator=NULL, const AbstractProxComparator *proxComparator=NULL, const AbstractProxKeyComparator *proxKeyComparator=NULL, uint16_t sizeProx=0, uint16_t sizeComb=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseKeySortedVector</name>
      <anchorfile>classBaseKeySortedVector.html</anchorfile>
      <anchor>a4a901db7c94391add21898402c558a85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAddable</name>
      <anchorfile>classBaseKeySortedVector.html</anchorfile>
      <anchor>ad640b8320ebc32c8ef574109273bb44f</anchor>
      <arglist>(const T &amp;element) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFull</name>
      <anchorfile>classBaseKeySortedVector.html</anchorfile>
      <anchor>ad96fd23183bf954e2613af5430ecb48d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classBaseKeySortedVector.html</anchorfile>
      <anchor>a3aaa6426ddc7dba9d2d2f4b05cad997c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add</name>
      <anchorfile>classBaseKeySortedVector.html</anchorfile>
      <anchor>afbcdfbd9680a475cceb48ccc841140cd</anchor>
      <arglist>(const T &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>const bool</type>
      <name>contains</name>
      <anchorfile>classBaseKeySortedVector.html</anchorfile>
      <anchor>a628db4e57ed6c70f8896926486ba1a87</anchor>
      <arglist>(const OverlayKey &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>find</name>
      <anchorfile>classBaseKeySortedVector.html</anchorfile>
      <anchor>a6460075c03fce1a302ad2c9309ce2808</anchor>
      <arglist>(const OverlayKey &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>findIterator</name>
      <anchorfile>classBaseKeySortedVector.html</anchorfile>
      <anchor>a5f7a2df11ab0a0b3c4c505b5d932c2aa</anchor>
      <arglist>(const OverlayKey &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>downsizeTo</name>
      <anchorfile>classBaseKeySortedVector.html</anchorfile>
      <anchor>a91af29fbac19e4991e88cce71c59e3a2</anchor>
      <arglist>(const uint32_t maxElements)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComparator</name>
      <anchorfile>classBaseKeySortedVector.html</anchorfile>
      <anchor>ac509494faf9fa46ca1d11964a21c8247</anchor>
      <arglist>(const Comparator&lt; OverlayKey &gt; *comparator)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const T</type>
      <name>UNSPECIFIED_ELEMENT</name>
      <anchorfile>classBaseKeySortedVector.html</anchorfile>
      <anchor>a450e2596ef8223779dafabd77f518ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Comparator&lt; OverlayKey &gt; *</type>
      <name>comparator</name>
      <anchorfile>classBaseKeySortedVector.html</anchorfile>
      <anchor>af3f7a3472637529be4ae208cd959ed9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const AbstractProxComparator *</type>
      <name>proxComparator</name>
      <anchorfile>classBaseKeySortedVector.html</anchorfile>
      <anchor>a3481985c42f1d9e7a02d910b03c82887</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const AbstractProxKeyComparator *</type>
      <name>proxKeyComparator</name>
      <anchorfile>classBaseKeySortedVector.html</anchorfile>
      <anchor>a41e5bb306a944b6ed836282e936182ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint16_t</type>
      <name>maxSize</name>
      <anchorfile>classBaseKeySortedVector.html</anchorfile>
      <anchor>a5d0a0fa68ea5d61c5faf64d0932649df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint16_t</type>
      <name>sizeProx</name>
      <anchorfile>classBaseKeySortedVector.html</anchorfile>
      <anchor>ace5dcf394072cae06b9a13bf693522a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint16_t</type>
      <name>sizeComb</name>
      <anchorfile>classBaseKeySortedVector.html</anchorfile>
      <anchor>aebfdd8301ba64d3828577f4ca26a3a25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseLocation</name>
    <filename>classBaseLocation.html</filename>
    <member kind="function">
      <type></type>
      <name>BaseLocation</name>
      <anchorfile>classBaseLocation.html</anchorfile>
      <anchor>a69f6af9da827b25b532277eee020ae83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseLocation</name>
      <anchorfile>classBaseLocation.html</anchorfile>
      <anchor>ac62ed61569497c7d6079498ae4cf3426</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classBaseLocation.html</anchorfile>
      <anchor>abb24628b8fddaaefce5413379e9c9e87</anchor>
      <arglist>(const BaseLocation &amp;rhs)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseOverlay</name>
    <filename>classBaseOverlay.html</filename>
    <base>BaseRpc</base>
    <base>BaseTcpSupport</base>
    <base>TopologyVis</base>
    <class kind="class">BaseOverlay::BaseOverlayContext</class>
    <class kind="struct">BaseOverlay::HopDelayRecord</class>
    <class kind="class">BaseOverlay::lookupHashFcn</class>
    <member kind="enumeration">
      <name>States</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a0ad4b12b0c9949661f66db7fbbf7d40f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INIT</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a0ad4b12b0c9949661f66db7fbbf7d40fa4c1b397f6c4682baf7db280e7f15520a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOOTSTRAP</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a0ad4b12b0c9949661f66db7fbbf7d40fab746fc2a119638665d6ac9d493146662</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISCOVERY</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a0ad4b12b0c9949661f66db7fbbf7d40fa6f9e50300f12679850ddc29f15cdf37b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PREJOIN</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a0ad4b12b0c9949661f66db7fbbf7d40faee36df62cd4384e95a4a735b8acbc1ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JOIN</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a0ad4b12b0c9949661f66db7fbbf7d40fa40c37f1f56c6ed8e40ae467e67e61cab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POSTJOIN</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a0ad4b12b0c9949661f66db7fbbf7d40fad74d9b561a828ca8b85ad8cd7689b54a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>READY</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a0ad4b12b0c9949661f66db7fbbf7d40fab3a263fb274a58d63b15cd61ba910335</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REFRESH</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a0ad4b12b0c9949661f66db7fbbf7d40fa844ef1f60e4f4efe32c7ba89315a7bf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SHUTDOWN</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a0ad4b12b0c9949661f66db7fbbf7d40faad4c4f4f3bddd311d8c11b20c1c6d00f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a0ad4b12b0c9949661f66db7fbbf7d40fa99c9df0220f7a63e3b548d19181dc2b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RSET</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a0ad4b12b0c9949661f66db7fbbf7d40faa17c975f477d6dd1f472e031d5bd6bc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BSET</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a0ad4b12b0c9949661f66db7fbbf7d40fa5eb3bb010076f581e3a98cddf2531686</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseOverlay</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a9d3fd0a833ef00d1a739ced007469505</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseOverlay</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a4fd9da1c26016b59e19ac0ca938ba312</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>States</type>
      <name>getState</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>adff10d8324516c75347fe67f11897435</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMalicious</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a234b046348574d37d811638f0b27a89e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInSimpleMultiOverlayHost</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>abef37828b7f070044154f53bcd2a765b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const simtime_t &amp;</type>
      <name>getCreationTime</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a018f1d79a4f2aa314c2c68f9bface3c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>join</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>acb8855faa86247ae37ab894891d9f4dd</anchor>
      <arglist>(const OverlayKey &amp;nodeID=OverlayKey::UNSPECIFIED_KEY)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeVector *</type>
      <name>local_lookup</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a95851770a6ab3a176e1d7b5a7afba3f0</anchor>
      <arglist>(const OverlayKey &amp;key, int num, bool safe)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeVector *</type>
      <name>neighborSet</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a08f453e70d8d295bdbabec4accbb9dad</anchor>
      <arglist>(int num)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSiblingFor</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>ab5887b89ba9da5973068e834feb69ce7</anchor>
      <arglist>(const NodeHandle &amp;node, const OverlayKey &amp;key, int numSiblings, bool *err)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getMaxNumSiblings</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>acd3058ad15b470e024500dd4872e2f09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getMaxNumRedundantNodes</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>ab4dadd02486560de3a58773b3a90fb41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendMessageToUDP</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a10189697bd95f3de66c27c1ecf07e323</anchor>
      <arglist>(const TransportAddress &amp;dest, cPacket *msg, simtime_t delay=SIMTIME_ZERO)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendToKey</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a6f2c598f5d3989a63a8cc7220f1aaf76</anchor>
      <arglist>(const OverlayKey &amp;key, BaseOverlayMessage *message, int numSiblings=1, const std::vector&lt; TransportAddress &gt; &amp;sourceRoute=TransportAddress::UNSPECIFIED_NODES, RoutingType routingType=DEFAULT_ROUTING)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey</type>
      <name>distance</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>aa12314947ef42726ec6c7066dde8d0f9</anchor>
      <arglist>(const OverlayKey &amp;x, const OverlayKey &amp;y, bool useAlternative=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerComp</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a2096f89814b5740257cee106b60dda15</anchor>
      <arglist>(CompType compType, cModule *module)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getCompModule</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a3aba2b6e93094d3cc8107d33db4b5244</anchor>
      <arglist>(CompType compType)</arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getCompRpcGate</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a5fc03fda227c0cca828109842af1b320</anchor>
      <arglist>(CompType compType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendMessageToAllComp</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a19c2c01f99a19bb7de0b30cdd866a2e0</anchor>
      <arglist>(cMessage *msg, CompType srcComp)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>providesKbr</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a269ddf1a8caa1efd25ebf0593cf5b671</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint8_t</type>
      <name>getBitsPerDigit</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>afcab85a6c5a4f8aa70a65ecabaa78180</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getMeasureAuthBlock</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a077a698fb5f760290bc67e4a50dfed9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BootstrapList &amp;</type>
      <name>getBootstrapList</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>aab1198e37993729eaf87350d5b83f9a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey</type>
      <name>estimateMeanDistance</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a17e5d70377d7441e3c379818688892c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>estimateOverlaySize</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>abbe44e3f7df7e0f33b05508023899f94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>UNORDERED_SET&lt; AbstractLookup *, lookupHashFcn, lookupHashFcn &gt;</type>
      <name>LookupSet</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a65cc359d4db3de08cde7ff0b3794f0c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>numInitStages</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a3234dfcf81463984e88a42432734a615</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeOverlay</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a41f88dfbea856a2b38319ff52c758c96</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finishOverlay</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a8db85b9c706d04007154761d5a0cec16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>bindToPort</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a512084e3a224f0a3f284e5e240652a26</anchor>
      <arglist>(int port)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>route</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>ad62efdef2b674f46e5368354efb6104f</anchor>
      <arglist>(const OverlayKey &amp;key, CompType destComp, CompType srcComp, cPacket *msg, const std::vector&lt; TransportAddress &gt; &amp;sourceRoute=TransportAddress::UNSPECIFIED_NODES, RoutingType routingType=DEFAULT_ROUTING)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>callDeliver</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a432f79071b87baece93311300cfda0c3</anchor>
      <arglist>(BaseOverlayMessage *msg, const OverlayKey &amp;destKey)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>callForward</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a71bcb54aa4fc66bdf97cc9c87fffc318</anchor>
      <arglist>(const OverlayKey &amp;key, BaseRouteMessage *msg, const NodeHandle &amp;nextHopNode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>callUpdate</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a1422696a8eb138dde850390152ff88c7</anchor>
      <arglist>(const NodeHandle &amp;node, bool joined)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a870d24a243e4b0d1aeb31ea0861e53a7</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleBaseOverlayMessage</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>ac647b32e360b4db1f0eb53b096437fd8</anchor>
      <arglist>(BaseOverlayMessage *msg, const OverlayKey &amp;destKey=OverlayKey::UNSPECIFIED_KEY)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUDPMessage</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a31d7dd39ddc9e62ad92f69f6d7210344</anchor>
      <arglist>(BaseOverlayMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAppMessage</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>aef92d042c22b47c123e59a831acb7033</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>ac1cf471c2918271ed0244e4a9579c878</anchor>
      <arglist>(int category, const cPolymorphic *details)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTransportAddressChangedNotification</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a2a53481e2aaf78e6826ab72378bebf48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleNodeLeaveNotification</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>af9ea0a59c26b70c50c63c2c1dc4c2ec3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleNodeGracefulLeaveNotification</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>aa2d70984acd164839ca92694a02e7a91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>recordOverlaySentStats</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a921ac1fec5765f4099276800a82953ab</anchor>
      <arglist>(BaseOverlayMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setOverlayReady</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a9da615809e832cbc4645cc732d510277</anchor>
      <arglist>(bool ready)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AbstractLookup *</type>
      <name>createLookup</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a205a7d44401fb3d77b146e23b2904b6f</anchor>
      <arglist>(RoutingType routingType=DEFAULT_ROUTING, const BaseOverlayMessage *msg=NULL, const cPacket *findNodeExt=NULL, bool appLookup=false)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeLookup</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a0bfca744a28f47cae8c99243de04b005</anchor>
      <arglist>(AbstractLookup *lookup)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual NodeVector *</type>
      <name>findNode</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a7cbdce336237331b67a3c69c4e43d489</anchor>
      <arglist>(const OverlayKey &amp;key, int numRedundantNodes, int numSiblings, BaseOverlayMessage *msg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>joinOverlay</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a3eefb56c2396601373c89d21b5b58110</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>joinForeignPartition</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>ad032eda7f8a65884cf8c6d141224331e</anchor>
      <arglist>(const NodeHandle &amp;node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>handleFailedNode</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>aa53ca4e1b4720ba0d2874afe29eacbf7</anchor>
      <arglist>(const TransportAddress &amp;failed)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>lookupRpc</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>aa9d874edfd1b52822e1693695420d5a7</anchor>
      <arglist>(LookupCall *call)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>nextHopRpc</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a3eef9db326747d930a455db3b884dac4</anchor>
      <arglist>(NextHopCall *call)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>countFindNodeCall</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>aee7b3e4129a3a624b9112c3b7ae2b6a3</anchor>
      <arglist>(const FindNodeCall *call)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>countFailedNodeCall</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a189d4d1410399ecd264b5bfe6fc85e0f</anchor>
      <arglist>(const FailedNodeCall *call)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>internalHandleRpcCall</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a03a24a5876504b36177a0ee041d5822e</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>internalHandleRpcResponse</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>adc50f1e153d88a20ca921e84a0dbf3b2</anchor>
      <arglist>(BaseResponseMessage *msg, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>internalHandleRpcTimeout</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>ac89854c2f011597f3421d414851f4407</anchor>
      <arglist>(BaseCallMessage *msg, const TransportAddress &amp;dest, cPolymorphic *context, int rpcId, const OverlayKey &amp;destKey)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>internalSendRouteRpc</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>afe4a27831cec5ad68f1ddca071461808</anchor>
      <arglist>(BaseRpcMessage *message, const OverlayKey &amp;destKey, const std::vector&lt; TransportAddress &gt; &amp;sourceRoute, RoutingType routingType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CompType</type>
      <name>getThisCompType</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a92e0d3f96a5716245465e05da60ef487</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numAppDataForwarded</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a341a65ab7c50dfbc8222c1adf4f08a99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bytesAppDataForwarded</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a1c90204205e7e5b8f0f12fe4056914e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numAppLookupForwarded</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a8f5ff290e99ab78f3e0bd4a489bfcadd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bytesAppLookupForwarded</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>adeff8c454760c6eb4ca847e8dda252a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numMaintenanceForwarded</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a05fa895acb368180bbca74d92152d2f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bytesMaintenanceForwarded</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a8dbb1ce4eee057f23bea55e5e4a7d13b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numFindNodeSent</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a210e4277548e47f2ec8e772ae5b6eb7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bytesFindNodeSent</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a99971f360cdde2d41d239418dfad7281</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numFindNodeResponseSent</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a248581eed6fedf10b2c350cbedd69773</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bytesFindNodeResponseSent</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a4b2293e58a3bf5a7ddc0d28cb0669f2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numFailedNodeSent</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a2fef63e0e6d6d7c991c9cb2c95db5733</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bytesFailedNodeSent</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>aca6ed5880fa17a3bfe432deff8d10e7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numFailedNodeResponseSent</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>acf40707599a177a1dd5cd9ec4e854dc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bytesFailedNodeResponseSent</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>aa62ca9476d42c748e40dd0f287823445</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; HopDelayRecord * &gt;</type>
      <name>singleHopDelays</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a93d899c36b4b7b7b012413924c9fb4b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>creationTime</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>af0eebaddea732ee4ab4d247c388e62bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GlobalNodeList *</type>
      <name>globalNodeList</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a933e505ea77cae4ab0c8edcb77ade2c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NotificationBoard *</type>
      <name>notificationBoard</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>af0704186e295039c92666176b0b91dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UnderlayConfigurator *</type>
      <name>underlayConfigurator</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>af2f7102d7cc6f5ecb1c3ecb3d9c93df3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BootstrapList *</type>
      <name>bootstrapList</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>abe4dea93564123116c97d5c4721f0504</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GlobalParameters *</type>
      <name>globalParameters</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a59bde2858b8537864fbad3eb487dbc55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>overlayId</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a58a2fa722396661f55eb490d989a6df6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debugOutput</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a49ff0fb8c25792a1339d54a60c36f2cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RoutingType</type>
      <name>defaultRoutingType</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a9e13844ea8090b84a90286f048cdcbf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useCommonAPIforward</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>ac9acbeb30646d54f620d87641d91b113</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>collectPerHopDelay</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a2694627a0082c456367bfa472fff56b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>routeMsgAcks</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a6e9090bf68f45a31d727a6c7f0501d43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>recNumRedundantNodes</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>ad0094285f9af244aec5e5fe600126243</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>recordRoute</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a61186fd8bd7368c8a91a63ecc9c62a89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>drawOverlayTopology</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a79031cb868377512713e343a326dbbd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>rejoinOnFailure</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>aecfcf5743d274d9c17730f2aeccf1635</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sendRpcResponseToLastHop</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a84fe39074cd9dc69acf188abf3e2ea12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dropFindNodeAttack</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>ab53aaadb5dfe6fea1ac6b90db356cc52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isSiblingAttack</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>ae70528858c70e2404e0d83824d6f5bbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>invalidNodesAttack</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a319a6b16e55af5e67fbbf65f6d07d5d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dropRouteMessageAttack</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a3bcd2bdd704803d7ec8ae77633cf03fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>localPort</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>aef12c08638b508af44f257824f9391ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>hopCountMax</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>abffe6fbd25963bc2b7542f22ba6455b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>measureAuthBlock</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>ab0b0274a06e70c91e8bd8df0c23d435f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>restoreContext</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a7d0beff122a0b5c573dd8ae90c9372d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numDropped</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a4a82bd4b76a8d06a1d63bba98f1a34d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bytesDropped</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a9e09857b97f52d340e4710580f25f7a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>delayVector</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>ae035d51942a35ec780eb6f5bad6fe179</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>hopCountVector</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>aadc1c2714625c6d3c2d6d0cd96bf4491</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>States</type>
      <name>state</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>ab4be6d88417117fbf33a445d56af2655</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IterativeLookupConfiguration</type>
      <name>iterativeLookupConfig</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a32b8cfb47f3ef824dcf6ad882e6a6a9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RecursiveLookupConfiguration</type>
      <name>recursiveLookupConfig</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>af6573aac3c99626958737209309d7e99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LookupSet</type>
      <name>lookups</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>ad25b51c2d6c06dbe12c534307f43822e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>kbr</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a53389ea3326d2e8ad53f02b388487d0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::map&lt; CompType, std::pair&lt; cModule *, cGate * &gt; &gt;</type>
      <name>CompModuleList</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a70450830625412821e38ba9820f4eb16</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a9738ba6065b0f699f1921bbe82ab97be</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>aed7e3f36b2c70cbdb0e6daa32925917c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>setOwnNodeID</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a31e60de81d77afdeb0e68f781ded0f9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>sendRouteMessage</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>ac93829bc8095a76e6208cf0ec12188b0</anchor>
      <arglist>(const TransportAddress &amp;dest, BaseRouteMessage *msg, bool ack)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>checkFindNode</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a53ded56af8bba8e4caa9a9b29e01ab87</anchor>
      <arglist>(BaseRouteMessage *routeMsg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initLookups</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>af2c8b2108703c4df49217a719f280bb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>finishLookups</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>abaaca6fe44d8e317d56c90a14e0fcada</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual bool</type>
      <name>recursiveRoutingHook</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a42f4c08f6408d155a9907957ecf12d79</anchor>
      <arglist>(const TransportAddress &amp;dest, BaseRouteMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>internalSendRpcResponse</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a3b7e4eeca10c3052e0bb51762fe1ce71</anchor>
      <arglist>(BaseCallMessage *call, BaseResponseMessage *response)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>findNodeRpc</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a50680d9b44a779f314baeab200da61dc</anchor>
      <arglist>(FindNodeCall *call)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>failedNodeRpc</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a1655dc0cb4ebb2f22de1d1ee29030433</anchor>
      <arglist>(FailedNodeCall *call)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numAppDataSent</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>aa8c1469e21c59a08a84dec36218582b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>bytesAppDataSent</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>ae6453766e7a58060722a6323ee3923e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numAppLookupSent</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a5b42fe053fd79b9b62680cbfc740ec4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>bytesAppLookupSent</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a118e46bc3e194c63a70e28846480ffe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numMaintenanceSent</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>af1077d5c646390fb11d4f646fc22eaaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>bytesMaintenanceSent</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a27259327737ad8092c612756c0fe6fb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numAppDataReceived</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>aa83e680792f987f9f5f779e12c055898</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>bytesAppDataReceived</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a82cd1df80e31e2a9148a9efaacc4bc76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numAppLookupReceived</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a9298db97a2d651e02729ad197964bdca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>bytesAppLookupReceived</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a8527c9038c62bf66e58c07d41b308527</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numMaintenanceReceived</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a4e7abb41a2c8698bf530015378a13e46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>bytesMaintenanceReceived</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>ad7bd70b69842cc4db485eafa942332fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numInternalSent</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>ae34cc8a058a4dae47a3815cba64ceba2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>bytesInternalSent</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>ad0af3d066a89ced910b082a980f68f25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numInternalReceived</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a7f185cb11a818d01dcc1a31553de16ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>bytesInternalReceived</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a55ba3d595b6b23db700cb9f36f34f0ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>bytesAuthBlockSent</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a30e11530c77c2164f0a5c98a489a9fab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>joinRetries</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>aee8e642813784a1f27a81756a4b93b9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const cGate *</type>
      <name>udpGate</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a2e2f70aa82a9b4920877b3a13dd1e0ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const cGate *</type>
      <name>appGate</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a6523faf8f52af34c73643dc7f3e083eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CompModuleList</type>
      <name>compModuleList</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a572cbbdedbbc386f1d9c3851e9250be7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>internalReadyState</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>aa484556ed4ff9e4e97394106d0c1d323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>socketId</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>af0cedb761015fad54f32a96963e8e88c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>IterativeLookup</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>af4b6fb17cb1da8f210d175cdba0c2c5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>IterativePathLookup</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>aef42f314710869966a27962174cb1ca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>RecursiveLookup</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a9d94a8362059c5c49b2cfffeb628f7cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BootstrapList</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>ae2d97f842f0b5746d066b9de64dd23f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SendToKeyListener</name>
      <anchorfile>classBaseOverlay.html</anchorfile>
      <anchor>a4083c91b7d09ceaa7fd2768570814d77</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseOverlay::BaseOverlayContext</name>
    <filename>classBaseOverlay_1_1BaseOverlayContext.html</filename>
    <member kind="function">
      <type></type>
      <name>BaseOverlayContext</name>
      <anchorfile>classBaseOverlay_1_1BaseOverlayContext.html</anchorfile>
      <anchor>a6cd8594e36667eb173eee1081ed6ded5</anchor>
      <arglist>(const OverlayKey &amp;key, bool malicious)</arglist>
    </member>
    <member kind="variable">
      <type>OverlayKey</type>
      <name>key</name>
      <anchorfile>classBaseOverlay_1_1BaseOverlayContext.html</anchorfile>
      <anchor>a7cc31b97afeb437fbb239423c621ad18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>malicious</name>
      <anchorfile>classBaseOverlay_1_1BaseOverlayContext.html</anchorfile>
      <anchor>aedc767ab6f5852af04b18666d131da1d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BaseOverlay::HopDelayRecord</name>
    <filename>structBaseOverlay_1_1HopDelayRecord.html</filename>
    <member kind="function">
      <type></type>
      <name>HopDelayRecord</name>
      <anchorfile>structBaseOverlay_1_1HopDelayRecord.html</anchorfile>
      <anchor>a12dcfc0c11ca7ff44302500b4c4b06e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>count</name>
      <anchorfile>structBaseOverlay_1_1HopDelayRecord.html</anchorfile>
      <anchor>a83f056780cd6b9b68f8eb999d5b45482</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>val</name>
      <anchorfile>structBaseOverlay_1_1HopDelayRecord.html</anchorfile>
      <anchor>abcc398fdefba9230fcafb94e701f3071</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseOverlay::lookupHashFcn</name>
    <filename>classBaseOverlay_1_1lookupHashFcn.html</filename>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>classBaseOverlay_1_1lookupHashFcn.html</anchorfile>
      <anchor>a8c1a75437eaac6c893aec183efd3b109</anchor>
      <arglist>(const AbstractLookup *l1) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classBaseOverlay_1_1lookupHashFcn.html</anchorfile>
      <anchor>ace1254e194cd9c32dd5bcb3ba48894d9</anchor>
      <arglist>(const AbstractLookup *l1, const AbstractLookup *l2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseOverlayMessage</name>
    <filename>classBaseOverlayMessage.html</filename>
    <base>OverSimMessage</base>
    <member kind="function">
      <type></type>
      <name>BaseOverlayMessage</name>
      <anchorfile>classBaseOverlayMessage.html</anchorfile>
      <anchor>a5a25ac0404f09031bf798e857d5822cd</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseOverlayMessage</name>
      <anchorfile>classBaseOverlayMessage.html</anchorfile>
      <anchor>a5d8840a41c99c7a3f99152c2df29860c</anchor>
      <arglist>(const BaseOverlayMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseOverlayMessage</name>
      <anchorfile>classBaseOverlayMessage.html</anchorfile>
      <anchor>a500ab671f01cbdbeb249642041d596eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BaseOverlayMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classBaseOverlayMessage.html</anchorfile>
      <anchor>a9615740db49fd73147ff2378900b30f3</anchor>
      <arglist>(const BaseOverlayMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseOverlayMessage *</type>
      <name>dup</name>
      <anchorfile>classBaseOverlayMessage.html</anchorfile>
      <anchor>ade9ac38d77f492e194e6f1129590f409</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classBaseOverlayMessage.html</anchorfile>
      <anchor>a4652d8ceaff763750ef37b4dcd06660b</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classBaseOverlayMessage.html</anchorfile>
      <anchor>a6f81f2e5edb726997c58f9519f720b0b</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getType</name>
      <anchorfile>classBaseOverlayMessage.html</anchorfile>
      <anchor>a406e342c0841abe2d82b9bb5c1e2aabd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchorfile>classBaseOverlayMessage.html</anchorfile>
      <anchor>a97cdd7fcea5530191070f50e92d39eb5</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getStatType</name>
      <anchorfile>classBaseOverlayMessage.html</anchorfile>
      <anchor>af0a4bf31778e05a809f8d55dff5bfcc1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStatType</name>
      <anchorfile>classBaseOverlayMessage.html</anchorfile>
      <anchor>a07301be10c346b328a0a9cc4cae48777</anchor>
      <arglist>(int statType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classBaseOverlayMessage.html</anchorfile>
      <anchor>ae3be17caf24428dbe92b70282fb131cb</anchor>
      <arglist>(const BaseOverlayMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>type_var</name>
      <anchorfile>classBaseOverlayMessage.html</anchorfile>
      <anchor>a9a2b07de8d43f874c6cbb6357d53cdf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>statType_var</name>
      <anchorfile>classBaseOverlayMessage.html</anchorfile>
      <anchor>ac16f983d49ac3a5e0cf9978419cb0223</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classBaseOverlayMessage.html</anchorfile>
      <anchor>aa2648427f2e975016f98a515224fceed</anchor>
      <arglist>(const BaseOverlayMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BasePastry</name>
    <filename>classBasePastry.html</filename>
    <base>BaseOverlay</base>
    <base>ProxListener</base>
    <class kind="struct">BasePastry::PingContext</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BasePastry</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a390bb86e0a5ef6f920fdba1f045f9202</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxNumSiblings</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a23fca1965b3c6240fdcfb19bbf8e5a02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxNumRedundantNodes</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>acad786a6138720f76e80ceb9a93d0e12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAppMessage</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a20890c824e8987e936a3997c3121aa23</anchor>
      <arglist>(BaseOverlayMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateTooltip</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>abc8da91d0187799f60bddb3ddab3e2f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeVector *</type>
      <name>findNode</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a3f8ba63e19c092f9ecf4d5ecb1817061</anchor>
      <arglist>(const OverlayKey &amp;key, int numRedundantNodes, int numSiblings, BaseOverlayMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>handleStateMessage</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a1172a453b44856e2fdd7a027f0d03833</anchor>
      <arglist>(PastryStateMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finishOverlay</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>aa38739065522ad67152dd4ff604ef759</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSiblingFor</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>aa8d7ea4daf5bb613fefc62a4da602f2b</anchor>
      <arglist>(const NodeHandle &amp;node, const OverlayKey &amp;key, int numSiblings, bool *err)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractLookup *</type>
      <name>createLookup</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>abcdf9ac9a9cc75300ba325bb8f163d19</anchor>
      <arglist>(RoutingType routingType=DEFAULT_ROUTING, const BaseOverlayMessage *msg=NULL, const cPacket *dummy=NULL, bool appLookup=false)</arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>getBitsPerDigit</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a64142ec5a4c2536f6633c1a05dd30726</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>proxCallback</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a62226300729854b429ae5d58c8d62ceb</anchor>
      <arglist>(const TransportAddress &amp;node, int rpcId, cPolymorphic *contextPointer, Prox prox)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey</type>
      <name>estimateMeanDistance</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>adc106b05b0a841dcef8099d16714a219</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>getRTLastRow</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a4dd9ab209482d17819937d1b04e57bf2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; TransportAddress &gt; *</type>
      <name>getRTRow</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>aa2f33e6768d37e3a8ac1de5abe083ccd</anchor>
      <arglist>(uint8_t index) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; TransportAddress &gt; *</type>
      <name>getLeafSet</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>aea89d552071956612ccf525569b52c8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>joins</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>acaa5d246e1e904b5196950d335673c94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>joinTries</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a0adf4d1d02388eec7de8b4d0206f7f2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>joinPartial</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a805e366ae01f6857dcb0e4a78c7e79d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>joinSeen</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>abfe72c7d75708d9e152375ecb708ce24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>joinBytesSeen</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a8fb058e1e4991c923faf29ae72832c05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>joinReceived</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a3d1f5f390900492fb714e0f420ded63a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>joinBytesReceived</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>ab2be7f6fc3c97b1d93f43f083cff6f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>joinSent</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>ae75ddd4630ea3004166c0283436af0e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>joinBytesSent</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a8bf579a017df30ccb1cf458a78a78f79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>stateSent</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>aadec419a4c2560717f1db3e36866b837</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>stateBytesSent</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a43218c86ea28a36b14f76b54b2ccea07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>stateReceived</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a26fa765c1f23635923477bc300637c4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>stateBytesReceived</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a8783f5db146cf00be3a347e92c36505e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>repairReqSent</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a5f05d5cba3283f9b1dd421b036959aff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>repairReqBytesSent</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a9f02a29e59ff2af5c7af5b3a764e711a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>repairReqReceived</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a7dcde1eb4abe361da782106038325c04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>repairReqBytesReceived</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>aee11180f103683fc2a55d4c8958078d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>stateReqSent</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>addc36312daa0ac4c85e4e8d77ee17ae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>stateReqBytesSent</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a79163b2c9ee6767a5844c10b3a273af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>stateReqReceived</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a727d8089dc7486f5f835ec427554c9b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>stateReqBytesReceived</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>adca8e0ca12a6dbbaee7dc5884845ddce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>totalLookups</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a9fc77f87e2df109185d47c249886f176</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>responsibleLookups</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>ac765a923e7799daa443a1f4e1133bd01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>routingTableLookups</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a42d36fb42f20de058871d74b8acd7b4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>closerNodeLookups</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a7f32c7f9ffc03f346052ac50321d1858</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>closerNodeLookupsFromNeighborhood</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>ad0deec6321f756622cacaba04d26cdbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>leafsetReqSent</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a26cf01f1f60f7c76ec071d551d2bc77e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>leafsetReqBytesSent</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>ab200043644da860d9d8c260fb6735053</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>leafsetReqReceived</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a65d0531f806241a4f400613b1dd67384</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>leafsetReqBytesReceived</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>aa22c5ed0a7bbaf3b2b3ffd2276496251</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>leafsetSent</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a4c18e956472b6109d8b7f6951af550b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>leafsetBytesSent</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a4ac5815eec47ea1ec62a25e19dbaf806</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>leafsetReceived</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a966f88cf985632e3e28ff482c5e5d0a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>leafsetBytesReceived</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a9bdc81ede316e30996bbee5c73f6b472</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>routingTableRowReqSent</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a1a1785687d9560edfe30d6b4f8d5c31f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>routingTableRowReqBytesSent</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a836e8dcea673d81c8e2a68500becd084</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>routingTableRowReqReceived</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a8056c04c21aae9fa4a4041edbdb19001</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>routingTableRowReqBytesReceived</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a2fbc52bcec92ed5021c9ae14cecafafc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>routingTableRowSent</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a5f02096e0a73b1f56dcdf8930b5404a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>routingTableRowBytesSent</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a839babe908f65ab34cbf4ee20c336c9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>routingTableRowReceived</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>ad18d4e40c560e1b08c2c6c0742f68767</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>routingTableRowBytesReceived</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a7a3df3dfb8b7c88b1c8f9c932b07d5a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>StateObject</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a310811835376494807a09cd0a8d52eb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ROUTINGTABLE</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a310811835376494807a09cd0a8d52eb7ade24a23c0404dd3ba4e22feb64fbdf3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LEAFSET</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a310811835376494807a09cd0a8d52eb7a9d6e5a7d1d4f7208eb485c882b3bcaed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEIGHBORHOODSET</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a310811835376494807a09cd0a8d52eb7a544fe8f97d7d893510ac4c658ec4faba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PING_RECEIVED_STATE</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a26eda810c876c5062a849e9e0fb7e2b8a55b9f4bfbf94d107e8228d1ea9ec95b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PING_NEXT_HOP</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a26eda810c876c5062a849e9e0fb7e2b8a42c2a11b38eda6c512669012e9bbb88f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PING_SINGLE_NODE</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a26eda810c876c5062a849e9e0fb7e2b8aaab166e746fb925df8707610d92af824</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PING_DISCOVERY</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a26eda810c876c5062a849e9e0fb7e2b8a6232e475e9da2c6b20ef4cacd1246601</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>changeState</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>ab9eeefa3a6a0dc3d56860a7d45bc585c</anchor>
      <arglist>(int toState)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>handleRpcCall</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a64c0f2b97d1dd7b07c30f70b5ddc1496</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRpcResponse</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a6bdf07238d36dc4fc8298e57632d78e5</anchor>
      <arglist>(BaseResponseMessage *msg, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRpcTimeout</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a7d0fb0a879ca2c4f7b3cdd1444066ab5</anchor>
      <arglist>(BaseCallMessage *call, const TransportAddress &amp;dest, cPolymorphic *context, int rpcId, const OverlayKey &amp;key)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleRequestLeafSetCall</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a507ef17a6bd92abbc59bdf1e14a0354a</anchor>
      <arglist>(RequestLeafSetCall *call)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleRequestRoutingRowCall</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>aa252f42630bb2ce99e87513d1e1e6f23</anchor>
      <arglist>(RequestRoutingRowCall *call)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRequestLeafSetResponse</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>ae745710e7bd27898ded7fe73987ef676</anchor>
      <arglist>(RequestLeafSetResponse *response)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRequestRoutingRowResponse</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>aced0a16861b41d5dcd623fe49b0ccefa</anchor>
      <arglist>(RequestRoutingRowResponse *response)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PastryStateMessage *</type>
      <name>createStateMessage</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>aa5351a4ba129681864f7b6e3d77e2962</anchor>
      <arglist>(enum PastryStateMsgType type=PASTRY_STATE_STD, simtime_t timestamp=-1, int16_t row=-1, bool lastHop=false)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>checkProxCache</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a1062cac20a1fd1c5368157fe2da8b8fb</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>purgeVectors</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a72cdd5dde4fe7886068ebc35b4d96cea</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>baseInit</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a0bc39902de2d03ea45714bf8506d983f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>baseChangeState</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a1f99c5e7da561015851b206abb4d0f59</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>OverlayKey</type>
      <name>distance</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a5508a66ddde5207ac255edfe042b69a5</anchor>
      <arglist>(const OverlayKey &amp;x, const OverlayKey &amp;y, bool useAlternative=false) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>iterativeJoinHook</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a49e37d403457478acc0d352904bf104d</anchor>
      <arglist>(BaseOverlayMessage *msg, bool incrHopCount)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>prePing</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>af6a7090deb645b1f79b33edb0409485c</anchor>
      <arglist>(const PastryStateMessage *stateMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>pingNodes</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a445a74a2791f810975bf99b4ff7d9865</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>determineAliveTable</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a89aba6ca97abfbe6baff748a19969d1e</anchor>
      <arglist>(const PastryStateMessage *stateMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>newLeafs</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a71aa8137f8e2eaf0977a437d7d852189</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>bitsPerDigit</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a80645aaa29443c4b7dc919d67fb7af81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>numberOfLeaves</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>ac57a5211053260e898b18c252c293581</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>numberOfNeighbors</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>ace44a714008e5a5c1f373b7068396721</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>readyWaitAmount</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a98b0c284102cd5f1fc78558937b9b19f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>joinTimeoutAmount</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a596fc6a02d7b78a6bf804d08cbf73844</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>repairTimeout</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>aa6d47b84748ac654eb8777abea92c984</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>enableNewLeafs</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>ab8f4cd001646782d88dca94134ef0b20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useRegularNextHop</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a893a9f746f708dc4c66b5195e04a2f56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>alwaysSendUpdate</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a26f8166e84753ec35921c7cff3ff10d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>optimizeLookup</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a12816a6716823ebb8d4bcfe4d4667051</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>proximityNeighborSelection</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>af6e8cefc3c62e666203cfedea1532f04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>nearNodeRtt</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a715b166d2b3b397e047908f52f354be7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>nearNodeImproved</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a4ac33dcce9d9a383a740d1227cff76aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>periodicMaintenance</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a3bc59be1790c50873fb64c0e20bd047a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress *</type>
      <name>leaf2ask</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a5216e2031a761a9aeaae0d330b00b741</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress</type>
      <name>bootstrapNode</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>af534020c5663e436cf28aa83a4a790c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress</type>
      <name>nearNode</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>af28427241a54155e6f9bf8539286ec9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lastStateChange</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a6c7b5c6e2d71db0c8233b80764e63dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PastryStateMsgHandle</type>
      <name>stateCache</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a70d78d4ebef74ab2367fed00f77b2d65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::queue&lt; PastryStateMsgHandle &gt;</type>
      <name>stateCacheQueue</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a763ec48a49b047252ea3d758b335df70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PastryStateMsgProximity</type>
      <name>aliveTable</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a22e76d53e4ba89d63eca403923a46da8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>joinHopCount</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a1a96c4a089fd9c1b21d7eb9c34d93580</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>readyWait</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a87b449a72607334387c2aa3a5d7673b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>joinUpdateWait</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a9375a2c0cdee0493f0ea7b4983825934</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PastryRoutingTable *</type>
      <name>routingTable</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a759c548b4bb1cb4f92b3a4b369cc8d02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PastryLeafSet *</type>
      <name>leafSet</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a72c95d72afcded1185c628646e4f819c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PastryNeighborhoodSet *</type>
      <name>neighborhoodSet</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a66df35d5ace03485bf20db2d2899a98f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PastryLeafSet</name>
      <anchorfile>classBasePastry.html</anchorfile>
      <anchor>a4bdc4f15ad57b31d9045a408f5e40478</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BasePastry::PingContext</name>
    <filename>structBasePastry_1_1PingContext.html</filename>
    <member kind="function">
      <type></type>
      <name>PingContext</name>
      <anchorfile>structBasePastry_1_1PingContext.html</anchorfile>
      <anchor>adcc8de667fc3a81763f6ca9798766275</anchor>
      <arglist>(StateObject stateObject, uint32_t index, uint32_t nonce)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PingContext</name>
      <anchorfile>structBasePastry_1_1PingContext.html</anchorfile>
      <anchor>ae9b7759d743c973a4a9c83653c21dc97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>StateObject</type>
      <name>stateObject</name>
      <anchorfile>structBasePastry_1_1PingContext.html</anchorfile>
      <anchor>a11fa988ab40e49e44286201407f056d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>index</name>
      <anchorfile>structBasePastry_1_1PingContext.html</anchorfile>
      <anchor>a4b893e14ebe9a0d6d4e62fc426e6acbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>nonce</name>
      <anchorfile>structBasePastry_1_1PingContext.html</anchorfile>
      <anchor>ac4f943122e6a84c149e0fb3c18688889</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseResponseMessage</name>
    <filename>classBaseResponseMessage.html</filename>
    <base>BaseRpcMessage</base>
    <member kind="function">
      <type></type>
      <name>BaseResponseMessage</name>
      <anchorfile>classBaseResponseMessage.html</anchorfile>
      <anchor>a754447cc3f96454812a0f501a25748e3</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseResponseMessage</name>
      <anchorfile>classBaseResponseMessage.html</anchorfile>
      <anchor>aa2a3a0f49c2cc34c52fad0c43c71969e</anchor>
      <arglist>(const BaseResponseMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseResponseMessage</name>
      <anchorfile>classBaseResponseMessage.html</anchorfile>
      <anchor>aaae5bee27cb2657fd3f2f5edda46a746</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BaseResponseMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classBaseResponseMessage.html</anchorfile>
      <anchor>a8248968445837f2e1ea06ccc32ac99b9</anchor>
      <arglist>(const BaseResponseMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseResponseMessage *</type>
      <name>dup</name>
      <anchorfile>classBaseResponseMessage.html</anchorfile>
      <anchor>a017fd819c3c6bc6b841db220bb587d99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classBaseResponseMessage.html</anchorfile>
      <anchor>aad1b8bbaeadc68d9317a5da55be02cd5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classBaseResponseMessage.html</anchorfile>
      <anchor>a7fd2f9458b8d44a3859e650dd1b631de</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCallHopCount</name>
      <anchorfile>classBaseResponseMessage.html</anchorfile>
      <anchor>a37417381f7d44bcdf98f9ac8fea75751</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCallHopCount</name>
      <anchorfile>classBaseResponseMessage.html</anchorfile>
      <anchor>a1d11d3e2ad7941803af477fca247c103</anchor>
      <arglist>(int callHopCount)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNcsInfoArraySize</name>
      <anchorfile>classBaseResponseMessage.html</anchorfile>
      <anchor>a4f05dbcf7968e8a20ca74cd54c4590a8</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNcsInfoArraySize</name>
      <anchorfile>classBaseResponseMessage.html</anchorfile>
      <anchor>a1a793c9078236fc7a397dd0688994c62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getNcsInfo</name>
      <anchorfile>classBaseResponseMessage.html</anchorfile>
      <anchor>a19f5158a6c4cf04297ad95ed754bdff8</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNcsInfo</name>
      <anchorfile>classBaseResponseMessage.html</anchorfile>
      <anchor>ac97bf5fb6d4d09d8e8e2f31c9ab2455a</anchor>
      <arglist>(unsigned int k, double ncsInfo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classBaseResponseMessage.html</anchorfile>
      <anchor>a62435eb2506cb0adce5fe5657fffedef</anchor>
      <arglist>(const BaseResponseMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>callHopCount_var</name>
      <anchorfile>classBaseResponseMessage.html</anchorfile>
      <anchor>a4cfb3d39e4ed423b114de792a3476097</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>ncsInfo_var</name>
      <anchorfile>classBaseResponseMessage.html</anchorfile>
      <anchor>a50dfcab4d8e1cd226b0a1bb2f98ae72e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>ncsInfo_arraysize</name>
      <anchorfile>classBaseResponseMessage.html</anchorfile>
      <anchor>af0430181990d300089a969f91e225f53</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classBaseResponseMessage.html</anchorfile>
      <anchor>a8c50ea68f12e043fa482c96586e6bb9f</anchor>
      <arglist>(const BaseResponseMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseRouteMessage</name>
    <filename>classBaseRouteMessage.html</filename>
    <base>BaseOverlayMessage</base>
    <member kind="function">
      <type></type>
      <name>BaseRouteMessage</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>aee3017f20790cbebac4cf710dad48176</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseRouteMessage</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>ab7c01146aae97ff109a251a170f6bbac</anchor>
      <arglist>(const BaseRouteMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseRouteMessage</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>a0f004c99b91d7c2e53d59dc1cd552ee5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BaseRouteMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>a0d989f4649ebc5c0e4d12548af7198c3</anchor>
      <arglist>(const BaseRouteMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseRouteMessage *</type>
      <name>dup</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>ad63dbffa8c4c6d79c6781ed06c691a49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>ab45a81ab74595df43f5c4d6668457b25</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>ae8499c63c5720e2472c559fe2ffd2d2f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getDestKey</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>ad983641a05758bc9d25070f1659b2f34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getDestKey</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>a76c9852d8d8cb20a0f5b7d6a9be5cffa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestKey</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>aa5389407777493ee6f012c15397b7fd4</anchor>
      <arglist>(const OverlayKey &amp;destKey)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getSrcNode</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>af9787d89915f01a2055e920148015e17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getSrcNode</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>a60aef2b79af7619c8d60f8ea934d4f59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcNode</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>acdc5362ca1ffc63004a8e413fb325fe6</anchor>
      <arglist>(const NodeHandle &amp;srcNode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRoutingType</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>a834dd9c8f0b2b776ed5f5b1fa285149a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRoutingType</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>adabb301ac82c0e967f9c14717a535b9d</anchor>
      <arglist>(int routingType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getHopCount</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>ab59d2969c812aa35d132a68fc2baf819</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHopCount</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>a61070a9184332a428bf8f98e8eef21da</anchor>
      <arglist>(int hopCount)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setVisitedHopsArraySize</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>a152289adca72ada1c7a8823d08e2164c</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getVisitedHopsArraySize</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>a4d937e983eb4887400e41749b55ebecb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransportAddress &amp;</type>
      <name>getVisitedHops</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>a5e4624df761b01f0df433ef0ace1c597</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TransportAddress &amp;</type>
      <name>getVisitedHops</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>a715a5df835f749462abcff003ad99142</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setVisitedHops</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>a4cc0a72bbee29facef3914e318017b76</anchor>
      <arglist>(unsigned int k, const TransportAddress &amp;visitedHops)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNextHopsArraySize</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>a3cb14c09b287d613f26d58ad39fec4d0</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNextHopsArraySize</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>a4037dda18976c8d98ef3f9ed663f8dc7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransportAddress &amp;</type>
      <name>getNextHops</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>a23f57254381410520aaa67dd52b0bc6c</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TransportAddress &amp;</type>
      <name>getNextHops</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>ad3270791f15327ff15af880e3924f9f8</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNextHops</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>a3bce024c4897adfef1f8ad7a645a11ab</anchor>
      <arglist>(unsigned int k, const TransportAddress &amp;nextHops)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getHopStamp</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>a31086f2b50373a749bf986c8ee1bab0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHopStamp</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>aae48f2e4c29aec529e1055743a0e63e4</anchor>
      <arglist>(simtime_t hopStamp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHopDelayArraySize</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>adae1180a932d161a07885217adcf2213</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getHopDelayArraySize</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>ae75d0790b13698bfa9d31e2e2e04983b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getHopDelay</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>aadbcf2336edf7d773dfbd6aec4da7b80</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHopDelay</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>a5e11a0d687b818e45879e33fac3df564</anchor>
      <arglist>(unsigned int k, simtime_t hopDelay)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>aa1cb879eaa602a605bf6fe9dfb5203cf</anchor>
      <arglist>(const BaseRouteMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>destKey_var</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>ae41deb4d41140644caadb1a4861fdaf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>srcNode_var</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>a18892719c5bb2f5ebb3a6e385b35ecc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>routingType_var</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>ab6c0e913370fd796f0818511fba66248</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>hopCount_var</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>a313316a6876c12cd4b93de849bdfa720</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress *</type>
      <name>visitedHops_var</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>a05c177038940946218a7ac7b05448545</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>visitedHops_arraysize</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>a59b8cd0267a3ad46df16b144360050c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress *</type>
      <name>nextHops_var</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>ab53681a069c2d4e54df60671e1feec10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>nextHops_arraysize</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>acc12cd07c2c4bc385609b41bcf9cffed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>hopStamp_var</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>ae536dc63b55bf49795bf6f1af8989d5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t *</type>
      <name>hopDelay_var</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>a8c63aae037e26f03f374a54c52318ddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>hopDelay_arraysize</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>a1afb737d75558e45150f09aee52d4cab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classBaseRouteMessage.html</anchorfile>
      <anchor>ac322bbef7badbb14f769c710e5e7e311</anchor>
      <arglist>(const BaseRouteMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseRpc</name>
    <filename>classBaseRpc.html</filename>
    <base>RpcListener</base>
    <member kind="function">
      <type></type>
      <name>BaseRpc</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>a93a93b4bf743699f18284a8069813b23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const NodeHandle &amp;</type>
      <name>getThisNode</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>ac3f420630d5618e81709c078b06fd9da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getUdpTimeout</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>a83a09d0c12d158ef2e10cc8bf256f254</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>internalHandleRpcCall</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>a45b60cfeaa59a7efafeb5bcbb56f50a5</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>internalHandleRpcResponse</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>ad25a2ad1fb68d2da5d1fab8b577592a4</anchor>
      <arglist>(BaseResponseMessage *msg, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>internalHandleRpcTimeout</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>ae4b1dfdb39322697542e02d3be48a848</anchor>
      <arglist>(BaseCallMessage *msg, const TransportAddress &amp;dest, cPolymorphic *context, int rpcId, const OverlayKey &amp;destKey)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initRpcs</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>a270e68f0d93dfcf9c5f26dbafd0fba54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finishRpcs</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>a02b90067d0a0b630baca5808d7f82b5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>internalHandleRpcMessage</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>a26c06fa9558c497e6dfe1ba6c5153042</anchor>
      <arglist>(BaseRpcMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>sendRouteRpcCall</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>a816918e82652f724c291923e018eabe2</anchor>
      <arglist>(CompType destComp, const TransportAddress &amp;dest, const OverlayKey &amp;destKey, BaseCallMessage *msg, cPolymorphic *context=NULL, RoutingType routingType=DEFAULT_ROUTING, simtime_t timeout=-1, int retries=0, int rpcId=-1, RpcListener *rpcListener=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>sendRouteRpcCall</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>abfb0486832f6f42f6b4e35059bae5d21</anchor>
      <arglist>(CompType destComp, const OverlayKey &amp;destKey, BaseCallMessage *msg, cPolymorphic *context=NULL, RoutingType routingType=DEFAULT_ROUTING, simtime_t timeout=-1, int retries=0, int rpcId=-1, RpcListener *rpcListener=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>sendRouteRpcCall</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>a6da40906ead3bb7faa0782f47385435e</anchor>
      <arglist>(CompType destComp, const TransportAddress &amp;dest, BaseCallMessage *msg, cPolymorphic *context=NULL, RoutingType routingType=DEFAULT_ROUTING, simtime_t timeout=-1, int retries=0, int rpcId=-1, RpcListener *rpcListener=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>sendUdpRpcCall</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>ac128e0ff0d09f81b652f7d3e00ce9441</anchor>
      <arglist>(const TransportAddress &amp;dest, BaseCallMessage *msg, cPolymorphic *context=NULL, simtime_t timeout=-1, int retries=0, int rpcId=-1, RpcListener *rpcListener=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>sendInternalRpcCall</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>a0dea7eed103c0e97176576d6642f7bfa</anchor>
      <arglist>(CompType destComp, BaseCallMessage *msg, cPolymorphic *context=NULL, simtime_t timeout=-1, int retries=0, int rpcId=-1, RpcListener *rpcListener=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cancelRpcMessage</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>aea89bf4704b3859432879853c27fa3e3</anchor>
      <arglist>(uint32_t nonce)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cancelAllRpcs</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>a77fe0a21bb12ab2fb8e27eb719b2d2fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendRpcResponse</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>adc06091d348c98a5efbf54fe0afe8747</anchor>
      <arglist>(TransportType transportType, CompType destComp, const TransportAddress &amp;dest, const OverlayKey &amp;destKey, BaseCallMessage *call, BaseResponseMessage *response)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendRpcResponse</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>af946a132d30ff367e9051f2b62b7bc92</anchor>
      <arglist>(BaseCallMessage *call, BaseResponseMessage *response)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>pingNode</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>a421904b1b501580efed12e6490d3324a</anchor>
      <arglist>(const TransportAddress &amp;dest, simtime_t timeout=-1, int retries=0, cPolymorphic *context=NULL, const char *caption=&quot;PING&quot;, RpcListener *rpcListener=NULL, int rpcId=-1, TransportType transportType=INVALID_TRANSPORT)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>handleRpcCall</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>a20e77c3e0c203762a5b582ffebe3ba4b</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual CompType</type>
      <name>getThisCompType</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>aa76a787b8fbbc33de93646edc67f0e23</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendMessageToUDP</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>abaae7e20b0960e9a90cadd216a2a6126</anchor>
      <arglist>(const TransportAddress &amp;addr, cPacket *message, simtime_t delay=SIMTIME_ZERO)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>pingResponse</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>afdf8ba10dc92ed3d351c8a7472c2093e</anchor>
      <arglist>(PingResponse *pingResponse, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>pingTimeout</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>afd90e156e9aa1dff7e4e99f50b2c9b51</anchor>
      <arglist>(PingCall *pingCall, const TransportAddress &amp;dest, cPolymorphic *context, int rpcId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>internalHandleMessage</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>ad68b7208473ba1301deb59d51f0bba6c</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>thisNode</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>a88eb68c06450fd12ea072f471bf1c1b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseOverlay *</type>
      <name>overlay</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>a9a633ad17071241f981fb76a9678337a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debugOutput</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>aff648eca9051b1f37ea42335b021d672</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GlobalStatistics *</type>
      <name>globalStatistics</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>a9552ba3a2b09c83b3c561e65dab9f23d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CompType</type>
      <name>thisCompType</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>a3edfa69071548f98e78b8669f564953a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NeighborCache *</type>
      <name>neighborCache</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>ad80237130dc2316d0d76ac6757c50f4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CryptoModule *</type>
      <name>cryptoModule</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>a394dcba6b6307c746927bf74fbea33a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numPingSent</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>a16d5d34610391c442e9f9cde71b2518a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bytesPingSent</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>a5653805d9dcb9a53bc240b388e735389</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numPingResponseSent</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>a5f194baa9787f523bdbf6f8639356a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bytesPingResponseSent</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>a8525bc500487a2641a2a947b0d5e1946</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>UNORDERED_MAP&lt; int, RpcState &gt;</type>
      <name>RpcStates</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>ab1d2746aee1698173f6c27155c1e0dff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>ab893c156412e38caa62fe058b229899b</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>uint32_t</type>
      <name>sendRpcCall</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>abf8bd682bf17131b4bc58708b2e7ced2</anchor>
      <arglist>(TransportType transportType, CompType destComp, const TransportAddress &amp;dest, const OverlayKey &amp;destKey, BaseCallMessage *msg, cPolymorphic *context, RoutingType routingType, simtime_t timeout, int retries, int rpcId, RpcListener *rpcListener)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>sendRpcMessageWithTransport</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>adb13716a0ebdfa359f7498f6ba1b8508</anchor>
      <arglist>(TransportType transportType, CompType destComp, RoutingType routingType, const std::vector&lt; TransportAddress &gt; &amp;sourceRoute, const OverlayKey &amp;destKey, BaseRpcMessage *message)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="pure">
      <type>virtual void</type>
      <name>internalSendRouteRpc</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>a2c7d2b7bc0e2b9eef6481c654d57d877</anchor>
      <arglist>(BaseRpcMessage *message, const OverlayKey &amp;destKey, const std::vector&lt; TransportAddress &gt; &amp;sourceRoute, RoutingType routingType)=0</arglist>
    </member>
    <member kind="function" protection="private" virtualness="pure">
      <type>virtual void</type>
      <name>internalSendRpcResponse</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>a8e96c8787fba93dc24c673507152cff3</anchor>
      <arglist>(BaseCallMessage *call, BaseResponseMessage *response)=0</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>pingRpcCall</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>aa398208e1cab8ddbb8df60b73af58597</anchor>
      <arglist>(PingCall *call)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>pingRpcResponse</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>a2042b62345b9f494d01b55ab946eaf48</anchor>
      <arglist>(PingResponse *response, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>pingRpcTimeout</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>a2789009bedea79d85900252a19b23927</anchor>
      <arglist>(PingCall *pingCall, const TransportAddress &amp;dest, cPolymorphic *context, int rpcId)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>rpcsPending</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>af109c565dddd82caff9f4230a8b87e32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RpcListener *</type>
      <name>defaultRpcListener</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>a62d50ea3c4a4d90e309575f8e6bec440</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RpcStates</type>
      <name>rpcStates</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>a406d454a8bc87f85df920ac49fc788b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>rpcUdpTimeout</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>af7f8a9d32155e067464ca8e9c716b74e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>rpcKeyTimeout</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>a0e3d1dc5889337099be6ff9e28b73240</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>optimizeTimeouts</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>a1ac45c35436f95f0717a202b3d0ac9a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>rpcExponentialBackoff</name>
      <anchorfile>classBaseRpc.html</anchorfile>
      <anchor>a0dc0c1443bf9b23da0c0e7d4fc9af41c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseRpcMessage</name>
    <filename>classBaseRpcMessage.html</filename>
    <base>BaseOverlayMessage</base>
    <member kind="function">
      <type></type>
      <name>BaseRpcMessage</name>
      <anchorfile>classBaseRpcMessage.html</anchorfile>
      <anchor>a7d06b2520b3746f0a7e3fa3c6e18ab4e</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseRpcMessage</name>
      <anchorfile>classBaseRpcMessage.html</anchorfile>
      <anchor>a63763a6a6fcf06d4773a6ff755855fc2</anchor>
      <arglist>(const BaseRpcMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseRpcMessage</name>
      <anchorfile>classBaseRpcMessage.html</anchorfile>
      <anchor>ad76e7dc079ed16a49e93458f762b736c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BaseRpcMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classBaseRpcMessage.html</anchorfile>
      <anchor>a9e58ebf65c85eae228cfedf236d08811</anchor>
      <arglist>(const BaseRpcMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseRpcMessage *</type>
      <name>dup</name>
      <anchorfile>classBaseRpcMessage.html</anchorfile>
      <anchor>afb83d420c1fb660c918b07a0a32da332</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classBaseRpcMessage.html</anchorfile>
      <anchor>a76b92a6d2f81c913e9dcce813df048e4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classBaseRpcMessage.html</anchorfile>
      <anchor>af9a2dce0ab9528d55f2741ec395dbfd0</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNonce</name>
      <anchorfile>classBaseRpcMessage.html</anchorfile>
      <anchor>a79f78c32aa4461025a89e8de3bc35702</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNonce</name>
      <anchorfile>classBaseRpcMessage.html</anchorfile>
      <anchor>a91b797f5d9f50b8b3dbbe2270da98f7c</anchor>
      <arglist>(unsigned int nonce)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getSrcNode</name>
      <anchorfile>classBaseRpcMessage.html</anchorfile>
      <anchor>ada3e122125cfb5acc7350277ca69c45a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getSrcNode</name>
      <anchorfile>classBaseRpcMessage.html</anchorfile>
      <anchor>a824cef237eac58f486e0c0a3403c0b04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcNode</name>
      <anchorfile>classBaseRpcMessage.html</anchorfile>
      <anchor>a81ad410e0c78be586d28aa064418fe8d</anchor>
      <arglist>(const NodeHandle &amp;srcNode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAuthBlockArraySize</name>
      <anchorfile>classBaseRpcMessage.html</anchorfile>
      <anchor>abae9fe7e88b18ea3e1d70136df3c78af</anchor>
      <arglist>(uint8_t size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint8_t</type>
      <name>getAuthBlockArraySize</name>
      <anchorfile>classBaseRpcMessage.html</anchorfile>
      <anchor>af182f24fc06f2ced430cdf6eb6918490</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AuthBlock &amp;</type>
      <name>getAuthBlock</name>
      <anchorfile>classBaseRpcMessage.html</anchorfile>
      <anchor>a27bbde809e9b699557a719f91f591de9</anchor>
      <arglist>(uint8_t k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const AuthBlock &amp;</type>
      <name>getAuthBlock</name>
      <anchorfile>classBaseRpcMessage.html</anchorfile>
      <anchor>abebead1ded7580e67b3b56536c4c3dea</anchor>
      <arglist>(uint8_t k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAuthBlock</name>
      <anchorfile>classBaseRpcMessage.html</anchorfile>
      <anchor>ab19e7754641097273cd6a2bec625a591</anchor>
      <arglist>(uint8_t k, const AuthBlock &amp;authBlock)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classBaseRpcMessage.html</anchorfile>
      <anchor>ad5f7c701d35b645f7a67f5ede1bb61bd</anchor>
      <arglist>(const BaseRpcMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>nonce_var</name>
      <anchorfile>classBaseRpcMessage.html</anchorfile>
      <anchor>acfb7994f1c1d62521259f24f1fa679d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>srcNode_var</name>
      <anchorfile>classBaseRpcMessage.html</anchorfile>
      <anchor>a0c140ce623c9717863bcd3e48877e3f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AuthBlock *</type>
      <name>authBlock_var</name>
      <anchorfile>classBaseRpcMessage.html</anchorfile>
      <anchor>a7b0b1ad911641a0949d08e7627648c6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint8_t</type>
      <name>authBlock_arraysize</name>
      <anchorfile>classBaseRpcMessage.html</anchorfile>
      <anchor>a2d91a436fea1b364ab0df91ee3b61f14</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classBaseRpcMessage.html</anchorfile>
      <anchor>afc4eb40a3e06cd592fabe20b3ffaf565</anchor>
      <arglist>(const BaseRpcMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseTcpSupport</name>
    <filename>classBaseTcpSupport.html</filename>
    <member kind="enumeration">
      <name>EvCode</name>
      <anchorfile>classBaseTcpSupport.html</anchorfile>
      <anchor>a310b5ae009665464d964b1d1384eac0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_EST_CONNECTION</name>
      <anchorfile>classBaseTcpSupport.html</anchorfile>
      <anchor>a310b5ae009665464d964b1d1384eac0cabb18399b98b1840fd4a22723532ba4ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PEER_CLOSED</name>
      <anchorfile>classBaseTcpSupport.html</anchorfile>
      <anchor>a310b5ae009665464d964b1d1384eac0ca1e54b254708d5926f4dc33aafba7690f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PEER_TIMEDOUT</name>
      <anchorfile>classBaseTcpSupport.html</anchorfile>
      <anchor>a310b5ae009665464d964b1d1384eac0caf97c65f1e15e6d5fcff01b5d1a163d8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PEER_REFUSED</name>
      <anchorfile>classBaseTcpSupport.html</anchorfile>
      <anchor>a310b5ae009665464d964b1d1384eac0cad633154e9b853f5d9673fddfe7895ab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTION_RESET</name>
      <anchorfile>classBaseTcpSupport.html</anchorfile>
      <anchor>a310b5ae009665464d964b1d1384eac0ca9b57d3b18b5be8f346bcc39c15cb11b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTION_SUCC_ClOSED</name>
      <anchorfile>classBaseTcpSupport.html</anchorfile>
      <anchor>a310b5ae009665464d964b1d1384eac0ca20d037742683e3b4836ea29a0fbd9069</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>socketDataArrived</name>
      <anchorfile>classBaseTcpSupport.html</anchorfile>
      <anchor>a7bb5197716d6ff8b1c5710dec5e311d0</anchor>
      <arglist>(int connId, void *yourPtr, cPacket *msg, bool urgent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>socketEstablished</name>
      <anchorfile>classBaseTcpSupport.html</anchorfile>
      <anchor>a0ed2162dcfac0efb997ebdb326f0dac2</anchor>
      <arglist>(int connId, void *yourPtr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>socketPeerClosed</name>
      <anchorfile>classBaseTcpSupport.html</anchorfile>
      <anchor>a7d969ec0a0ed92ebe9cc5ff5ce0f424c</anchor>
      <arglist>(int connId, void *yourPtr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>socketFailure</name>
      <anchorfile>classBaseTcpSupport.html</anchorfile>
      <anchor>a3c9868297cff55088744c61ae044afec</anchor>
      <arglist>(int connId, void *yourPtr, int code)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>socketStatusArrived</name>
      <anchorfile>classBaseTcpSupport.html</anchorfile>
      <anchor>acddc6342e5d7571f4fe51ba7541c942b</anchor>
      <arglist>(int connId, void *yourPtr, TCPStatusInfo *status)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleTCPMessage</name>
      <anchorfile>classBaseTcpSupport.html</anchorfile>
      <anchor>ac991906514dbe20b4546de49fad67756</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>bindAndListenTcp</name>
      <anchorfile>classBaseTcpSupport.html</anchorfile>
      <anchor>abe1b30dc9b4c5518693bf40f16ef0da9</anchor>
      <arglist>(int port)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isAlreadyConnected</name>
      <anchorfile>classBaseTcpSupport.html</anchorfile>
      <anchor>aea2baeeb4ed02a2357fb48b86e701acd</anchor>
      <arglist>(TransportAddress address)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>establishTcpConnection</name>
      <anchorfile>classBaseTcpSupport.html</anchorfile>
      <anchor>acac86998e57a8180b0aefacadca5e423</anchor>
      <arglist>(TransportAddress address)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendTcpData</name>
      <anchorfile>classBaseTcpSupport.html</anchorfile>
      <anchor>a31897349261520bb2486208a6cf55bb4</anchor>
      <arglist>(cPacket *msg, TransportAddress address)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleConnectionEvent</name>
      <anchorfile>classBaseTcpSupport.html</anchorfile>
      <anchor>abbdca6fbc9e072b221c60de8ad405b3e</anchor>
      <arglist>(EvCode code, TransportAddress address)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDataReceived</name>
      <anchorfile>classBaseTcpSupport.html</anchorfile>
      <anchor>aaf90d587df42ea3f9b2d8d83eb021a59</anchor>
      <arglist>(TransportAddress address, cPacket *msg, bool urgent)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleIncomingConnection</name>
      <anchorfile>classBaseTcpSupport.html</anchorfile>
      <anchor>a925455a09c501c10c4d2fd091b41c5cd</anchor>
      <arglist>(TransportAddress address)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>closeTcpConnection</name>
      <anchorfile>classBaseTcpSupport.html</anchorfile>
      <anchor>ac42b80ae7c06bc38db7570f84ad84770</anchor>
      <arglist>(TransportAddress address)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setTcpOut</name>
      <anchorfile>classBaseTcpSupport.html</anchorfile>
      <anchor>a3de2e8b022586f387fdba1ca42dbdfd1</anchor>
      <arglist>(cGate *gate)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cGate *</type>
      <name>getTcpOut</name>
      <anchorfile>classBaseTcpSupport.html</anchorfile>
      <anchor>a320cb92d402a4154dbcd58df6dd4a2da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; cMessage * &gt;</type>
      <name>msgQueue</name>
      <anchorfile>classBaseTcpSupport.html</anchorfile>
      <anchor>aed5957ca5acb1df42dbe7837027d2409</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::map&lt; TransportAddress, msgQueue * &gt;</type>
      <name>transQueue</name>
      <anchorfile>classBaseTcpSupport.html</anchorfile>
      <anchor>a7009dd7f97f7942e7527770f7f15fa22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ExtTCPSocketMap</type>
      <name>sockets</name>
      <anchorfile>classBaseTcpSupport.html</anchorfile>
      <anchor>aa19d228a41b2952cbfc2ae3e8d6dd289</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>transQueue</type>
      <name>queuedTx</name>
      <anchorfile>classBaseTcpSupport.html</anchorfile>
      <anchor>a08363ee64ea0ec549ebd9e02656b2573</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cGate *</type>
      <name>tcpOut</name>
      <anchorfile>classBaseTcpSupport.html</anchorfile>
      <anchor>a055a6e24f9adb205647f49acd79b5673</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinaryValue</name>
    <filename>classBinaryValue.html</filename>
    <base>std::vector</base>
    <member kind="function">
      <type></type>
      <name>BinaryValue</name>
      <anchorfile>classBinaryValue.html</anchorfile>
      <anchor>a2ccfdb3153b72c63082fe16c4874ea8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryValue</name>
      <anchorfile>classBinaryValue.html</anchorfile>
      <anchor>a09727b7e7a3e174995be3b8e40ee6bd8</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryValue</name>
      <anchorfile>classBinaryValue.html</anchorfile>
      <anchor>a64c98a4f7fb9094ec3de8c15a0a24da9</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryValue</name>
      <anchorfile>classBinaryValue.html</anchorfile>
      <anchor>a2936c401104cd6929a21652dcc639555</anchor>
      <arglist>(const std::vector&lt; char &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryValue</name>
      <anchorfile>classBinaryValue.html</anchorfile>
      <anchor>afa03a91e678c2ef0ee0f8d3874c3b5d1</anchor>
      <arglist>(const char *b, const size_t l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryValue</name>
      <anchorfile>classBinaryValue.html</anchorfile>
      <anchor>a9e0931f7815dd8a4a2a5552d95f10f92</anchor>
      <arglist>(const char *cStr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryValue</name>
      <anchorfile>classBinaryValue.html</anchorfile>
      <anchor>a4f059799d6ea45b38faf3353825eac19</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BinaryValue</name>
      <anchorfile>classBinaryValue.html</anchorfile>
      <anchor>aa7496fe1e585dfbcf3fa0d2faf55d94f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classBinaryValue.html</anchorfile>
      <anchor>a2881eceb77e3a5d0ca1e9ef6424db8a0</anchor>
      <arglist>(const BinaryValue &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>BinaryValue &amp;</type>
      <name>operator+=</name>
      <anchorfile>classBinaryValue.html</anchorfile>
      <anchor>a7e6a8baffd347c8407ecc9873a15b7af</anchor>
      <arglist>(const BinaryValue &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchorfile>classBinaryValue.html</anchorfile>
      <anchor>af28b2e6dcdbaaae53f3b9d582ab8536f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchorfile>classBinaryValue.html</anchorfile>
      <anchor>aa29dcfebf9e4c93cda10d54e35a9666c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>packObject</name>
      <anchorfile>classBinaryValue.html</anchorfile>
      <anchor>aaf0b41dc9b072103e54ca7e2f6936927</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>unpackObject</name>
      <anchorfile>classBinaryValue.html</anchorfile>
      <anchor>a006d61116d8123b4cfeeec9b4a50760c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnspecified</name>
      <anchorfile>classBinaryValue.html</anchorfile>
      <anchor>aec4715605a0c0cc5bf2081dadb8abaa6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const BinaryValue</type>
      <name>UNSPECIFIED_VALUE</name>
      <anchorfile>classBinaryValue.html</anchorfile>
      <anchor>a895c82622c044fbc70da7c18e3ce87b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classBinaryValue.html</anchorfile>
      <anchor>a8ac95ea2336925636853d4ebce1aa8cb</anchor>
      <arglist>(std::ostream &amp;os, const BinaryValue &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinaryValueArray</name>
    <filename>classBinaryValueArray.html</filename>
    <member kind="function">
      <type></type>
      <name>BinaryValueArray</name>
      <anchorfile>classBinaryValueArray.html</anchorfile>
      <anchor>a8dd19ed5081682c78c55afb14a309e5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryValueArray</name>
      <anchorfile>classBinaryValueArray.html</anchorfile>
      <anchor>a3541c61a629e1902d550e688a3d28099</anchor>
      <arglist>(const BinaryValueArray &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BinaryValueArray</name>
      <anchorfile>classBinaryValueArray.html</anchorfile>
      <anchor>a22b5bcb804974c4fd7e1738dde32d54e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BinaryValueArray &amp;</type>
      <name>operator=</name>
      <anchorfile>classBinaryValueArray.html</anchorfile>
      <anchor>a66e7c75817209666435a0316314c02e9</anchor>
      <arglist>(const BinaryValueArray &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BinaryValueArray *</type>
      <name>dup</name>
      <anchorfile>classBinaryValueArray.html</anchorfile>
      <anchor>a5a23d941c34b6830a31140bd6be043a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classBinaryValueArray.html</anchorfile>
      <anchor>ae3da2a0a56192e33d705ab110122488c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classBinaryValueArray.html</anchorfile>
      <anchor>a748b421e0dbf46bc68f9513a5792d6a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValuesArraySize</name>
      <anchorfile>classBinaryValueArray.html</anchorfile>
      <anchor>a13c25df4dcac6602005021f665230fae</anchor>
      <arglist>(uint16_t size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint16_t</type>
      <name>getValuesArraySize</name>
      <anchorfile>classBinaryValueArray.html</anchorfile>
      <anchor>a8b09a700594380a7083fb50f3e0cae78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BinaryValue &amp;</type>
      <name>getValues</name>
      <anchorfile>classBinaryValueArray.html</anchorfile>
      <anchor>ad7e29bde167e31d9479725bc88ada107</anchor>
      <arglist>(uint16_t k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const BinaryValue &amp;</type>
      <name>getValues</name>
      <anchorfile>classBinaryValueArray.html</anchorfile>
      <anchor>a806d165080e08fa8572d31cb97654f1e</anchor>
      <arglist>(uint16_t k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValues</name>
      <anchorfile>classBinaryValueArray.html</anchorfile>
      <anchor>ae9e9c7acd4a26fc5f5d9b96367667532</anchor>
      <arglist>(uint16_t k, const BinaryValue &amp;values)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classBinaryValueArray.html</anchorfile>
      <anchor>a4373717f5f04c7e8a72c74ad1fe608dc</anchor>
      <arglist>(const BinaryValueArray &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BinaryValue *</type>
      <name>values_var</name>
      <anchorfile>classBinaryValueArray.html</anchorfile>
      <anchor>a5f1a7625f164f5405e06b300bf2d5761</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint16_t</type>
      <name>values_arraysize</name>
      <anchorfile>classBinaryValueArray.html</anchorfile>
      <anchor>aebc76afa3bd52a371f4d254e4543396d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classBinaryValueArray.html</anchorfile>
      <anchor>a81ff5a31565884e710e68b10509c29c3</anchor>
      <arglist>(const BinaryValueArray &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BootstrapEntry</name>
    <filename>structBootstrapEntry.html</filename>
    <member kind="variable">
      <type>AddrPerOverlayVector</type>
      <name>addrVector</name>
      <anchorfile>structBootstrapEntry.html</anchorfile>
      <anchor>a57932d6dc7fc1a5f9efa6cba1fd9d42e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PeerInfo *</type>
      <name>info</name>
      <anchorfile>structBootstrapEntry.html</anchorfile>
      <anchor>aa321ff1bb0f71c377760b01a22028532</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>peerVectorIndex</name>
      <anchorfile>structBootstrapEntry.html</anchorfile>
      <anchor>a874ca81377af58d741a07165905a14e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structBootstrapEntry.html</anchorfile>
      <anchor>a25f87d60607790920f57bef66023ca9f</anchor>
      <arglist>(std::ostream &amp;Stream, const BootstrapEntry &amp;entry)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BootstrapList</name>
    <filename>classBootstrapList.html</filename>
    <base>BaseApp</base>
    <member kind="function">
      <type></type>
      <name>BootstrapList</name>
      <anchorfile>classBootstrapList.html</anchorfile>
      <anchor>a9518805c3b5c30363b771ad6b3afbf62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BootstrapList</name>
      <anchorfile>classBootstrapList.html</anchorfile>
      <anchor>a812a4a0f9bdb357b7a412745d78af485</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TransportAddress</type>
      <name>getBootstrapNode</name>
      <anchorfile>classBootstrapList.html</anchorfile>
      <anchor>ac351433be1d43bbf8cbb871e9f9e1f69</anchor>
      <arglist>(int32_t overlayId=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>locateBootstrapNode</name>
      <anchorfile>classBootstrapList.html</anchorfile>
      <anchor>a79698f8c7831d65c159f3ef6104657e9</anchor>
      <arglist>(const NodeHandle &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insertBootstrapCandidate</name>
      <anchorfile>classBootstrapList.html</anchorfile>
      <anchor>a86d64b1912983ab53010770fe3c85b28</anchor>
      <arglist>(const NodeHandle &amp;node, BootstrapNodePrioType prio=DNSSD)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insertBootstrapCandidate</name>
      <anchorfile>classBootstrapList.html</anchorfile>
      <anchor>a66dd8a1e515b110d979c285bb05c8746</anchor>
      <arglist>(BootstrapNodeHandle &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeBootstrapCandidate</name>
      <anchorfile>classBootstrapList.html</anchorfile>
      <anchor>a4c10a655a2e88ae6535efd2a593babdc</anchor>
      <arglist>(const TransportAddress &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeBootstrapNode</name>
      <anchorfile>classBootstrapList.html</anchorfile>
      <anchor>a918cbbc5c592fb9069abba47a50af7c0</anchor>
      <arglist>(const NodeHandle &amp;node, int32_t overlayId=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerBootstrapNode</name>
      <anchorfile>classBootstrapList.html</anchorfile>
      <anchor>a602788717fe7defa84419128764ea517</anchor>
      <arglist>(const NodeHandle &amp;node, int32_t overlayId=0)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>pingResponse</name>
      <anchorfile>classBootstrapList.html</anchorfile>
      <anchor>a3eb9d08b32d70520df0d389731090ec9</anchor>
      <arglist>(PingResponse *pingResponse, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>pingTimeout</name>
      <anchorfile>classBootstrapList.html</anchorfile>
      <anchor>a092a947c1ff84f394e21280413422f88</anchor>
      <arglist>(PingCall *pingCall, const TransportAddress &amp;dest, cPolymorphic *context, int rpcId)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CompType</type>
      <name>getThisCompType</name>
      <anchorfile>classBootstrapList.html</anchorfile>
      <anchor>afc728864c09b313a7386620c7a93e8fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeApp</name>
      <anchorfile>classBootstrapList.html</anchorfile>
      <anchor>a4a17d8ab00df76ffc560cdefe215efdd</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>finishApp</name>
      <anchorfile>classBootstrapList.html</anchorfile>
      <anchor>a36d16559b877109776504bf14e857842</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classBootstrapList.html</anchorfile>
      <anchor>a465386a586f06798cf30460d1c8b89cd</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleBootstrapListTimerExpired</name>
      <anchorfile>classBootstrapList.html</anchorfile>
      <anchor>a32b8169611d2b335c35477a4b0f7bf6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleRpcResponse</name>
      <anchorfile>classBootstrapList.html</anchorfile>
      <anchor>a0c9acb2a493d495172817fa117ba22b8</anchor>
      <arglist>(BaseResponseMessage *msg, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleLookupResponse</name>
      <anchorfile>classBootstrapList.html</anchorfile>
      <anchor>a9ae0f4abe8da6c389ac889591335407c</anchor>
      <arglist>(LookupResponse *msg)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BootstrapNodeSet</type>
      <name>bootstrapList</name>
      <anchorfile>classBootstrapList.html</anchorfile>
      <anchor>a84a0649240989413c998c4f28d058bef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>timerMsg</name>
      <anchorfile>classBootstrapList.html</anchorfile>
      <anchor>a37dfd0340123ec8aaeb7d36a49bad440</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ZeroconfConnector *</type>
      <name>zeroconfConnector</name>
      <anchorfile>classBootstrapList.html</anchorfile>
      <anchor>a40d8f1f978f4272b654199d0a642e708</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mergeOverlayPartitions</name>
      <anchorfile>classBootstrapList.html</anchorfile>
      <anchor>a59d4c29e9646b9b23326e8ced1e4941f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>maintainList</name>
      <anchorfile>classBootstrapList.html</anchorfile>
      <anchor>a27e19ec0c850933b931fd2f4ca75e500</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const int</type>
      <name>timerInterval</name>
      <anchorfile>classBootstrapList.html</anchorfile>
      <anchor>ad2b316633621b5c9aa0886d042ace1c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BootstrapLookupMessage</name>
    <filename>classBootstrapLookupMessage.html</filename>
    <base>BaseOverlayMessage</base>
    <member kind="function">
      <type></type>
      <name>BootstrapLookupMessage</name>
      <anchorfile>classBootstrapLookupMessage.html</anchorfile>
      <anchor>a3bd20c9d3e1feef4eb5b0cef90fdf488</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BootstrapLookupMessage</name>
      <anchorfile>classBootstrapLookupMessage.html</anchorfile>
      <anchor>abb520c5caef6c4269f3bfdc1b837d805</anchor>
      <arglist>(const BootstrapLookupMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BootstrapLookupMessage</name>
      <anchorfile>classBootstrapLookupMessage.html</anchorfile>
      <anchor>a4c976ac66c7b19b50393bd9197b516d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BootstrapLookupMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classBootstrapLookupMessage.html</anchorfile>
      <anchor>a9bdb32e32db2db45aa6eb21d7924e8a1</anchor>
      <arglist>(const BootstrapLookupMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BootstrapLookupMessage *</type>
      <name>dup</name>
      <anchorfile>classBootstrapLookupMessage.html</anchorfile>
      <anchor>a21744453c2fb3287e95dc913f0536b00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classBootstrapLookupMessage.html</anchorfile>
      <anchor>ae973e8f502ad1ada8a1e9033a02743e3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classBootstrapLookupMessage.html</anchorfile>
      <anchor>aca9b30d191061fd7d251022e6f86964a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classBootstrapLookupMessage.html</anchorfile>
      <anchor>a01007090edd6e5236ea520843121c0c7</anchor>
      <arglist>(const BootstrapLookupMessage &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classBootstrapLookupMessage.html</anchorfile>
      <anchor>afb5712ec6b13bc1a38624f294f1f7b6d</anchor>
      <arglist>(const BootstrapLookupMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BootstrapNodeHandle</name>
    <filename>classBootstrapNodeHandle.html</filename>
    <base>NodeHandle</base>
    <member kind="function">
      <type></type>
      <name>BootstrapNodeHandle</name>
      <anchorfile>classBootstrapNodeHandle.html</anchorfile>
      <anchor>aefa584f4cbca7da40f506c0984fe43fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BootstrapNodeHandle</name>
      <anchorfile>classBootstrapNodeHandle.html</anchorfile>
      <anchor>a0027c090cb88016b3580c161001bb972</anchor>
      <arglist>(const BootstrapNodeHandle &amp;handle)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BootstrapNodeHandle</name>
      <anchorfile>classBootstrapNodeHandle.html</anchorfile>
      <anchor>a39567a62616e9cc4ee45fac5f74c6a35</anchor>
      <arglist>(const NodeHandle &amp;handle, BootstrapNodePrioType prio=CACHE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BootstrapNodeHandle</name>
      <anchorfile>classBootstrapNodeHandle.html</anchorfile>
      <anchor>a04e206e9043100e55b6674c2b0de3fa0</anchor>
      <arglist>(const OverlayKey &amp;key, const IPvXAddress &amp;ip, int port, BootstrapNodePrioType prio=CACHE)</arglist>
    </member>
    <member kind="function">
      <type>BootstrapNodePrioType</type>
      <name>getNodePrio</name>
      <anchorfile>classBootstrapNodeHandle.html</anchorfile>
      <anchor>aa084201452845297ea8497e2fbc12929</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodePrio</name>
      <anchorfile>classBootstrapNodeHandle.html</anchorfile>
      <anchor>a9d7355ea3c9b6de78848c1c01a37f2f5</anchor>
      <arglist>(BootstrapNodePrioType nodePrio)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getLastPing</name>
      <anchorfile>classBootstrapNodeHandle.html</anchorfile>
      <anchor>a8474a2bed3ba1e4eb5a5588ef056802e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLastPing</name>
      <anchorfile>classBootstrapNodeHandle.html</anchorfile>
      <anchor>a4ed6dba23c1020820e2a4429e27277d8</anchor>
      <arglist>(simtime_t lastPing)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BootstrapNodePrioType</type>
      <name>nodePrio</name>
      <anchorfile>classBootstrapNodeHandle.html</anchorfile>
      <anchor>abe884c8f9e87860b3394eb3fd8737288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>lastPing</name>
      <anchorfile>classBootstrapNodeHandle.html</anchorfile>
      <anchor>ac1bdb8ffc5fa1ee1df5a4bad490f0f20</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BoundingBox2D</name>
    <filename>classBoundingBox2D.html</filename>
    <member kind="function">
      <type></type>
      <name>BoundingBox2D</name>
      <anchorfile>classBoundingBox2D.html</anchorfile>
      <anchor>a69088290f0ecb01135c3f39fe8873b33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundingBox2D</name>
      <anchorfile>classBoundingBox2D.html</anchorfile>
      <anchor>ae273529e4439faf726c8ecfdb14b1afc</anchor>
      <arglist>(Vector2D tl, Vector2D br)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundingBox2D</name>
      <anchorfile>classBoundingBox2D.html</anchorfile>
      <anchor>a1c9963ba45db87e26631137d63d5d9e5</anchor>
      <arglist>(double tlx, double tly, double brx, double bry)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundingBox2D</name>
      <anchorfile>classBoundingBox2D.html</anchorfile>
      <anchor>a06d0422cf12f79cbab34332d1569fbf1</anchor>
      <arglist>(Vector2D center, double width)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>collide</name>
      <anchorfile>classBoundingBox2D.html</anchorfile>
      <anchor>a2749bbf03105972272863fff598967d3</anchor>
      <arglist>(const BoundingBox2D box) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>collide</name>
      <anchorfile>classBoundingBox2D.html</anchorfile>
      <anchor>a64d5235b47665bad38861230534c6720</anchor>
      <arglist>(const Vector2D p) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>top</name>
      <anchorfile>classBoundingBox2D.html</anchorfile>
      <anchor>aa0c4e02504b85bec5dd7e0b2302c6dc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>bottom</name>
      <anchorfile>classBoundingBox2D.html</anchorfile>
      <anchor>acf05963d656347f6cd960d21994d8d8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>left</name>
      <anchorfile>classBoundingBox2D.html</anchorfile>
      <anchor>a25337c1b09dc5ed657090d97472112bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>right</name>
      <anchorfile>classBoundingBox2D.html</anchorfile>
      <anchor>af6d3fbc9727c39a7a4ce815cdcb1b76c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Vector2D</type>
      <name>tl</name>
      <anchorfile>classBoundingBox2D.html</anchorfile>
      <anchor>a6caf4cdf91ae907be9736432e0bbefcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector2D</type>
      <name>br</name>
      <anchorfile>classBoundingBox2D.html</anchorfile>
      <anchor>a371013b0bac59992789550df73fce897</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classBoundingBox2D.html</anchorfile>
      <anchor>aed9064a5f8511f7ad85e60fdf8a5b0c7</anchor>
      <arglist>(std::ostream &amp;Stream, const BoundingBox2D &amp;box)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Broose</name>
    <filename>classBroose.html</filename>
    <base>BaseOverlay</base>
    <member kind="function">
      <type></type>
      <name>Broose</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>acfbf2b4f5696183209f9d0546e772821</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Broose</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a3b0bca5bf25266faf0ffe7194f322805</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeOverlay</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a98565a4675febbe6e107e4c49dc58450</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finishOverlay</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a612a233a588034ad82589aab7769e196</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSiblingFor</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a40ebbf7442175faf9f71527d297f2834</anchor>
      <arglist>(const NodeHandle &amp;node, const OverlayKey &amp;key, int numSiblings, bool *err)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>joinOverlay</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a6e8d0813889738a8c12c47cce18586e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordOverlaySentStats</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>aa1c5b32d5a8043dedb9e541d7d6a106a</anchor>
      <arglist>(BaseOverlayMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>handleRpcCall</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a9ff73fadcd26b7b793020517d5d248c0</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>ac0e5eb20a2e995afeccc2b35a8e97967</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateTooltip</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a96653c170474659145bbdeae4c8a6ca3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleJoinTimerExpired</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a2c835e754977b5781ca74d9da3470721</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleBucketTimerExpired</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a1077711ecf1d2da2cd87ab71766d2ade</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getRoutingDistance</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a2f8c758024a30b07ed271accebebd288</anchor>
      <arglist>(const OverlayKey &amp;key, const OverlayKey &amp;node, int dist)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>routingAdd</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a265144e492745b2832eb6758cbf6385d</anchor>
      <arglist>(const NodeHandle &amp;node, bool isAlive, simtime_t rtt=MAXTIME)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>changeState</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a14b5e34e7b68ef3dcd588ca67e477e51</anchor>
      <arglist>(int state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeVector *</type>
      <name>findNode</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a7af9754f05bb7e0e7a53a9334ada5784</anchor>
      <arglist>(const OverlayKey &amp;key, int numRedundantNodes, int numSiblings, BaseOverlayMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getMaxNumSiblings</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>ade0172a588daa00efd1a0db945579047</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getMaxNumRedundantNodes</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a510ec0b3d3378fc4ebb2a276cdff829b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>displayBucketState</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a68de6c368892f19883e1ecd3db10ae5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleRpcResponse</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a374f84f156f25252dfe3fca84e29ccae</anchor>
      <arglist>(BaseResponseMessage *msg, const RpcState &amp;rpcState, simtime_t rtt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleRpcTimeout</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a1f57a7b9ea934f2577f0336ce3530998</anchor>
      <arglist>(const RpcState &amp;rpcState)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleFindNodeTimeout</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>ac10bba057753a16f4bac89ee8063f5da</anchor>
      <arglist>(FindNodeCall *findNode, const TransportAddress &amp;dest, const OverlayKey &amp;destKey)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleBucketRequestRpc</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a64365d561848d0f9be471ac2c6588d36</anchor>
      <arglist>(BucketCall *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleBucketResponseRpc</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a2479baebf247d26c2cb9171104932b8e</anchor>
      <arglist>(BucketResponse *msg, const RpcState &amp;rpcState)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleBucketTimeout</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>ac2bee9148a5c6f7858f1ce900fd8205e</anchor>
      <arglist>(BucketCall *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>routingTimeout</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a813367dd5a82aad256a0cff55192e8eb</anchor>
      <arglist>(const BrooseHandle &amp;handle)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>pingResponse</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a0e74d664db69ad2cefde9d3443a36cc6</anchor>
      <arglist>(PingResponse *pingResponse, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>pingTimeout</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>aa089c2853d648b0009fcf501f8ec8c7f</anchor>
      <arglist>(PingCall *pingCall, const TransportAddress &amp;dest, cPolymorphic *context, int rpcId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setLastSeen</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>afd491170a7241cc14745d18aa2cd904b</anchor>
      <arglist>(const NodeHandle &amp;node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addNode</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>adfc7024ff64b930082b0635a95f4d9e4</anchor>
      <arglist>(const NodeHandle &amp;node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resetFailedResponses</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a1832a98eeba497ade89b8081d4030ca8</anchor>
      <arglist>(const NodeHandle &amp;node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setRTT</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a639a843adbe84e396a016a29c165133e</anchor>
      <arglist>(const NodeHandle &amp;node, simtime_t rtt)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>chooseLookup</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a3e1bb89f2b86d107d0cbe08903f1591a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>joinDelay</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>ad55f92653a0890957d51d709334934db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>receivedJoinResponse</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>abec6e84f1003daab645f301b62b743dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>receivedBBucketLookup</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a2478813cd5f204f9acf543af839d8cf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numberBBucketLookup</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a224b9c0c4224c8616baf9a7d1215d008</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>receivedLBucketLookup</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>afba56946f8381bc639b4be08802f82a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numberLBucketLookup</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a7dd130326a6147f64465f509c1373f3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>shiftingBits</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a2ba4078c7fc64338d75798beec808c53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>powShiftingBits</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a64c8b15959539f76effe20c7a2fb605e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>bucketSize</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a9376acda2ea0dc2012b868eec0813d6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>rBucketSize</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a5797b25e931a407a62e9ec12b5107136</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>keyLength</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a913ebd156f864f848f044466ea2279fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>refreshTime</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>aabecab5487074574f3d24575abcbbb6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>userDist</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a374530e57a3906d1094c755c45794ba3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numberRetries</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a57652869a1fdae22b834a25a81cb1602</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bucketRetries</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>ad82a8d9dd1024868b19f5d7fa9ee7b6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>stab1</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a5aabb67b0639701f115b58dc57593eda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>stab2</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a9598a069920f5a2943b31107100a2c06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bucketCount</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a7f436170dc33d8639ce776ba2f778a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bucketBytesSent</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>abbe713ffb241ad11e401343889d1359b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numFailedPackets</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>afc5b65d8a797fc49d8568ed7d20e8db4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BrooseBucket *</type>
      <name>lBucket</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>ae53864d71461e617e88ec1780d9793ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BrooseBucket *</type>
      <name>bBucket</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>ab073f1150e2148dae1f909bf470abdfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BrooseBucket **</type>
      <name>rBucket</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a12388519b4d2f59982458400beff3058</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; BrooseBucket * &gt;</type>
      <name>bucketVector</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>adcf7289c37c2df82620db0712d74e80a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>join_timer</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a6456e3b9729a4a8136e7bdbf5a8a6bba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>bucket_timer</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>ab7113ef5ed2cf38e0d1001f5653665fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress</type>
      <name>bootstrapNode</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>a61cf782a04f16846285e5705d2c634fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>BrooseBucket</name>
      <anchorfile>classBroose.html</anchorfile>
      <anchor>acfe9d5a8bc85e9622bfad7f3a9b33a6e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BrooseBucket</name>
    <filename>classBrooseBucket.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classBrooseBucket.html</anchorfile>
      <anchor>ac8468dc57593e809e4362cc0bbbb3e63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classBrooseBucket.html</anchorfile>
      <anchor>a1b8760734d3256ddd60f23ae320cc6fb</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classBrooseBucket.html</anchorfile>
      <anchor>adb4c96964f6a4d809afd2ca4c592fa54</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>add</name>
      <anchorfile>classBrooseBucket.html</anchorfile>
      <anchor>ab3f7ae9d8575f049bc3ce6f501177f0c</anchor>
      <arglist>(const NodeHandle &amp;node, bool isAlive=false, simtime_t rtt=MAXTIME)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>remove</name>
      <anchorfile>classBrooseBucket.html</anchorfile>
      <anchor>a50ad3ce17211146fd8c0578785657329</anchor>
      <arglist>(const NodeHandle &amp;node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const BrooseHandle &amp;</type>
      <name>get</name>
      <anchorfile>classBrooseBucket.html</anchorfile>
      <anchor>a9031c9a358274b8192b454a27eb0845e</anchor>
      <arglist>(uint32_t pos=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getDist</name>
      <anchorfile>classBrooseBucket.html</anchorfile>
      <anchor>a0a4bcfcd43ee102441c40ab1759b4577</anchor>
      <arglist>(uint32_t pos=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeBucket</name>
      <anchorfile>classBrooseBucket.html</anchorfile>
      <anchor>ac54c82db0009034bcbf028c86ae8045a</anchor>
      <arglist>(int shiftingBits, uint32_t prefix, int size, Broose *overlay, bool isBBucket=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>getSize</name>
      <anchorfile>classBrooseBucket.html</anchorfile>
      <anchor>a7ef01cbcf70e7e8621793c8e94fa5198</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>getMaxSize</name>
      <anchorfile>classBrooseBucket.html</anchorfile>
      <anchor>a35b04abecbac484006b418f473676eef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fillVector</name>
      <anchorfile>classBrooseBucket.html</anchorfile>
      <anchor>ad7660a8ba5d3b149b6527d62d4463992</anchor>
      <arglist>(NodeVector *result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEmpty</name>
      <anchorfile>classBrooseBucket.html</anchorfile>
      <anchor>ae8274152a290f1c2f4742247b7ebac1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classBrooseBucket.html</anchorfile>
      <anchor>a99f6ce9da1a79cd0b2fc836f349e7fb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>longestPrefix</name>
      <anchorfile>classBrooseBucket.html</anchorfile>
      <anchor>a2d88afb81dcde808497154440afa3e31</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>keyInRange</name>
      <anchorfile>classBrooseBucket.html</anchorfile>
      <anchor>a55406f32d897b2a98d46714ae5503c75</anchor>
      <arglist>(const OverlayKey &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPos</name>
      <anchorfile>classBrooseBucket.html</anchorfile>
      <anchor>a4b3c8454b420e4436f1583c5352fdb60</anchor>
      <arglist>(const NodeHandle &amp;node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getFailedResponses</name>
      <anchorfile>classBrooseBucket.html</anchorfile>
      <anchor>a7bd4cb152df5672984ee7ffdda3909dd</anchor>
      <arglist>(const NodeHandle &amp;node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>increaseFailedResponses</name>
      <anchorfile>classBrooseBucket.html</anchorfile>
      <anchor>a483c487826ea2c516c2315805440a5db</anchor>
      <arglist>(const NodeHandle &amp;node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetFailedResponses</name>
      <anchorfile>classBrooseBucket.html</anchorfile>
      <anchor>a3465b39e3c818ef3a0191075b36402c6</anchor>
      <arglist>(const NodeHandle &amp;node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRTT</name>
      <anchorfile>classBrooseBucket.html</anchorfile>
      <anchor>afd6835872cc381fe1413d5271c79a9b9</anchor>
      <arglist>(const NodeHandle &amp;node, simtime_t rpcRTT)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getRTT</name>
      <anchorfile>classBrooseBucket.html</anchorfile>
      <anchor>a73ea2f0a4f52ecc4cfeb47dc77147f6e</anchor>
      <arglist>(const NodeHandle &amp;node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLastSeen</name>
      <anchorfile>classBrooseBucket.html</anchorfile>
      <anchor>a70a7fc43743e8fd730f5bb93ce733e83</anchor>
      <arglist>(const NodeHandle &amp;node, simtime_t lastSeen)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getLastSeen</name>
      <anchorfile>classBrooseBucket.html</anchorfile>
      <anchor>a4f62a74b8fc7c8f17eb7e07343db0331</anchor>
      <arglist>(const NodeHandle &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>output</name>
      <anchorfile>classBrooseBucket.html</anchorfile>
      <anchor>a3fdf948ac302e39c0a090d2c0f50971f</anchor>
      <arglist>(int maxEntries=0)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; OverlayKey, BrooseHandle &gt;</type>
      <name>bucket</name>
      <anchorfile>classBrooseBucket.html</anchorfile>
      <anchor>a52a79c3de2ffdb1f99fe4328d897afdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; OverlayKey, BrooseHandle &gt;::iterator</type>
      <name>bucketIter</name>
      <anchorfile>classBrooseBucket.html</anchorfile>
      <anchor>a01eeb33ef95febafe71491de81d3c5fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxSize</name>
      <anchorfile>classBrooseBucket.html</anchorfile>
      <anchor>a25326d043204f496daf9fe59ce681d1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>key</name>
      <anchorfile>classBrooseBucket.html</anchorfile>
      <anchor>a234c8e4b06ff48a89452814ac445dc0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Broose *</type>
      <name>overlay</name>
      <anchorfile>classBrooseBucket.html</anchorfile>
      <anchor>a37a1e283f84e49831f7ebcb3d2fe49bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isBBucket</name>
      <anchorfile>classBrooseBucket.html</anchorfile>
      <anchor>ab165b749cffab62da18085acdbb7ae61</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BrooseFindNodeExtMessage</name>
    <filename>classBrooseFindNodeExtMessage.html</filename>
    <member kind="function">
      <type></type>
      <name>BrooseFindNodeExtMessage</name>
      <anchorfile>classBrooseFindNodeExtMessage.html</anchorfile>
      <anchor>a6c01ae118fbed67cf88bc7d44ce8fad8</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BrooseFindNodeExtMessage</name>
      <anchorfile>classBrooseFindNodeExtMessage.html</anchorfile>
      <anchor>a06b4fc94638093b8eb9b69d8738c9e5f</anchor>
      <arglist>(const BrooseFindNodeExtMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BrooseFindNodeExtMessage</name>
      <anchorfile>classBrooseFindNodeExtMessage.html</anchorfile>
      <anchor>adc884b87712f52eb80d4565f721e34bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BrooseFindNodeExtMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classBrooseFindNodeExtMessage.html</anchorfile>
      <anchor>afcf0b19e6323db3a42c4da144a9b613c</anchor>
      <arglist>(const BrooseFindNodeExtMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BrooseFindNodeExtMessage *</type>
      <name>dup</name>
      <anchorfile>classBrooseFindNodeExtMessage.html</anchorfile>
      <anchor>a75ed582bb831cfcce67e2888bde31c1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classBrooseFindNodeExtMessage.html</anchorfile>
      <anchor>a35e5258890300c8ba35bdd4f9c0aeafa</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classBrooseFindNodeExtMessage.html</anchorfile>
      <anchor>acdbca938c6955b1a6826f73da7a24ff9</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getRouteKey</name>
      <anchorfile>classBrooseFindNodeExtMessage.html</anchorfile>
      <anchor>a09524aea04bc42a759d3c97786521094</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getRouteKey</name>
      <anchorfile>classBrooseFindNodeExtMessage.html</anchorfile>
      <anchor>a9951fd1ceb74ee19b9b5412dcd93f53d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRouteKey</name>
      <anchorfile>classBrooseFindNodeExtMessage.html</anchorfile>
      <anchor>aae996c7e18f5f61f4e631b2a63a7a33b</anchor>
      <arglist>(const OverlayKey &amp;routeKey)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getStep</name>
      <anchorfile>classBrooseFindNodeExtMessage.html</anchorfile>
      <anchor>a3be6649aae39d09d4ee64f52b6d3cf2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStep</name>
      <anchorfile>classBrooseFindNodeExtMessage.html</anchorfile>
      <anchor>a32255169d451507c9a851813469d880b</anchor>
      <arglist>(int step)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getMaxDistance</name>
      <anchorfile>classBrooseFindNodeExtMessage.html</anchorfile>
      <anchor>ab5f1846b483894df0e36b581fd0df980</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMaxDistance</name>
      <anchorfile>classBrooseFindNodeExtMessage.html</anchorfile>
      <anchor>a117959e63891126094e11bf9439cedaf</anchor>
      <arglist>(int maxDistance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getRightShifting</name>
      <anchorfile>classBrooseFindNodeExtMessage.html</anchorfile>
      <anchor>ae7e0659698a926c65992d073a73004bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRightShifting</name>
      <anchorfile>classBrooseFindNodeExtMessage.html</anchorfile>
      <anchor>ac7b7626c4fe39706eed608b7473f72cc</anchor>
      <arglist>(bool rightShifting)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getLastNode</name>
      <anchorfile>classBrooseFindNodeExtMessage.html</anchorfile>
      <anchor>a4645c8c25ebba1bdf48fd9f2919720ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getLastNode</name>
      <anchorfile>classBrooseFindNodeExtMessage.html</anchorfile>
      <anchor>a65541b69e7104d31c66f44c6537ca68e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLastNode</name>
      <anchorfile>classBrooseFindNodeExtMessage.html</anchorfile>
      <anchor>a1045ab713622587d65f1f5b700f8983a</anchor>
      <arglist>(const NodeHandle &amp;lastNode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classBrooseFindNodeExtMessage.html</anchorfile>
      <anchor>af21d06264a8d45fd54e7dd5ce88467d2</anchor>
      <arglist>(const BrooseFindNodeExtMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>routeKey_var</name>
      <anchorfile>classBrooseFindNodeExtMessage.html</anchorfile>
      <anchor>ad0abd2bc115f126b9acd8a7cd393e262</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>step_var</name>
      <anchorfile>classBrooseFindNodeExtMessage.html</anchorfile>
      <anchor>a1a42cc2f0bfb2f4f18e6f595ef791a5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>maxDistance_var</name>
      <anchorfile>classBrooseFindNodeExtMessage.html</anchorfile>
      <anchor>a1ac5d1718c31ddca0bd74e9a810fe679</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>rightShifting_var</name>
      <anchorfile>classBrooseFindNodeExtMessage.html</anchorfile>
      <anchor>a4b1472b020df46a4a7776a5fb68223c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>lastNode_var</name>
      <anchorfile>classBrooseFindNodeExtMessage.html</anchorfile>
      <anchor>a4c125fb3a5072329aabcb2d71acc336c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classBrooseFindNodeExtMessage.html</anchorfile>
      <anchor>a40e0be39df93be8620ecfea1f9e2404d</anchor>
      <arglist>(const BrooseFindNodeExtMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BrooseHandle</name>
    <filename>classBrooseHandle.html</filename>
    <base>NodeHandle</base>
    <member kind="function">
      <type></type>
      <name>BrooseHandle</name>
      <anchorfile>classBrooseHandle.html</anchorfile>
      <anchor>adcbf96dc67dfee7a1d355613b703d2e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BrooseHandle</name>
      <anchorfile>classBrooseHandle.html</anchorfile>
      <anchor>a39a01e6ced8d74c8d007d403d3a70491</anchor>
      <arglist>(OverlayKey initKey, IPvXAddress initIP, int initPort)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BrooseHandle</name>
      <anchorfile>classBrooseHandle.html</anchorfile>
      <anchor>a8e75353bc74aab07420350a1d1a4b72b</anchor>
      <arglist>(const NodeHandle &amp;node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BrooseHandle</name>
      <anchorfile>classBrooseHandle.html</anchorfile>
      <anchor>abdbb28d62830f49be67ad0a4155251e1</anchor>
      <arglist>(const TransportAddress &amp;node, const OverlayKey &amp;destKey)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classBrooseHandle.html</anchorfile>
      <anchor>a725563831a9d13d0298c02d7fb8be716</anchor>
      <arglist>(const BrooseHandle &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classBrooseHandle.html</anchorfile>
      <anchor>a08c8b9da2a23aa52279eef791e2c1cf7</anchor>
      <arglist>(const BrooseHandle &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>BrooseHandle &amp;</type>
      <name>operator=</name>
      <anchorfile>classBrooseHandle.html</anchorfile>
      <anchor>af34bc779b34c28948d29399ff7da93a0</anchor>
      <arglist>(const BrooseHandle &amp;rhs)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BrooseHandle &amp;</type>
      <name>unspecifiedNode</name>
      <anchorfile>classBrooseHandle.html</anchorfile>
      <anchor>a62aae34447593ff3b5f7f31ef539cb93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>failedResponses</name>
      <anchorfile>classBrooseHandle.html</anchorfile>
      <anchor>a70b68717415d8ada4dfee0e8e03490ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>rtt</name>
      <anchorfile>classBrooseHandle.html</anchorfile>
      <anchor>ae2f2b80d9db3587111fad85b0e8c156f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>lastSeen</name>
      <anchorfile>classBrooseHandle.html</anchorfile>
      <anchor>a3eeb560ce2d2503eab6682147bde2bf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const BrooseHandle *</type>
      <name>_unspecifiedNode</name>
      <anchorfile>classBrooseHandle.html</anchorfile>
      <anchor>af1840163c449e9d6b2cc48b1018e1c90</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classBrooseHandle.html</anchorfile>
      <anchor>a64dd49711335877d9c0983d48fc63959</anchor>
      <arglist>(std::ostream &amp;os, const BrooseHandle &amp;n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BrooseLookupListener</name>
    <filename>classBrooseLookupListener.html</filename>
    <base>LookupListener</base>
    <member kind="function">
      <type></type>
      <name>BrooseLookupListener</name>
      <anchorfile>classBrooseLookupListener.html</anchorfile>
      <anchor>ab2655dab334af24a378e56bf30a82acd</anchor>
      <arglist>(Broose *overlay)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lookupFinished</name>
      <anchorfile>classBrooseLookupListener.html</anchorfile>
      <anchor>a660df5312183541a9f8e36db3afad132</anchor>
      <arglist>(AbstractLookup *lookup)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Broose *</type>
      <name>overlay</name>
      <anchorfile>classBrooseLookupListener.html</anchorfile>
      <anchor>a5368aab1d810754eaa80d22be08e3ee7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BucketCall</name>
    <filename>classBucketCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>BucketCall</name>
      <anchorfile>classBucketCall.html</anchorfile>
      <anchor>ac85ba1e62e21787e2d00040fbd3a645f</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BucketCall</name>
      <anchorfile>classBucketCall.html</anchorfile>
      <anchor>ac54f364adcec1a99570fc3990165bcb5</anchor>
      <arglist>(const BucketCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BucketCall</name>
      <anchorfile>classBucketCall.html</anchorfile>
      <anchor>a049f9657a56c4e795aa372c717b3bb2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BucketCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classBucketCall.html</anchorfile>
      <anchor>a120b24fc00eb862cd11f070b094d08db</anchor>
      <arglist>(const BucketCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BucketCall *</type>
      <name>dup</name>
      <anchorfile>classBucketCall.html</anchorfile>
      <anchor>a7a49d180a27921e5abca825ef815d785</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classBucketCall.html</anchorfile>
      <anchor>a6a52be25d4d6cb1ea98975d794420153</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classBucketCall.html</anchorfile>
      <anchor>a2f6d28d69c41253188d20b07abf36da3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getBucketType</name>
      <anchorfile>classBucketCall.html</anchorfile>
      <anchor>a83d606b3bf9fdc48c709b10242a5c9ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBucketType</name>
      <anchorfile>classBucketCall.html</anchorfile>
      <anchor>ab04b51e392e17924454bb4e5a1f9368a</anchor>
      <arglist>(int bucketType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getBucketIndex</name>
      <anchorfile>classBucketCall.html</anchorfile>
      <anchor>a184155e96b5d9ab84215d3ff3c8546b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBucketIndex</name>
      <anchorfile>classBucketCall.html</anchorfile>
      <anchor>a4995fef3fcda1932032d869b4b0882d6</anchor>
      <arglist>(int bucketIndex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getProState</name>
      <anchorfile>classBucketCall.html</anchorfile>
      <anchor>af28e5a564ef2cc1d07e9031401457412</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProState</name>
      <anchorfile>classBucketCall.html</anchorfile>
      <anchor>ab2256565d62dea3e984dee2c51bfa7f1</anchor>
      <arglist>(int proState)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classBucketCall.html</anchorfile>
      <anchor>a33be775d647b9d241ba72056be3c760c</anchor>
      <arglist>(const BucketCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bucketType_var</name>
      <anchorfile>classBucketCall.html</anchorfile>
      <anchor>aa455ca6d7eabc583df2fb0ec7ed1b1cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bucketIndex_var</name>
      <anchorfile>classBucketCall.html</anchorfile>
      <anchor>a53c1982cc59df1d97a3d42c760f743ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>proState_var</name>
      <anchorfile>classBucketCall.html</anchorfile>
      <anchor>acf2d31d609c9f7fb351d1b7e4759ca16</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classBucketCall.html</anchorfile>
      <anchor>ac7eb7036353646af888be0ab4ffdf5fc</anchor>
      <arglist>(const BucketCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BucketResponse</name>
    <filename>classBucketResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>BucketResponse</name>
      <anchorfile>classBucketResponse.html</anchorfile>
      <anchor>a6fc19651de83553b88943041fbdda905</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BucketResponse</name>
      <anchorfile>classBucketResponse.html</anchorfile>
      <anchor>ac8bd08d372e95570da33e5aa64c40fc2</anchor>
      <arglist>(const BucketResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BucketResponse</name>
      <anchorfile>classBucketResponse.html</anchorfile>
      <anchor>a35b183bcfb089d0e502bbc4e7c2eb3cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BucketResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classBucketResponse.html</anchorfile>
      <anchor>a4c63471260c697c06c98c896107e3786</anchor>
      <arglist>(const BucketResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BucketResponse *</type>
      <name>dup</name>
      <anchorfile>classBucketResponse.html</anchorfile>
      <anchor>ad1747047e425b30034125014015db8d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classBucketResponse.html</anchorfile>
      <anchor>a6c625aa3456e4ff717e5b06be127becc</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classBucketResponse.html</anchorfile>
      <anchor>a7880b524c8960fa024e7ea81f9f771e0</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNodesArraySize</name>
      <anchorfile>classBucketResponse.html</anchorfile>
      <anchor>a9a885b9b8d73756a0a8a84f8f96ef692</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNodesArraySize</name>
      <anchorfile>classBucketResponse.html</anchorfile>
      <anchor>ad88cd01819cf77f82a6987fa369e09bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getNodes</name>
      <anchorfile>classBucketResponse.html</anchorfile>
      <anchor>a35736a02a4810f57725e861449e7bb5b</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getNodes</name>
      <anchorfile>classBucketResponse.html</anchorfile>
      <anchor>a0ec83c3c74891a2aa63dee65d81150a6</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNodes</name>
      <anchorfile>classBucketResponse.html</anchorfile>
      <anchor>a7526129142469cbf7a82b57b83bf1fc0</anchor>
      <arglist>(unsigned int k, const NodeHandle &amp;nodes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classBucketResponse.html</anchorfile>
      <anchor>ad43553e2dd135e8c15ae2f7220de6d70</anchor>
      <arglist>(const BucketResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle *</type>
      <name>nodes_var</name>
      <anchorfile>classBucketResponse.html</anchorfile>
      <anchor>a84dbc444173b749639f53c572713910f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>nodes_arraysize</name>
      <anchorfile>classBucketResponse.html</anchorfile>
      <anchor>ab1795a9c8715e9870ed94e83213f1686</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classBucketResponse.html</anchorfile>
      <anchor>ab77e2736a90b9352ce7ae8abf0ef05dd</anchor>
      <arglist>(const BucketResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CapReqCall</name>
    <filename>classCapReqCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>CapReqCall</name>
      <anchorfile>classCapReqCall.html</anchorfile>
      <anchor>a3e12c0b2bce6012d4f2e3dd1ca57c5fc</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CapReqCall</name>
      <anchorfile>classCapReqCall.html</anchorfile>
      <anchor>a04935e7403e7a8210e2f03adb1655b84</anchor>
      <arglist>(const CapReqCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CapReqCall</name>
      <anchorfile>classCapReqCall.html</anchorfile>
      <anchor>a52c65cdcc7a3a95fa46e8b4a54f02c4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CapReqCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classCapReqCall.html</anchorfile>
      <anchor>ad79ebec8cc977489db54ef8505442ed0</anchor>
      <arglist>(const CapReqCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CapReqCall *</type>
      <name>dup</name>
      <anchorfile>classCapReqCall.html</anchorfile>
      <anchor>a8fc830b4c118fe1bbbc089eeaf6cf20c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classCapReqCall.html</anchorfile>
      <anchor>ad1a26cf2c63280dd3d809934caffeb08</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classCapReqCall.html</anchorfile>
      <anchor>ab95e08c90cd47daa1c0fc095ac98fa05</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCapReqCall.html</anchorfile>
      <anchor>a85fc2207b835d19bb125b81b3eb656e1</anchor>
      <arglist>(const CapReqCall &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classCapReqCall.html</anchorfile>
      <anchor>ac0f4a88aa0567014f51c54f5ec4f3993</anchor>
      <arglist>(const CapReqCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CapReqResponse</name>
    <filename>classCapReqResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>CapReqResponse</name>
      <anchorfile>classCapReqResponse.html</anchorfile>
      <anchor>a7fd319e6cd409dcb21aedcca1276ab0e</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CapReqResponse</name>
      <anchorfile>classCapReqResponse.html</anchorfile>
      <anchor>adc24dca0cd19b1743b4be7fec61e3b38</anchor>
      <arglist>(const CapReqResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CapReqResponse</name>
      <anchorfile>classCapReqResponse.html</anchorfile>
      <anchor>a2d49755fddc95ec36b3e58708642fdf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CapReqResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classCapReqResponse.html</anchorfile>
      <anchor>ac9521617afd08eaf6e0d3587786c7074</anchor>
      <arglist>(const CapReqResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CapReqResponse *</type>
      <name>dup</name>
      <anchorfile>classCapReqResponse.html</anchorfile>
      <anchor>a0a1a7bb19f40045253c6478ea69b5dab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classCapReqResponse.html</anchorfile>
      <anchor>a973548f0159482afb2fd828d6fc4c0a1</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classCapReqResponse.html</anchorfile>
      <anchor>ad931735d2102be96a39c0c3d6d5c5e4f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AreaDataContainer &amp;</type>
      <name>getAreaData</name>
      <anchorfile>classCapReqResponse.html</anchorfile>
      <anchor>ad202ba0debc04bcc7a11162cc6e1866d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const AreaDataContainer &amp;</type>
      <name>getAreaData</name>
      <anchorfile>classCapReqResponse.html</anchorfile>
      <anchor>a2daa83ec8e386de05b4bc0551510a7c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAreaData</name>
      <anchorfile>classCapReqResponse.html</anchorfile>
      <anchor>a50bbe1b8415fb6ae138f54fe4ffdea92</anchor>
      <arglist>(const AreaDataContainer &amp;areaData)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCapReqResponse.html</anchorfile>
      <anchor>ae39529bd14ba1df5797440368e068762</anchor>
      <arglist>(const CapReqResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AreaDataContainer</type>
      <name>areaData_var</name>
      <anchorfile>classCapReqResponse.html</anchorfile>
      <anchor>a0eca3c656c384b2262f30d73d51b4bc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classCapReqResponse.html</anchorfile>
      <anchor>af33a62e273fd9208d8fcf5416bd08fa3</anchor>
      <arglist>(const CapReqResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CBRArea</name>
    <filename>classCBRArea.html</filename>
    <member kind="function">
      <type></type>
      <name>CBRArea</name>
      <anchorfile>classCBRArea.html</anchorfile>
      <anchor>ab6c6fffc820753d685dc0720f2cc5d5e</anchor>
      <arglist>(uint8_t dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CBRArea</name>
      <anchorfile>classCBRArea.html</anchorfile>
      <anchor>a79edd315e0d8a21831b18bbabfc8cd5f</anchor>
      <arglist>(const Coords &amp;bottoms, const Coords &amp;tops, const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CBRArea</name>
      <anchorfile>classCBRArea.html</anchorfile>
      <anchor>a57eaef0def89ec8dc6fc391365d5d6b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Coords</type>
      <name>min</name>
      <anchorfile>classCBRArea.html</anchorfile>
      <anchor>a4d92d914f65d8fc6fe6c62387458b04e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Coords</type>
      <name>max</name>
      <anchorfile>classCBRArea.html</anchorfile>
      <anchor>a35d6cd12853dae5001ca62fe1d9ffcd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>prefix</name>
      <anchorfile>classCBRArea.html</anchorfile>
      <anchor>a5f503d527d8664fecc1d3299be858655</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classCBRArea.html</anchorfile>
      <anchor>ae04c4910c4e8173f9169fc8cc78b2a00</anchor>
      <arglist>(std::ostream &amp;os, const CBRArea &amp;area)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CBRDHT</name>
    <filename>classCBRDHT.html</filename>
    <base>BaseApp</base>
    <class kind="struct">CBRDHT::GetMapEntry</class>
    <class kind="struct">CBRDHT::PutMapEntry</class>
    <member kind="function">
      <type></type>
      <name>CBRDHT</name>
      <anchorfile>classCBRDHT.html</anchorfile>
      <anchor>af058bc6bca0c7036770c62ec6ba0f55d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CBRDHT</name>
      <anchorfile>classCBRDHT.html</anchorfile>
      <anchor>aa2d4398b97c1c06e4379fc8460f6b766</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; NodeHandle &gt;</type>
      <name>ReplicaVector</name>
      <anchorfile>classCBRDHT.html</anchorfile>
      <anchor>a9af784d0b574bb87b2fad6a73c8eb5a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initializeApp</name>
      <anchorfile>classCBRDHT.html</anchorfile>
      <anchor>a55759c7002f6f347c9a331f475e714f6</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finishApp</name>
      <anchorfile>classCBRDHT.html</anchorfile>
      <anchor>acd8b461a846a1d8c52098d32f0152edc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classCBRDHT.html</anchorfile>
      <anchor>a9687f217efef7be22f63f89eb98316c9</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handleRpcCall</name>
      <anchorfile>classCBRDHT.html</anchorfile>
      <anchor>a23a206659056d25bc06bdb6a4655fc6a</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleRpcResponse</name>
      <anchorfile>classCBRDHT.html</anchorfile>
      <anchor>a1d9992ca6b273d28c05bc70f6d108cf0</anchor>
      <arglist>(BaseResponseMessage *msg, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleRpcTimeout</name>
      <anchorfile>classCBRDHT.html</anchorfile>
      <anchor>a02c24b6ada58e1d0d690459b5e56e729</anchor>
      <arglist>(BaseCallMessage *msg, const TransportAddress &amp;dest, cPolymorphic *context, int rpcId, const OverlayKey &amp;destKey)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleUpperMessage</name>
      <anchorfile>classCBRDHT.html</anchorfile>
      <anchor>a5ec14534f25aa85c1b720d511e8329cd</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handlePutRequest</name>
      <anchorfile>classCBRDHT.html</anchorfile>
      <anchor>a48f879f883e47696e35aa272e0e1eeaa</anchor>
      <arglist>(DHTPutCall *dhtMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleGetRequest</name>
      <anchorfile>classCBRDHT.html</anchorfile>
      <anchor>ace52565c0b61f5e025241087255c5c68</anchor>
      <arglist>(CBRDHTGetCall *dhtMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handlePutResponse</name>
      <anchorfile>classCBRDHT.html</anchorfile>
      <anchor>af1ddb52cc46f8cb27d059f05953f9653</anchor>
      <arglist>(DHTPutResponse *dhtMsg, int rpcId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleGetResponse</name>
      <anchorfile>classCBRDHT.html</anchorfile>
      <anchor>aef96e24cd11666913a54d122b60bb749</anchor>
      <arglist>(CBRDHTGetResponse *dhtMsg, int rpcId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handlePutCAPIRequest</name>
      <anchorfile>classCBRDHT.html</anchorfile>
      <anchor>af525e8ee6e3b2feaa06cd4ac50df0c13</anchor>
      <arglist>(DHTputCAPICall *capiPutMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleGetCAPIRequest</name>
      <anchorfile>classCBRDHT.html</anchorfile>
      <anchor>a3978bfc13875b74884480df035955f2f</anchor>
      <arglist>(DHTgetCAPICall *capiGetMsg, int teamnum=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleDumpDhtRequest</name>
      <anchorfile>classCBRDHT.html</anchorfile>
      <anchor>a6b38aa6bfccdc46db10052aad003819b</anchor>
      <arglist>(DHTdumpCall *call)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>classCBRDHT.html</anchorfile>
      <anchor>a603c05617bd2a6c629b5f36c2721af21</anchor>
      <arglist>(const NodeHandle &amp;node, bool joined)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleLookupResponse</name>
      <anchorfile>classCBRDHT.html</anchorfile>
      <anchor>a8955c8fd6280759931edc227d2519b88</anchor>
      <arglist>(LookupResponse *lookupMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>resultValuesBitLength</name>
      <anchorfile>classCBRDHT.html</anchorfile>
      <anchor>a7facbd76bcd1a944cc416be139091a6d</anchor>
      <arglist>(DHTGetResponse *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numReplica</name>
      <anchorfile>classCBRDHT.html</anchorfile>
      <anchor>a9f14db944d947d95cb6912be653c36d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint8_t</type>
      <name>numReplicaTeams</name>
      <anchorfile>classCBRDHT.html</anchorfile>
      <anchor>a002095b5f33d56bf265080b246793b72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maintenanceMessages</name>
      <anchorfile>classCBRDHT.html</anchorfile>
      <anchor>ab3afabd3f65d272ec42d6ebe97e40fb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>normalMessages</name>
      <anchorfile>classCBRDHT.html</anchorfile>
      <anchor>ae2ced50524806f31a4b9bbee332fe317</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>numBytesMaintenance</name>
      <anchorfile>classCBRDHT.html</anchorfile>
      <anchor>a1ebe642d98fa1807657b437083db4677</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>numBytesNormal</name>
      <anchorfile>classCBRDHT.html</anchorfile>
      <anchor>a5f04c1260b356b18e4349bee77c7d4d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>lastGetCall</name>
      <anchorfile>classCBRDHT.html</anchorfile>
      <anchor>adb365160b104ebad6a6d67718f242484</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; unsigned int, BaseCallMessage * &gt;</type>
      <name>rpcIdMap</name>
      <anchorfile>classCBRDHT.html</anchorfile>
      <anchor>aca3294a891258cca91a66aab04f73ad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, GetMapEntry &gt;</type>
      <name>getMap</name>
      <anchorfile>classCBRDHT.html</anchorfile>
      <anchor>a6df5127a51b0bc161ddb5bcb6f6dfd42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, PutMapEntry &gt;</type>
      <name>putMap</name>
      <anchorfile>classCBRDHT.html</anchorfile>
      <anchor>a249022025a87a901f2ad33af2af44497</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DHTDataStorage *</type>
      <name>dataStorage</name>
      <anchorfile>classCBRDHT.html</anchorfile>
      <anchor>ad0576bc5a424d7c491c7d061ce9759fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordBasedRouting *</type>
      <name>coordBasedRouting</name>
      <anchorfile>classCBRDHT.html</anchorfile>
      <anchor>a55a40d5b1e807a5238049e0b9331ece3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NeighborCache *</type>
      <name>neighborCache</name>
      <anchorfile>classCBRDHT.html</anchorfile>
      <anchor>ad79c28188c6a3d9283ee8da5dcb72da4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CBRDHT::GetMapEntry</name>
    <filename>structCBRDHT_1_1GetMapEntry.html</filename>
    <member kind="variable">
      <type>ReplicaVector</type>
      <name>replica</name>
      <anchorfile>structCBRDHT_1_1GetMapEntry.html</anchorfile>
      <anchor>a6fd07683501b04dfa1b3cf532f4ca60b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; BinaryValue, ReplicaVector &gt;</type>
      <name>hashes</name>
      <anchorfile>structCBRDHT_1_1GetMapEntry.html</anchorfile>
      <anchor>aff3a7d90f4c9afd88ba9f16bc868a011</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numSent</name>
      <anchorfile>structCBRDHT_1_1GetMapEntry.html</anchorfile>
      <anchor>a612ed81a9d86b4afb5b5c3650d696311</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numAvailableReplica</name>
      <anchorfile>structCBRDHT_1_1GetMapEntry.html</anchorfile>
      <anchor>aa797acf1a61422d20e3d21b3ca93f379</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numResponses</name>
      <anchorfile>structCBRDHT_1_1GetMapEntry.html</anchorfile>
      <anchor>a3c5692d9e4183e39612210c4c8bd2b26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>teamNumber</name>
      <anchorfile>structCBRDHT_1_1GetMapEntry.html</anchorfile>
      <anchor>a51071e51e781e535dd72b81de1b1d726</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DHTgetCAPICall *</type>
      <name>callMsg</name>
      <anchorfile>structCBRDHT_1_1GetMapEntry.html</anchorfile>
      <anchor>a452861cd1465558ec4298fe0265be0ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ReplicaVector *</type>
      <name>hashVector</name>
      <anchorfile>structCBRDHT_1_1GetMapEntry.html</anchorfile>
      <anchor>a44b275f007ab26df65680e005d78fb6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CBRDHT::PutMapEntry</name>
    <filename>structCBRDHT_1_1PutMapEntry.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>numSent</name>
      <anchorfile>structCBRDHT_1_1PutMapEntry.html</anchorfile>
      <anchor>a8d438aaa0ac8f1f8dd09147c3a086670</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numFailed</name>
      <anchorfile>structCBRDHT_1_1PutMapEntry.html</anchorfile>
      <anchor>a38274f1d5e81f3d7708bc4fe2ced939a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numResponses</name>
      <anchorfile>structCBRDHT_1_1PutMapEntry.html</anchorfile>
      <anchor>a8127af8dedcb351f99e123e5a6438bda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DHTputCAPICall *</type>
      <name>callMsg</name>
      <anchorfile>structCBRDHT_1_1PutMapEntry.html</anchorfile>
      <anchor>a7163c3478680874f5eef446d9eda3e25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CBRDHTGetCall</name>
    <filename>classCBRDHTGetCall.html</filename>
    <base>DHTGetCall</base>
    <member kind="function">
      <type></type>
      <name>CBRDHTGetCall</name>
      <anchorfile>classCBRDHTGetCall.html</anchorfile>
      <anchor>a13420e59e8d6d9da954ba06c5f9a5e74</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CBRDHTGetCall</name>
      <anchorfile>classCBRDHTGetCall.html</anchorfile>
      <anchor>a04c3d03b704eaa19fe3df58094200fba</anchor>
      <arglist>(const CBRDHTGetCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CBRDHTGetCall</name>
      <anchorfile>classCBRDHTGetCall.html</anchorfile>
      <anchor>a65d26ed618f5bfabf9f62fef8f1d9749</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CBRDHTGetCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classCBRDHTGetCall.html</anchorfile>
      <anchor>a65eae0728a6e42966a9b12f96ace5c1d</anchor>
      <arglist>(const CBRDHTGetCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CBRDHTGetCall *</type>
      <name>dup</name>
      <anchorfile>classCBRDHTGetCall.html</anchorfile>
      <anchor>a8fdd1d824270eb834ec5eba28529d215</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classCBRDHTGetCall.html</anchorfile>
      <anchor>a848673503ffaf0fb072118ce14d5aaff</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classCBRDHTGetCall.html</anchorfile>
      <anchor>a68e702fceabf534b3f3152c204e9b394</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getOriginalKey</name>
      <anchorfile>classCBRDHTGetCall.html</anchorfile>
      <anchor>a375fb6c80868635ae43835a1488baa33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getOriginalKey</name>
      <anchorfile>classCBRDHTGetCall.html</anchorfile>
      <anchor>a214c6954ca44ad5b525328a8ca95876b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOriginalKey</name>
      <anchorfile>classCBRDHTGetCall.html</anchorfile>
      <anchor>ae95efe175723c5c2ee8a3b7c394f7728</anchor>
      <arglist>(const OverlayKey &amp;originalKey)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCBRDHTGetCall.html</anchorfile>
      <anchor>a4abb9b048206365db07017696e911881</anchor>
      <arglist>(const CBRDHTGetCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>originalKey_var</name>
      <anchorfile>classCBRDHTGetCall.html</anchorfile>
      <anchor>a8ac85f9fe6238c4f51e0605f06547bc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classCBRDHTGetCall.html</anchorfile>
      <anchor>a7facb018dd1bee2f0f0c943ab11e6b5f</anchor>
      <arglist>(const CBRDHTGetCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CBRDHTGetResponse</name>
    <filename>classCBRDHTGetResponse.html</filename>
    <base>DHTGetResponse</base>
    <member kind="function">
      <type></type>
      <name>CBRDHTGetResponse</name>
      <anchorfile>classCBRDHTGetResponse.html</anchorfile>
      <anchor>a084c8be3155793098ee2413c706f2844</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CBRDHTGetResponse</name>
      <anchorfile>classCBRDHTGetResponse.html</anchorfile>
      <anchor>aa15d146fde07b08e87f675acdd7cc166</anchor>
      <arglist>(const CBRDHTGetResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CBRDHTGetResponse</name>
      <anchorfile>classCBRDHTGetResponse.html</anchorfile>
      <anchor>a3e3a815cea27a40de9f68d70d80dbfec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CBRDHTGetResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classCBRDHTGetResponse.html</anchorfile>
      <anchor>a5fb10fdc0f1e9493adc9905fc4f69272</anchor>
      <arglist>(const CBRDHTGetResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CBRDHTGetResponse *</type>
      <name>dup</name>
      <anchorfile>classCBRDHTGetResponse.html</anchorfile>
      <anchor>a8bfd2bd43f0571f958c8e6c3a33d42df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classCBRDHTGetResponse.html</anchorfile>
      <anchor>a227c4da7a26b6b6a7092ea7f32cd3943</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classCBRDHTGetResponse.html</anchorfile>
      <anchor>a9468c67fceccbeed862297d5916410cb</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getOriginalKey</name>
      <anchorfile>classCBRDHTGetResponse.html</anchorfile>
      <anchor>a5ec812850aec035e4b6172730fc2b927</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getOriginalKey</name>
      <anchorfile>classCBRDHTGetResponse.html</anchorfile>
      <anchor>a4d203ea90cede023bd91b51e66a5571e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOriginalKey</name>
      <anchorfile>classCBRDHTGetResponse.html</anchorfile>
      <anchor>acc687ad067d68c0f2c0f5b7e51a704af</anchor>
      <arglist>(const OverlayKey &amp;originalKey)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCBRDHTGetResponse.html</anchorfile>
      <anchor>a674ff6a36de2f35ab7847f2db54b8cfe</anchor>
      <arglist>(const CBRDHTGetResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>originalKey_var</name>
      <anchorfile>classCBRDHTGetResponse.html</anchorfile>
      <anchor>a4c7d6ab5e45490e0d9b57ef298b623af</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classCBRDHTGetResponse.html</anchorfile>
      <anchor>abbd4f9c1ba3f718b29b539603805fd24</anchor>
      <arglist>(const CBRDHTGetResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cConstHashMapWatcher</name>
    <filename>classcConstHashMapWatcher.html</filename>
    <templarg>KeyT</templarg>
    <templarg>ValueT</templarg>
    <templarg>CmpT</templarg>
    <member kind="function">
      <type></type>
      <name>cConstHashMapWatcher</name>
      <anchorfile>classcConstHashMapWatcher.html</anchorfile>
      <anchor>acfd91e29cb60dc6b8bce329f23d16492</anchor>
      <arglist>(const char *name, const UNORDERED_MAP&lt; KeyT, ValueT, CmpT &gt; &amp;var)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getClassName</name>
      <anchorfile>classcConstHashMapWatcher.html</anchorfile>
      <anchor>af9379caa92e9c41c17f04d1a69b9c431</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getElemTypeName</name>
      <anchorfile>classcConstHashMapWatcher.html</anchorfile>
      <anchor>a34663832f56d9417dfe23bad2b031fc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classcConstHashMapWatcher.html</anchorfile>
      <anchor>aa07a772b3444add9fb059144ba9f7e71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>at</name>
      <anchorfile>classcConstHashMapWatcher.html</anchorfile>
      <anchor>a2033599ff290a83f5a18cd557c8d4d00</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>atIt</name>
      <anchorfile>classcConstHashMapWatcher.html</anchorfile>
      <anchor>a1f0072e2cbe1c4555b33865ec1ec692b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const UNORDERED_MAP&lt; KeyT, ValueT, CmpT &gt; &amp;</type>
      <name>m</name>
      <anchorfile>classcConstHashMapWatcher.html</anchorfile>
      <anchor>a62974702feba12526286ca54c3482377</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UNORDERED_MAP&lt; KeyT, ValueT, CmpT &gt;::const_iterator</type>
      <name>it</name>
      <anchorfile>classcConstHashMapWatcher.html</anchorfile>
      <anchor>a40cdca2c97c94bea104326d14387c155</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>itPos</name>
      <anchorfile>classcConstHashMapWatcher.html</anchorfile>
      <anchor>a8eb19b22739aeb0b5c50a3e01a9285d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>classname</name>
      <anchorfile>classcConstHashMapWatcher.html</anchorfile>
      <anchor>a7f45b1a46b5fd32164b9d7d12201df0d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cDequeWatcher</name>
    <filename>classcDequeWatcher.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>cDequeWatcher</name>
      <anchorfile>classcDequeWatcher.html</anchorfile>
      <anchor>ab5de20c0172c04838840cf5e8a71fd51</anchor>
      <arglist>(const char *name, std::deque&lt; T &gt; &amp;var)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>className</name>
      <anchorfile>classcDequeWatcher.html</anchorfile>
      <anchor>ad58d5a00e196a79362fad7b74daf18da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getElemTypeName</name>
      <anchorfile>classcDequeWatcher.html</anchorfile>
      <anchor>a0a77375a6add00ec4b406a90c4fb2b6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classcDequeWatcher.html</anchorfile>
      <anchor>ad3f689dd07126b498dd0bb874b73bbf9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>at</name>
      <anchorfile>classcDequeWatcher.html</anchorfile>
      <anchor>a3454d98fc7457962c1e9a3bfd93ddcb0</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>atIt</name>
      <anchorfile>classcDequeWatcher.html</anchorfile>
      <anchor>abcf70441deb29a58c186a795ecd815a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::deque&lt; T &gt; &amp;</type>
      <name>v</name>
      <anchorfile>classcDequeWatcher.html</anchorfile>
      <anchor>a281884dbcbc5941e619cf20736262080</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>classname</name>
      <anchorfile>classcDequeWatcher.html</anchorfile>
      <anchor>a5306f7c8a9d4718bd0d726f9927fe932</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::deque&lt; T &gt;::iterator</type>
      <name>it</name>
      <anchorfile>classcDequeWatcher.html</anchorfile>
      <anchor>aa9fd80d8c279d42a538b68c055f02a2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>itPos</name>
      <anchorfile>classcDequeWatcher.html</anchorfile>
      <anchor>a6a9c7fba1c01b93c2ed8ba48cfd0e26f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cHashMapWatcher</name>
    <filename>classcHashMapWatcher.html</filename>
    <templarg>KeyT</templarg>
    <templarg>ValueT</templarg>
    <templarg>CmpT</templarg>
    <member kind="function">
      <type></type>
      <name>cHashMapWatcher</name>
      <anchorfile>classcHashMapWatcher.html</anchorfile>
      <anchor>aa7a2fdaeb3236dce06da84415d061bf4</anchor>
      <arglist>(const char *name, UNORDERED_MAP&lt; KeyT, ValueT, CmpT &gt; &amp;var)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getClassName</name>
      <anchorfile>classcHashMapWatcher.html</anchorfile>
      <anchor>aa1cc9abf60a63c72c4d6d384f3e4448a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getElemTypeName</name>
      <anchorfile>classcHashMapWatcher.html</anchorfile>
      <anchor>a2621e12700e6ca0069fb934de69f2367</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classcHashMapWatcher.html</anchorfile>
      <anchor>a9ee66545a5ab6748406a19daa16c9a1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>at</name>
      <anchorfile>classcHashMapWatcher.html</anchorfile>
      <anchor>ac238081878cc7c1d1d56704cc116f699</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>atIt</name>
      <anchorfile>classcHashMapWatcher.html</anchorfile>
      <anchor>a90287dccc76653256b0bfc89a5e5e6d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UNORDERED_MAP&lt; KeyT, ValueT, CmpT &gt; &amp;</type>
      <name>m</name>
      <anchorfile>classcHashMapWatcher.html</anchorfile>
      <anchor>a001243591490a59bf14654e737193d84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UNORDERED_MAP&lt; KeyT, ValueT, CmpT &gt;::iterator</type>
      <name>it</name>
      <anchorfile>classcHashMapWatcher.html</anchorfile>
      <anchor>a28be7bb4840cc07902fa2786cb6ce3f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>itPos</name>
      <anchorfile>classcHashMapWatcher.html</anchorfile>
      <anchor>af90855e9ac706d54c8855e805e33b4ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>classname</name>
      <anchorfile>classcHashMapWatcher.html</anchorfile>
      <anchor>a1c7a416ecff00d19e2de21e7030cbe7c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cHashSetWatcher</name>
    <filename>classcHashSetWatcher.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>cHashSetWatcher</name>
      <anchorfile>classcHashSetWatcher.html</anchorfile>
      <anchor>ac4e2d26db71e5b25eb6eec573cc20e5a</anchor>
      <arglist>(const char *name, UNORDERED_SET&lt; T &gt; &amp;var)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getClassName</name>
      <anchorfile>classcHashSetWatcher.html</anchorfile>
      <anchor>aadc492c7133d196da6d141deee3c3327</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getElemTypeName</name>
      <anchorfile>classcHashSetWatcher.html</anchorfile>
      <anchor>a7efa4696f42753663f909c72afc0e866</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classcHashSetWatcher.html</anchorfile>
      <anchor>a78644e5b5162fd8864441aafada0aaa3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>at</name>
      <anchorfile>classcHashSetWatcher.html</anchorfile>
      <anchor>ac0cb394e5d91378ec1f7225c54dd60b9</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>atIt</name>
      <anchorfile>classcHashSetWatcher.html</anchorfile>
      <anchor>aba8cf939215aa7879a750575b514a4c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UNORDERED_SET&lt; T &gt; &amp;</type>
      <name>v</name>
      <anchorfile>classcHashSetWatcher.html</anchorfile>
      <anchor>a84e7a36a7435dc8ce061eb7e65ee8c7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>classname</name>
      <anchorfile>classcHashSetWatcher.html</anchorfile>
      <anchor>a8c91b12a7b86d640ce257faaa7896c1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UNORDERED_SET&lt; T &gt;::iterator</type>
      <name>it</name>
      <anchorfile>classcHashSetWatcher.html</anchorfile>
      <anchor>a4234e62cef381692c24c1cb2a25aa157</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>itPos</name>
      <anchorfile>classcHashSetWatcher.html</anchorfile>
      <anchor>aaf231dc74e6d18c29ec52200981ff127</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChildCheckCall</name>
    <filename>classChildCheckCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>ChildCheckCall</name>
      <anchorfile>classChildCheckCall.html</anchorfile>
      <anchor>a05cac9c15d8edab20c49305148ff137e</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChildCheckCall</name>
      <anchorfile>classChildCheckCall.html</anchorfile>
      <anchor>aa57101794177b6b5481d29bcf0e494c9</anchor>
      <arglist>(const ChildCheckCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ChildCheckCall</name>
      <anchorfile>classChildCheckCall.html</anchorfile>
      <anchor>a4ade3ccb51f0af97da41f5aa4bb75692</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ChildCheckCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classChildCheckCall.html</anchorfile>
      <anchor>a1ea5cbcfd6c971362cf7f6f827500c4d</anchor>
      <arglist>(const ChildCheckCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChildCheckCall *</type>
      <name>dup</name>
      <anchorfile>classChildCheckCall.html</anchorfile>
      <anchor>a036dae0e5cbf34f6578c80b065a7fff2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classChildCheckCall.html</anchorfile>
      <anchor>ab8f910c25dceea265851670ee5b2df2f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classChildCheckCall.html</anchorfile>
      <anchor>a129415e39aaac835f222f3a31bf3e1b2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classChildCheckCall.html</anchorfile>
      <anchor>ab6b7e801f908798c1ee885d2f413109a</anchor>
      <arglist>(const ChildCheckCall &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classChildCheckCall.html</anchorfile>
      <anchor>aa86d426c100dce1888f2e5086becbec6</anchor>
      <arglist>(const ChildCheckCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChildCheckResponse</name>
    <filename>classChildCheckResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>ChildCheckResponse</name>
      <anchorfile>classChildCheckResponse.html</anchorfile>
      <anchor>aae634fecb7ffa03ffdf56b14f6611a2e</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChildCheckResponse</name>
      <anchorfile>classChildCheckResponse.html</anchorfile>
      <anchor>a04c6e17cd9785f63c586a0b6944aae67</anchor>
      <arglist>(const ChildCheckResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ChildCheckResponse</name>
      <anchorfile>classChildCheckResponse.html</anchorfile>
      <anchor>ad98c6506cdc6ce96a6a16dd3ae46fc66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ChildCheckResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classChildCheckResponse.html</anchorfile>
      <anchor>a37c7e7f5c301a46e4913df4cd32b088c</anchor>
      <arglist>(const ChildCheckResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChildCheckResponse *</type>
      <name>dup</name>
      <anchorfile>classChildCheckResponse.html</anchorfile>
      <anchor>afc95bd0eae3189691539a36d7926a8d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classChildCheckResponse.html</anchorfile>
      <anchor>a9d07a97d3eca9acbc736c8943951bbc3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classChildCheckResponse.html</anchorfile>
      <anchor>a5903f8d8319ac3349a0bd1dbf99750c2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classChildCheckResponse.html</anchorfile>
      <anchor>a30eb27bc4d3310c73a2634e3240514c1</anchor>
      <arglist>(const ChildCheckResponse &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classChildCheckResponse.html</anchorfile>
      <anchor>aff2e0d1934ba4b81d61c9653219a9388</anchor>
      <arglist>(const ChildCheckResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChildReleaseCall</name>
    <filename>classChildReleaseCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>ChildReleaseCall</name>
      <anchorfile>classChildReleaseCall.html</anchorfile>
      <anchor>ade82732bf0eae02efefc09b496f7df03</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChildReleaseCall</name>
      <anchorfile>classChildReleaseCall.html</anchorfile>
      <anchor>a90b36a79b2ab9c59a4b24b49a0f1aad8</anchor>
      <arglist>(const ChildReleaseCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ChildReleaseCall</name>
      <anchorfile>classChildReleaseCall.html</anchorfile>
      <anchor>ab44e82bf9c471815796ef5856131226c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ChildReleaseCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classChildReleaseCall.html</anchorfile>
      <anchor>a70c8f985d0ee32386e56cdf60e6c9357</anchor>
      <arglist>(const ChildReleaseCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChildReleaseCall *</type>
      <name>dup</name>
      <anchorfile>classChildReleaseCall.html</anchorfile>
      <anchor>ae6ad8165dec3afc435a2bd193626a80a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classChildReleaseCall.html</anchorfile>
      <anchor>ad1def50dc64e569de2667714963209d0</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classChildReleaseCall.html</anchorfile>
      <anchor>ad12250f971e8d9870cda529cfc571bdd</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classChildReleaseCall.html</anchorfile>
      <anchor>a04239d7075edd89379022ad79058a483</anchor>
      <arglist>(const ChildReleaseCall &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classChildReleaseCall.html</anchorfile>
      <anchor>a06c7b8a3778d93871d27c07f1c92cabb</anchor>
      <arglist>(const ChildReleaseCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChildReleaseResponse</name>
    <filename>classChildReleaseResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>ChildReleaseResponse</name>
      <anchorfile>classChildReleaseResponse.html</anchorfile>
      <anchor>a84707202978b5efab5329b2933222617</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChildReleaseResponse</name>
      <anchorfile>classChildReleaseResponse.html</anchorfile>
      <anchor>ac38e9fb2f48a50ca7d4c9fba2f73b816</anchor>
      <arglist>(const ChildReleaseResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ChildReleaseResponse</name>
      <anchorfile>classChildReleaseResponse.html</anchorfile>
      <anchor>a68778a061df60538bc80fde674fb5f73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ChildReleaseResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classChildReleaseResponse.html</anchorfile>
      <anchor>a674d3c8c1130fdd834968d0a9f3589f5</anchor>
      <arglist>(const ChildReleaseResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChildReleaseResponse *</type>
      <name>dup</name>
      <anchorfile>classChildReleaseResponse.html</anchorfile>
      <anchor>a2c3bc30c6c1f5bdec3af96d0da4b4951</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classChildReleaseResponse.html</anchorfile>
      <anchor>a6e5de4ee97ba0297593769445c29118e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classChildReleaseResponse.html</anchorfile>
      <anchor>a625e4b3107c34dd699ef8f9768405459</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classChildReleaseResponse.html</anchorfile>
      <anchor>ae1fe7391b627ced59f0937f2e0700f0b</anchor>
      <arglist>(const ChildReleaseResponse &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classChildReleaseResponse.html</anchorfile>
      <anchor>a1b87ec981334283c8b1988fd0e441b12</anchor>
      <arglist>(const ChildReleaseResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChordMessage</name>
    <filename>classChordMessage.html</filename>
    <base>BaseOverlayMessage</base>
    <member kind="function">
      <type></type>
      <name>ChordMessage</name>
      <anchorfile>classChordMessage.html</anchorfile>
      <anchor>a95484940988bb7d7d390f2e138f5d97d</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChordMessage</name>
      <anchorfile>classChordMessage.html</anchorfile>
      <anchor>acb678546fe03decf8929e337513679fb</anchor>
      <arglist>(const ChordMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ChordMessage</name>
      <anchorfile>classChordMessage.html</anchorfile>
      <anchor>a5ac41c7af2a49d2a10047e7b0b5d64c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ChordMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classChordMessage.html</anchorfile>
      <anchor>a6f94ec7f8f2ccba1bba971864fbec242</anchor>
      <arglist>(const ChordMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChordMessage *</type>
      <name>dup</name>
      <anchorfile>classChordMessage.html</anchorfile>
      <anchor>a5c942d927ef3211898e7d6806d47869f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classChordMessage.html</anchorfile>
      <anchor>a5cf5221943f268a3cddf1b012883da7b</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classChordMessage.html</anchorfile>
      <anchor>ac85f82101641cb7d68ce36281cfa38f9</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCommand</name>
      <anchorfile>classChordMessage.html</anchorfile>
      <anchor>a2f79fd22ad033f9ef86fd0bddadd2a66</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommand</name>
      <anchorfile>classChordMessage.html</anchorfile>
      <anchor>abdb7bbd58675799c30793031f1292180</anchor>
      <arglist>(int command)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classChordMessage.html</anchorfile>
      <anchor>a3d2e8a562193602072350d50a9eb9f9c</anchor>
      <arglist>(const ChordMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>command_var</name>
      <anchorfile>classChordMessage.html</anchorfile>
      <anchor>ac1eaf8919a0f3e9ef481d6f20a1683d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classChordMessage.html</anchorfile>
      <anchor>a8ff7a56c1f3e12b154caea942d20c68f</anchor>
      <arglist>(const ChordMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChurnGenerator</name>
    <filename>classChurnGenerator.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classChurnGenerator.html</anchorfile>
      <anchor>aa7b4d5fdc3fe7504bdbea1a68238946e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classChurnGenerator.html</anchorfile>
      <anchor>a4334053f5cfb7cc83f20840062c896c6</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initializeChurn</name>
      <anchorfile>classChurnGenerator.html</anchorfile>
      <anchor>aaf29a3704f2439639a65e4ac4d468d2f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classChurnGenerator.html</anchorfile>
      <anchor>a4b9cf0615bdfb4b3d4a1e95afb7f1f20</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodeType</name>
      <anchorfile>classChurnGenerator.html</anchorfile>
      <anchor>af9a1835ef6f1791cc3886e2ddd537d87</anchor>
      <arglist>(const NodeType &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>const NodeType &amp;</type>
      <name>getNodeType</name>
      <anchorfile>classChurnGenerator.html</anchorfile>
      <anchor>a653a02142761eb2f2629d923efcfa429</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>init</name>
      <anchorfile>classChurnGenerator.html</anchorfile>
      <anchor>aecf5cbabed41daa887e0a799a671623b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>terminalCount</name>
      <anchorfile>classChurnGenerator.html</anchorfile>
      <anchor>ac12296dc62d58dd5b332623fe20d409e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>updateDisplayString</name>
      <anchorfile>classChurnGenerator.html</anchorfile>
      <anchor>a2493a19533be8d1875bd0d86e960de42</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UnderlayConfigurator *</type>
      <name>underlayConfigurator</name>
      <anchorfile>classChurnGenerator.html</anchorfile>
      <anchor>a1e178234fc3dbf2f282e44bc16bdfbd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>targetOverlayTerminalNum</name>
      <anchorfile>classChurnGenerator.html</anchorfile>
      <anchor>a257553c276ebb002e1f109f4e6132a6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeType</type>
      <name>type</name>
      <anchorfile>classChurnGenerator.html</anchorfile>
      <anchor>ac0b5bac28141590c8bf16a0f75f42c51</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChurnGeneratorAccess</name>
    <filename>classChurnGeneratorAccess.html</filename>
    <member kind="function">
      <type>ChurnGenerator *</type>
      <name>get</name>
      <anchorfile>classChurnGeneratorAccess.html</anchorfile>
      <anchor>af418ec5601b2752bf3f0889caaae0508</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChurnMessage</name>
    <filename>classChurnMessage.html</filename>
    <member kind="function">
      <type></type>
      <name>ChurnMessage</name>
      <anchorfile>classChurnMessage.html</anchorfile>
      <anchor>aaabfbf245581160c235e1667039cd3e8</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChurnMessage</name>
      <anchorfile>classChurnMessage.html</anchorfile>
      <anchor>a72e4cadcff309a3edaabe1106f12c0ed</anchor>
      <arglist>(const ChurnMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ChurnMessage</name>
      <anchorfile>classChurnMessage.html</anchorfile>
      <anchor>ad2a77ab8b60d7077169d7b422509f2d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ChurnMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classChurnMessage.html</anchorfile>
      <anchor>a46bc80bdb75d3811e737687088442240</anchor>
      <arglist>(const ChurnMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChurnMessage *</type>
      <name>dup</name>
      <anchorfile>classChurnMessage.html</anchorfile>
      <anchor>a3be4400fec4f15323807eca0f71ca9f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classChurnMessage.html</anchorfile>
      <anchor>ab3c19e0b3f53f15470d71676d4761ef8</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classChurnMessage.html</anchorfile>
      <anchor>a48ced9545a66e95a7c1c96cbf5c6a1f4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getCreateNode</name>
      <anchorfile>classChurnMessage.html</anchorfile>
      <anchor>a81c3fc70dfa5d129fc7dabc8a4dd6bd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCreateNode</name>
      <anchorfile>classChurnMessage.html</anchorfile>
      <anchor>aef80ae4caf78c55bfcd75bde2df80477</anchor>
      <arglist>(bool createNode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getLifetime</name>
      <anchorfile>classChurnMessage.html</anchorfile>
      <anchor>aa7a40f2c5a858675458a3630e1c0a03c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLifetime</name>
      <anchorfile>classChurnMessage.html</anchorfile>
      <anchor>afd4aaf22aeb1e6aa7b24a1c1f54d5ae3</anchor>
      <arglist>(double lifetime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getContextPos</name>
      <anchorfile>classChurnMessage.html</anchorfile>
      <anchor>aaf234bcdc06a67c7a582c02c26ee1d4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setContextPos</name>
      <anchorfile>classChurnMessage.html</anchorfile>
      <anchor>ab8e6adfb7de91bab5f8965d82c43561a</anchor>
      <arglist>(int contextPos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransportAddress &amp;</type>
      <name>getAddr</name>
      <anchorfile>classChurnMessage.html</anchorfile>
      <anchor>a95d1b20471636773dd160206e62aa16c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TransportAddress &amp;</type>
      <name>getAddr</name>
      <anchorfile>classChurnMessage.html</anchorfile>
      <anchor>afc54ffc0467574f94acad9bc63a39efb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddr</name>
      <anchorfile>classChurnMessage.html</anchorfile>
      <anchor>a0ae5e5e00b75e704d86d61d540ed2323</anchor>
      <arglist>(const TransportAddress &amp;addr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classChurnMessage.html</anchorfile>
      <anchor>abdaedb5d82eed36825d0f26fb4f13a12</anchor>
      <arglist>(const ChurnMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>createNode_var</name>
      <anchorfile>classChurnMessage.html</anchorfile>
      <anchor>a23dce015f61572c470ea1c84ed52a2b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>lifetime_var</name>
      <anchorfile>classChurnMessage.html</anchorfile>
      <anchor>aecda11cb0e5901c371d53894e3f9da9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>contextPos_var</name>
      <anchorfile>classChurnMessage.html</anchorfile>
      <anchor>ac28b7f40d4fb835c5a1cae0f7d8e06fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress</type>
      <name>addr_var</name>
      <anchorfile>classChurnMessage.html</anchorfile>
      <anchor>a70d7d241cc2deb725ebd9fe5d4ee168f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classChurnMessage.html</anchorfile>
      <anchor>aa3955d6614929b7700f305f8dc217d1c</anchor>
      <arglist>(const ChurnMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ClearFlagOnExit</name>
    <filename>structClearFlagOnExit.html</filename>
    <member kind="function">
      <type></type>
      <name>ClearFlagOnExit</name>
      <anchorfile>structClearFlagOnExit.html</anchorfile>
      <anchor>a1711b4302f52507ad9694c77c99832ec</anchor>
      <arglist>(bool &amp;flag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ClearFlagOnExit</name>
      <anchorfile>structClearFlagOnExit.html</anchorfile>
      <anchor>ac42b98b06fa94931ed5fb5188fe842dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool &amp;</type>
      <name>_flag</name>
      <anchorfile>structClearFlagOnExit.html</anchorfile>
      <anchor>ab10c9577a543ae7c54388cb7c4cd30ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cNetCommBuffer</name>
    <filename>classcNetCommBuffer.html</filename>
    <member kind="function">
      <type></type>
      <name>cNetCommBuffer</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>acd606dc4eb6fe1add489f292f5264fc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cNetCommBuffer</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a6f66999ec86b1b408f83f843eb0fd2dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getRemainingMessageSize</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>aad946abbbfce6ddab58f3551f5b842d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packObject</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>aaaa0384ea6a13ed8ddb11fc102ee2bfc</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>unpackObject</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a4d2f6bc8b5943c71488183e983e3662e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a789dc5ff108238af9998ef7e06aad617</anchor>
      <arglist>(char d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a6efe5beaebd59b35759b84fa94144e34</anchor>
      <arglist>(unsigned char d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>ac576d152512831a24c9f52e9bbbfebd4</anchor>
      <arglist>(bool d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a8f0fb1827d17aab0c040a9ae4efa40b9</anchor>
      <arglist>(short d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>adc541ffdf80df35e14d158b13c2cbcbf</anchor>
      <arglist>(unsigned short d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>ab28889d6cc319c6ea74fe1350b1f36f3</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>aa0d0de12ff06e530f15a8c2edbb90b30</anchor>
      <arglist>(unsigned int d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a094f28d1643161478afa7ffcba8ac1e7</anchor>
      <arglist>(long d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>af5d0309ba99cdaab752c404bf0f5b036</anchor>
      <arglist>(unsigned long d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>aec145d59468c7e233c496890f9c259bd</anchor>
      <arglist>(opp_long_long d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>ab4a2c7b87ddeaa815b39b2b866e994cc</anchor>
      <arglist>(opp_unsigned_long_long d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>ae267ec6c03a8a190d17388e4cbb3301e</anchor>
      <arglist>(float d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a164bad816687196885e84722446ec5ee</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a1816554d6b47808c45001db88a69de42</anchor>
      <arglist>(long double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>aa6d74e97fa5fbcef530361b353a8ca60</anchor>
      <arglist>(const char *d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a2701155af6cc6e10edf66257ce097aa8</anchor>
      <arglist>(const opp_string &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a54e140e0896ab0ebf50c4e22279281d7</anchor>
      <arglist>(SimTime d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a6301d90f48a0fcf57ae75a1f930c2ba5</anchor>
      <arglist>(const char *d, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a594a232c47dd4aaab2df9ac8f1f35d45</anchor>
      <arglist>(const unsigned char *d, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a66c732c48df989faec62a761afb4b98e</anchor>
      <arglist>(const bool *d, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a2775d4a9c78cf8e5780985c69598d9b6</anchor>
      <arglist>(const short *d, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a9f1d68d797ef798f5eaf46ab0ec34b3d</anchor>
      <arglist>(const unsigned short *d, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>aaf68112a1e4eebee94ab15965d673e27</anchor>
      <arglist>(const int *d, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>ab28f6ec23017276e12128acd3454be11</anchor>
      <arglist>(const unsigned int *d, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>aec1cfc2cc5d0d5644d369721d30227b1</anchor>
      <arglist>(const long *d, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>ae108184badc3305e937c13b94eb6a56c</anchor>
      <arglist>(const unsigned long *d, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>ac600cb01ae57687fd368ef4dde056d6b</anchor>
      <arglist>(const opp_long_long *d, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a9b500e05bc84d47f9738c6575eb35767</anchor>
      <arglist>(const opp_unsigned_long_long *d, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a9ee34c62e6a568300d5ed380d6b19eb9</anchor>
      <arglist>(const float *d, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>aada02203d16b7b47f632132889fe1254</anchor>
      <arglist>(const double *d, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>ac7e77e0b65e68df65cc2ff9511b090c9</anchor>
      <arglist>(const long double *d, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a6422fc8aeffe83696f607d69d1797146</anchor>
      <arglist>(const char **d, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>adac83b364e5cae6d9d1e9d0a97fe4949</anchor>
      <arglist>(const opp_string *d, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a81cb30fc6325a12c0d4218638fafb0ed</anchor>
      <arglist>(const SimTime *d, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>abe43cb84a2b721221d5c32659b0a6f73</anchor>
      <arglist>(char &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a21983d0cfac9cab0e12f9b2e644556f0</anchor>
      <arglist>(unsigned char &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>ac658a97b40cf445614cb8fec49c9b1d1</anchor>
      <arglist>(bool &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>aa29ebb6d13134c122cdd9ab93fe43f6a</anchor>
      <arglist>(short &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>ae68796bb1c76d20b8e84d8c68a1cc7ae</anchor>
      <arglist>(unsigned short &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>afe66a5f7f2c9642f2ce91dea9d5ffa59</anchor>
      <arglist>(int &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a601d718dc2c918ab960448c3aa6c219f</anchor>
      <arglist>(unsigned int &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>aa20a114da3c71a2c8057f0af4e13c355</anchor>
      <arglist>(long &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>ab9696e06855480136667267d18b89cac</anchor>
      <arglist>(unsigned long &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>aae4d9f1ad9a926879731f4d42f147715</anchor>
      <arglist>(opp_long_long &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>ab838c2c67590bff9c1f7438c0f3c28fe</anchor>
      <arglist>(opp_unsigned_long_long &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a118e5c1623ecd36e2e7ab6cad2910d32</anchor>
      <arglist>(float &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>ad983a3c86da49c967ad5eaa6abbe6142</anchor>
      <arglist>(double &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a7cc34e14f2ee0f9eb76260ae2a9efa1a</anchor>
      <arglist>(long double &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>adf446a74d259909ee67c78c971b83566</anchor>
      <arglist>(const char *&amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a16e9b8a2b3974b5e8014c1b24b66f7b5</anchor>
      <arglist>(char *&amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a6df699b90e61f5a9b93fb15b049c7552</anchor>
      <arglist>(opp_string &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a869fdc86012beece4baa244211b5aa96</anchor>
      <arglist>(SimTime &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>ae2b3208b82684e85396ddd021691a901</anchor>
      <arglist>(char *d, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a63ca268ab7e48b7873ce9994c0e2c7d2</anchor>
      <arglist>(unsigned char *d, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a8ae9b6e4c359f7f7626188ad2ef5ee57</anchor>
      <arglist>(bool *d, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a9ac9fa1140c990c0c4f4cefa3e139d64</anchor>
      <arglist>(short *d, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a3698ddc7ea8fab8a4894f46dda03a513</anchor>
      <arglist>(unsigned short *d, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>ad3d5dc0c40238c382e3e30efe53b92a0</anchor>
      <arglist>(int *d, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a2730265d5eb2c1beb02f2a80d353ee41</anchor>
      <arglist>(unsigned int *d, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a8f9c4a25085a2e8db22d0580cc29e761</anchor>
      <arglist>(long *d, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>ad2b67cb2d58ebf922156359389aba74b</anchor>
      <arglist>(unsigned long *d, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>aeab7fe167cadb594a20f80d50f99cdfc</anchor>
      <arglist>(opp_long_long *d, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a9007d02786fedbd9e63ee9514655d556</anchor>
      <arglist>(opp_unsigned_long_long *d, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>af06b1ec9c95a8f39c8d457de03ca2b59</anchor>
      <arglist>(float *d, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a51b6a609fe30dcc46c25ee7b12c03db1</anchor>
      <arglist>(double *d, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>adf289851a2250e43369de9beff5f1491</anchor>
      <arglist>(long double *d, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a35b396e964a38218dcccc1f03b49f6c2</anchor>
      <arglist>(const char **d, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a50e7a89c85c87646ca470ae426241fac</anchor>
      <arglist>(opp_string *d, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcNetCommBuffer.html</anchorfile>
      <anchor>a8f1622dfdadea80e391c2f755f8c98d7</anchor>
      <arglist>(SimTime *d, int size)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CommonAPIMessage</name>
    <filename>classCommonAPIMessage.html</filename>
    <member kind="function">
      <type></type>
      <name>CommonAPIMessage</name>
      <anchorfile>classCommonAPIMessage.html</anchorfile>
      <anchor>a968a2ec9cc13930c23f37175e876e1a1</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CommonAPIMessage</name>
      <anchorfile>classCommonAPIMessage.html</anchorfile>
      <anchor>a239b891ddab6213f0384d3a060a33adc</anchor>
      <arglist>(const CommonAPIMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CommonAPIMessage</name>
      <anchorfile>classCommonAPIMessage.html</anchorfile>
      <anchor>a29af7883553026332d7c26317746b551</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CommonAPIMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classCommonAPIMessage.html</anchorfile>
      <anchor>a277e5724a44cac6c312f3e0dcb5cad5f</anchor>
      <arglist>(const CommonAPIMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommonAPIMessage *</type>
      <name>dup</name>
      <anchorfile>classCommonAPIMessage.html</anchorfile>
      <anchor>ab67109b85150c048cd9813ead0a53ac3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classCommonAPIMessage.html</anchorfile>
      <anchor>a77b3e736ff1daadfc4323cf5dea1ad08</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classCommonAPIMessage.html</anchorfile>
      <anchor>a58a2edb331c13e3018949d1eb4b74e22</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getType</name>
      <anchorfile>classCommonAPIMessage.html</anchorfile>
      <anchor>ab98299e1a2d6dd899c6b8260e77d47e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchorfile>classCommonAPIMessage.html</anchorfile>
      <anchor>a29fdd8c02687c486dc30834acd7405e5</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCommonAPIMessage.html</anchorfile>
      <anchor>ade26063599b9893738dfa9cb50c7bf04</anchor>
      <arglist>(const CommonAPIMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>type_var</name>
      <anchorfile>classCommonAPIMessage.html</anchorfile>
      <anchor>a20d8f2eea6296153e80d1194c1b8cdeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classCommonAPIMessage.html</anchorfile>
      <anchor>abd1c4c7718a2e7fc327d2c9b22f4674e</anchor>
      <arglist>(const CommonAPIMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Comparator</name>
    <filename>classComparator.html</filename>
    <templarg>T</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Comparator</name>
      <anchorfile>classComparator.html</anchorfile>
      <anchor>a971d34a9f90d176ba18aef55fe1f29c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classComparator.html</anchorfile>
      <anchor>aeae08f99112f518214c0a622dba1adf2</anchor>
      <arglist>(const T &amp;lhs, const T &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CompReadyMessage</name>
    <filename>classCompReadyMessage.html</filename>
    <member kind="function">
      <type></type>
      <name>CompReadyMessage</name>
      <anchorfile>classCompReadyMessage.html</anchorfile>
      <anchor>a52976478dcd82cb3624da40472982ea2</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompReadyMessage</name>
      <anchorfile>classCompReadyMessage.html</anchorfile>
      <anchor>a8b463ed3d37218800183f5c53d05c748</anchor>
      <arglist>(const CompReadyMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CompReadyMessage</name>
      <anchorfile>classCompReadyMessage.html</anchorfile>
      <anchor>ab4d1b7dfa9eeca0b47f6871e84af08be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CompReadyMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classCompReadyMessage.html</anchorfile>
      <anchor>ab13487cef21b4a3a56413c99358f9d73</anchor>
      <arglist>(const CompReadyMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CompReadyMessage *</type>
      <name>dup</name>
      <anchorfile>classCompReadyMessage.html</anchorfile>
      <anchor>a3d18800e30bd1af7bb2976c795c269ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classCompReadyMessage.html</anchorfile>
      <anchor>ac34154bdf70d26807a3477aa00263e3b</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classCompReadyMessage.html</anchorfile>
      <anchor>ac4a0f0d5d434266d5850c0650b0cf4b9</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getReady</name>
      <anchorfile>classCompReadyMessage.html</anchorfile>
      <anchor>adbc73cb3852f357191584e7a9684838f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReady</name>
      <anchorfile>classCompReadyMessage.html</anchorfile>
      <anchor>a07d2b2a15889728c23ed4d80730de2cf</anchor>
      <arglist>(bool ready)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getComp</name>
      <anchorfile>classCompReadyMessage.html</anchorfile>
      <anchor>a3804fb9b24445b1af5484da00634d075</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setComp</name>
      <anchorfile>classCompReadyMessage.html</anchorfile>
      <anchor>a77640d7f3566804064921b2520ed51b6</anchor>
      <arglist>(int comp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getNodeId</name>
      <anchorfile>classCompReadyMessage.html</anchorfile>
      <anchor>ad199433f7bbe1651a6c83774943dd07b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getNodeId</name>
      <anchorfile>classCompReadyMessage.html</anchorfile>
      <anchor>a35b0117f99b24d542fa7a5dc5c1acc32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNodeId</name>
      <anchorfile>classCompReadyMessage.html</anchorfile>
      <anchor>a5ba50ee2e0a21f471a6361b73050c90f</anchor>
      <arglist>(const OverlayKey &amp;nodeId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCompReadyMessage.html</anchorfile>
      <anchor>a52915ce78ddcbb9449d754ef1051873c</anchor>
      <arglist>(const CompReadyMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ready_var</name>
      <anchorfile>classCompReadyMessage.html</anchorfile>
      <anchor>a3c38522ab1b414f576320eef1a1e6a0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>comp_var</name>
      <anchorfile>classCompReadyMessage.html</anchorfile>
      <anchor>a9497eda4103cfd39e6dbd9b51adc3999</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>nodeId_var</name>
      <anchorfile>classCompReadyMessage.html</anchorfile>
      <anchor>a0a1630d82b627e5cf794897bab9dce8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classCompReadyMessage.html</anchorfile>
      <anchor>adee0642b318259359248f009cb487bcd</anchor>
      <arglist>(const CompReadyMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConnectivityProbe</name>
    <filename>classConnectivityProbe.html</filename>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classConnectivityProbe.html</anchorfile>
      <anchor>ab3b83299366ace086e6989f37c5c710d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classConnectivityProbe.html</anchorfile>
      <anchor>a61c260c45a83f7987a0a5c91c5a88996</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConnectivityProbe</name>
      <anchorfile>classConnectivityProbe.html</anchorfile>
      <anchor>aff809e6d2d8ef9d11fa6862ef1ff9f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>extractTopology</name>
      <anchorfile>classConnectivityProbe.html</anchorfile>
      <anchor>a75fb44f22cf6892e6a2114b7b3df305a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resetTopologyNodes</name>
      <anchorfile>classConnectivityProbe.html</anchorfile>
      <anchor>a529ca2372af8551e329a82136cb55153</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>unsigned int</type>
      <name>getComponentSize</name>
      <anchorfile>classConnectivityProbe.html</anchorfile>
      <anchor>a19c8b00030edb457d0641dfd3d80a2d3</anchor>
      <arglist>(OverlayKey key)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::fstream</type>
      <name>pltNetwork</name>
      <anchorfile>classConnectivityProbe.html</anchorfile>
      <anchor>ac2febccc3cbed1977870b38dc069779d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::fstream</type>
      <name>pltData</name>
      <anchorfile>classConnectivityProbe.html</anchorfile>
      <anchor>aef6a49cd47d34970954c31d4d462c8f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::fstream</type>
      <name>pltVector</name>
      <anchorfile>classConnectivityProbe.html</anchorfile>
      <anchor>a53077f7524e2a7762275b9de376974d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>probeIntervall</name>
      <anchorfile>classConnectivityProbe.html</anchorfile>
      <anchor>a44b27f0374d7a3bb43bfd3220d4f3fcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>plotIntervall</name>
      <anchorfile>classConnectivityProbe.html</anchorfile>
      <anchor>aef8bc03e46c75ecdab85d20d8e6c115a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>plotConnections</name>
      <anchorfile>classConnectivityProbe.html</anchorfile>
      <anchor>a1144fef1748e875569210dc3d0ef3489</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>plotMissing</name>
      <anchorfile>classConnectivityProbe.html</anchorfile>
      <anchor>ab4a64e9f16fff42696c7e1652426724b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>probeTimer</name>
      <anchorfile>classConnectivityProbe.html</anchorfile>
      <anchor>a8993bae382086599dcad12a6003e8495</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>plotTimer</name>
      <anchorfile>classConnectivityProbe.html</anchorfile>
      <anchor>a6b2b10a6e96fa35a03399ded78e67326</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>VTopology</type>
      <name>Topology</name>
      <anchorfile>classConnectivityProbe.html</anchorfile>
      <anchor>aa6bf6d9febff6cbb5dea163899ae4acf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GlobalStatistics *</type>
      <name>globalStatistics</name>
      <anchorfile>classConnectivityProbe.html</anchorfile>
      <anchor>a37c17d0ce4a0be416ed623a19732927b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cOutVector</type>
      <name>cOV_NodeCount</name>
      <anchorfile>classConnectivityProbe.html</anchorfile>
      <anchor>a8286de3a23ca8bf92b9efc1ea735631b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cOutVector</type>
      <name>cOV_MaximumComponent</name>
      <anchorfile>classConnectivityProbe.html</anchorfile>
      <anchor>a72cc58059fdfb4609a69a3769f4e2905</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cOutVector</type>
      <name>cOV_MaxConnectivity</name>
      <anchorfile>classConnectivityProbe.html</anchorfile>
      <anchor>ae0af4c326bb947a9b0fc83f881417b57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cOutVector</type>
      <name>cOV_ZeroMissingNeighbors</name>
      <anchorfile>classConnectivityProbe.html</anchorfile>
      <anchor>aa73d6d0095946b3f7d1f3b231f7773bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cOutVector</type>
      <name>cOV_AverageMissingNeighbors</name>
      <anchorfile>classConnectivityProbe.html</anchorfile>
      <anchor>a6d94a1e818ec8d380f25dd5ed17283a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cOutVector</type>
      <name>cOV_MaxMissingNeighbors</name>
      <anchorfile>classConnectivityProbe.html</anchorfile>
      <anchor>aa763118d0c00b676a06cb4976abfe1e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cOutVector</type>
      <name>cOV_AverageDrift</name>
      <anchorfile>classConnectivityProbe.html</anchorfile>
      <anchor>a00626812d27bada4c6140351725dcc96</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConnectivityProbeApp</name>
    <filename>classConnectivityProbeApp.html</filename>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classConnectivityProbeApp.html</anchorfile>
      <anchor>ae797e2c53703105763f22c405cf94dec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classConnectivityProbeApp.html</anchorfile>
      <anchor>a00cd081e9f5cda3bd00069638f043cb6</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConnectivityProbeApp</name>
      <anchorfile>classConnectivityProbeApp.html</anchorfile>
      <anchor>a219342af361b55d528f4ba817a2aacab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>extractTopology</name>
      <anchorfile>classConnectivityProbeApp.html</anchorfile>
      <anchor>ac7ab867863ed1f795c34db29b36c5703</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>probeIntervall</name>
      <anchorfile>classConnectivityProbeApp.html</anchorfile>
      <anchor>a690818075d7a369a25458b712cf18e4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>probeTimer</name>
      <anchorfile>classConnectivityProbeApp.html</anchorfile>
      <anchor>a26f79f0dfd70e5854a9887e82366e438</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GlobalStatistics *</type>
      <name>globalStatistics</name>
      <anchorfile>classConnectivityProbeApp.html</anchorfile>
      <anchor>a38c0dd7585bb31148e463a60ee653875</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; NodeHandle, SimpleGameClient * &gt;</type>
      <name>Topology</name>
      <anchorfile>classConnectivityProbeApp.html</anchorfile>
      <anchor>ab3630f14ed3b68d7f42885f08ec63dfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cOutVector</type>
      <name>cOV_NodeCount</name>
      <anchorfile>classConnectivityProbeApp.html</anchorfile>
      <anchor>a954eaab23920aecaa8c073cd3d6093ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cOutVector</type>
      <name>cOV_ZeroMissingNeighbors</name>
      <anchorfile>classConnectivityProbeApp.html</anchorfile>
      <anchor>aa3dcc9ec951dad751e5662dc98852edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cOutVector</type>
      <name>cOV_AverageMissingNeighbors</name>
      <anchorfile>classConnectivityProbeApp.html</anchorfile>
      <anchor>ae9d1dbcb79349927a25bb9d8721f283f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cOutVector</type>
      <name>cOV_MaxMissingNeighbors</name>
      <anchorfile>classConnectivityProbeApp.html</anchorfile>
      <anchor>ac0fe22a3b7f72ac26aac89353a757b89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cOutVector</type>
      <name>cOV_AverageDrift</name>
      <anchorfile>classConnectivityProbeApp.html</anchorfile>
      <anchor>ab0b5439c0f9c01727f5c49c341ccc3d4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConnectivityProbeQuon</name>
    <filename>classConnectivityProbeQuon.html</filename>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classConnectivityProbeQuon.html</anchorfile>
      <anchor>a5cb8b4f7e2c911713e71b3427cbdbc29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classConnectivityProbeQuon.html</anchorfile>
      <anchor>a15a1368dc32f1b97ce5d85ef22efbf10</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConnectivityProbeQuon</name>
      <anchorfile>classConnectivityProbeQuon.html</anchorfile>
      <anchor>af25c584f75b13b63074c53f547573493</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>extractTopology</name>
      <anchorfile>classConnectivityProbeQuon.html</anchorfile>
      <anchor>a2532584f5a27044b3f0c1169eccc07f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resetTopologyNodes</name>
      <anchorfile>classConnectivityProbeQuon.html</anchorfile>
      <anchor>a3b685cfc6104c86658927f436007fb9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>unsigned int</type>
      <name>getComponentSize</name>
      <anchorfile>classConnectivityProbeQuon.html</anchorfile>
      <anchor>ae8eab5a129bdf382d4ee9c35e6fea3bb</anchor>
      <arglist>(OverlayKey key)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::fstream</type>
      <name>pltNetwork</name>
      <anchorfile>classConnectivityProbeQuon.html</anchorfile>
      <anchor>ac20fb4a17b188ed675a608a466fa5998</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::fstream</type>
      <name>pltData</name>
      <anchorfile>classConnectivityProbeQuon.html</anchorfile>
      <anchor>a04b73f1d684aa8ae9b3879d19553c06d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::fstream</type>
      <name>pltVector</name>
      <anchorfile>classConnectivityProbeQuon.html</anchorfile>
      <anchor>a26a1ba653eac99bed5dbcfc4ef9debed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>probeIntervall</name>
      <anchorfile>classConnectivityProbeQuon.html</anchorfile>
      <anchor>a870ffb296f9b7d83c2d2a1d387564e91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>plotIntervall</name>
      <anchorfile>classConnectivityProbeQuon.html</anchorfile>
      <anchor>aa921b096f088f2012dae856dc9d6c849</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>startPlotTime</name>
      <anchorfile>classConnectivityProbeQuon.html</anchorfile>
      <anchor>a29f634821582718c9a570f6ae5e7e452</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>plotPeriod</name>
      <anchorfile>classConnectivityProbeQuon.html</anchorfile>
      <anchor>a80f768a930ea0641b2e073bbcbcb131d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>plotConnections</name>
      <anchorfile>classConnectivityProbeQuon.html</anchorfile>
      <anchor>ad5cb31dda813a7971487a670c64fc514</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>plotBindings</name>
      <anchorfile>classConnectivityProbeQuon.html</anchorfile>
      <anchor>a0ffb677a6ca5b11f6d4cb9bd6fd9b341</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>plotMissing</name>
      <anchorfile>classConnectivityProbeQuon.html</anchorfile>
      <anchor>a5f443696c04e8ddbc0dfb23742aeb2c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>probeTimer</name>
      <anchorfile>classConnectivityProbeQuon.html</anchorfile>
      <anchor>adf28294e1609928fa35fa53b4b485a6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>plotTimer</name>
      <anchorfile>classConnectivityProbeQuon.html</anchorfile>
      <anchor>a143234243328effded2fc67b9ab3850d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QuonTopology</type>
      <name>Topology</name>
      <anchorfile>classConnectivityProbeQuon.html</anchorfile>
      <anchor>a41409445369dd661f1845f1ff7c0a618</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GlobalStatistics *</type>
      <name>globalStatistics</name>
      <anchorfile>classConnectivityProbeQuon.html</anchorfile>
      <anchor>a841556008f87239ff6d831d0e43ef1bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cOutVector</type>
      <name>cOV_NodeCount</name>
      <anchorfile>classConnectivityProbeQuon.html</anchorfile>
      <anchor>a58eb47578a7cf06a8bfee565b700be12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cOutVector</type>
      <name>cOV_MaximumComponent</name>
      <anchorfile>classConnectivityProbeQuon.html</anchorfile>
      <anchor>ad2dcb315c5aae8e3953e98d4e977d02b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cOutVector</type>
      <name>cOV_MaxConnectivity</name>
      <anchorfile>classConnectivityProbeQuon.html</anchorfile>
      <anchor>a5284ab15c8878e3411ac6552fc8af85e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cOutVector</type>
      <name>cOV_ZeroMissingNeighbors</name>
      <anchorfile>classConnectivityProbeQuon.html</anchorfile>
      <anchor>a616082d569b455c4f71209281d464465</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cOutVector</type>
      <name>cOV_AverageMissingNeighbors</name>
      <anchorfile>classConnectivityProbeQuon.html</anchorfile>
      <anchor>a8297c67dac944feec5237b07d0e8b24c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cOutVector</type>
      <name>cOV_MaxMissingNeighbors</name>
      <anchorfile>classConnectivityProbeQuon.html</anchorfile>
      <anchor>a63daf44e7a3d4025a1a9fea4742eac0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cOutVector</type>
      <name>cOV_AverageDrift</name>
      <anchorfile>classConnectivityProbeQuon.html</anchorfile>
      <anchor>a5cc09720439371683dbb05022dc977f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConnectReaSE</name>
    <filename>classConnectReaSE.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>addOverlayNode</name>
      <anchorfile>classConnectReaSE.html</anchorfile>
      <anchor>afae70fcc4fd62b2747f9baf1d6447330</anchor>
      <arglist>(AccessInfo *overlayNode, bool migrate=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AccessInfo</type>
      <name>getAccessNode</name>
      <anchorfile>classConnectReaSE.html</anchorfile>
      <anchor>aa37d350c7f2e532e38a086c57fb1aff4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>removeOverlayNode</name>
      <anchorfile>classConnectReaSE.html</anchorfile>
      <anchor>a05a2bf92b9835d8c8c08984d76f63816</anchor>
      <arglist>(int ID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>getOverlayNode</name>
      <anchorfile>classConnectReaSE.html</anchorfile>
      <anchor>a363fd647694e7a4861d9772370215c62</anchor>
      <arglist>(int ID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AccessInfo</type>
      <name>migrateNode</name>
      <anchorfile>classConnectReaSE.html</anchorfile>
      <anchor>a20dba668e41ac6e1355a8a3532c25f6d</anchor>
      <arglist>(int ID)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classConnectReaSE.html</anchorfile>
      <anchor>ad6c0e947357a5f5f6a414472bfcaa48e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classConnectReaSE.html</anchorfile>
      <anchor>a4318ff9f6c728543ba54d33e9b84b6c9</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classConnectReaSE.html</anchorfile>
      <anchor>a6e79eeb020470d53fcf215f57bfddd59</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateDisplayString</name>
      <anchorfile>classConnectReaSE.html</anchorfile>
      <anchor>a4d5218edbd0da581ade977fbcd190627</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>channelTypesRx</name>
      <anchorfile>classConnectReaSE.html</anchorfile>
      <anchor>ad78ed96a9c6faf299bd3bd8c074d514a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>channelTypesTx</name>
      <anchorfile>classConnectReaSE.html</anchorfile>
      <anchor>a24856f41fcc7f54690a44392de253d3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; terminalInfo &gt;</type>
      <name>overlayTerminal</name>
      <anchorfile>classConnectReaSE.html</anchorfile>
      <anchor>aa7816705c6d6cbb1a59ef0106e4977ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>lifetimeVector</name>
      <anchorfile>classConnectReaSE.html</anchorfile>
      <anchor>a21d47d69488255394b58bf6e8743d9a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; autoSystem &gt;</type>
      <name>AS_Pool</name>
      <anchorfile>classConnectReaSE.html</anchorfile>
      <anchor>ac663a8011432b547c603d65d2fdf2573</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; edgePool &gt;</type>
      <name>globalEdgePool</name>
      <anchorfile>classConnectReaSE.html</anchorfile>
      <anchor>a8edf516fbcddc9160a2d4a3e58f37ba4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>totalCountOfAS</name>
      <anchorfile>classConnectReaSE.html</anchorfile>
      <anchor>a8441d943e922378fab9e9110a07ddc4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>nextPow</name>
      <anchorfile>classConnectReaSE.html</anchorfile>
      <anchor>af855b1db424af57f7b18b186d8da7d1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>ASShift</name>
      <anchorfile>classConnectReaSE.html</anchorfile>
      <anchor>a2d261fb5254b0bc82c37604338a35d04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>channelDiversity</name>
      <anchorfile>classConnectReaSE.html</anchorfile>
      <anchor>ae59763cd85903909960aeab8a68dfbd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>cGate *</type>
      <name>firstUnusedGate</name>
      <anchorfile>classConnectReaSE.html</anchorfile>
      <anchor>ad233dcff5200ab7ccfe0f95dc7961a09</anchor>
      <arglist>(cModule *owner, const char *name, cGate::Type type=cGate::NONE)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setUpAS</name>
      <anchorfile>classConnectReaSE.html</anchorfile>
      <anchor>af9833933a3731687ff21cb3288fb5a14</anchor>
      <arglist>(cModule *currAS)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static bool</type>
      <name>extractFromParentModule</name>
      <anchorfile>classConnectReaSE.html</anchorfile>
      <anchor>ad06fadd6babf16d663b1d3353fb5675b</anchor>
      <arglist>(cModule *currModule, void *properties)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoordBasedRouting</name>
    <filename>classCoordBasedRouting.html</filename>
    <member kind="function">
      <type></type>
      <name>CoordBasedRouting</name>
      <anchorfile>classCoordBasedRouting.html</anchorfile>
      <anchor>aafeb7146d84ec3cc6b1d0388938a52cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CoordBasedRouting</name>
      <anchorfile>classCoordBasedRouting.html</anchorfile>
      <anchor>af0f9b42ba91ce24cd17526cddb8aabd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OverlayKey</type>
      <name>getNodeId</name>
      <anchorfile>classCoordBasedRouting.html</anchorfile>
      <anchor>ad1d30e6d5378c12e3796a550e18563a0</anchor>
      <arglist>(const Coords &amp;coords, uint8_t bpd, uint8_t length, const AP *cap=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>getXmlDimensions</name>
      <anchorfile>classCoordBasedRouting.html</anchorfile>
      <anchor>a1d7363dbdbee2b273a6f9790d28787da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEuclidianDistanceByKeyAndCoords</name>
      <anchorfile>classCoordBasedRouting.html</anchorfile>
      <anchor>a2c416fa6b49dfaa22b98f754a691fcaa</anchor>
      <arglist>(const OverlayKey &amp;destKey, const std::vector&lt; double &gt; &amp;nodeCoords, uint8_t bpd, const AP *cap=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>const AP *</type>
      <name>calculateCapFromCcd</name>
      <anchorfile>classCoordBasedRouting.html</anchorfile>
      <anchor>a3d6703cf4f039648d02324809a455e01</anchor>
      <arglist>(const CD &amp;ccd, uint8_t bpd)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>changeIdLater</name>
      <anchorfile>classCoordBasedRouting.html</anchorfile>
      <anchor>aacff616bb863c37a7ef540b6f9b8228a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getChangeIdStart</name>
      <anchorfile>classCoordBasedRouting.html</anchorfile>
      <anchor>a1dc2fea0b8591bf97fcc34d6e4e2f46f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getChangeIdStop</name>
      <anchorfile>classCoordBasedRouting.html</anchorfile>
      <anchor>a6dda44575b2598c3e28b2a7fe299a3f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classCoordBasedRouting.html</anchorfile>
      <anchor>ae310b8a24558c2e9721d537290da5e54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classCoordBasedRouting.html</anchorfile>
      <anchor>ae76313d5ae65847210f94c7d50ea1e64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>parseSource</name>
      <anchorfile>classCoordBasedRouting.html</anchorfile>
      <anchor>a2c9af7d1772146c4178ff2c42acb00d1</anchor>
      <arglist>(const char *areaCoordinateSource)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::string</type>
      <name>getPrefix</name>
      <anchorfile>classCoordBasedRouting.html</anchorfile>
      <anchor>a96f1c72c20cec414da7452e84cbc58ac</anchor>
      <arglist>(const Coords &amp;coords, const AP *cap=NULL) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>checkDimensions</name>
      <anchorfile>classCoordBasedRouting.html</anchorfile>
      <anchor>ac1e8cf34e365f1420961a07781b4e6a8</anchor>
      <arglist>(uint8_t dims) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>splitNodes</name>
      <anchorfile>classCoordBasedRouting.html</anchorfile>
      <anchor>a183e18e2ff3da1e6adb2acf0b2cc3347</anchor>
      <arglist>(CD &amp;nodes, const std::string &amp;prefix, const Coords &amp;bottoms, const Coords &amp;tops, uint8_t depth, AP *cap)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char *</type>
      <name>areaCoordinateSource</name>
      <anchorfile>classCoordBasedRouting.html</anchorfile>
      <anchor>a06d768682c8a5118a973aa8a0bb5b94a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint8_t</type>
      <name>cbrStartAtDigit</name>
      <anchorfile>classCoordBasedRouting.html</anchorfile>
      <anchor>a22f2f5908dc2b57f7b9068b3e3dda4cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint8_t</type>
      <name>cbrStopAtDigit</name>
      <anchorfile>classCoordBasedRouting.html</anchorfile>
      <anchor>a63ac320296df233c2e112b0d5e2f6b42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint8_t</type>
      <name>xmlDimensions</name>
      <anchorfile>classCoordBasedRouting.html</anchorfile>
      <anchor>af51af23d320288f9b8b4ca462c4ae888</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>cbrChangeIdLater</name>
      <anchorfile>classCoordBasedRouting.html</anchorfile>
      <anchor>a436dcb243b66f27b3fec52a74ae3b4aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>cbrChangeIdStart</name>
      <anchorfile>classCoordBasedRouting.html</anchorfile>
      <anchor>a9c3073e5bc90e43515707a0dcd6af7a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>cbrChangeIdStop</name>
      <anchorfile>classCoordBasedRouting.html</anchorfile>
      <anchor>a4303c35afe27eb9b0a5242735fb01215</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AP *</type>
      <name>gap</name>
      <anchorfile>classCoordBasedRouting.html</anchorfile>
      <anchor>abee492dad5861d90544f7e8a54b43958</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GlobalNodeList *</type>
      <name>globalNodeList</name>
      <anchorfile>classCoordBasedRouting.html</anchorfile>
      <anchor>a9d9f09afbb18729640202c4534f40baa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint8_t</type>
      <name>ccdDim</name>
      <anchorfile>classCoordBasedRouting.html</anchorfile>
      <anchor>acd0e4803a40213f60d1723d620cd173e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint16_t</type>
      <name>maxPrefix</name>
      <anchorfile>classCoordBasedRouting.html</anchorfile>
      <anchor>af7e53fdd4dca1189d56c72983f84a401</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::string</type>
      <name>NOPREFIX</name>
      <anchorfile>classCoordBasedRouting.html</anchorfile>
      <anchor>a2af647718fab79686a441bba1d9145ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoordBasedRoutingAccess</name>
    <filename>classCoordBasedRoutingAccess.html</filename>
    <member kind="function">
      <type>CoordBasedRouting *</type>
      <name>get</name>
      <anchorfile>classCoordBasedRoutingAccess.html</anchorfile>
      <anchor>a52ae7545ba854d93787e15fb4f4bf0a6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoordCalcFunction</name>
    <filename>classCoordCalcFunction.html</filename>
    <member kind="function">
      <type></type>
      <name>CoordCalcFunction</name>
      <anchorfile>classCoordCalcFunction.html</anchorfile>
      <anchor>a59734c5fec02f6d0e416cc4363c92968</anchor>
      <arglist>(const std::vector&lt; LandmarkDataEntry &gt; myLandmarks)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>f</name>
      <anchorfile>classCoordCalcFunction.html</anchorfile>
      <anchor>a22b83f9ff70240a56ad7215725f376cb</anchor>
      <arglist>(const Vec_DP &amp;initCoordinates) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>simplex_min</name>
      <anchorfile>classCoordCalcFunction.html</anchorfile>
      <anchor>a9d232ad0e0ca9a463fc97d34f799762b</anchor>
      <arglist>(CoordCalcFunction *functionObject, Vec_DP &amp;init)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>endnodeDistance</name>
      <anchorfile>classCoordCalcFunction.html</anchorfile>
      <anchor>ad3a6efff8046342c054036cfddd8d624</anchor>
      <arglist>(const Vec_DP &amp;nodeCoordinates, LandmarkDataEntry landmark) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; LandmarkDataEntry &gt;</type>
      <name>landmarks</name>
      <anchorfile>classCoordCalcFunction.html</anchorfile>
      <anchor>afedfa7380d9cb1324ab42f860a88f114</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoordDataContainer</name>
    <filename>classCoordDataContainer.html</filename>
    <member kind="function">
      <type></type>
      <name>CoordDataContainer</name>
      <anchorfile>classCoordDataContainer.html</anchorfile>
      <anchor>af20fbc61673209bcd1d826f48c0971ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CoordDataContainer</name>
      <anchorfile>classCoordDataContainer.html</anchorfile>
      <anchor>adde9b65f1fd83f324d671375030f07a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBitLength</name>
      <anchorfile>classCoordDataContainer.html</anchorfile>
      <anchor>a44f4f62b335461f4204060aed9d88639</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>coordinatesVector</name>
      <anchorfile>classCoordDataContainer.html</anchorfile>
      <anchor>a98727bc17787ab95f61d0561a7eb910b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoordsOfNodeCall</name>
    <filename>classCoordsOfNodeCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>CoordsOfNodeCall</name>
      <anchorfile>classCoordsOfNodeCall.html</anchorfile>
      <anchor>aeb866a481768efff82592ff708afbd9c</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoordsOfNodeCall</name>
      <anchorfile>classCoordsOfNodeCall.html</anchorfile>
      <anchor>a52e1f7b148eafc5344b5dae48b148498</anchor>
      <arglist>(const CoordsOfNodeCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CoordsOfNodeCall</name>
      <anchorfile>classCoordsOfNodeCall.html</anchorfile>
      <anchor>ad75a88c8e056976cc1614b68720ada4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoordsOfNodeCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classCoordsOfNodeCall.html</anchorfile>
      <anchor>a69b8ee81040d3c6ae9eec8c9159b1334</anchor>
      <arglist>(const CoordsOfNodeCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CoordsOfNodeCall *</type>
      <name>dup</name>
      <anchorfile>classCoordsOfNodeCall.html</anchorfile>
      <anchor>a5043a8e1abe3b4eb377e3c2d570ae816</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classCoordsOfNodeCall.html</anchorfile>
      <anchor>a45b60a0719114a8755c7011b2abe89d6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classCoordsOfNodeCall.html</anchorfile>
      <anchor>a1c0bc8ed570b59dc646fd4f67d0a9784</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCoordsOfNodeCall.html</anchorfile>
      <anchor>a330cf09c147d44760bd03b72aa7f8cd5</anchor>
      <arglist>(const CoordsOfNodeCall &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classCoordsOfNodeCall.html</anchorfile>
      <anchor>a33922e04ed8fc4fd7d2c54bbb80b494a</anchor>
      <arglist>(const CoordsOfNodeCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoordsOfNodeResponse</name>
    <filename>classCoordsOfNodeResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>CoordsOfNodeResponse</name>
      <anchorfile>classCoordsOfNodeResponse.html</anchorfile>
      <anchor>ae74452a23f96e072cd301dcc953cf806</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoordsOfNodeResponse</name>
      <anchorfile>classCoordsOfNodeResponse.html</anchorfile>
      <anchor>a334b7fc2a8e8e81a93c62aaa939cddbd</anchor>
      <arglist>(const CoordsOfNodeResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CoordsOfNodeResponse</name>
      <anchorfile>classCoordsOfNodeResponse.html</anchorfile>
      <anchor>a317922cc7375cc6bd48d14ad0163bf14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoordsOfNodeResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classCoordsOfNodeResponse.html</anchorfile>
      <anchor>a52ec2feaaef188d1ec6b4a83c0aebd49</anchor>
      <arglist>(const CoordsOfNodeResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CoordsOfNodeResponse *</type>
      <name>dup</name>
      <anchorfile>classCoordsOfNodeResponse.html</anchorfile>
      <anchor>a3c5d675ca5cab74d67b6821392e83d72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classCoordsOfNodeResponse.html</anchorfile>
      <anchor>a0ff23fc837b70634daa68ed302fd6d47</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classCoordsOfNodeResponse.html</anchorfile>
      <anchor>aed31b271bcd6e5cc11970e07cc015b7e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getLayer</name>
      <anchorfile>classCoordsOfNodeResponse.html</anchorfile>
      <anchor>ad89bd8e3159af750a545b970289885bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLayer</name>
      <anchorfile>classCoordsOfNodeResponse.html</anchorfile>
      <anchor>a7eb232652c58d01f01fda50c48f7d610</anchor>
      <arglist>(char layer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCoordsOfNodeResponse.html</anchorfile>
      <anchor>a6e8a6e65c589325b8a638d8c541b8b59</anchor>
      <arglist>(const CoordsOfNodeResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>layer_var</name>
      <anchorfile>classCoordsOfNodeResponse.html</anchorfile>
      <anchor>aa94f0d67b1d7795a8ed62ab4033e9af6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classCoordsOfNodeResponse.html</anchorfile>
      <anchor>a64a384ee824d2ee2ffd023e23ba80776</anchor>
      <arglist>(const CoordsOfNodeResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoordsReqCall</name>
    <filename>classCoordsReqCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>CoordsReqCall</name>
      <anchorfile>classCoordsReqCall.html</anchorfile>
      <anchor>a095864fee603930ba05297c00e673f52</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoordsReqCall</name>
      <anchorfile>classCoordsReqCall.html</anchorfile>
      <anchor>a2fd78e7dd641f1e2a9d4688c3c798699</anchor>
      <arglist>(const CoordsReqCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CoordsReqCall</name>
      <anchorfile>classCoordsReqCall.html</anchorfile>
      <anchor>a624a0c72061b00693ae8788d2b493c5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoordsReqCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classCoordsReqCall.html</anchorfile>
      <anchor>a19ce2efdca2fefad6d7cadb7ce1bdaf3</anchor>
      <arglist>(const CoordsReqCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CoordsReqCall *</type>
      <name>dup</name>
      <anchorfile>classCoordsReqCall.html</anchorfile>
      <anchor>a6f4fc052b96c84a135067a12df98790b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classCoordsReqCall.html</anchorfile>
      <anchor>ac6db7eea66313c0bf3b8a989af20eef8</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classCoordsReqCall.html</anchorfile>
      <anchor>aba182f8ca42bc99effcce18aee977399</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCoordsReqCall.html</anchorfile>
      <anchor>a58539d58db345b78d0eebbe1b8237dca</anchor>
      <arglist>(const CoordsReqCall &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classCoordsReqCall.html</anchorfile>
      <anchor>a3da4b94464e639f63864a05b03bee170</anchor>
      <arglist>(const CoordsReqCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoordsReqResponse</name>
    <filename>classCoordsReqResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>CoordsReqResponse</name>
      <anchorfile>classCoordsReqResponse.html</anchorfile>
      <anchor>a454f6ce3ea9fc8e630c4a84399fcc034</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoordsReqResponse</name>
      <anchorfile>classCoordsReqResponse.html</anchorfile>
      <anchor>ab3758e7d42ec9b545278827adf9c5b49</anchor>
      <arglist>(const CoordsReqResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CoordsReqResponse</name>
      <anchorfile>classCoordsReqResponse.html</anchorfile>
      <anchor>a1eadf8851734f2d1e2e6a4472a78bdf0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoordsReqResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classCoordsReqResponse.html</anchorfile>
      <anchor>a84be00d062852014c6c8ad91d4266a54</anchor>
      <arglist>(const CoordsReqResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CoordsReqResponse *</type>
      <name>dup</name>
      <anchorfile>classCoordsReqResponse.html</anchorfile>
      <anchor>a002fa8a3326ca036cdf61e0ec57ba3dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classCoordsReqResponse.html</anchorfile>
      <anchor>a77a86e3f0e638e6c655b47c46bcbb735</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classCoordsReqResponse.html</anchorfile>
      <anchor>a9d7c7fa9fef2c671f2bfd8c5ce6363b7</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getLayer</name>
      <anchorfile>classCoordsReqResponse.html</anchorfile>
      <anchor>ab86e7828f9891d39b9f3249bfa9dd33b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLayer</name>
      <anchorfile>classCoordsReqResponse.html</anchorfile>
      <anchor>a9d4d7be9113d0e880879324c4e04de6f</anchor>
      <arglist>(char layer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCoordsReqResponse.html</anchorfile>
      <anchor>a412b0a066a76b476e74004d38cd53f00</anchor>
      <arglist>(const CoordsReqResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>layer_var</name>
      <anchorfile>classCoordsReqResponse.html</anchorfile>
      <anchor>ac224a3657ef9a71c32569e21232935cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classCoordsReqResponse.html</anchorfile>
      <anchor>ac01d00c68aaa56ec4233490a11b92bce</anchor>
      <arglist>(const CoordsReqResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPointerMapWatcher</name>
    <filename>classcPointerMapWatcher.html</filename>
    <templarg>KeyT</templarg>
    <templarg>ValueT</templarg>
    <templarg>CmpT</templarg>
    <member kind="function">
      <type></type>
      <name>cPointerMapWatcher</name>
      <anchorfile>classcPointerMapWatcher.html</anchorfile>
      <anchor>a39f836b5df27f9807a9056345ba5638d</anchor>
      <arglist>(const char *name, std::map&lt; KeyT, ValueT, CmpT &gt; &amp;var)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getClassName</name>
      <anchorfile>classcPointerMapWatcher.html</anchorfile>
      <anchor>a6b46b6dafa8cd2d2bb2201b8e52bad3d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getElemTypeName</name>
      <anchorfile>classcPointerMapWatcher.html</anchorfile>
      <anchor>a08d4615d858401c595d53f6fd405ac7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classcPointerMapWatcher.html</anchorfile>
      <anchor>ab75bfb0e5e39e60db1c690be53f7063c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>at</name>
      <anchorfile>classcPointerMapWatcher.html</anchorfile>
      <anchor>a8ea4b2bf4155f3dfd7dfc116e440af38</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>atIt</name>
      <anchorfile>classcPointerMapWatcher.html</anchorfile>
      <anchor>afea2421377d788ac36a6a56bedc8af80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; KeyT, ValueT, CmpT &gt; &amp;</type>
      <name>m</name>
      <anchorfile>classcPointerMapWatcher.html</anchorfile>
      <anchor>abe69ff11fc4535103f803fdaecca86ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; KeyT, ValueT, CmpT &gt;::iterator</type>
      <name>it</name>
      <anchorfile>classcPointerMapWatcher.html</anchorfile>
      <anchor>ae39e67e158a8dee5c01d42d729d5a20a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>itPos</name>
      <anchorfile>classcPointerMapWatcher.html</anchorfile>
      <anchor>aedcabcc4cf9c22944721dc6cc70bf349</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>classname</name>
      <anchorfile>classcPointerMapWatcher.html</anchorfile>
      <anchor>aebd9efcef83e3ac02585f8cd621e5263</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CryptoModule</name>
    <filename>classCryptoModule.html</filename>
    <member kind="function">
      <type></type>
      <name>CryptoModule</name>
      <anchorfile>classCryptoModule.html</anchorfile>
      <anchor>a48285800771d6e02f5042c9886d6d93d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CryptoModule</name>
      <anchorfile>classCryptoModule.html</anchorfile>
      <anchor>a8ae49c0ad62714150de17adfe2d0e1c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>signMessage</name>
      <anchorfile>classCryptoModule.html</anchorfile>
      <anchor>a72e45169107d200bbb7e6dafb42d694e</anchor>
      <arglist>(BaseRpcMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>verifyMessage</name>
      <anchorfile>classCryptoModule.html</anchorfile>
      <anchor>ade5885ce7e52ac01095f6d427d4f4f56</anchor>
      <arglist>(BaseRpcMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classCryptoModule.html</anchorfile>
      <anchor>a60634b73c38718eae84590d2618d1fdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classCryptoModule.html</anchorfile>
      <anchor>a3aaf5b087abab133ed423664a3822d5c</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classCryptoModule.html</anchorfile>
      <anchor>a8aaee02728405a767db12015abb9aad2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GlobalStatistics *</type>
      <name>globalStatistics</name>
      <anchorfile>classCryptoModule.html</anchorfile>
      <anchor>a4e5f4ccd50365aabe25aa5dbf768a3df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BaseOverlay *</type>
      <name>overlay</name>
      <anchorfile>classCryptoModule.html</anchorfile>
      <anchor>ae6021768fc95bb77f12bc124d5add945</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cNetCommBuffer</type>
      <name>commBuffer</name>
      <anchorfile>classCryptoModule.html</anchorfile>
      <anchor>a117a6dcb85ecd3b97ada1f34169d91f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numSign</name>
      <anchorfile>classCryptoModule.html</anchorfile>
      <anchor>a346b549899e93dfeb57a313c8efd7ecb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CSHA1</name>
    <filename>classCSHA1.html</filename>
    <member kind="enumeration">
      <name>REPORT_TYPE</name>
      <anchorfile>classCSHA1.html</anchorfile>
      <anchor>a7134dc8e588c0ccd2ec799cde26d9d7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REPORT_HEX</name>
      <anchorfile>classCSHA1.html</anchorfile>
      <anchor>a7134dc8e588c0ccd2ec799cde26d9d7ca6482f900c0505a51b7710486c00cc6a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REPORT_DIGIT</name>
      <anchorfile>classCSHA1.html</anchorfile>
      <anchor>a7134dc8e588c0ccd2ec799cde26d9d7cabe75c003144cc1f83fe2e77cb3179430</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REPORT_HEX_SHORT</name>
      <anchorfile>classCSHA1.html</anchorfile>
      <anchor>a7134dc8e588c0ccd2ec799cde26d9d7ca23c7854236daebd38834b1baa0d0fc83</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CSHA1</name>
      <anchorfile>classCSHA1.html</anchorfile>
      <anchor>abf4b9e3a6ea653ca7aabbb076a7f3645</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CSHA1</name>
      <anchorfile>classCSHA1.html</anchorfile>
      <anchor>a6677358e95741a25565165310c6cb0d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classCSHA1.html</anchorfile>
      <anchor>a2473fd69604fc762000247867830c2a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Update</name>
      <anchorfile>classCSHA1.html</anchorfile>
      <anchor>a59536022ba64be584aed79c28f78d84c</anchor>
      <arglist>(const UINT_8 *pbData, UINT_32 uLen)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HashFile</name>
      <anchorfile>classCSHA1.html</anchorfile>
      <anchor>afa6e97d87a9e5fbafd9f00f5267c85db</anchor>
      <arglist>(const TCHAR *tszFileName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Final</name>
      <anchorfile>classCSHA1.html</anchorfile>
      <anchor>afbdaab3f2a2946d26a6144af3fec5fd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReportHash</name>
      <anchorfile>classCSHA1.html</anchorfile>
      <anchor>a290089ec3f38863940c4757ebbdf4d6e</anchor>
      <arglist>(TCHAR *tszReport, REPORT_TYPE rtReportType=REPORT_HEX) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReportHashStl</name>
      <anchorfile>classCSHA1.html</anchorfile>
      <anchor>a31e5e1164c484945fb1f7dce969787e4</anchor>
      <arglist>(std::basic_string&lt; TCHAR &gt; &amp;strOut, REPORT_TYPE rtReportType=REPORT_HEX) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetHash</name>
      <anchorfile>classCSHA1.html</anchorfile>
      <anchor>a736d60c74d29c605c5e62b3095ab7405</anchor>
      <arglist>(UINT_8 *pbDest20) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>classCSHA1.html</anchorfile>
      <anchor>ab0f18a56653c27b0b5d91ebd7d561504</anchor>
      <arglist>(UINT_32 *pState, const UINT_8 *pBuffer)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>UINT_32</type>
      <name>m_state</name>
      <anchorfile>classCSHA1.html</anchorfile>
      <anchor>a2c79d5db23dfc1cb883480b1ab458a0d</anchor>
      <arglist>[5]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>UINT_32</type>
      <name>m_count</name>
      <anchorfile>classCSHA1.html</anchorfile>
      <anchor>a55cfe3aebc945ec575e4b6b9669a7fb2</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>UINT_32</type>
      <name>m_reserved0</name>
      <anchorfile>classCSHA1.html</anchorfile>
      <anchor>a430cd7f3396057b8a74ddf09dc031681</anchor>
      <arglist>[1]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>UINT_8</type>
      <name>m_buffer</name>
      <anchorfile>classCSHA1.html</anchorfile>
      <anchor>a183aa7e77f79d3f14cfb91075a65fdc4</anchor>
      <arglist>[64]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>UINT_8</type>
      <name>m_digest</name>
      <anchorfile>classCSHA1.html</anchorfile>
      <anchor>a356dd315e89f1c5042084d7d3d8ac51f</anchor>
      <arglist>[20]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>UINT_32</type>
      <name>m_reserved1</name>
      <anchorfile>classCSHA1.html</anchorfile>
      <anchor>a4aa07d3976aa188656803081ce7ca326</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>UINT_8</type>
      <name>m_workspace</name>
      <anchorfile>classCSHA1.html</anchorfile>
      <anchor>a10499b68005c1e537339c9c78021b85e</anchor>
      <arglist>[64]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SHA1_WORKSPACE_BLOCK *</type>
      <name>m_block</name>
      <anchorfile>classCSHA1.html</anchorfile>
      <anchor>aea8f8f3d927719faabcbcd2025dab34f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cStdMultiMapWatcher</name>
    <filename>classcStdMultiMapWatcher.html</filename>
    <templarg>KeyT</templarg>
    <templarg>ValueT</templarg>
    <templarg>CmpT</templarg>
    <member kind="function">
      <type></type>
      <name>cStdMultiMapWatcher</name>
      <anchorfile>classcStdMultiMapWatcher.html</anchorfile>
      <anchor>ae085e2928434c45703ff84fabf986f67</anchor>
      <arglist>(const char *name, std::multimap&lt; KeyT, ValueT, CmpT &gt; &amp;var)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getClassName</name>
      <anchorfile>classcStdMultiMapWatcher.html</anchorfile>
      <anchor>a10087db9be03739d080d60ff5dea2414</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getElemTypeName</name>
      <anchorfile>classcStdMultiMapWatcher.html</anchorfile>
      <anchor>a47bdfd5791a59a1a2d6645782cdb1cdc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classcStdMultiMapWatcher.html</anchorfile>
      <anchor>a24d10f8a569eec071544c23e25ece412</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>at</name>
      <anchorfile>classcStdMultiMapWatcher.html</anchorfile>
      <anchor>a30245f677098ded703f5fa679d8f7eb0</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>atIt</name>
      <anchorfile>classcStdMultiMapWatcher.html</anchorfile>
      <anchor>a753b2225a5292c794a0895b4eec28221</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::multimap&lt; KeyT, ValueT, CmpT &gt; &amp;</type>
      <name>m</name>
      <anchorfile>classcStdMultiMapWatcher.html</anchorfile>
      <anchor>a2a093acbf0a4f53d761862fc75fc7ce0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::multimap&lt; KeyT, ValueT, CmpT &gt;::iterator</type>
      <name>it</name>
      <anchorfile>classcStdMultiMapWatcher.html</anchorfile>
      <anchor>afbbd91f921b2b5f5a1d185baede0f38f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>itPos</name>
      <anchorfile>classcStdMultiMapWatcher.html</anchorfile>
      <anchor>ad139a1c43f169dfa4889a9553d5cad62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>classname</name>
      <anchorfile>classcStdMultiMapWatcher.html</anchorfile>
      <anchor>ab779d69551d7fcf4a9e40142983b232d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeBruijnCall</name>
    <filename>classDeBruijnCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>DeBruijnCall</name>
      <anchorfile>classDeBruijnCall.html</anchorfile>
      <anchor>a8cf69fdd379c0fd1b2f363f02abc3d19</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DeBruijnCall</name>
      <anchorfile>classDeBruijnCall.html</anchorfile>
      <anchor>a6d49eaec7e40b4c96e85910843360899</anchor>
      <arglist>(const DeBruijnCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DeBruijnCall</name>
      <anchorfile>classDeBruijnCall.html</anchorfile>
      <anchor>aebf4e6a4f065984f4ac156655fd2c84d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DeBruijnCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classDeBruijnCall.html</anchorfile>
      <anchor>a24ee038dcaa9336e74b5f8bc8fb24bc8</anchor>
      <arglist>(const DeBruijnCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DeBruijnCall *</type>
      <name>dup</name>
      <anchorfile>classDeBruijnCall.html</anchorfile>
      <anchor>a939a2bd2f9bdd31ef6be2a14de957232</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classDeBruijnCall.html</anchorfile>
      <anchor>a096e2b909e4abeb140471388447f71df</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classDeBruijnCall.html</anchorfile>
      <anchor>a762b8b2a31a2262a914c53b2cd28c69f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getDestKey</name>
      <anchorfile>classDeBruijnCall.html</anchorfile>
      <anchor>a9bfdb811d1975e7b7a71541777b1ea2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getDestKey</name>
      <anchorfile>classDeBruijnCall.html</anchorfile>
      <anchor>aab6c8f24c1780eb1b76deedefb426c89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestKey</name>
      <anchorfile>classDeBruijnCall.html</anchorfile>
      <anchor>a9b7356541a87f238ede3d676d7dfa8f3</anchor>
      <arglist>(const OverlayKey &amp;destKey)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDeBruijnCall.html</anchorfile>
      <anchor>ad57a3f0313d3e640ef8c03bc8f782d6b</anchor>
      <arglist>(const DeBruijnCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>destKey_var</name>
      <anchorfile>classDeBruijnCall.html</anchorfile>
      <anchor>ae0ef35e57fdda35f2b2432f1e5e190ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classDeBruijnCall.html</anchorfile>
      <anchor>a0166da1453e272c179928ae5f776d2c8</anchor>
      <arglist>(const DeBruijnCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeBruijnResponse</name>
    <filename>classDeBruijnResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>DeBruijnResponse</name>
      <anchorfile>classDeBruijnResponse.html</anchorfile>
      <anchor>a0f9a0e160f94bea77a45c36ef66866d0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DeBruijnResponse</name>
      <anchorfile>classDeBruijnResponse.html</anchorfile>
      <anchor>a09b64ced4301e4d3a895caad614035f6</anchor>
      <arglist>(const DeBruijnResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DeBruijnResponse</name>
      <anchorfile>classDeBruijnResponse.html</anchorfile>
      <anchor>aac11ef12fb06ad679778510b68d23fa7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DeBruijnResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classDeBruijnResponse.html</anchorfile>
      <anchor>a80ca0832e03d68a233b9714665f8d1b7</anchor>
      <arglist>(const DeBruijnResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DeBruijnResponse *</type>
      <name>dup</name>
      <anchorfile>classDeBruijnResponse.html</anchorfile>
      <anchor>a2a62aa18e8c020b4b02b289fceca673b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classDeBruijnResponse.html</anchorfile>
      <anchor>af778d60aa1341b3c1c79a08ebf26d5a8</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classDeBruijnResponse.html</anchorfile>
      <anchor>ac37b56382fbd8193b5eb5af46e8b43d0</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getDBNode</name>
      <anchorfile>classDeBruijnResponse.html</anchorfile>
      <anchor>a4306808c2278f76f1f25521bd7342b21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getDBNode</name>
      <anchorfile>classDeBruijnResponse.html</anchorfile>
      <anchor>a7dd282d32dc20a089d6bf87d2d4b2728</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDBNode</name>
      <anchorfile>classDeBruijnResponse.html</anchorfile>
      <anchor>a940290862c18ea6ba5f9feb76bb9d40d</anchor>
      <arglist>(const NodeHandle &amp;dBNode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSucNum</name>
      <anchorfile>classDeBruijnResponse.html</anchorfile>
      <anchor>aacdc24aa77e2acefe1201687bbe91865</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSucNum</name>
      <anchorfile>classDeBruijnResponse.html</anchorfile>
      <anchor>af31fa8c09b26c750ec065337df38c336</anchor>
      <arglist>(int sucNum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSucNodeArraySize</name>
      <anchorfile>classDeBruijnResponse.html</anchorfile>
      <anchor>af9c10f5903af174878d89d598fc5f724</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSucNodeArraySize</name>
      <anchorfile>classDeBruijnResponse.html</anchorfile>
      <anchor>a29f2753f2c03f4cd262e27f998c3b166</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getSucNode</name>
      <anchorfile>classDeBruijnResponse.html</anchorfile>
      <anchor>a406265abcc4db969c3460c2ae1282351</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getSucNode</name>
      <anchorfile>classDeBruijnResponse.html</anchorfile>
      <anchor>ad17203643195e5aaab8b9c2980298f86</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSucNode</name>
      <anchorfile>classDeBruijnResponse.html</anchorfile>
      <anchor>adf77cae0525141d3c87454194e4ed9db</anchor>
      <arglist>(unsigned int k, const NodeHandle &amp;sucNode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDeBruijnResponse.html</anchorfile>
      <anchor>a7974103a3c02b5d1d19adffb381a8682</anchor>
      <arglist>(const DeBruijnResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>dBNode_var</name>
      <anchorfile>classDeBruijnResponse.html</anchorfile>
      <anchor>a84f70610d446a9a08c7440e84e198963</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sucNum_var</name>
      <anchorfile>classDeBruijnResponse.html</anchorfile>
      <anchor>a8cf82356ca6afbbdcf19af717df7800e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle *</type>
      <name>sucNode_var</name>
      <anchorfile>classDeBruijnResponse.html</anchorfile>
      <anchor>aa89c4902ce326098a1cc0c7c58fa66fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>sucNode_arraysize</name>
      <anchorfile>classDeBruijnResponse.html</anchorfile>
      <anchor>a104457358e5b6f2844e5400b536c220c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classDeBruijnResponse.html</anchorfile>
      <anchor>a3b222446c079bf0b5e909e5546c4677b</anchor>
      <arglist>(const DeBruijnResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DefaultErrorHandler</name>
    <filename>classDefaultErrorHandler.html</filename>
    <base>XmlRpc::XmlRpcErrorHandler</base>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>classDefaultErrorHandler.html</anchorfile>
      <anchor>a0cf2899d7b248c32fbd6ac7e0689fc77</anchor>
      <arglist>(const char *msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DefaultLogHandler</name>
    <filename>classDefaultLogHandler.html</filename>
    <base>XmlRpc::XmlRpcLogHandler</base>
    <member kind="function">
      <type>void</type>
      <name>log</name>
      <anchorfile>classDefaultLogHandler.html</anchorfile>
      <anchor>a2379c37a6d4b4cf8b9a9c68825ec0c3c</anchor>
      <arglist>(int level, const char *msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DHT</name>
    <filename>classDHT.html</filename>
    <base>BaseApp</base>
    <class kind="class">DHT::PendingRpcsEntry</class>
    <member kind="function">
      <type></type>
      <name>DHT</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>addc81efbe31ac923b054636f675a2d8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DHT</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>aa3034e0207490f85b581a7700547d225</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration">
      <name>PendingRpcsStates</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>a63fbad6b0540beae9d4bd8b3cce7abb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INIT</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>a63fbad6b0540beae9d4bd8b3cce7abb7af7d775be403b3cddf528a88b080a4713</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOOKUP_STARTED</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>a63fbad6b0540beae9d4bd8b3cce7abb7ac78fe45a5d659c6f0b23cc3fe56e8e1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GET_HASH_SENT</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>a63fbad6b0540beae9d4bd8b3cce7abb7a88f599ef4e7b453e944009ebf52dfee5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GET_VALUE_SENT</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>a63fbad6b0540beae9d4bd8b3cce7abb7a473a1789e01de139a5504ffa3ed03031</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PUT_SENT</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>a63fbad6b0540beae9d4bd8b3cce7abb7a3407ec6201483d0a27baf97d14e43db1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::map&lt; uint32_t, PendingRpcsEntry &gt;</type>
      <name>PendingRpcs</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>ae5497677deb08feaaad5ccd5ce35e997</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initializeApp</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>a4f00d82a6ffb8c07887443d9f713e93e</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>finishApp</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>afaa8018480ec48e5fe531e6b7405e816</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>a6ae0227d1adcc58e0cc6a8a08222d39f</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>handleRpcCall</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>a1be3042a36d8f9bd6986effd9599da70</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleRpcResponse</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>a372f6f5fd02b9fa01cce1d9a158dcc4b</anchor>
      <arglist>(BaseResponseMessage *msg, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleRpcTimeout</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>a909b3678f0097e4b33811c7a30042e8d</anchor>
      <arglist>(BaseCallMessage *msg, const TransportAddress &amp;dest, cPolymorphic *context, int rpcId, const OverlayKey &amp;destKey)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handlePutRequest</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>aa6b15162da48bb0c982ee87aa1ae1c8a</anchor>
      <arglist>(DHTPutCall *dhtMsg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleGetRequest</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>a3d75f9feb24018644f778d5b34af6b48</anchor>
      <arglist>(DHTGetCall *dhtMsg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handlePutResponse</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>af1537f9c596e0d55c35ca8dcb7c17ba6</anchor>
      <arglist>(DHTPutResponse *dhtMsg, int rpcId)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleGetResponse</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>ad799b7d64e238b4224409d6fe3a18b14</anchor>
      <arglist>(DHTGetResponse *dhtMsg, int rpcId)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handlePutCAPIRequest</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>a700a39d93f2e46ecf7e1e26e43a137bd</anchor>
      <arglist>(DHTputCAPICall *capiPutMsg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleGetCAPIRequest</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>adcb133efa64eda79fe4f0d569c124e8f</anchor>
      <arglist>(DHTgetCAPICall *capiPutMsg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleDumpDhtRequest</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>aa52a4a6fa8dd6604d5be1cec488ec434</anchor>
      <arglist>(DHTdumpCall *call)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>update</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>a556af7f1688e60e7bf5bc0116ea0beee</anchor>
      <arglist>(const NodeHandle &amp;node, bool joined)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleLookupResponse</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>a33ea03bbf62bf2c7c0278e3da90e4576</anchor>
      <arglist>(LookupResponse *lookupMsg, int rpcId)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>sendMaintenancePutCall</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>a054905e16db8c3d5d0b1d8176596c08c</anchor>
      <arglist>(const TransportAddress &amp;dest, const OverlayKey &amp;key, const DhtDataEntry &amp;entry)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>resultValuesBitLength</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>ae3ad9322668ae87b0c194d9c63d08ff6</anchor>
      <arglist>(DHTGetResponse *msg)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint</type>
      <name>numReplica</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>a21217d399a3e2f94569c794da5004421</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numGetRequests</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>ab7bfedf297279702d3f5c4a936eb0f72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ratioIdentical</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>a28445696afa54db8a4794b797c424036</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>maintenanceMessages</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>ad595de501119a833c0c4bbeb9c487f3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>normalMessages</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>a926bfb8dbc96675d3dae59d51fd90272</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>numBytesMaintenance</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>af9266b896acc3c51884ba59ae9d70ddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>numBytesNormal</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>a83ea8d514b0ec9c268c1f9fe4db6813a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>secureMaintenance</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>a6591add2e5cbc7ec8d203013cb110d04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>invalidDataAttack</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>aa4de4acb0b1da732f694a264a0d39f0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>maintenanceAttack</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>a00089eecdb5a795e06d659fec0b80e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PendingRpcs</type>
      <name>pendingRpcs</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>a4dca98dd57d5bce189c6dc81a9ddb24e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DHTDataStorage *</type>
      <name>dataStorage</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>ab4d69aef76faee2c8f456605e1fac5bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classDHT.html</anchorfile>
      <anchor>ab7c8797381ca1362bb552d1535f50d1d</anchor>
      <arglist>(std::ostream &amp;Stream, const PendingRpcsEntry &amp;entry)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DHT::PendingRpcsEntry</name>
    <filename>classDHT_1_1PendingRpcsEntry.html</filename>
    <member kind="function">
      <type></type>
      <name>PendingRpcsEntry</name>
      <anchorfile>classDHT_1_1PendingRpcsEntry.html</anchorfile>
      <anchor>adb75cd0e2929b609f8e37ec211d4ccbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>DHTgetCAPICall *</type>
      <name>getCallMsg</name>
      <anchorfile>classDHT_1_1PendingRpcsEntry.html</anchorfile>
      <anchor>a0bfd43628076159ff6aad46ddab6fb37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DHTputCAPICall *</type>
      <name>putCallMsg</name>
      <anchorfile>classDHT_1_1PendingRpcsEntry.html</anchorfile>
      <anchor>a0347eb48d2b588c25bfbf41ff3c473f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PendingRpcsStates</type>
      <name>state</name>
      <anchorfile>classDHT_1_1PendingRpcsEntry.html</anchorfile>
      <anchor>a69f693a59ab8eb746d1197542eddaa98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NodeVector</type>
      <name>replica</name>
      <anchorfile>classDHT_1_1PendingRpcsEntry.html</anchorfile>
      <anchor>a5b4a88bb6426f9111067d9bd1a396687</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NodeVector *</type>
      <name>hashVector</name>
      <anchorfile>classDHT_1_1PendingRpcsEntry.html</anchorfile>
      <anchor>a1f50629560c6c9a2b43e3247442e493f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; BinaryValue, NodeVector &gt;</type>
      <name>hashes</name>
      <anchorfile>classDHT_1_1PendingRpcsEntry.html</anchorfile>
      <anchor>ab844a5aa7f2d80736c0dcc266c5b922a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numSent</name>
      <anchorfile>classDHT_1_1PendingRpcsEntry.html</anchorfile>
      <anchor>a1619c537519e088582dc0b54f639a698</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numAvailableReplica</name>
      <anchorfile>classDHT_1_1PendingRpcsEntry.html</anchorfile>
      <anchor>ad51febc19e1be335ae7c4ace22ccd96e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numFailed</name>
      <anchorfile>classDHT_1_1PendingRpcsEntry.html</anchorfile>
      <anchor>a7f74ebc7a7b45522db5dce5db12a7679</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numResponses</name>
      <anchorfile>classDHT_1_1PendingRpcsEntry.html</anchorfile>
      <anchor>a6928cdd653a4a3375e684bce325ee8c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DhtDataEntry</name>
    <filename>structDhtDataEntry.html</filename>
    <member kind="variable">
      <type>BinaryValue</type>
      <name>value</name>
      <anchorfile>structDhtDataEntry.html</anchorfile>
      <anchor>abffbe314f97ae10a9ca461e18102d618</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>kind</name>
      <anchorfile>structDhtDataEntry.html</anchorfile>
      <anchor>a6f3be99f7b0cdcd215a4ccb813e9f703</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>id</name>
      <anchorfile>structDhtDataEntry.html</anchorfile>
      <anchor>af40de9c1b7d6b4e1136ca6f2b9144a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>ttlMessage</name>
      <anchorfile>structDhtDataEntry.html</anchorfile>
      <anchor>af91eb3436a52ad0c6f424047113beee9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>is_modifiable</name>
      <anchorfile>structDhtDataEntry.html</anchorfile>
      <anchor>a67c185200bbf51575e08bb8f5f646d42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NodeHandle</type>
      <name>sourceNode</name>
      <anchorfile>structDhtDataEntry.html</anchorfile>
      <anchor>aad1c23be20c2eca392adc791dffabdcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>responsible</name>
      <anchorfile>structDhtDataEntry.html</anchorfile>
      <anchor>a6fb8dca58f59421a7c02e830d42b7e6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SiblingVoteMap</type>
      <name>siblingVote</name>
      <anchorfile>structDhtDataEntry.html</anchorfile>
      <anchor>acd012be7842e9e6a98f5d8d9cbc8681b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structDhtDataEntry.html</anchorfile>
      <anchor>a679190e11577ca84bce777a387f20901</anchor>
      <arglist>(std::ostream &amp;Stream, const DhtDataEntry entry)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DHTDataStorage</name>
    <filename>classDHTDataStorage.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classDHTDataStorage.html</anchorfile>
      <anchor>a813e2f92a57ef11b555edfb0fd9f08ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classDHTDataStorage.html</anchorfile>
      <anchor>a5dccef194e54caa97f44171a9d92764c</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classDHTDataStorage.html</anchorfile>
      <anchor>a9954778320a14e7c31e6ac6e2a0aea5e</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>getSize</name>
      <anchorfile>classDHTDataStorage.html</anchorfile>
      <anchor>aa1cdb30a1524923e95af88540f84d00e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classDHTDataStorage.html</anchorfile>
      <anchor>a8b9558b53b6c7d64aa82bed6662a74b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DhtDataEntry *</type>
      <name>getDataEntry</name>
      <anchorfile>classDHTDataStorage.html</anchorfile>
      <anchor>a59ed0b3b3970dbf1057636f4c7cb2c17</anchor>
      <arglist>(const OverlayKey &amp;key, uint32_t kind, uint32_t id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DhtDataVector *</type>
      <name>getDataVector</name>
      <anchorfile>classDHTDataStorage.html</anchorfile>
      <anchor>a1f1c6efad65db834501267855992f90b</anchor>
      <arglist>(const OverlayKey &amp;key, uint32_t kind=0, uint32_t id=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getSourceNode</name>
      <anchorfile>classDHTDataStorage.html</anchorfile>
      <anchor>aa99008f59fd5b3beb8f2cfccfaf54fc3</anchor>
      <arglist>(const OverlayKey &amp;key, uint32_t kind, uint32_t id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const bool</type>
      <name>isModifiable</name>
      <anchorfile>classDHTDataStorage.html</anchorfile>
      <anchor>a4ddcc8ac2516fc7db403fd4a27069a75</anchor>
      <arglist>(const OverlayKey &amp;key, uint32_t kind, uint32_t id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const DhtDataMap::iterator</type>
      <name>begin</name>
      <anchorfile>classDHTDataStorage.html</anchorfile>
      <anchor>a9a5546debdaa4522c63b0b7e0a92545a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const DhtDataMap::iterator</type>
      <name>end</name>
      <anchorfile>classDHTDataStorage.html</anchorfile>
      <anchor>ab874e8a9c0ee339ff20eda9a6226de8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DhtDataEntry *</type>
      <name>addData</name>
      <anchorfile>classDHTDataStorage.html</anchorfile>
      <anchor>a1fab63fa3bb75248a4118fdbb50c95f5</anchor>
      <arglist>(const OverlayKey &amp;key, uint32_t kind, uint32_t id, BinaryValue value, cMessage *ttlMessage, bool is_modifiable=true, NodeHandle sourceNode=NodeHandle::UNSPECIFIED_NODE, bool responsible=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeData</name>
      <anchorfile>classDHTDataStorage.html</anchorfile>
      <anchor>af64b6e6563f5934443182986ab7b9f63</anchor>
      <arglist>(const OverlayKey &amp;key, uint32_t kind, uint32_t id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>display</name>
      <anchorfile>classDHTDataStorage.html</anchorfile>
      <anchor>acf367beb54ac48b556fdb37504ff58b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DhtDumpVector *</type>
      <name>dumpDht</name>
      <anchorfile>classDHTDataStorage.html</anchorfile>
      <anchor>ab8425aa4123fc352970c78f1890c08c4</anchor>
      <arglist>(const OverlayKey &amp;key=OverlayKey::UNSPECIFIED_KEY, uint32_t kind=0, uint32_t id=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateDisplayString</name>
      <anchorfile>classDHTDataStorage.html</anchorfile>
      <anchor>a97e3f0ca6983d2fae45d025d1971a377</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateTooltip</name>
      <anchorfile>classDHTDataStorage.html</anchorfile>
      <anchor>a959768d929f6cebe0400c1c3d1d9c142</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DhtDataMap</type>
      <name>dataMap</name>
      <anchorfile>classDHTDataStorage.html</anchorfile>
      <anchor>ad3d37f6c611130ed9f12a4e6b3a6a101</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DHTdumpCall</name>
    <filename>classDHTdumpCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>DHTdumpCall</name>
      <anchorfile>classDHTdumpCall.html</anchorfile>
      <anchor>a59ad339c20b8cb1d060f26f384b23a02</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DHTdumpCall</name>
      <anchorfile>classDHTdumpCall.html</anchorfile>
      <anchor>aecf0b922e3bc3ba4c450c61cede144b2</anchor>
      <arglist>(const DHTdumpCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DHTdumpCall</name>
      <anchorfile>classDHTdumpCall.html</anchorfile>
      <anchor>ae983d2a174ba5edd6c1ce4fa26b42fff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DHTdumpCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classDHTdumpCall.html</anchorfile>
      <anchor>a98cc1b771ed7e483169e78cc38b36970</anchor>
      <arglist>(const DHTdumpCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DHTdumpCall *</type>
      <name>dup</name>
      <anchorfile>classDHTdumpCall.html</anchorfile>
      <anchor>ab10f82e438b65524f46a9c0c35fe5001</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classDHTdumpCall.html</anchorfile>
      <anchor>a4d29459b7285ab20a00c179ea1eda4bf</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classDHTdumpCall.html</anchorfile>
      <anchor>a05beb4dc9adc143a0c3e08486254a26b</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDHTdumpCall.html</anchorfile>
      <anchor>ac4c3a42ad319ea5c4a07f529a9ea8b12</anchor>
      <arglist>(const DHTdumpCall &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classDHTdumpCall.html</anchorfile>
      <anchor>ab32b855c12c6484779b406e5b45640cd</anchor>
      <arglist>(const DHTdumpCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DhtDumpEntry</name>
    <filename>classDhtDumpEntry.html</filename>
    <member kind="function">
      <type></type>
      <name>DhtDumpEntry</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>a135910a9994f74ade9ff084f8c8d27f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DhtDumpEntry</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>a94029df8edff5c27d75bb7067dc00a51</anchor>
      <arglist>(const DhtDumpEntry &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DhtDumpEntry</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>ac67f65952c78961c41e9e972fa1b4bc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DhtDumpEntry &amp;</type>
      <name>operator=</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>a49e9312d3d28afde7e9e0fdceaf9fc40</anchor>
      <arglist>(const DhtDumpEntry &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DhtDumpEntry *</type>
      <name>dup</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>a7c4087de3da17bc5f7fd6c4b1f04bc50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>ab8c90f49a75226e1c9e6dfa1e2fb54b9</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>a14d5877d560cb0bc2ee32c7df8e088fe</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getKey</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>aa638e4f336087f3df25e0eca089c1466</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getKey</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>ac40b573a69f1165bd0c358f71f573b2c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKey</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>a05c7cf256b17d3736505ab9c67b6f45a</anchor>
      <arglist>(const OverlayKey &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>getKind</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>a09ed6940d9d644cf86ba99882eaa6c07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKind</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>ade7abbdb99c6cdf8d70fb8310606c758</anchor>
      <arglist>(uint32_t kind)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>getId</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>a2a2605c766be91ae8fbd26fea6c83c00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setId</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>aae751272a9ea923e3c8d484b3e6a513b</anchor>
      <arglist>(uint32_t id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BinaryValue &amp;</type>
      <name>getValue</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>a690fe434ac3281d8e31670fb944e1771</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const BinaryValue &amp;</type>
      <name>getValue</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>a598471e9a4c31c897d0defd449ee4d2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>a2683c4e8c0b12acfd3cb342c6f0e0412</anchor>
      <arglist>(const BinaryValue &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTtl</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>ae78e5de928b1ff271bf3e8538795d9c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTtl</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>a99d7f5594d86c66073176546f6e5317b</anchor>
      <arglist>(int ttl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getOwnerNode</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>a30665ecb4ded3ee9eadfbb775cb0f349</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getOwnerNode</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>aaac713a09b6bc341b074243bfaf7dbad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOwnerNode</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>a97aa1a515afcb97b7d10bc2d2a2f29ce</anchor>
      <arglist>(const NodeHandle &amp;ownerNode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getIs_modifiable</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>a38e7a82b6795e0b0fee1ceeef4f35646</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIs_modifiable</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>a07ffc62b240ce99d953f48f9889d1732</anchor>
      <arglist>(bool is_modifiable)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getResponsible</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>afa72c65da1bd6f212c4879e730e79e63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setResponsible</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>a3196ca82fbec9feec701c0b689d73773</anchor>
      <arglist>(bool responsible)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>a126e5c40ce722a18e55bc526a1695dbd</anchor>
      <arglist>(const DhtDumpEntry &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>key_var</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>af69a204e0f0d778fa155eb6d942c2cc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>kind_var</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>a6afacb5ad68c583307fa391cf4badad9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>id_var</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>adc30ec3e66c3d534799117dd54a18c86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BinaryValue</type>
      <name>value_var</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>a93e0e85a05ce8d7ac2add55ed5470668</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ttl_var</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>ae4e7a4ff700c3f8d3e93c942d0d5546c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>ownerNode_var</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>ad7654a6814e098cb14f37c5a39db2d8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>is_modifiable_var</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>a16afc647e6174c8594622c927ee6388f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>responsible_var</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>abb79b52c244fe068f4763fba3eb6e1d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classDhtDumpEntry.html</anchorfile>
      <anchor>afb2cf576b2c0a02599fd3e441f8be8c4</anchor>
      <arglist>(const DhtDumpEntry &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DHTdumpResponse</name>
    <filename>classDHTdumpResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>DHTdumpResponse</name>
      <anchorfile>classDHTdumpResponse.html</anchorfile>
      <anchor>ad78a6481d65b18344e101928972e28d5</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DHTdumpResponse</name>
      <anchorfile>classDHTdumpResponse.html</anchorfile>
      <anchor>a969f4513862481f9f38a231af6c74d8d</anchor>
      <arglist>(const DHTdumpResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DHTdumpResponse</name>
      <anchorfile>classDHTdumpResponse.html</anchorfile>
      <anchor>ad7670559de0981d7e4f0f4901748a761</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DHTdumpResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classDHTdumpResponse.html</anchorfile>
      <anchor>acc3b21f933e7bce0f70fcfbe98d7d538</anchor>
      <arglist>(const DHTdumpResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DHTdumpResponse *</type>
      <name>dup</name>
      <anchorfile>classDHTdumpResponse.html</anchorfile>
      <anchor>a64555573f0eb66ba1bd3e928a021a671</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classDHTdumpResponse.html</anchorfile>
      <anchor>a8d9aa2df39110e81dcd39b523f2e994b</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classDHTdumpResponse.html</anchorfile>
      <anchor>a5738f3638ff41923c861f4ed646f8aac</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRecordArraySize</name>
      <anchorfile>classDHTdumpResponse.html</anchorfile>
      <anchor>a8f1afdbe3bd1ec96597a35d97cb0b338</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getRecordArraySize</name>
      <anchorfile>classDHTdumpResponse.html</anchorfile>
      <anchor>a0ed4547a5cc48b5c96ac54ca6d2751f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DhtDumpEntry &amp;</type>
      <name>getRecord</name>
      <anchorfile>classDHTdumpResponse.html</anchorfile>
      <anchor>a64862d95392d92c49f8b0a4178088175</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const DhtDumpEntry &amp;</type>
      <name>getRecord</name>
      <anchorfile>classDHTdumpResponse.html</anchorfile>
      <anchor>aacf4b098189869bf871fa7e825868a1c</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRecord</name>
      <anchorfile>classDHTdumpResponse.html</anchorfile>
      <anchor>adf0d878708681db4e8108b64ee4146b1</anchor>
      <arglist>(unsigned int k, const DhtDumpEntry &amp;record)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDHTdumpResponse.html</anchorfile>
      <anchor>a6663616e698c6610c5e82deff741dd31</anchor>
      <arglist>(const DHTdumpResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DhtDumpEntry *</type>
      <name>record_var</name>
      <anchorfile>classDHTdumpResponse.html</anchorfile>
      <anchor>a34f52843bff68d44a05eb4b2a21bd8e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>record_arraysize</name>
      <anchorfile>classDHTdumpResponse.html</anchorfile>
      <anchor>a45ed9e38a995317c8519dea4a841904b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classDHTdumpResponse.html</anchorfile>
      <anchor>ad90ad897479d985b1efee7f9c8f83627</anchor>
      <arglist>(const DHTdumpResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DHTEntry</name>
    <filename>structDHTEntry.html</filename>
    <member kind="variable">
      <type>BinaryValue</type>
      <name>value</name>
      <anchorfile>structDHTEntry.html</anchorfile>
      <anchor>a7880e7d46ceae471108a3b7a8b6e7588</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>endtime</name>
      <anchorfile>structDHTEntry.html</anchorfile>
      <anchor>a2ed765b2f95bd8537908ea566489b1a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>insertiontime</name>
      <anchorfile>structDHTEntry.html</anchorfile>
      <anchor>ae7d970f61f7f5ee0fa82c314267f95a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structDHTEntry.html</anchorfile>
      <anchor>a272106fe4a88cfa06a7eb807291552e9</anchor>
      <arglist>(std::ostream &amp;Stream, const DHTEntry entry)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DHTGetCall</name>
    <filename>classDHTGetCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>DHTGetCall</name>
      <anchorfile>classDHTGetCall.html</anchorfile>
      <anchor>ab00ae13dff69b220c84e6145a256d5dd</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DHTGetCall</name>
      <anchorfile>classDHTGetCall.html</anchorfile>
      <anchor>a00a3c54b56b5a8bbf86a1ca468133c08</anchor>
      <arglist>(const DHTGetCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DHTGetCall</name>
      <anchorfile>classDHTGetCall.html</anchorfile>
      <anchor>a9a42345a1fa4901f139ba268ffff53f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DHTGetCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classDHTGetCall.html</anchorfile>
      <anchor>a7dac2cc7197ad0c4100812fb33a6ac85</anchor>
      <arglist>(const DHTGetCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DHTGetCall *</type>
      <name>dup</name>
      <anchorfile>classDHTGetCall.html</anchorfile>
      <anchor>acf71f0a61024790c5513377ef7f1d183</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classDHTGetCall.html</anchorfile>
      <anchor>ae392853618dbdc3a2dc812474a1b5985</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classDHTGetCall.html</anchorfile>
      <anchor>aee12161101544d3ee2e1ac682ecd551a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getKey</name>
      <anchorfile>classDHTGetCall.html</anchorfile>
      <anchor>ae7300c27dba6548b319891576ba898b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getKey</name>
      <anchorfile>classDHTGetCall.html</anchorfile>
      <anchor>a93fa737fe2a2db80a289cf4f060a61f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKey</name>
      <anchorfile>classDHTGetCall.html</anchorfile>
      <anchor>a7f40bb653455a8c7c587414e4517f352</anchor>
      <arglist>(const OverlayKey &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>getKind</name>
      <anchorfile>classDHTGetCall.html</anchorfile>
      <anchor>a8b8cd67ab10816f8b9ab698eaec7e0b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKind</name>
      <anchorfile>classDHTGetCall.html</anchorfile>
      <anchor>a1f1372d79e99d1b20a5b3e5bddecefba</anchor>
      <arglist>(uint32_t kind)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>getId</name>
      <anchorfile>classDHTGetCall.html</anchorfile>
      <anchor>aa58e5076f3a81740ba7c2e3fc0d32600</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setId</name>
      <anchorfile>classDHTGetCall.html</anchorfile>
      <anchor>af169c73b1cd80f669a2f20aace5e8ed0</anchor>
      <arglist>(uint32_t id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getIsHash</name>
      <anchorfile>classDHTGetCall.html</anchorfile>
      <anchor>ac52e61dc1d12527bd7d069f43337caf3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsHash</name>
      <anchorfile>classDHTGetCall.html</anchorfile>
      <anchor>a6e8352e9b93abd283ea1a90f4da1719e</anchor>
      <arglist>(bool isHash)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDHTGetCall.html</anchorfile>
      <anchor>a06d95e6af7cbb4592b736a962d76132a</anchor>
      <arglist>(const DHTGetCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>key_var</name>
      <anchorfile>classDHTGetCall.html</anchorfile>
      <anchor>a61cd17ef40bcb0639c4b4399219c9109</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>kind_var</name>
      <anchorfile>classDHTGetCall.html</anchorfile>
      <anchor>a2ce9c219a35134ef60baadd66e22d881</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>id_var</name>
      <anchorfile>classDHTGetCall.html</anchorfile>
      <anchor>a4a2a400c900fa3b739031e6a6d7c573b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isHash_var</name>
      <anchorfile>classDHTGetCall.html</anchorfile>
      <anchor>a4f4ced153a084829e3250925a695e9e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classDHTGetCall.html</anchorfile>
      <anchor>abb2077cc0d009a5f3955d9daed68f71f</anchor>
      <arglist>(const DHTGetCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DHTgetCAPICall</name>
    <filename>classDHTgetCAPICall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>DHTgetCAPICall</name>
      <anchorfile>classDHTgetCAPICall.html</anchorfile>
      <anchor>af41c79585411036697721e68a8d06c3b</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DHTgetCAPICall</name>
      <anchorfile>classDHTgetCAPICall.html</anchorfile>
      <anchor>a0ab40bd2a16948d3cf75635fc7ec23cd</anchor>
      <arglist>(const DHTgetCAPICall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DHTgetCAPICall</name>
      <anchorfile>classDHTgetCAPICall.html</anchorfile>
      <anchor>a98994220e7cc22ef59b1d3410ee21f95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DHTgetCAPICall &amp;</type>
      <name>operator=</name>
      <anchorfile>classDHTgetCAPICall.html</anchorfile>
      <anchor>acd645980d4aab9ea940c2e3176c143e8</anchor>
      <arglist>(const DHTgetCAPICall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DHTgetCAPICall *</type>
      <name>dup</name>
      <anchorfile>classDHTgetCAPICall.html</anchorfile>
      <anchor>a2f1a9dd24d4aaa518585b4270a3203ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classDHTgetCAPICall.html</anchorfile>
      <anchor>a1d7ccc4cdd6c2333d356c1f0b1da1467</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classDHTgetCAPICall.html</anchorfile>
      <anchor>acc9dc3e088df7a29a36800e5ad0de0c7</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getKey</name>
      <anchorfile>classDHTgetCAPICall.html</anchorfile>
      <anchor>af9440c7e23e999225e8a8aacd4865596</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getKey</name>
      <anchorfile>classDHTgetCAPICall.html</anchorfile>
      <anchor>acc19be1d5d9755ed0def674ea31c2989</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKey</name>
      <anchorfile>classDHTgetCAPICall.html</anchorfile>
      <anchor>aa501c5e88e9698d13ad58eddc73fe239</anchor>
      <arglist>(const OverlayKey &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>getKind</name>
      <anchorfile>classDHTgetCAPICall.html</anchorfile>
      <anchor>a5333f4532795e8875d3155ceedc9e6fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKind</name>
      <anchorfile>classDHTgetCAPICall.html</anchorfile>
      <anchor>a37289ef60b174833099e9ab25045b2be</anchor>
      <arglist>(uint32_t kind)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>getId</name>
      <anchorfile>classDHTgetCAPICall.html</anchorfile>
      <anchor>a72be7487934870799d455d3f45b183bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setId</name>
      <anchorfile>classDHTgetCAPICall.html</anchorfile>
      <anchor>a88c424adb55684b47e58d11ee36f4821</anchor>
      <arglist>(uint32_t id)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDHTgetCAPICall.html</anchorfile>
      <anchor>a9a11bc540b678e553b8e6ee2cac11ffa</anchor>
      <arglist>(const DHTgetCAPICall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>key_var</name>
      <anchorfile>classDHTgetCAPICall.html</anchorfile>
      <anchor>aa6b53ac307202f1f93ba9c649cd7d66e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>kind_var</name>
      <anchorfile>classDHTgetCAPICall.html</anchorfile>
      <anchor>add70f7d042da788e3409d9daa7a4e5fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>id_var</name>
      <anchorfile>classDHTgetCAPICall.html</anchorfile>
      <anchor>a3230c0c8e4daf33b749a286180622a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classDHTgetCAPICall.html</anchorfile>
      <anchor>a20daa44cd18b2408c2697d78d91f84f2</anchor>
      <arglist>(const DHTgetCAPICall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DHTgetCAPIResponse</name>
    <filename>classDHTgetCAPIResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>DHTgetCAPIResponse</name>
      <anchorfile>classDHTgetCAPIResponse.html</anchorfile>
      <anchor>ab4f8507d252aee3ecad64829e3654ea3</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DHTgetCAPIResponse</name>
      <anchorfile>classDHTgetCAPIResponse.html</anchorfile>
      <anchor>aa4695b488e4bc60a4078e2282480dcb3</anchor>
      <arglist>(const DHTgetCAPIResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DHTgetCAPIResponse</name>
      <anchorfile>classDHTgetCAPIResponse.html</anchorfile>
      <anchor>a02e142e7935b00656086e1994bd992f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DHTgetCAPIResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classDHTgetCAPIResponse.html</anchorfile>
      <anchor>a7fbce0c2242697e274f7200da8138189</anchor>
      <arglist>(const DHTgetCAPIResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DHTgetCAPIResponse *</type>
      <name>dup</name>
      <anchorfile>classDHTgetCAPIResponse.html</anchorfile>
      <anchor>a1465c9fd99fd281d845e2a50512e4a99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classDHTgetCAPIResponse.html</anchorfile>
      <anchor>a39e4c3f3ea36300aa215eb773d9d969c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classDHTgetCAPIResponse.html</anchorfile>
      <anchor>ab5751997159990087771158648bd3118</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setResultArraySize</name>
      <anchorfile>classDHTgetCAPIResponse.html</anchorfile>
      <anchor>a4c40ba014acb1bc5a2f4cdfca0893159</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getResultArraySize</name>
      <anchorfile>classDHTgetCAPIResponse.html</anchorfile>
      <anchor>a60db22faafb11144b4c7eb30350eacf9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DhtDumpEntry &amp;</type>
      <name>getResult</name>
      <anchorfile>classDHTgetCAPIResponse.html</anchorfile>
      <anchor>a52204cc4c7b6b44a8dd83adbf954f88a</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const DhtDumpEntry &amp;</type>
      <name>getResult</name>
      <anchorfile>classDHTgetCAPIResponse.html</anchorfile>
      <anchor>ac5484de9c84f85195fb4a195d0541a09</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setResult</name>
      <anchorfile>classDHTgetCAPIResponse.html</anchorfile>
      <anchor>aa3180b2feb0fba62d21832932d7dd03d</anchor>
      <arglist>(unsigned int k, const DhtDumpEntry &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getIsSuccess</name>
      <anchorfile>classDHTgetCAPIResponse.html</anchorfile>
      <anchor>a0988511b4762bbf07c5fd1683bdd9eeb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsSuccess</name>
      <anchorfile>classDHTgetCAPIResponse.html</anchorfile>
      <anchor>ab11c85724ad974880150524aa8ecd777</anchor>
      <arglist>(bool isSuccess)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDHTgetCAPIResponse.html</anchorfile>
      <anchor>aa8f73b45ccdb2451b0c0b397ea7b7ec4</anchor>
      <arglist>(const DHTgetCAPIResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DhtDumpEntry *</type>
      <name>result_var</name>
      <anchorfile>classDHTgetCAPIResponse.html</anchorfile>
      <anchor>a8dc200d42427845aa3e5655c295a2419</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>result_arraysize</name>
      <anchorfile>classDHTgetCAPIResponse.html</anchorfile>
      <anchor>aba1e981150e61a8ff7fcedbb2a9a1cfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isSuccess_var</name>
      <anchorfile>classDHTgetCAPIResponse.html</anchorfile>
      <anchor>a000f4740266359e398593fb228237947</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classDHTgetCAPIResponse.html</anchorfile>
      <anchor>ae381bb0f613b9925297e17469936219c</anchor>
      <arglist>(const DHTgetCAPIResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DHTGetResponse</name>
    <filename>classDHTGetResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>DHTGetResponse</name>
      <anchorfile>classDHTGetResponse.html</anchorfile>
      <anchor>aafc42621b8db0fec6404b3cd52a93cd2</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DHTGetResponse</name>
      <anchorfile>classDHTGetResponse.html</anchorfile>
      <anchor>ae73ec6b81af9c850fb88f08e754c97cc</anchor>
      <arglist>(const DHTGetResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DHTGetResponse</name>
      <anchorfile>classDHTGetResponse.html</anchorfile>
      <anchor>aa1f57f39e8667bda9cb2449f113f4be4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DHTGetResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classDHTGetResponse.html</anchorfile>
      <anchor>a1a9241e7ca48215f57e78030171d5d86</anchor>
      <arglist>(const DHTGetResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DHTGetResponse *</type>
      <name>dup</name>
      <anchorfile>classDHTGetResponse.html</anchorfile>
      <anchor>a2faca51242d7485c8fac1f622a350130</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classDHTGetResponse.html</anchorfile>
      <anchor>ad4c6ea68f3450f84a351bfd34adb154d</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classDHTGetResponse.html</anchorfile>
      <anchor>a7a465d944c8dd0381df6de4d1b13490f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getKey</name>
      <anchorfile>classDHTGetResponse.html</anchorfile>
      <anchor>a37506a19478fa27760f4e4b5a8869101</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getKey</name>
      <anchorfile>classDHTGetResponse.html</anchorfile>
      <anchor>ab1a4fd1ba76a7ab9430d50aeb90b55d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKey</name>
      <anchorfile>classDHTGetResponse.html</anchorfile>
      <anchor>aee599fbcfde0d48bd33c3d05c3691311</anchor>
      <arglist>(const OverlayKey &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BinaryValue &amp;</type>
      <name>getHashValue</name>
      <anchorfile>classDHTGetResponse.html</anchorfile>
      <anchor>a41a43da2058b0dba9eebfa42f89b9b8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const BinaryValue &amp;</type>
      <name>getHashValue</name>
      <anchorfile>classDHTGetResponse.html</anchorfile>
      <anchor>af3c092f1322292ff91826262660b4155</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHashValue</name>
      <anchorfile>classDHTGetResponse.html</anchorfile>
      <anchor>a38d5430b7f4a4c8eb1ad0df0e48a78f9</anchor>
      <arglist>(const BinaryValue &amp;hashValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getIsHash</name>
      <anchorfile>classDHTGetResponse.html</anchorfile>
      <anchor>aca5249d6e9d6701d4c33ac69abff0775</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsHash</name>
      <anchorfile>classDHTGetResponse.html</anchorfile>
      <anchor>a5b5e75da024693e50e01f6947e39f44d</anchor>
      <arglist>(bool isHash)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setResultArraySize</name>
      <anchorfile>classDHTGetResponse.html</anchorfile>
      <anchor>ad2917319ae1b35ef9ba01959a544278e</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getResultArraySize</name>
      <anchorfile>classDHTGetResponse.html</anchorfile>
      <anchor>a81808e33769d67b6ae7e6d99ae77d87f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DhtDumpEntry &amp;</type>
      <name>getResult</name>
      <anchorfile>classDHTGetResponse.html</anchorfile>
      <anchor>a96e395ff8f99931e27815f6d6c33ce00</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const DhtDumpEntry &amp;</type>
      <name>getResult</name>
      <anchorfile>classDHTGetResponse.html</anchorfile>
      <anchor>a1406abbb86e5d3c6fbf17556c17b6b27</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setResult</name>
      <anchorfile>classDHTGetResponse.html</anchorfile>
      <anchor>a1fd72ab9b816511ddc04852a98f440ea</anchor>
      <arglist>(unsigned int k, const DhtDumpEntry &amp;result)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDHTGetResponse.html</anchorfile>
      <anchor>a787b446f8bcc5e3f0d0ae63b09d89cdf</anchor>
      <arglist>(const DHTGetResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>key_var</name>
      <anchorfile>classDHTGetResponse.html</anchorfile>
      <anchor>af6a8abc987debffa2309d3eb3e228f06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BinaryValue</type>
      <name>hashValue_var</name>
      <anchorfile>classDHTGetResponse.html</anchorfile>
      <anchor>ad42f93647a42282cef5bbf62f6d67798</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isHash_var</name>
      <anchorfile>classDHTGetResponse.html</anchorfile>
      <anchor>ab9126a670796aa2cf3d4c0cd46d6c292</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DhtDumpEntry *</type>
      <name>result_var</name>
      <anchorfile>classDHTGetResponse.html</anchorfile>
      <anchor>ae903cd6dd5d7db02a8c78d88c49bd316</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>result_arraysize</name>
      <anchorfile>classDHTGetResponse.html</anchorfile>
      <anchor>a34c5ef6441489f849ce32d0449bd07bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classDHTGetResponse.html</anchorfile>
      <anchor>a48dd9a1ba6249a7eb4983dba975f307f</anchor>
      <arglist>(const DHTGetResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DHTPutCall</name>
    <filename>classDHTPutCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>DHTPutCall</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>a2c0db08e576d316027077d05fa1964ae</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DHTPutCall</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>ac31e940a1855e9910f5ba4316958c54f</anchor>
      <arglist>(const DHTPutCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DHTPutCall</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>a2a3199eb16d45633804453fb3fb12dfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DHTPutCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>ad395e154d15df6da3e4d6ccf50ed168b</anchor>
      <arglist>(const DHTPutCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DHTPutCall *</type>
      <name>dup</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>a4caa5c8b494ea6f613ad79cf148fb25f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>aaae21d1d36b2e7610457b17980117a46</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>abfb6ee26c3c2af8778a1d0f7c525c25d</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getKey</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>aec43ff8025f9f6fc799dfac0b577bf12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getKey</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>afbbcaa6ff9f862fc9707d498fc990397</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKey</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>abccc8395b7208b7ac33ba1f03f78ddfe</anchor>
      <arglist>(const OverlayKey &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BinaryValue &amp;</type>
      <name>getValue</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>a07c6946f5546b7b64c4df52374bba55c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const BinaryValue &amp;</type>
      <name>getValue</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>a09cfad374feeae6fbe2a08d772b165c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>aaf331ce0bc75e6f4bdd9a4f0453f44ed</anchor>
      <arglist>(const BinaryValue &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>getKind</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>a0cddf999480b9bdfa882d104b659501f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKind</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>a627e5cb4626dd10d21b4e9ab6e044ec1</anchor>
      <arglist>(uint32_t kind)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>getId</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>a49414c1f2aa157836e29c4cac00fa9e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setId</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>a265b86acab1f9dfb5038e30b0f6f72d7</anchor>
      <arglist>(uint32_t id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTtl</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>ad33da3c1f52a586e4175e407e5f98fc7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTtl</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>ad477378656a109b12f08cda5d9ac59c1</anchor>
      <arglist>(int ttl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getIsModifiable</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>a96a50b9f789b3834b2d2cf97b488658d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsModifiable</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>a4a7d0ab79090ca61a4afac26dd74b10d</anchor>
      <arglist>(bool isModifiable)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getMaintenance</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>a813b96e27699123d6f50fd20b4973248</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMaintenance</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>a37f2793eb1f6d4a666a79cbeef8e26ed</anchor>
      <arglist>(bool maintenance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getOwnerNode</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>af5825ceb2c816c26f4f9e0f66db298bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getOwnerNode</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>a513d32e1f7e00ccb7c9e1367b7822537</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOwnerNode</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>a0368114d3fbfdebc05a8e4ad23c364cf</anchor>
      <arglist>(const NodeHandle &amp;ownerNode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>a8a8bfe5b44112a8df11a84af287d2918</anchor>
      <arglist>(const DHTPutCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>key_var</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>ad9547e2efa166e59009979fa8c4ebe8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BinaryValue</type>
      <name>value_var</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>a14afcab57416a8953e5a348973f442b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>kind_var</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>a375f10cb37217ee7e319208fa5ec5650</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>id_var</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>a702781529a61550c889b4bfcbc109d1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ttl_var</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>ab5413b5f3727c30a78afb490a0eb02e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isModifiable_var</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>ae34194d902a3dfdb379365ee9496fc01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>maintenance_var</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>a9ed1b85d7f8b97ac9f8a160d9246ca88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>ownerNode_var</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>ae15882c693f653c8a520d98d191e8287</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classDHTPutCall.html</anchorfile>
      <anchor>a6b1d2811bd3bb031156ac72354633274</anchor>
      <arglist>(const DHTPutCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DHTputCAPICall</name>
    <filename>classDHTputCAPICall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>DHTputCAPICall</name>
      <anchorfile>classDHTputCAPICall.html</anchorfile>
      <anchor>ab176d8eafbad3655b9c9617adc5ab3d6</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DHTputCAPICall</name>
      <anchorfile>classDHTputCAPICall.html</anchorfile>
      <anchor>aac33c35e390bd7c661ce13ac016dcb37</anchor>
      <arglist>(const DHTputCAPICall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DHTputCAPICall</name>
      <anchorfile>classDHTputCAPICall.html</anchorfile>
      <anchor>a03f425aeb76e1efbf03ee52f232a6b05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DHTputCAPICall &amp;</type>
      <name>operator=</name>
      <anchorfile>classDHTputCAPICall.html</anchorfile>
      <anchor>aa8a1a88f7bfffd500ad2b3315fc3ec51</anchor>
      <arglist>(const DHTputCAPICall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DHTputCAPICall *</type>
      <name>dup</name>
      <anchorfile>classDHTputCAPICall.html</anchorfile>
      <anchor>a9be3f64bc8f36e99fcff4994fb250b60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classDHTputCAPICall.html</anchorfile>
      <anchor>a326c763e24216cf3199746301ec8d2fe</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classDHTputCAPICall.html</anchorfile>
      <anchor>a3f4340902b7f720cc84827eb5134f8c4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getKey</name>
      <anchorfile>classDHTputCAPICall.html</anchorfile>
      <anchor>a83ea3738377de538517b65e7d5dfed19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getKey</name>
      <anchorfile>classDHTputCAPICall.html</anchorfile>
      <anchor>aff337277673049581703d9ff43be88b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKey</name>
      <anchorfile>classDHTputCAPICall.html</anchorfile>
      <anchor>a37024f06e1df68c15537308c93398a76</anchor>
      <arglist>(const OverlayKey &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>getKind</name>
      <anchorfile>classDHTputCAPICall.html</anchorfile>
      <anchor>a545bd7efb240e1b7349c72d4f0eb8bfc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKind</name>
      <anchorfile>classDHTputCAPICall.html</anchorfile>
      <anchor>a6e80de42a8267671d66e654a7091a06d</anchor>
      <arglist>(uint32_t kind)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>getId</name>
      <anchorfile>classDHTputCAPICall.html</anchorfile>
      <anchor>a9d236d38e8d0840c112718431ae96e16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setId</name>
      <anchorfile>classDHTputCAPICall.html</anchorfile>
      <anchor>acb7f80d0fc3d6e9a73709c0fe21a86fd</anchor>
      <arglist>(uint32_t id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BinaryValue &amp;</type>
      <name>getValue</name>
      <anchorfile>classDHTputCAPICall.html</anchorfile>
      <anchor>ab53d76fa1d8b9af3e2b82e3e3a56281c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const BinaryValue &amp;</type>
      <name>getValue</name>
      <anchorfile>classDHTputCAPICall.html</anchorfile>
      <anchor>a4b452fcf2845582eda9fb23d09a6c078</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classDHTputCAPICall.html</anchorfile>
      <anchor>acd4367f2102a4cde3a54239b34634523</anchor>
      <arglist>(const BinaryValue &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTtl</name>
      <anchorfile>classDHTputCAPICall.html</anchorfile>
      <anchor>afcc32543d842cb93216aa8abd4921d6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTtl</name>
      <anchorfile>classDHTputCAPICall.html</anchorfile>
      <anchor>a70353eafa652b90bd29623d9034c7f2e</anchor>
      <arglist>(int ttl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getIsModifiable</name>
      <anchorfile>classDHTputCAPICall.html</anchorfile>
      <anchor>aa16546137e52c1d43a0dceafb8ce39a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsModifiable</name>
      <anchorfile>classDHTputCAPICall.html</anchorfile>
      <anchor>a66ed93f6ded5bb51323ee98690da7b5e</anchor>
      <arglist>(bool isModifiable)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDHTputCAPICall.html</anchorfile>
      <anchor>ad929f0c630a630b94759ee01ce987eda</anchor>
      <arglist>(const DHTputCAPICall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>key_var</name>
      <anchorfile>classDHTputCAPICall.html</anchorfile>
      <anchor>ac649f2e77b33e8a6b4736874c4c43e71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>kind_var</name>
      <anchorfile>classDHTputCAPICall.html</anchorfile>
      <anchor>ab3d4bf1408d93447938fec01218cf206</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>id_var</name>
      <anchorfile>classDHTputCAPICall.html</anchorfile>
      <anchor>addcb56857aaae5eaa42f1c18cf4bd7a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BinaryValue</type>
      <name>value_var</name>
      <anchorfile>classDHTputCAPICall.html</anchorfile>
      <anchor>ae9afef607b72127ff817ae233e66e838</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ttl_var</name>
      <anchorfile>classDHTputCAPICall.html</anchorfile>
      <anchor>a0db29d4b6b576ace71881baac2127716</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isModifiable_var</name>
      <anchorfile>classDHTputCAPICall.html</anchorfile>
      <anchor>a6abe276281e1bbf0d04a967ee8b052d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classDHTputCAPICall.html</anchorfile>
      <anchor>a3fdcbf10502f25dfedf0d9cb95ff3042</anchor>
      <arglist>(const DHTputCAPICall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DHTputCAPIResponse</name>
    <filename>classDHTputCAPIResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>DHTputCAPIResponse</name>
      <anchorfile>classDHTputCAPIResponse.html</anchorfile>
      <anchor>ae86e9369678f94ed222608ab297d73b2</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DHTputCAPIResponse</name>
      <anchorfile>classDHTputCAPIResponse.html</anchorfile>
      <anchor>a337f2292d31e06b0365e88bfdfaa0691</anchor>
      <arglist>(const DHTputCAPIResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DHTputCAPIResponse</name>
      <anchorfile>classDHTputCAPIResponse.html</anchorfile>
      <anchor>aebb6d378a83cbdbf090ded8d4c91b910</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DHTputCAPIResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classDHTputCAPIResponse.html</anchorfile>
      <anchor>a030df8d517d36201c22811204310f7f7</anchor>
      <arglist>(const DHTputCAPIResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DHTputCAPIResponse *</type>
      <name>dup</name>
      <anchorfile>classDHTputCAPIResponse.html</anchorfile>
      <anchor>a981d82f3d1935608084e8bccf4f187d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classDHTputCAPIResponse.html</anchorfile>
      <anchor>a9184144881d2ab3e188a62e73400986f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classDHTputCAPIResponse.html</anchorfile>
      <anchor>aa2edd4d8b287ca69c9892810cb349f1a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getIsSuccess</name>
      <anchorfile>classDHTputCAPIResponse.html</anchorfile>
      <anchor>a261123059043e9d69a9b71e41e217a51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsSuccess</name>
      <anchorfile>classDHTputCAPIResponse.html</anchorfile>
      <anchor>a2ad17ddcf6ecc8a47d5a8e3b7083cbce</anchor>
      <arglist>(bool isSuccess)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDHTputCAPIResponse.html</anchorfile>
      <anchor>a52701923a47b27627c55d86c29dc3574</anchor>
      <arglist>(const DHTputCAPIResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isSuccess_var</name>
      <anchorfile>classDHTputCAPIResponse.html</anchorfile>
      <anchor>a53da7aefdccf1a181db08cebef3bee4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classDHTputCAPIResponse.html</anchorfile>
      <anchor>adb6b156ca72387fd480c1df0fd984b7a</anchor>
      <arglist>(const DHTputCAPIResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DHTPutResponse</name>
    <filename>classDHTPutResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>DHTPutResponse</name>
      <anchorfile>classDHTPutResponse.html</anchorfile>
      <anchor>aaef3baf351ea5b63ac4d7dfe6b1fa45e</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DHTPutResponse</name>
      <anchorfile>classDHTPutResponse.html</anchorfile>
      <anchor>a84152b04bc441f7c2846fbc98e6149e0</anchor>
      <arglist>(const DHTPutResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DHTPutResponse</name>
      <anchorfile>classDHTPutResponse.html</anchorfile>
      <anchor>aa231d2b5218f33a0b5a2fe501558bc17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DHTPutResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classDHTPutResponse.html</anchorfile>
      <anchor>ad546c47386987422e1e2cdb6186bfd6e</anchor>
      <arglist>(const DHTPutResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DHTPutResponse *</type>
      <name>dup</name>
      <anchorfile>classDHTPutResponse.html</anchorfile>
      <anchor>af09cef680d3641e4cf76c0f27060c68d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classDHTPutResponse.html</anchorfile>
      <anchor>abec49d5b9af1bbaf3141859a983df020</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classDHTPutResponse.html</anchorfile>
      <anchor>a544a0dcf5dda09ba53362c2cdeb83a55</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getSuccess</name>
      <anchorfile>classDHTPutResponse.html</anchorfile>
      <anchor>a81b52a68e7782d7a9a7417b59e922afd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSuccess</name>
      <anchorfile>classDHTPutResponse.html</anchorfile>
      <anchor>a39abc13f444f85a12feff708a91edf09</anchor>
      <arglist>(bool success)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDHTPutResponse.html</anchorfile>
      <anchor>a5814578f368e56a39adcc1378c35321c</anchor>
      <arglist>(const DHTPutResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>success_var</name>
      <anchorfile>classDHTPutResponse.html</anchorfile>
      <anchor>a1af67c79ae6f7b53a81b96b60e08744d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classDHTPutResponse.html</anchorfile>
      <anchor>ab85b3d76d8804cbadd04b605066b51d5</anchor>
      <arglist>(const DHTPutResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DHTTestApp</name>
    <filename>classDHTTestApp.html</filename>
    <base>BaseApp</base>
    <class kind="class">DHTTestApp::DHTStatsContext</class>
    <member kind="function">
      <type></type>
      <name>DHTTestApp</name>
      <anchorfile>classDHTTestApp.html</anchorfile>
      <anchor>a0a0840e7bb866ccd8c5471d3f0e634b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DHTTestApp</name>
      <anchorfile>classDHTTestApp.html</anchorfile>
      <anchor>ac45580ca81db024b32cece1708e8ecdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initializeApp</name>
      <anchorfile>classDHTTestApp.html</anchorfile>
      <anchor>a1dbcbcf6d572a92d96b653a84f20762f</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>OverlayKey</type>
      <name>getRandomKey</name>
      <anchorfile>classDHTTestApp.html</anchorfile>
      <anchor>a4c457682f2b47770f3fff91f6b88e7c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>BinaryValue</type>
      <name>generateRandomValue</name>
      <anchorfile>classDHTTestApp.html</anchorfile>
      <anchor>a9be8107d57a83b411be97e1b65070431</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>finishApp</name>
      <anchorfile>classDHTTestApp.html</anchorfile>
      <anchor>abdd72d999ad41263d53ff7c327440719</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>handleGetResponse</name>
      <anchorfile>classDHTTestApp.html</anchorfile>
      <anchor>a7b4545f1a02f2375022e539edda70b83</anchor>
      <arglist>(DHTgetCAPIResponse *msg, DHTStatsContext *context)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>handlePutResponse</name>
      <anchorfile>classDHTTestApp.html</anchorfile>
      <anchor>a34cee5766e76fd890b1ffc1c47bd70af</anchor>
      <arglist>(DHTputCAPIResponse *msg, DHTStatsContext *context)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classDHTTestApp.html</anchorfile>
      <anchor>a57c136fb3debefcaff6be79875ac5839</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTraceMessage</name>
      <anchorfile>classDHTTestApp.html</anchorfile>
      <anchor>ae7ccfcef4444cc442a88108cd1224859</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>handleNodeLeaveNotification</name>
      <anchorfile>classDHTTestApp.html</anchorfile>
      <anchor>a4eb8a392b1df437218d97562720aab16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleRpcResponse</name>
      <anchorfile>classDHTTestApp.html</anchorfile>
      <anchor>afbe95878427716ff35a2c7c559be8cbb</anchor>
      <arglist>(BaseResponseMessage *msg, const RpcState &amp;state, simtime_t rtt)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>UnderlayConfigurator *</type>
      <name>underlayConfigurator</name>
      <anchorfile>classDHTTestApp.html</anchorfile>
      <anchor>a0988c5e483cd3e9ad2216698b9e68ee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GlobalNodeList *</type>
      <name>globalNodeList</name>
      <anchorfile>classDHTTestApp.html</anchorfile>
      <anchor>ab9974591a12c984d91329a3da87b6173</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GlobalStatistics *</type>
      <name>globalStatistics</name>
      <anchorfile>classDHTTestApp.html</anchorfile>
      <anchor>a57ec8613b021a442c7f92b900eb2e4bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GlobalDhtTestMap *</type>
      <name>globalDhtTestMap</name>
      <anchorfile>classDHTTestApp.html</anchorfile>
      <anchor>ad91ef66361edfae98e08fa3aedfb18ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>debugOutput</name>
      <anchorfile>classDHTTestApp.html</anchorfile>
      <anchor>af4f5c22914b4aa65988213e8d5c9e90a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mean</name>
      <anchorfile>classDHTTestApp.html</anchorfile>
      <anchor>a337be44cdf668652b67559ea9c1a078a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>deviation</name>
      <anchorfile>classDHTTestApp.html</anchorfile>
      <anchor>a3882c7d6b083d35b4695ca7735788a8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>ttl</name>
      <anchorfile>classDHTTestApp.html</anchorfile>
      <anchor>a0b79803a1764a205e79085fefeee1282</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>p2pnsTraffic</name>
      <anchorfile>classDHTTestApp.html</anchorfile>
      <anchor>ab439b6f5902ff36c19fb8275d35b0739</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>activeNetwInitPhase</name>
      <anchorfile>classDHTTestApp.html</anchorfile>
      <anchor>a5face430e11029d3d3d881feb39b7154</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numSent</name>
      <anchorfile>classDHTTestApp.html</anchorfile>
      <anchor>a84ac623892d99d17de8e3de2a34303ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numGetSent</name>
      <anchorfile>classDHTTestApp.html</anchorfile>
      <anchor>afa57b7991dbb7441febc587e77ceed45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numGetError</name>
      <anchorfile>classDHTTestApp.html</anchorfile>
      <anchor>a6c2e06c541374b74b830feaa19ea01ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numGetSuccess</name>
      <anchorfile>classDHTTestApp.html</anchorfile>
      <anchor>a4b2b08e322de19bb426e7db6b4fa9288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numPutSent</name>
      <anchorfile>classDHTTestApp.html</anchorfile>
      <anchor>a976a6108554340c7449506a9ed4e7df6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numPutError</name>
      <anchorfile>classDHTTestApp.html</anchorfile>
      <anchor>a675de4861172cc8816efd1a8594d435d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numPutSuccess</name>
      <anchorfile>classDHTTestApp.html</anchorfile>
      <anchor>a0982af4071cf4f7bdc319fff9b6d0a1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>dhttestput_timer</name>
      <anchorfile>classDHTTestApp.html</anchorfile>
      <anchor>a3c455463cb44c4eed8dd2e3d84ebbf7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>dhttestget_timer</name>
      <anchorfile>classDHTTestApp.html</anchorfile>
      <anchor>a26395d1f0daef29f778aba5effd2fc2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>dhttestmod_timer</name>
      <anchorfile>classDHTTestApp.html</anchorfile>
      <anchor>ade1621096e593ad2b4cd05d69cdd4593</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>nodeIsLeavingSoon</name>
      <anchorfile>classDHTTestApp.html</anchorfile>
      <anchor>a5f12523fc8aa1ea2c2f0f700a39bf20f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const int</type>
      <name>DHTTESTAPP_VALUE_LEN</name>
      <anchorfile>classDHTTestApp.html</anchorfile>
      <anchor>add7f40e10adb1368253f0d3c5a3b1ff8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DHTTestApp::DHTStatsContext</name>
    <filename>classDHTTestApp_1_1DHTStatsContext.html</filename>
    <member kind="function">
      <type></type>
      <name>DHTStatsContext</name>
      <anchorfile>classDHTTestApp_1_1DHTStatsContext.html</anchorfile>
      <anchor>a5c86be43d55ba7e71337a6a107a1c55d</anchor>
      <arglist>(bool measurementPhase, simtime_t requestTime, const OverlayKey &amp;key, const BinaryValue &amp;value=BinaryValue::UNSPECIFIED_VALUE)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>measurementPhase</name>
      <anchorfile>classDHTTestApp_1_1DHTStatsContext.html</anchorfile>
      <anchor>a6509c8fbbbf872f0fc478aa7f68ce194</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>requestTime</name>
      <anchorfile>classDHTTestApp_1_1DHTStatsContext.html</anchorfile>
      <anchor>a46ad4e8352149239697973f408807055</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OverlayKey</type>
      <name>key</name>
      <anchorfile>classDHTTestApp_1_1DHTStatsContext.html</anchorfile>
      <anchor>a571e4584046f38f7cfe2336062f1a603</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BinaryValue</type>
      <name>value</name>
      <anchorfile>classDHTTestApp_1_1DHTStatsContext.html</anchorfile>
      <anchor>ace6c09b519b8abc945a870daaf12737d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DhtTestEntryTimer</name>
    <filename>classDhtTestEntryTimer.html</filename>
    <member kind="function">
      <type></type>
      <name>DhtTestEntryTimer</name>
      <anchorfile>classDhtTestEntryTimer.html</anchorfile>
      <anchor>a5c6ca4e5ef66dd85047119a784e744b3</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DhtTestEntryTimer</name>
      <anchorfile>classDhtTestEntryTimer.html</anchorfile>
      <anchor>a0513539aa068adaa926c2b01e78fb3e1</anchor>
      <arglist>(const DhtTestEntryTimer &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DhtTestEntryTimer</name>
      <anchorfile>classDhtTestEntryTimer.html</anchorfile>
      <anchor>a84b01f91082858150ad7733d490b856d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DhtTestEntryTimer &amp;</type>
      <name>operator=</name>
      <anchorfile>classDhtTestEntryTimer.html</anchorfile>
      <anchor>a42763f317df141898f2c7f49b82433c4</anchor>
      <arglist>(const DhtTestEntryTimer &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DhtTestEntryTimer *</type>
      <name>dup</name>
      <anchorfile>classDhtTestEntryTimer.html</anchorfile>
      <anchor>ad5f7becb1555d2ccd2ce360578e6cfb1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classDhtTestEntryTimer.html</anchorfile>
      <anchor>ac845d17c44da361c81b0304e6a2bbe3f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classDhtTestEntryTimer.html</anchorfile>
      <anchor>a185aa7e0a49a72d911d03517389f8b28</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getKey</name>
      <anchorfile>classDhtTestEntryTimer.html</anchorfile>
      <anchor>a18a59f3ad3ef80cca48b34e2d9dc8c46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getKey</name>
      <anchorfile>classDhtTestEntryTimer.html</anchorfile>
      <anchor>a2e2ba0ccc09391235dbfb92952d36223</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKey</name>
      <anchorfile>classDhtTestEntryTimer.html</anchorfile>
      <anchor>a550203ff5c3fefd34f1865ad980ffc2f</anchor>
      <arglist>(const OverlayKey &amp;key)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDhtTestEntryTimer.html</anchorfile>
      <anchor>a4282dd92b18d3a339d3a01c3b59c2f8f</anchor>
      <arglist>(const DhtTestEntryTimer &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>key_var</name>
      <anchorfile>classDhtTestEntryTimer.html</anchorfile>
      <anchor>a65f63e513ee1ac2ea9471b2e76f4f004</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classDhtTestEntryTimer.html</anchorfile>
      <anchor>a89c478db9cf5e8c1bbeaf19f5f582576</anchor>
      <arglist>(const DhtTestEntryTimer &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DHTTtlTimer</name>
    <filename>classDHTTtlTimer.html</filename>
    <member kind="function">
      <type></type>
      <name>DHTTtlTimer</name>
      <anchorfile>classDHTTtlTimer.html</anchorfile>
      <anchor>a845ed0b2dd481290f19ebb3f89b7e315</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DHTTtlTimer</name>
      <anchorfile>classDHTTtlTimer.html</anchorfile>
      <anchor>a63ed182361f647be1ccc1cefbe0e712b</anchor>
      <arglist>(const DHTTtlTimer &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DHTTtlTimer</name>
      <anchorfile>classDHTTtlTimer.html</anchorfile>
      <anchor>a33b017a500fcad84082007066f77b482</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DHTTtlTimer &amp;</type>
      <name>operator=</name>
      <anchorfile>classDHTTtlTimer.html</anchorfile>
      <anchor>adef265b687302c3eaa53bbf3d2d69fac</anchor>
      <arglist>(const DHTTtlTimer &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DHTTtlTimer *</type>
      <name>dup</name>
      <anchorfile>classDHTTtlTimer.html</anchorfile>
      <anchor>a5bf2a991a5dbb721a5a3e721b83bfac0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classDHTTtlTimer.html</anchorfile>
      <anchor>ac1df321039e15c9ca41517837be511f7</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classDHTTtlTimer.html</anchorfile>
      <anchor>a1faf4545825d998fc7c446693cfe7c58</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getKey</name>
      <anchorfile>classDHTTtlTimer.html</anchorfile>
      <anchor>a15eb83bf8f2e1def81c28b4f9d212982</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getKey</name>
      <anchorfile>classDHTTtlTimer.html</anchorfile>
      <anchor>a0d6c73d46b96953a38eac6ece11f3b7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKey</name>
      <anchorfile>classDHTTtlTimer.html</anchorfile>
      <anchor>abd0c245f818e4a67033275d5058d9fed</anchor>
      <arglist>(const OverlayKey &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>getKind</name>
      <anchorfile>classDHTTtlTimer.html</anchorfile>
      <anchor>a67f6b49b590a2a011a8eaa12e6d6bcb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKind</name>
      <anchorfile>classDHTTtlTimer.html</anchorfile>
      <anchor>aa627ca85709b20db15a5e862a9560669</anchor>
      <arglist>(uint32_t kind)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>getId</name>
      <anchorfile>classDHTTtlTimer.html</anchorfile>
      <anchor>a4661d8eee16ade14ab082f12e7336c3d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setId</name>
      <anchorfile>classDHTTtlTimer.html</anchorfile>
      <anchor>a0fd41184fb52479bed7d24a848e4c2a3</anchor>
      <arglist>(uint32_t id)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDHTTtlTimer.html</anchorfile>
      <anchor>a5fe4a421ef6277b38495714f0da8ad6a</anchor>
      <arglist>(const DHTTtlTimer &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>key_var</name>
      <anchorfile>classDHTTtlTimer.html</anchorfile>
      <anchor>ab973e9ca9030cd7961956b60da164147</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>kind_var</name>
      <anchorfile>classDHTTtlTimer.html</anchorfile>
      <anchor>aa02ffe89ad43b938b06cb5065d2e71de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>id_var</name>
      <anchorfile>classDHTTtlTimer.html</anchorfile>
      <anchor>aab55b93e64b3438d9945dc3e5f85df56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classDHTTtlTimer.html</anchorfile>
      <anchor>afb7ebb401bd7565e8144022278692e39</anchor>
      <arglist>(const DHTTtlTimer &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DiscoveryCall</name>
    <filename>classDiscoveryCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>DiscoveryCall</name>
      <anchorfile>classDiscoveryCall.html</anchorfile>
      <anchor>aa1219297a4541235ad524469c2c75639</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscoveryCall</name>
      <anchorfile>classDiscoveryCall.html</anchorfile>
      <anchor>af46960235648a06b119de198534840f5</anchor>
      <arglist>(const DiscoveryCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DiscoveryCall</name>
      <anchorfile>classDiscoveryCall.html</anchorfile>
      <anchor>a64c75adee36dd14df535167efbdfedba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DiscoveryCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classDiscoveryCall.html</anchorfile>
      <anchor>a19cf11549cf87e035df784c3807e148d</anchor>
      <arglist>(const DiscoveryCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DiscoveryCall *</type>
      <name>dup</name>
      <anchorfile>classDiscoveryCall.html</anchorfile>
      <anchor>a4ef4c418a259da23ae24c63a1c837ed8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classDiscoveryCall.html</anchorfile>
      <anchor>a51621399aa246d1047093870afa6a463</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classDiscoveryCall.html</anchorfile>
      <anchor>a8cd79364413943625371adc12be49461</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNodesType</name>
      <anchorfile>classDiscoveryCall.html</anchorfile>
      <anchor>abf0ba2356862c90373a927f2b8e2db68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNodesType</name>
      <anchorfile>classDiscoveryCall.html</anchorfile>
      <anchor>ab875e2779493bc1000cf59ad58bf1358</anchor>
      <arglist>(unsigned int nodesType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumberOfNodes</name>
      <anchorfile>classDiscoveryCall.html</anchorfile>
      <anchor>afb59eae387aa49a81b277440686248aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumberOfNodes</name>
      <anchorfile>classDiscoveryCall.html</anchorfile>
      <anchor>aca49c4aaa7ff3af93f1d888f2cf70fe8</anchor>
      <arglist>(int numberOfNodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getIndex</name>
      <anchorfile>classDiscoveryCall.html</anchorfile>
      <anchor>ae267be26720c3ae446d62d77ea8f9b56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIndex</name>
      <anchorfile>classDiscoveryCall.html</anchorfile>
      <anchor>a22d567599794c1013e9125fa946afc68</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDiscoveryCall.html</anchorfile>
      <anchor>a8f44e54ac2189d9a6066e02218084105</anchor>
      <arglist>(const DiscoveryCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>nodesType_var</name>
      <anchorfile>classDiscoveryCall.html</anchorfile>
      <anchor>aa2556ec06c1f7207ff71c169230e88a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numberOfNodes_var</name>
      <anchorfile>classDiscoveryCall.html</anchorfile>
      <anchor>ac282c836c1abd0685a7c56a215de12f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>index_var</name>
      <anchorfile>classDiscoveryCall.html</anchorfile>
      <anchor>a456417bf8786defa33f89514824da4a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classDiscoveryCall.html</anchorfile>
      <anchor>a897a9ece61c93e7f7c8f7a7d64410936</anchor>
      <arglist>(const DiscoveryCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DiscoveryMode</name>
    <filename>classDiscoveryMode.html</filename>
    <base>RpcListener</base>
    <base protection="private">ProxListener</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DiscoveryMode</name>
      <anchorfile>classDiscoveryMode.html</anchorfile>
      <anchor>a49d23b8a9b35289d0ae67e1f7dad028a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDiscoveryMode.html</anchorfile>
      <anchor>a332eda4f6161c9c842a0b2cae3bff0ea</anchor>
      <arglist>(NeighborCache *neighborCache)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classDiscoveryMode.html</anchorfile>
      <anchor>ac622d18bed247256c8375008cd899ae5</anchor>
      <arglist>(const TransportAddress &amp;bootstrapNode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classDiscoveryMode.html</anchorfile>
      <anchor>a3472ea9e9607f5aa98dcbf525e1cbaaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getImprovement</name>
      <anchorfile>classDiscoveryMode.html</anchorfile>
      <anchor>a55d62f44303e773d9ceb6618d9854e32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinished</name>
      <anchorfile>classDiscoveryMode.html</anchorfile>
      <anchor>a4223226a7d7caca94c2e7b5a9f604097</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleRpcCall</name>
      <anchorfile>classDiscoveryMode.html</anchorfile>
      <anchor>a3105fd0ad97e5d66f443450c23bb3dbf</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleRpcResponse</name>
      <anchorfile>classDiscoveryMode.html</anchorfile>
      <anchor>af071848ea77ed1a362cee01b176a75f9</anchor>
      <arglist>(BaseResponseMessage *msg, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleRpcTimeout</name>
      <anchorfile>classDiscoveryMode.html</anchorfile>
      <anchor>a0ff1303128381e0c6aea1b11817d938c</anchor>
      <arglist>(BaseCallMessage *msg, const TransportAddress &amp;dest, cPolymorphic *context, int rpcId, const OverlayKey &amp;destKey)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>proxCallback</name>
      <anchorfile>classDiscoveryMode.html</anchorfile>
      <anchor>a11c5b76b59d37ad68f83ac6a840b95b5</anchor>
      <arglist>(const TransportAddress &amp;node, int rpcId, cPolymorphic *contextPointer, Prox prox)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendNewRequest</name>
      <anchorfile>classDiscoveryMode.html</anchorfile>
      <anchor>a7c1fec77ae71481719b2a2bd80ae9911</anchor>
      <arglist>(DiscoveryNodesType type, uint8_t numNodes)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int16_t</type>
      <name>step</name>
      <anchorfile>classDiscoveryMode.html</anchorfile>
      <anchor>a3477b4b50cd5dd7d36f0334997443394</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint8_t</type>
      <name>maxSteps</name>
      <anchorfile>classDiscoveryMode.html</anchorfile>
      <anchor>a6f852e7e9f26c916cabd4fc2eb76c51d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int8_t</type>
      <name>spreadedSteps</name>
      <anchorfile>classDiscoveryMode.html</anchorfile>
      <anchor>a79004c55629290fb72855479ad2c0a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint8_t</type>
      <name>queries</name>
      <anchorfile>classDiscoveryMode.html</anchorfile>
      <anchor>aaa73cc17f537171cecd8365c75e0e2f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int8_t</type>
      <name>maxIndex</name>
      <anchorfile>classDiscoveryMode.html</anchorfile>
      <anchor>a5e406c6114d804d7b2d083972793df97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>nearNodeRtt</name>
      <anchorfile>classDiscoveryMode.html</anchorfile>
      <anchor>a2f1701a8a1a87caf855a5f14749be360</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>nearNodeImproved</name>
      <anchorfile>classDiscoveryMode.html</anchorfile>
      <anchor>af48ddec20500dcc48dcc173786d444d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress</type>
      <name>nearNode</name>
      <anchorfile>classDiscoveryMode.html</anchorfile>
      <anchor>abe97112157e08a79a2eeb705130006bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NeighborCache *</type>
      <name>neighborCache</name>
      <anchorfile>classDiscoveryMode.html</anchorfile>
      <anchor>a90d14b90a336d1b5e45435f332be125e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint8_t</type>
      <name>numCloseNodes</name>
      <anchorfile>classDiscoveryMode.html</anchorfile>
      <anchor>af6954f7999ab10d019cdc127f2e8f313</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint8_t</type>
      <name>numSpreadedNodes</name>
      <anchorfile>classDiscoveryMode.html</anchorfile>
      <anchor>a29c08eca5111a8d9287b052dfeacdc95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>firstRtt</name>
      <anchorfile>classDiscoveryMode.html</anchorfile>
      <anchor>a980aca2618a77a553a6933f6468f7ca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>improvement</name>
      <anchorfile>classDiscoveryMode.html</anchorfile>
      <anchor>abec4fa9c93bb671e6ebdff87c8bd9f0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>finished</name>
      <anchorfile>classDiscoveryMode.html</anchorfile>
      <anchor>a843da9cfb855514ba60f6869ea3d49ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BasePastry *</type>
      <name>basePastry</name>
      <anchorfile>classDiscoveryMode.html</anchorfile>
      <anchor>ac3ee97852f03244dbeff06bd45c01410</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DiscoveryResponse</name>
    <filename>classDiscoveryResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>DiscoveryResponse</name>
      <anchorfile>classDiscoveryResponse.html</anchorfile>
      <anchor>acc88914f6cb180aeed3019efdcd0c5f2</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscoveryResponse</name>
      <anchorfile>classDiscoveryResponse.html</anchorfile>
      <anchor>a2a1921b39d624426c1ddce1237a9785a</anchor>
      <arglist>(const DiscoveryResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DiscoveryResponse</name>
      <anchorfile>classDiscoveryResponse.html</anchorfile>
      <anchor>a66b349da59ef7705b08bffe84cfcd531</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DiscoveryResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classDiscoveryResponse.html</anchorfile>
      <anchor>a9a2923f0dfa503496e82befe9ca443ec</anchor>
      <arglist>(const DiscoveryResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DiscoveryResponse *</type>
      <name>dup</name>
      <anchorfile>classDiscoveryResponse.html</anchorfile>
      <anchor>adbc43845049dd7bc0987c77cbd808bbf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classDiscoveryResponse.html</anchorfile>
      <anchor>a34ebeacc4f46a60a436998d02b3f08b2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classDiscoveryResponse.html</anchorfile>
      <anchor>af7ec5c684d2d93e989db632dfe11d859</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNodesArraySize</name>
      <anchorfile>classDiscoveryResponse.html</anchorfile>
      <anchor>af09421085f629987fe0a2147c4a5738b</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNodesArraySize</name>
      <anchorfile>classDiscoveryResponse.html</anchorfile>
      <anchor>a446461f20592b5852fce6e2f7963ab48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransportAddress &amp;</type>
      <name>getNodes</name>
      <anchorfile>classDiscoveryResponse.html</anchorfile>
      <anchor>a08c038be88bf401f044e9660d7fb2f12</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TransportAddress &amp;</type>
      <name>getNodes</name>
      <anchorfile>classDiscoveryResponse.html</anchorfile>
      <anchor>ad0c556b6a493c493b678e7a2bf765ade</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNodes</name>
      <anchorfile>classDiscoveryResponse.html</anchorfile>
      <anchor>a9949f76700f47117a913cc59ceacefc9</anchor>
      <arglist>(unsigned int k, const TransportAddress &amp;nodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getMaxIndex</name>
      <anchorfile>classDiscoveryResponse.html</anchorfile>
      <anchor>a8a4f529ca2a1074ddec31fdfdab58cb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMaxIndex</name>
      <anchorfile>classDiscoveryResponse.html</anchorfile>
      <anchor>a5cd7f1b31b7829b116bef4764c7dbc34</anchor>
      <arglist>(int maxIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDiscoveryResponse.html</anchorfile>
      <anchor>a0607b17a9ad17d0f993bad1c5dcea78f</anchor>
      <arglist>(const DiscoveryResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress *</type>
      <name>nodes_var</name>
      <anchorfile>classDiscoveryResponse.html</anchorfile>
      <anchor>a90389cf48668eb85f62477804b204a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>nodes_arraysize</name>
      <anchorfile>classDiscoveryResponse.html</anchorfile>
      <anchor>a293435745fd48f3e53860007c4c05785</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>maxIndex_var</name>
      <anchorfile>classDiscoveryResponse.html</anchorfile>
      <anchor>ab86fa473841b20dd865e9977a2034159</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classDiscoveryResponse.html</anchorfile>
      <anchor>a093ba64efc68cfe3d6f219fdacd91ffd</anchor>
      <arglist>(const DiscoveryResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DumpDht</name>
    <filename>classDumpDht.html</filename>
    <base>XmlRpc::XmlRpcServerMethod</base>
    <member kind="function">
      <type></type>
      <name>DumpDht</name>
      <anchorfile>classDumpDht.html</anchorfile>
      <anchor>a72576b52b5df6c56a5ea489f63a403f1</anchor>
      <arglist>(XmlRpcServer *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>execute</name>
      <anchorfile>classDumpDht.html</anchorfile>
      <anchor>adad453b19db8f3405f46687b4a2a0f71</anchor>
      <arglist>(XmlRpcValue &amp;params, XmlRpcValue &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>help</name>
      <anchorfile>classDumpDht.html</anchorfile>
      <anchor>adb2a119b4c89a3d84cb035fda0883f01</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Edge</name>
    <filename>classEdge.html</filename>
    <member kind="function">
      <type></type>
      <name>Edge</name>
      <anchorfile>classEdge.html</anchorfile>
      <anchor>a3106b11d60125009dbf7a738ce540fdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>a</name>
      <anchorfile>classEdge.html</anchorfile>
      <anchor>ae3d9abc1cba00fc7f6caad332969e400</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>b</name>
      <anchorfile>classEdge.html</anchorfile>
      <anchor>ad011ceb096a51dd8f9a59da0b45de872</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>c</name>
      <anchorfile>classEdge.html</anchorfile>
      <anchor>ad4e44000e94457d94ce63cfcf4300a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Site *</type>
      <name>ep</name>
      <anchorfile>classEdge.html</anchorfile>
      <anchor>a5286251a994b3f5266474a55b5b181f9</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>Site *</type>
      <name>reg</name>
      <anchorfile>classEdge.html</anchorfile>
      <anchor>ad9b4d0f88664bb5fd3f511cd2ef27cfd</anchor>
      <arglist>[2]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EdgeList</name>
    <filename>classEdgeList.html</filename>
    <member kind="function">
      <type></type>
      <name>EdgeList</name>
      <anchorfile>classEdgeList.html</anchorfile>
      <anchor>a576a285abfb40e752e61e8c4da195d0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classEdgeList.html</anchorfile>
      <anchor>a4c5ec2361b648020d14b262d53f31415</anchor>
      <arglist>(int sqrt_nsites, double xmin, double deltax, Site *bottomsite)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classEdgeList.html</anchorfile>
      <anchor>aeeb737f31a13a16c51a05d55b4dc3701</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Halfedge *</type>
      <name>HEcreate</name>
      <anchorfile>classEdgeList.html</anchorfile>
      <anchor>aec23b6e42d883591e9a661566fdbfda5</anchor>
      <arglist>(Edge *e, int pm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ELinsert</name>
      <anchorfile>classEdgeList.html</anchorfile>
      <anchor>a0634267aac794c64b40a70c93d2b2e92</anchor>
      <arglist>(Halfedge *lb, Halfedge *new_he)</arglist>
    </member>
    <member kind="function">
      <type>Halfedge *</type>
      <name>ELgethash</name>
      <anchorfile>classEdgeList.html</anchorfile>
      <anchor>ae1e702d91192bae9f604dc938ea2bf19</anchor>
      <arglist>(int b)</arglist>
    </member>
    <member kind="function">
      <type>Halfedge *</type>
      <name>ELleftbnd</name>
      <anchorfile>classEdgeList.html</anchorfile>
      <anchor>a95f79b33a2be55987e3803560b6bcbe4</anchor>
      <arglist>(Vector2D *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ELdelete</name>
      <anchorfile>classEdgeList.html</anchorfile>
      <anchor>ad912ba344238f0c9e0f9c6f7a2fbc26b</anchor>
      <arglist>(Halfedge *he)</arglist>
    </member>
    <member kind="function">
      <type>Halfedge *</type>
      <name>ELright</name>
      <anchorfile>classEdgeList.html</anchorfile>
      <anchor>a15477c20a6aa35a11a7adf1d66e2ce56</anchor>
      <arglist>(Halfedge *he)</arglist>
    </member>
    <member kind="function">
      <type>Halfedge *</type>
      <name>ELleft</name>
      <anchorfile>classEdgeList.html</anchorfile>
      <anchor>a70afa1e1c28ac28245dde25b2efac6ee</anchor>
      <arglist>(Halfedge *he)</arglist>
    </member>
    <member kind="function">
      <type>Site *</type>
      <name>leftreg</name>
      <anchorfile>classEdgeList.html</anchorfile>
      <anchor>a153e9bac9b57716ff96206a19cf18543</anchor>
      <arglist>(Halfedge *he)</arglist>
    </member>
    <member kind="function">
      <type>Site *</type>
      <name>rightreg</name>
      <anchorfile>classEdgeList.html</anchorfile>
      <anchor>af6f9a1ad8f024c77a18327e88e848b2a</anchor>
      <arglist>(Halfedge *he)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>right_of</name>
      <anchorfile>classEdgeList.html</anchorfile>
      <anchor>a032716bfcd8b95e19c94f5d9b2ffa614</anchor>
      <arglist>(Halfedge *el, Vector2D *p)</arglist>
    </member>
    <member kind="variable">
      <type>Halfedge *</type>
      <name>ELleftend</name>
      <anchorfile>classEdgeList.html</anchorfile>
      <anchor>a95dd0de214e6c8b72f1aeadcbd9d5690</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Halfedge *</type>
      <name>ELrightend</name>
      <anchorfile>classEdgeList.html</anchorfile>
      <anchor>a9fb7f067c7a3baa17026e8bbc95d60de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ELhashsize</name>
      <anchorfile>classEdgeList.html</anchorfile>
      <anchor>a70c619e6ae465b531b944616d5ab82d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>totalsearch</name>
      <anchorfile>classEdgeList.html</anchorfile>
      <anchor>a9d93a52a6d54d91405748bfe854cb2ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ntry</name>
      <anchorfile>classEdgeList.html</anchorfile>
      <anchor>a1b52bc9af9781a7da497c3145d1cb673</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>HEcount</name>
      <anchorfile>classEdgeList.html</anchorfile>
      <anchor>a224c119303bf4ab7ca0fe6a8478c450b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>xmin</name>
      <anchorfile>classEdgeList.html</anchorfile>
      <anchor>a73aef2210212c962c330e3c9692550c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>deltax</name>
      <anchorfile>classEdgeList.html</anchorfile>
      <anchor>a7fd0e351071503169e0d4084188032fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Halfedge **</type>
      <name>ELhash</name>
      <anchorfile>classEdgeList.html</anchorfile>
      <anchor>a7552e7f8995dfd90e6ac0fcd63ad0992</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Halfedge **</type>
      <name>HEmemmap</name>
      <anchorfile>classEdgeList.html</anchorfile>
      <anchor>a1120005bd49c6a6eaadfed7e1d4ddd46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Site *</type>
      <name>bottomsite</name>
      <anchorfile>classEdgeList.html</anchorfile>
      <anchor>adccb949dd496466ce218337ced3e72c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>edgePool</name>
    <filename>structedgePool.html</filename>
    <member kind="variable">
      <type>edgeRoutes *</type>
      <name>edge</name>
      <anchorfile>structedgePool.html</anchorfile>
      <anchor>a0bb2dc8707ef38f2a2cf32aab9a00ed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>indexAS</name>
      <anchorfile>structedgePool.html</anchorfile>
      <anchor>a81524cc97a26dbd600a5c12cbf50ad2d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>edgeRouter</name>
    <filename>structedgeRouter.html</filename>
    <member kind="variable">
      <type>unsigned int</type>
      <name>edgeIP</name>
      <anchorfile>structedgeRouter.html</anchorfile>
      <anchor>a450d84ba9425f34832170d7ea9811635</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>usedIPs</name>
      <anchorfile>structedgeRouter.html</anchorfile>
      <anchor>a8ef737c9c1ca877edc5313ed336f4eee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>structedgeRouter.html</anchorfile>
      <anchor>a0407d28d2a8b617240698b94c309e304</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>edgeRoutes</name>
    <filename>structedgeRoutes.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>countPPPInterfaces</name>
      <anchorfile>structedgeRoutes.html</anchorfile>
      <anchor>ada7ec401234d5ce01ae2a01788e477c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IInterfaceTable *</type>
      <name>interfaceTable</name>
      <anchorfile>structedgeRoutes.html</anchorfile>
      <anchor>ae1e6d1225b81f330cf5ee3d493865b57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IRoutingTable *</type>
      <name>routingTable</name>
      <anchorfile>structedgeRoutes.html</anchorfile>
      <anchor>aefa548eb16e3c9b5b599be88877eaf16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>IPAddress</name>
      <anchorfile>structedgeRoutes.html</anchorfile>
      <anchor>af3ed267ce08be24bcf462bc73d65710c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>lastIP</name>
      <anchorfile>structedgeRoutes.html</anchorfile>
      <anchor>a69edfe9d308bc604b82af49f3082837f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cModule *</type>
      <name>Router</name>
      <anchorfile>structedgeRoutes.html</anchorfile>
      <anchor>a613f4036d30841f3415625d1d1d2c5e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; uint32 &gt;</type>
      <name>IPAddresses</name>
      <anchorfile>structedgeRoutes.html</anchorfile>
      <anchor>a7fa36c1eb55617b5c9b33e37870e2ba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>channelTypeRxStr</name>
      <anchorfile>structedgeRoutes.html</anchorfile>
      <anchor>a1e0d033f54f06c7c0d4e900fb6cb9dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>channelTypeTxStr</name>
      <anchorfile>structedgeRoutes.html</anchorfile>
      <anchor>afd232b4105f1b6fa30315732e7ef18d5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EuclideanNcsNodeInfo</name>
    <filename>classEuclideanNcsNodeInfo.html</filename>
    <base>AbstractNcsNodeInfo</base>
    <member kind="function">
      <type></type>
      <name>EuclideanNcsNodeInfo</name>
      <anchorfile>classEuclideanNcsNodeInfo.html</anchorfile>
      <anchor>acebcd9946c2494198b6891ecd585bf22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EuclideanNcsNodeInfo</name>
      <anchorfile>classEuclideanNcsNodeInfo.html</anchorfile>
      <anchor>aa2982146c79bdd0681c31bd0914b879a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>getDimension</name>
      <anchorfile>classEuclideanNcsNodeInfo.html</anchorfile>
      <anchor>a8bcc42e2b82fb93aead825acd61739ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCoords</name>
      <anchorfile>classEuclideanNcsNodeInfo.html</anchorfile>
      <anchor>a43b66b96092e688a0e775b7c795f96c5</anchor>
      <arglist>(uint8_t i) const </arglist>
    </member>
    <member kind="function">
      <type>const Coords &amp;</type>
      <name>getCoords</name>
      <anchorfile>classEuclideanNcsNodeInfo.html</anchorfile>
      <anchor>a0f0f395077e1d80f8916252dd4472716</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoords</name>
      <anchorfile>classEuclideanNcsNodeInfo.html</anchorfile>
      <anchor>aff86e96ad92b1cca727a2a3d44acfe68</anchor>
      <arglist>(uint8_t i, double value)</arglist>
    </member>
    <member kind="function">
      <type>Prox</type>
      <name>getDistance</name>
      <anchorfile>classEuclideanNcsNodeInfo.html</anchorfile>
      <anchor>a55da7d34e6813fe743e657f5ce847e00</anchor>
      <arglist>(const AbstractNcsNodeInfo &amp;abstractInfo) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setDimension</name>
      <anchorfile>classEuclideanNcsNodeInfo.html</anchorfile>
      <anchor>a006113915f1e9cf7f802ec400c1dc264</anchor>
      <arglist>(uint8_t dimension)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coords</type>
      <name>coordinates</name>
      <anchorfile>classEuclideanNcsNodeInfo.html</anchorfile>
      <anchor>a7b68d47388fbf71ac427c9e4badd2287</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static uint8_t</type>
      <name>dim</name>
      <anchorfile>classEuclideanNcsNodeInfo.html</anchorfile>
      <anchor>ac21b74e4767a395434f3426c1c63687f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ExtTCPSocketMap</name>
    <filename>classExtTCPSocketMap.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual TCPSocket *</type>
      <name>findSocketFor</name>
      <anchorfile>classExtTCPSocketMap.html</anchorfile>
      <anchor>a547a83df231ec53d66757a0b79956876</anchor>
      <arglist>(IPvXAddress remoteAddress, int remotePort)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TCPSocket *</type>
      <name>findSocketFor</name>
      <anchorfile>classExtTCPSocketMap.html</anchorfile>
      <anchor>a387895c6911701c384cde45333a24207</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TCPSocket *</type>
      <name>findSocketFor</name>
      <anchorfile>classExtTCPSocketMap.html</anchorfile>
      <anchor>af082d7797cf9d7c18223bb3c8169d357</anchor>
      <arglist>(int connId)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FailedNodeCall</name>
    <filename>classFailedNodeCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>FailedNodeCall</name>
      <anchorfile>classFailedNodeCall.html</anchorfile>
      <anchor>a8d96d2e6766981d45a6b458bfbf80b70</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FailedNodeCall</name>
      <anchorfile>classFailedNodeCall.html</anchorfile>
      <anchor>a37bbb6e5f157d99dd7000c94314c5384</anchor>
      <arglist>(const FailedNodeCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FailedNodeCall</name>
      <anchorfile>classFailedNodeCall.html</anchorfile>
      <anchor>adb4f91210b5c6413d6a7171c295ea71c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FailedNodeCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classFailedNodeCall.html</anchorfile>
      <anchor>a382df86884057d243c16bed782be9bce</anchor>
      <arglist>(const FailedNodeCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FailedNodeCall *</type>
      <name>dup</name>
      <anchorfile>classFailedNodeCall.html</anchorfile>
      <anchor>aef0520606683586be77adef44fd4629d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classFailedNodeCall.html</anchorfile>
      <anchor>a626832a125d4b0bace691c48892b39ee</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classFailedNodeCall.html</anchorfile>
      <anchor>aaad4de3568d17f0cae385311827cbd31</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransportAddress &amp;</type>
      <name>getFailedNode</name>
      <anchorfile>classFailedNodeCall.html</anchorfile>
      <anchor>a5a47646a10bc9e34503a4635121ef85c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TransportAddress &amp;</type>
      <name>getFailedNode</name>
      <anchorfile>classFailedNodeCall.html</anchorfile>
      <anchor>abd873d1d531112159375d47235e83f5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFailedNode</name>
      <anchorfile>classFailedNodeCall.html</anchorfile>
      <anchor>a3aa565698093b08c3919263e197c97d4</anchor>
      <arglist>(const TransportAddress &amp;failedNode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classFailedNodeCall.html</anchorfile>
      <anchor>a02b0146ce2c0494f4803acee590ca3b7</anchor>
      <arglist>(const FailedNodeCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress</type>
      <name>failedNode_var</name>
      <anchorfile>classFailedNodeCall.html</anchorfile>
      <anchor>ac743253b458a632ecbdfe741a07e3c5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classFailedNodeCall.html</anchorfile>
      <anchor>a37dbc8b359051ab832063ad72da22f98</anchor>
      <arglist>(const FailedNodeCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FailedNodeResponse</name>
    <filename>classFailedNodeResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>FailedNodeResponse</name>
      <anchorfile>classFailedNodeResponse.html</anchorfile>
      <anchor>ae01b3e4f60dc6568f4e7434fd3c04cd0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FailedNodeResponse</name>
      <anchorfile>classFailedNodeResponse.html</anchorfile>
      <anchor>aded2479d91b033d01137f92bb21420cd</anchor>
      <arglist>(const FailedNodeResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FailedNodeResponse</name>
      <anchorfile>classFailedNodeResponse.html</anchorfile>
      <anchor>a5e7ed7727d085780ecb13b36b4c7f581</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FailedNodeResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classFailedNodeResponse.html</anchorfile>
      <anchor>ad53e49bedd6a5381c657e08c7af115e1</anchor>
      <arglist>(const FailedNodeResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FailedNodeResponse *</type>
      <name>dup</name>
      <anchorfile>classFailedNodeResponse.html</anchorfile>
      <anchor>ab971c0ed927f5b734eb07dab5bf7d982</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classFailedNodeResponse.html</anchorfile>
      <anchor>a875726c112c99ff960ca4e3b7db00967</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classFailedNodeResponse.html</anchorfile>
      <anchor>aaad11786dc30171fc5786fb80e4f47ea</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getTryAgain</name>
      <anchorfile>classFailedNodeResponse.html</anchorfile>
      <anchor>a06ea0012eaefc7aa9108b899677fe600</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTryAgain</name>
      <anchorfile>classFailedNodeResponse.html</anchorfile>
      <anchor>ab5d9127eed8cdca17366704abc9e942e</anchor>
      <arglist>(bool tryAgain)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classFailedNodeResponse.html</anchorfile>
      <anchor>a1657867ff30ecab9b1d58a94fb28114b</anchor>
      <arglist>(const FailedNodeResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>tryAgain_var</name>
      <anchorfile>classFailedNodeResponse.html</anchorfile>
      <anchor>aed022a5c2dc503deac0f232ab0898500</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classFailedNodeResponse.html</anchorfile>
      <anchor>a85d1d97577d6032db0cf6720b37d24c1</anchor>
      <arglist>(const FailedNodeResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FindNodeCall</name>
    <filename>classFindNodeCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>FindNodeCall</name>
      <anchorfile>classFindNodeCall.html</anchorfile>
      <anchor>ad4c22fa3ba74801d811a6deea64b1c80</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FindNodeCall</name>
      <anchorfile>classFindNodeCall.html</anchorfile>
      <anchor>a3f8da6af7971727c92072ae6634982f0</anchor>
      <arglist>(const FindNodeCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FindNodeCall</name>
      <anchorfile>classFindNodeCall.html</anchorfile>
      <anchor>ad8360c27cd51af56805cb3f08d7b0bd0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FindNodeCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classFindNodeCall.html</anchorfile>
      <anchor>ab8c9e92fa245dfc0148201bc7ccdd0ab</anchor>
      <arglist>(const FindNodeCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FindNodeCall *</type>
      <name>dup</name>
      <anchorfile>classFindNodeCall.html</anchorfile>
      <anchor>a59a628be6eb8a043146532d0b3d02e99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classFindNodeCall.html</anchorfile>
      <anchor>a70282e8a97c9262b2730d26d23a91822</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classFindNodeCall.html</anchorfile>
      <anchor>a6bab5031485c2918c4795431d60b9087</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getLookupKey</name>
      <anchorfile>classFindNodeCall.html</anchorfile>
      <anchor>a1be5a1314a95df730b18ac73b08d07e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getLookupKey</name>
      <anchorfile>classFindNodeCall.html</anchorfile>
      <anchor>a567b40810a3da0e579ce4394d370b9ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLookupKey</name>
      <anchorfile>classFindNodeCall.html</anchorfile>
      <anchor>a2abda290bf29528fddc71c5b2e89b4ad</anchor>
      <arglist>(const OverlayKey &amp;lookupKey)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumRedundantNodes</name>
      <anchorfile>classFindNodeCall.html</anchorfile>
      <anchor>ad145ac485f8da308c4b976802cfa48ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumRedundantNodes</name>
      <anchorfile>classFindNodeCall.html</anchorfile>
      <anchor>a59d13e29485b5f38b1d105cb6016cf98</anchor>
      <arglist>(int numRedundantNodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumSiblings</name>
      <anchorfile>classFindNodeCall.html</anchorfile>
      <anchor>ac5a68f5e9f62d37613c5ce47a9348a92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumSiblings</name>
      <anchorfile>classFindNodeCall.html</anchorfile>
      <anchor>a743e7a1901266a50953eb276c4420f67</anchor>
      <arglist>(int numSiblings)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getExhaustiveIterative</name>
      <anchorfile>classFindNodeCall.html</anchorfile>
      <anchor>ad9bb40597926cfc521e7eb8e10b5f14d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExhaustiveIterative</name>
      <anchorfile>classFindNodeCall.html</anchorfile>
      <anchor>a23d81e4dffecd7b5ba72dce892af2159</anchor>
      <arglist>(bool exhaustiveIterative)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classFindNodeCall.html</anchorfile>
      <anchor>ae3ec3d807504875cf17bf50ba0bcab87</anchor>
      <arglist>(const FindNodeCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>lookupKey_var</name>
      <anchorfile>classFindNodeCall.html</anchorfile>
      <anchor>aeaa1ed3dd40f4d024b79390778379240</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numRedundantNodes_var</name>
      <anchorfile>classFindNodeCall.html</anchorfile>
      <anchor>aaa91acf6f3918c845c113f7c5e46f040</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numSiblings_var</name>
      <anchorfile>classFindNodeCall.html</anchorfile>
      <anchor>adea2866a36e3b7be9852626e418be60c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>exhaustiveIterative_var</name>
      <anchorfile>classFindNodeCall.html</anchorfile>
      <anchor>a8c5dfdb46ba656c810300f718e426d5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classFindNodeCall.html</anchorfile>
      <anchor>a14a4b9ef8d4753b972f066fc79ef5cb7</anchor>
      <arglist>(const FindNodeCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FindNodeResponse</name>
    <filename>classFindNodeResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>FindNodeResponse</name>
      <anchorfile>classFindNodeResponse.html</anchorfile>
      <anchor>a0dc8b3e0c719b14761182ce56bb42c69</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FindNodeResponse</name>
      <anchorfile>classFindNodeResponse.html</anchorfile>
      <anchor>aaaa25fa199a527ff8e5d98b96e83739b</anchor>
      <arglist>(const FindNodeResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FindNodeResponse</name>
      <anchorfile>classFindNodeResponse.html</anchorfile>
      <anchor>af7dfcbde8fe7105aa97c5887c9629262</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FindNodeResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classFindNodeResponse.html</anchorfile>
      <anchor>a65407a67eb4bf5ec45d1682250df39ea</anchor>
      <arglist>(const FindNodeResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FindNodeResponse *</type>
      <name>dup</name>
      <anchorfile>classFindNodeResponse.html</anchorfile>
      <anchor>ae2805d5b3e217bc404479ee5401fe4f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classFindNodeResponse.html</anchorfile>
      <anchor>a5f6479d705c2d3c3c80cc48f758fcf6b</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classFindNodeResponse.html</anchorfile>
      <anchor>a17872971d163f450fbe438ff2bf0f05f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getSiblings</name>
      <anchorfile>classFindNodeResponse.html</anchorfile>
      <anchor>a3b2d5182a558c15bb4827580e4c66a65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSiblings</name>
      <anchorfile>classFindNodeResponse.html</anchorfile>
      <anchor>a09db619c7bd35b89520e37c9ece0b572</anchor>
      <arglist>(bool siblings)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setClosestNodesArraySize</name>
      <anchorfile>classFindNodeResponse.html</anchorfile>
      <anchor>aafe7a51c910c28bec242629aef2146df</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getClosestNodesArraySize</name>
      <anchorfile>classFindNodeResponse.html</anchorfile>
      <anchor>a35fa2b087eb91b46a28b8bff54537d98</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getClosestNodes</name>
      <anchorfile>classFindNodeResponse.html</anchorfile>
      <anchor>af76de7ece02d426699ff9eadb20d7242</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getClosestNodes</name>
      <anchorfile>classFindNodeResponse.html</anchorfile>
      <anchor>a2d612b575842eda2be4fc9dcea5ac9eb</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setClosestNodes</name>
      <anchorfile>classFindNodeResponse.html</anchorfile>
      <anchor>a010c092191009895499369eb5920ef0b</anchor>
      <arglist>(unsigned int k, const NodeHandle &amp;closestNodes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classFindNodeResponse.html</anchorfile>
      <anchor>aaee42314eba342ce7215a905368da5e0</anchor>
      <arglist>(const FindNodeResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>siblings_var</name>
      <anchorfile>classFindNodeResponse.html</anchorfile>
      <anchor>ab4cc6da1ca1cf56dba00e1ba62031c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle *</type>
      <name>closestNodes_var</name>
      <anchorfile>classFindNodeResponse.html</anchorfile>
      <anchor>a27546e4c60fb914fb45626fe45b564cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>closestNodes_arraysize</name>
      <anchorfile>classFindNodeResponse.html</anchorfile>
      <anchor>ae9adaeebe0f62341398fd1860e4f85bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classFindNodeResponse.html</anchorfile>
      <anchor>a81e39f74da47d8840c6a0343f269f03b</anchor>
      <arglist>(const FindNodeResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FinisherModule</name>
    <filename>classFinisherModule.html</filename>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classFinisherModule.html</anchorfile>
      <anchor>a6a5745fe437528a1ed0fcad046cb8c60</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FixfingersCall</name>
    <filename>classFixfingersCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>FixfingersCall</name>
      <anchorfile>classFixfingersCall.html</anchorfile>
      <anchor>a32b84d31e2e462e27066f91dc7ad2ada</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FixfingersCall</name>
      <anchorfile>classFixfingersCall.html</anchorfile>
      <anchor>a56506926147167d55fde4757fdc67ef4</anchor>
      <arglist>(const FixfingersCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FixfingersCall</name>
      <anchorfile>classFixfingersCall.html</anchorfile>
      <anchor>a9544be4fc0973c79e1d185685ec1c95f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FixfingersCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classFixfingersCall.html</anchorfile>
      <anchor>a2b44611b76ca10be719d2c09374fe4ca</anchor>
      <arglist>(const FixfingersCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FixfingersCall *</type>
      <name>dup</name>
      <anchorfile>classFixfingersCall.html</anchorfile>
      <anchor>a9190cf2cdf976a75e68c6deda6fde962</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classFixfingersCall.html</anchorfile>
      <anchor>adb427fd67fec8e2369c0da26b14218f1</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classFixfingersCall.html</anchorfile>
      <anchor>afcdc2fe5424e318e9dd5c5847d65834c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getFinger</name>
      <anchorfile>classFixfingersCall.html</anchorfile>
      <anchor>a16adf9a636fac7d942abe80b31aadc1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFinger</name>
      <anchorfile>classFixfingersCall.html</anchorfile>
      <anchor>afd847ea3cd168c4948526903a4ca7e49</anchor>
      <arglist>(int finger)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classFixfingersCall.html</anchorfile>
      <anchor>aa6762cfb6c29a678cb958d2650c23a3a</anchor>
      <arglist>(const FixfingersCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>finger_var</name>
      <anchorfile>classFixfingersCall.html</anchorfile>
      <anchor>ac3afbfd1fc65f7a96cd5a8b49bef2ba3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classFixfingersCall.html</anchorfile>
      <anchor>ac3c1e38264341c6abd51d99e8136004e</anchor>
      <arglist>(const FixfingersCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FixfingersResponse</name>
    <filename>classFixfingersResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>FixfingersResponse</name>
      <anchorfile>classFixfingersResponse.html</anchorfile>
      <anchor>a14aec263da8def3ba2d7505096a63911</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FixfingersResponse</name>
      <anchorfile>classFixfingersResponse.html</anchorfile>
      <anchor>a04b37b6a250ba316c381badcbf2e362b</anchor>
      <arglist>(const FixfingersResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FixfingersResponse</name>
      <anchorfile>classFixfingersResponse.html</anchorfile>
      <anchor>aebfa8be770efcbdc20b86b5a5736290f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FixfingersResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classFixfingersResponse.html</anchorfile>
      <anchor>a0e74e2738d420e9254450d57e8506731</anchor>
      <arglist>(const FixfingersResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FixfingersResponse *</type>
      <name>dup</name>
      <anchorfile>classFixfingersResponse.html</anchorfile>
      <anchor>a6e67070ede412699016203494c83af02</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classFixfingersResponse.html</anchorfile>
      <anchor>a5e7473e6082798350ddb6d7b103076b5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classFixfingersResponse.html</anchorfile>
      <anchor>adabed12aef811ee60be99d879789c860</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getFinger</name>
      <anchorfile>classFixfingersResponse.html</anchorfile>
      <anchor>a8aa72033e5d2df235303d07915ed9664</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFinger</name>
      <anchorfile>classFixfingersResponse.html</anchorfile>
      <anchor>a8b63bf82ea710cd27694c959747fff55</anchor>
      <arglist>(int finger)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSucNodeArraySize</name>
      <anchorfile>classFixfingersResponse.html</anchorfile>
      <anchor>afd6294f8a6e8035b7dc79785e394cfda</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSucNodeArraySize</name>
      <anchorfile>classFixfingersResponse.html</anchorfile>
      <anchor>aaf79f995898873fb320af030b20ec787</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getSucNode</name>
      <anchorfile>classFixfingersResponse.html</anchorfile>
      <anchor>aebd5bb151bf46f57a29a0a2a46b67eef</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getSucNode</name>
      <anchorfile>classFixfingersResponse.html</anchorfile>
      <anchor>a23fdaa60ec8c3ccd29fc1b19a7de6235</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSucNode</name>
      <anchorfile>classFixfingersResponse.html</anchorfile>
      <anchor>a9661e113e632ee060b6a08fa0b702e1a</anchor>
      <arglist>(unsigned int k, const NodeHandle &amp;sucNode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classFixfingersResponse.html</anchorfile>
      <anchor>addd924fd04802ef9b9b1bb3d8115ccf4</anchor>
      <arglist>(const FixfingersResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>finger_var</name>
      <anchorfile>classFixfingersResponse.html</anchorfile>
      <anchor>a9e94f9066f9508fbdd06e2a1d9e71019</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle *</type>
      <name>sucNode_var</name>
      <anchorfile>classFixfingersResponse.html</anchorfile>
      <anchor>a0bbc6171a5984ddab21716d2fa6e3915</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>sucNode_arraysize</name>
      <anchorfile>classFixfingersResponse.html</anchorfile>
      <anchor>aed5ada65d56d6ed39ba9c9c1a2e55989</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classFixfingersResponse.html</anchorfile>
      <anchor>aec8c560099b220e7f16c9ee51671a509</anchor>
      <arglist>(const FixfingersResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>FullGiaNodeInfo</name>
    <filename>structFullGiaNodeInfo.html</filename>
    <member kind="variable">
      <type>GiaNode</type>
      <name>node</name>
      <anchorfile>structFullGiaNodeInfo.html</anchorfile>
      <anchor>aecd7f9fe09c1b41ee423da7c2a7457c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GiaNeighborInfo *</type>
      <name>info</name>
      <anchorfile>structFullGiaNodeInfo.html</anchorfile>
      <anchor>aa3be8ff94a4e06570dbc082c0af35a53</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GameAPIChatMessage</name>
    <filename>classGameAPIChatMessage.html</filename>
    <base>GameAPIMessage</base>
    <member kind="function">
      <type></type>
      <name>GameAPIChatMessage</name>
      <anchorfile>classGameAPIChatMessage.html</anchorfile>
      <anchor>af7cb560a02b2ac35e9adf013f7a5bf75</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GameAPIChatMessage</name>
      <anchorfile>classGameAPIChatMessage.html</anchorfile>
      <anchor>af740dde35e0d8f1258ac7d03cc5a2d4a</anchor>
      <arglist>(const GameAPIChatMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GameAPIChatMessage</name>
      <anchorfile>classGameAPIChatMessage.html</anchorfile>
      <anchor>a1738bae88dda21162819d492ae6f333e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GameAPIChatMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classGameAPIChatMessage.html</anchorfile>
      <anchor>aa2d078314c190c8b453c06ffacf23d6f</anchor>
      <arglist>(const GameAPIChatMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GameAPIChatMessage *</type>
      <name>dup</name>
      <anchorfile>classGameAPIChatMessage.html</anchorfile>
      <anchor>a1bb598816f4594d304eb10ac376e9ad1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classGameAPIChatMessage.html</anchorfile>
      <anchor>a6c6076fa6561e4ee177fb61ae5d2d607</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classGameAPIChatMessage.html</anchorfile>
      <anchor>a938f87a2a38d0da782a4e0901218d9ec</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getSrc</name>
      <anchorfile>classGameAPIChatMessage.html</anchorfile>
      <anchor>adafc2087ca9c7fcdac19bf6cf5443cb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getSrc</name>
      <anchorfile>classGameAPIChatMessage.html</anchorfile>
      <anchor>a130f64a0f4652364358d214cb1abd8ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrc</name>
      <anchorfile>classGameAPIChatMessage.html</anchorfile>
      <anchor>a294721467824ef51b273f4e68de8da75</anchor>
      <arglist>(const NodeHandle &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getMsg</name>
      <anchorfile>classGameAPIChatMessage.html</anchorfile>
      <anchor>a9d4aab334abd3f61e3461f05aa14159b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMsg</name>
      <anchorfile>classGameAPIChatMessage.html</anchorfile>
      <anchor>ab0fe2d5c06207d09148291e6a33b8e0c</anchor>
      <arglist>(const char *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGameAPIChatMessage.html</anchorfile>
      <anchor>a8c2f95479a65091f9c52b6d5785faa41</anchor>
      <arglist>(const GameAPIChatMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>src_var</name>
      <anchorfile>classGameAPIChatMessage.html</anchorfile>
      <anchor>a0dab8cb859c689a74eacfaabae1df511</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>msg_var</name>
      <anchorfile>classGameAPIChatMessage.html</anchorfile>
      <anchor>a92cbd5a4bf380e44146dfbd459c62c73</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classGameAPIChatMessage.html</anchorfile>
      <anchor>a92c6acddc927683882440904ad32af17</anchor>
      <arglist>(const GameAPIChatMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GameAPIFrozenMessage</name>
    <filename>classGameAPIFrozenMessage.html</filename>
    <base>GameAPIMessage</base>
    <member kind="function">
      <type></type>
      <name>GameAPIFrozenMessage</name>
      <anchorfile>classGameAPIFrozenMessage.html</anchorfile>
      <anchor>a3d0efb033700416a35e559d342d0ab49</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GameAPIFrozenMessage</name>
      <anchorfile>classGameAPIFrozenMessage.html</anchorfile>
      <anchor>a969e983f1a25745811fe39e1258dbf42</anchor>
      <arglist>(const GameAPIFrozenMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GameAPIFrozenMessage</name>
      <anchorfile>classGameAPIFrozenMessage.html</anchorfile>
      <anchor>a79971824a960e325289a510f9716becc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GameAPIFrozenMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classGameAPIFrozenMessage.html</anchorfile>
      <anchor>aeca35738bc741ac04c070f28b708592b</anchor>
      <arglist>(const GameAPIFrozenMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GameAPIFrozenMessage *</type>
      <name>dup</name>
      <anchorfile>classGameAPIFrozenMessage.html</anchorfile>
      <anchor>a509f1381868afa7525bb50afc42aa51b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classGameAPIFrozenMessage.html</anchorfile>
      <anchor>aeab3c2349303ef9e6ce5f92068f8f848</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classGameAPIFrozenMessage.html</anchorfile>
      <anchor>af41e7f1143cc082581cccd15a12bbe31</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getSrc</name>
      <anchorfile>classGameAPIFrozenMessage.html</anchorfile>
      <anchor>a443521ccd4156ee9ea692cdb8ffdf135</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getSrc</name>
      <anchorfile>classGameAPIFrozenMessage.html</anchorfile>
      <anchor>a34a9b8332d59b9d201bde2f9bba5e001</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrc</name>
      <anchorfile>classGameAPIFrozenMessage.html</anchorfile>
      <anchor>a10ab979dfa99c7482670465163f2511f</anchor>
      <arglist>(const NodeHandle &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getThrower</name>
      <anchorfile>classGameAPIFrozenMessage.html</anchorfile>
      <anchor>a95cfa009020e114a1c7475e52de4fc09</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setThrower</name>
      <anchorfile>classGameAPIFrozenMessage.html</anchorfile>
      <anchor>ad5dfac37aa4cfecf18e94ec69fb74efb</anchor>
      <arglist>(int thrower)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTimeSec</name>
      <anchorfile>classGameAPIFrozenMessage.html</anchorfile>
      <anchor>a1846c5975fa7dd181bd912e899c16a7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimeSec</name>
      <anchorfile>classGameAPIFrozenMessage.html</anchorfile>
      <anchor>aecf2dd2aef52ce735a83052db9fbc4c9</anchor>
      <arglist>(int timeSec)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTimeUsec</name>
      <anchorfile>classGameAPIFrozenMessage.html</anchorfile>
      <anchor>a8dc5131ef892b0d5c866d4c3339d7102</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimeUsec</name>
      <anchorfile>classGameAPIFrozenMessage.html</anchorfile>
      <anchor>ac774f7252f8631dc409f8cc02795ba4f</anchor>
      <arglist>(int timeUsec)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGameAPIFrozenMessage.html</anchorfile>
      <anchor>af4f290f1c1d9b4626cbe5165bd23a5ac</anchor>
      <arglist>(const GameAPIFrozenMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>src_var</name>
      <anchorfile>classGameAPIFrozenMessage.html</anchorfile>
      <anchor>ae4d33043385dd321d0d7c36ca756425e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>thrower_var</name>
      <anchorfile>classGameAPIFrozenMessage.html</anchorfile>
      <anchor>a9f71cdb2b790313369e28cd06e63f29e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>timeSec_var</name>
      <anchorfile>classGameAPIFrozenMessage.html</anchorfile>
      <anchor>a0105d56edebfc7079d7d7459cd5f6ac4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>timeUsec_var</name>
      <anchorfile>classGameAPIFrozenMessage.html</anchorfile>
      <anchor>ae79cce79cf0e2a0bff9afa81b9e2d06f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classGameAPIFrozenMessage.html</anchorfile>
      <anchor>a1e12e5f579f9b976a71844ca50e60275</anchor>
      <arglist>(const GameAPIFrozenMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GameAPIListMessage</name>
    <filename>classGameAPIListMessage.html</filename>
    <base>GameAPIMessage</base>
    <member kind="function">
      <type></type>
      <name>GameAPIListMessage</name>
      <anchorfile>classGameAPIListMessage.html</anchorfile>
      <anchor>a70565e33182061e035534b1a50500c8b</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GameAPIListMessage</name>
      <anchorfile>classGameAPIListMessage.html</anchorfile>
      <anchor>abf861c70edafb9b142617c3cfcb70e2a</anchor>
      <arglist>(const GameAPIListMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GameAPIListMessage</name>
      <anchorfile>classGameAPIListMessage.html</anchorfile>
      <anchor>a2bf65137f616d5f944c2674583299e51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GameAPIListMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classGameAPIListMessage.html</anchorfile>
      <anchor>a7b5f54b705fd78ffcadec957f54dcf71</anchor>
      <arglist>(const GameAPIListMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GameAPIListMessage *</type>
      <name>dup</name>
      <anchorfile>classGameAPIListMessage.html</anchorfile>
      <anchor>a7ebbd496ec4aca34701e2b66632cb8d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classGameAPIListMessage.html</anchorfile>
      <anchor>a253365fb66defb535ebfffe6b00cdf30</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classGameAPIListMessage.html</anchorfile>
      <anchor>aea113f47bc0e160e581f331fd9b66680</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRemoveNeighborArraySize</name>
      <anchorfile>classGameAPIListMessage.html</anchorfile>
      <anchor>a6cc71a3065a72e5636753f4e0904ad38</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getRemoveNeighborArraySize</name>
      <anchorfile>classGameAPIListMessage.html</anchorfile>
      <anchor>acf76a431085300d7ee4ba9f32f63d4e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getRemoveNeighbor</name>
      <anchorfile>classGameAPIListMessage.html</anchorfile>
      <anchor>ad4320c2b877243d355571fba0adf8947</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getRemoveNeighbor</name>
      <anchorfile>classGameAPIListMessage.html</anchorfile>
      <anchor>a1b845979530aa2de376e3a8fa625ad6d</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRemoveNeighbor</name>
      <anchorfile>classGameAPIListMessage.html</anchorfile>
      <anchor>a8b48a0c0f6661b7adf07221130be2685</anchor>
      <arglist>(unsigned int k, const NodeHandle &amp;removeNeighbor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddNeighborArraySize</name>
      <anchorfile>classGameAPIListMessage.html</anchorfile>
      <anchor>a6bac1604abbdf9c0ec959343b7b64834</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getAddNeighborArraySize</name>
      <anchorfile>classGameAPIListMessage.html</anchorfile>
      <anchor>ae59494fd094b6d8c365675aacc7b680b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getAddNeighbor</name>
      <anchorfile>classGameAPIListMessage.html</anchorfile>
      <anchor>a4a5dd2d37c847199aacd04c40e6d50ce</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getAddNeighbor</name>
      <anchorfile>classGameAPIListMessage.html</anchorfile>
      <anchor>aa9a5d81cb74abe85c87dc366fc0b9e2e</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddNeighbor</name>
      <anchorfile>classGameAPIListMessage.html</anchorfile>
      <anchor>a6fdd2736b4eaabac3e90a623f0e8e130</anchor>
      <arglist>(unsigned int k, const NodeHandle &amp;addNeighbor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNeighborPositionArraySize</name>
      <anchorfile>classGameAPIListMessage.html</anchorfile>
      <anchor>a81292ede7c0903f5982efcc7625024f1</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNeighborPositionArraySize</name>
      <anchorfile>classGameAPIListMessage.html</anchorfile>
      <anchor>a2c0bd12e61e681275c780b6fc8b717a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector2D &amp;</type>
      <name>getNeighborPosition</name>
      <anchorfile>classGameAPIListMessage.html</anchorfile>
      <anchor>ada933801fa44b99dc5df2b19d59debf1</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Vector2D &amp;</type>
      <name>getNeighborPosition</name>
      <anchorfile>classGameAPIListMessage.html</anchorfile>
      <anchor>afef0902503cb641a546148ee836fb430</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNeighborPosition</name>
      <anchorfile>classGameAPIListMessage.html</anchorfile>
      <anchor>ad91052c0577545e987bf5b08244ece9e</anchor>
      <arglist>(unsigned int k, const Vector2D &amp;neighborPosition)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGameAPIListMessage.html</anchorfile>
      <anchor>a3bc0b248401e0f741a1ed939817fbd90</anchor>
      <arglist>(const GameAPIListMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle *</type>
      <name>removeNeighbor_var</name>
      <anchorfile>classGameAPIListMessage.html</anchorfile>
      <anchor>a2b337c1b9c50612e8983d78cbbae1419</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>removeNeighbor_arraysize</name>
      <anchorfile>classGameAPIListMessage.html</anchorfile>
      <anchor>a825a5ff3b9b00ce40a243840503be6bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle *</type>
      <name>addNeighbor_var</name>
      <anchorfile>classGameAPIListMessage.html</anchorfile>
      <anchor>af6e91d820034ed1196816f32a9b2e80d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>addNeighbor_arraysize</name>
      <anchorfile>classGameAPIListMessage.html</anchorfile>
      <anchor>af618f8a5b2ae00312de61b8d819e5433</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D *</type>
      <name>neighborPosition_var</name>
      <anchorfile>classGameAPIListMessage.html</anchorfile>
      <anchor>a4af7605ac34a8eda70a3851dbf4bb861</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>neighborPosition_arraysize</name>
      <anchorfile>classGameAPIListMessage.html</anchorfile>
      <anchor>ab6ec527b083f04cb450c70a0e1ab2ee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classGameAPIListMessage.html</anchorfile>
      <anchor>a19b6ef292df18e6e991cf5352c9d12ff</anchor>
      <arglist>(const GameAPIListMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GameAPIMessage</name>
    <filename>classGameAPIMessage.html</filename>
    <base>BaseOverlayMessage</base>
    <member kind="function">
      <type></type>
      <name>GameAPIMessage</name>
      <anchorfile>classGameAPIMessage.html</anchorfile>
      <anchor>ae5427a22668f76ac65e9d9918a55e6e5</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GameAPIMessage</name>
      <anchorfile>classGameAPIMessage.html</anchorfile>
      <anchor>a6f385c0f627a7552fb6da4419ff07b02</anchor>
      <arglist>(const GameAPIMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GameAPIMessage</name>
      <anchorfile>classGameAPIMessage.html</anchorfile>
      <anchor>a6bb85be0cf45cc1e91c43edb23dbfb46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GameAPIMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classGameAPIMessage.html</anchorfile>
      <anchor>a80dc46923d1bf4d8193d85a423558e72</anchor>
      <arglist>(const GameAPIMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GameAPIMessage *</type>
      <name>dup</name>
      <anchorfile>classGameAPIMessage.html</anchorfile>
      <anchor>a4efd0fa1b03d99fd4f063020d9250077</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classGameAPIMessage.html</anchorfile>
      <anchor>a171fe933e25f5078c1084473c46dc7e6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classGameAPIMessage.html</anchorfile>
      <anchor>af0df5541ff868ca0dee3f79e63f015b6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCommand</name>
      <anchorfile>classGameAPIMessage.html</anchorfile>
      <anchor>a310b7731f5d78aa25d103594d88d0edd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommand</name>
      <anchorfile>classGameAPIMessage.html</anchorfile>
      <anchor>a3fe3071c66623191477b903527280ddc</anchor>
      <arglist>(int command)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGameAPIMessage.html</anchorfile>
      <anchor>a9ccb49e7897deef46a58277d3834ef1d</anchor>
      <arglist>(const GameAPIMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>command_var</name>
      <anchorfile>classGameAPIMessage.html</anchorfile>
      <anchor>a5c345192f945e09ce78cd94320fea356</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classGameAPIMessage.html</anchorfile>
      <anchor>a299ed0072f36fac14731e3b54750e4d4</anchor>
      <arglist>(const GameAPIMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GameAPIPositionMessage</name>
    <filename>classGameAPIPositionMessage.html</filename>
    <base>GameAPIMessage</base>
    <member kind="function">
      <type></type>
      <name>GameAPIPositionMessage</name>
      <anchorfile>classGameAPIPositionMessage.html</anchorfile>
      <anchor>aad981d6a446b2dc089e96beb12d39576</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GameAPIPositionMessage</name>
      <anchorfile>classGameAPIPositionMessage.html</anchorfile>
      <anchor>a2117e43b671463043853a6b9a7392e9a</anchor>
      <arglist>(const GameAPIPositionMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GameAPIPositionMessage</name>
      <anchorfile>classGameAPIPositionMessage.html</anchorfile>
      <anchor>a3e7d8fe8fb87f1831e11546f675fa3eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GameAPIPositionMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classGameAPIPositionMessage.html</anchorfile>
      <anchor>aafcaa0fc2d58e167d3b39a52616e5aaf</anchor>
      <arglist>(const GameAPIPositionMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GameAPIPositionMessage *</type>
      <name>dup</name>
      <anchorfile>classGameAPIPositionMessage.html</anchorfile>
      <anchor>a60bafeae04cf0372c25c0c358362858f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classGameAPIPositionMessage.html</anchorfile>
      <anchor>a806a700b7a3f84337949c449aac4539e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classGameAPIPositionMessage.html</anchorfile>
      <anchor>a04e01af4fbd30b4293913c224256cccd</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector2D &amp;</type>
      <name>getPosition</name>
      <anchorfile>classGameAPIPositionMessage.html</anchorfile>
      <anchor>a62cb5e229193a2e0118e240de2494d53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Vector2D &amp;</type>
      <name>getPosition</name>
      <anchorfile>classGameAPIPositionMessage.html</anchorfile>
      <anchor>a890f51a1527aa69f9acdf31cf6485abf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPosition</name>
      <anchorfile>classGameAPIPositionMessage.html</anchorfile>
      <anchor>a047c61cad222a3c752f83d87dac342a6</anchor>
      <arglist>(const Vector2D &amp;position)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGameAPIPositionMessage.html</anchorfile>
      <anchor>a92ab7634697f2016efb5d80a88f7535f</anchor>
      <arglist>(const GameAPIPositionMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D</type>
      <name>position_var</name>
      <anchorfile>classGameAPIPositionMessage.html</anchorfile>
      <anchor>aaf89db8efc87b1450230b791127a8508</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classGameAPIPositionMessage.html</anchorfile>
      <anchor>af9ba81e276c083214b48e45f416770d7</anchor>
      <arglist>(const GameAPIPositionMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GameAPIResizeAOIMessage</name>
    <filename>classGameAPIResizeAOIMessage.html</filename>
    <base>GameAPIMessage</base>
    <member kind="function">
      <type></type>
      <name>GameAPIResizeAOIMessage</name>
      <anchorfile>classGameAPIResizeAOIMessage.html</anchorfile>
      <anchor>af48d9c1e9a85c51169cd74a62bd687d6</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GameAPIResizeAOIMessage</name>
      <anchorfile>classGameAPIResizeAOIMessage.html</anchorfile>
      <anchor>a385ca2ae6d62ea01dda3a220309fec3f</anchor>
      <arglist>(const GameAPIResizeAOIMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GameAPIResizeAOIMessage</name>
      <anchorfile>classGameAPIResizeAOIMessage.html</anchorfile>
      <anchor>acdfc94a3cc069cc91a20527a8b2a01b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GameAPIResizeAOIMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classGameAPIResizeAOIMessage.html</anchorfile>
      <anchor>a9d679dcd1b25f745e346e7cb3b9a8ee2</anchor>
      <arglist>(const GameAPIResizeAOIMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GameAPIResizeAOIMessage *</type>
      <name>dup</name>
      <anchorfile>classGameAPIResizeAOIMessage.html</anchorfile>
      <anchor>ad7fda4ba7cb49bf07746dcfc43d605a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classGameAPIResizeAOIMessage.html</anchorfile>
      <anchor>aa858915509b80a01351935d070ff3602</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classGameAPIResizeAOIMessage.html</anchorfile>
      <anchor>a3f624f04a57e3830ca9fade3d5c569fc</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getAOIsize</name>
      <anchorfile>classGameAPIResizeAOIMessage.html</anchorfile>
      <anchor>a87726635b2caae3d2ce846214dab7288</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAOIsize</name>
      <anchorfile>classGameAPIResizeAOIMessage.html</anchorfile>
      <anchor>ae8df0a2a6adc664d2dc8a5c0291f9f49</anchor>
      <arglist>(double AOIsize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGameAPIResizeAOIMessage.html</anchorfile>
      <anchor>a78d66b0acccc6dbcf96fe3cd30008f29</anchor>
      <arglist>(const GameAPIResizeAOIMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>AOIsize_var</name>
      <anchorfile>classGameAPIResizeAOIMessage.html</anchorfile>
      <anchor>a150515f27149fd5d3d839f32debd8472</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classGameAPIResizeAOIMessage.html</anchorfile>
      <anchor>a6dd174f572832b92c32039d22d8fe4a1</anchor>
      <arglist>(const GameAPIResizeAOIMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GameAPISnowMessage</name>
    <filename>classGameAPISnowMessage.html</filename>
    <base>GameAPIMessage</base>
    <member kind="function">
      <type></type>
      <name>GameAPISnowMessage</name>
      <anchorfile>classGameAPISnowMessage.html</anchorfile>
      <anchor>a93cf85837d904f3875244720adf4e1c6</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GameAPISnowMessage</name>
      <anchorfile>classGameAPISnowMessage.html</anchorfile>
      <anchor>a9ca7d91e1ba8c98f68d393a72063f621</anchor>
      <arglist>(const GameAPISnowMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GameAPISnowMessage</name>
      <anchorfile>classGameAPISnowMessage.html</anchorfile>
      <anchor>af1c92a44d6f98a956b76327c4eb747bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GameAPISnowMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classGameAPISnowMessage.html</anchorfile>
      <anchor>a8a1f15a1ff9bdfb98b02f0577bcf3b60</anchor>
      <arglist>(const GameAPISnowMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GameAPISnowMessage *</type>
      <name>dup</name>
      <anchorfile>classGameAPISnowMessage.html</anchorfile>
      <anchor>aa2473b4a85b5556beed60d0e9c5185a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classGameAPISnowMessage.html</anchorfile>
      <anchor>a72264161dab216b27e57848b1052a853</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classGameAPISnowMessage.html</anchorfile>
      <anchor>a6fc511081aec820901e64ca9cbd21595</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getSrc</name>
      <anchorfile>classGameAPISnowMessage.html</anchorfile>
      <anchor>a4aea4a176f92415bc0f6fe5e94ce3bd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getSrc</name>
      <anchorfile>classGameAPISnowMessage.html</anchorfile>
      <anchor>a32fad8005d9b20fe56d551c8b54da90e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrc</name>
      <anchorfile>classGameAPISnowMessage.html</anchorfile>
      <anchor>abeda3c55d7a8f97926e1d295263c8997</anchor>
      <arglist>(const NodeHandle &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector2D &amp;</type>
      <name>getStart</name>
      <anchorfile>classGameAPISnowMessage.html</anchorfile>
      <anchor>a29194b0b97a512cc683f11f26041f357</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Vector2D &amp;</type>
      <name>getStart</name>
      <anchorfile>classGameAPISnowMessage.html</anchorfile>
      <anchor>ae5616a2e54646004eef266bd9d194d99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStart</name>
      <anchorfile>classGameAPISnowMessage.html</anchorfile>
      <anchor>ad776c102a4803daf8ba6eb50889d5e25</anchor>
      <arglist>(const Vector2D &amp;start)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector2D &amp;</type>
      <name>getEnd</name>
      <anchorfile>classGameAPISnowMessage.html</anchorfile>
      <anchor>a2550dc3ce5e88831be38376956e3c293</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Vector2D &amp;</type>
      <name>getEnd</name>
      <anchorfile>classGameAPISnowMessage.html</anchorfile>
      <anchor>a31021c919655417e7acf35ec343323e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEnd</name>
      <anchorfile>classGameAPISnowMessage.html</anchorfile>
      <anchor>a26979a0318b6592fc86994cb6cd6b0e6</anchor>
      <arglist>(const Vector2D &amp;end)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTimeSec</name>
      <anchorfile>classGameAPISnowMessage.html</anchorfile>
      <anchor>a0cb5bfa391cb5133fcab37813675ca77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimeSec</name>
      <anchorfile>classGameAPISnowMessage.html</anchorfile>
      <anchor>a7d867b95fd0fa84d22bceb82d0b714b2</anchor>
      <arglist>(int timeSec)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTimeUsec</name>
      <anchorfile>classGameAPISnowMessage.html</anchorfile>
      <anchor>aa8a6992c83c2401b04a3e504731ae9b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimeUsec</name>
      <anchorfile>classGameAPISnowMessage.html</anchorfile>
      <anchor>a03d8b4caa8ea9f672b00d2aca96bba04</anchor>
      <arglist>(int timeUsec)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGameAPISnowMessage.html</anchorfile>
      <anchor>ab99d3de2fe15567c2146cb67b71a9050</anchor>
      <arglist>(const GameAPISnowMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>src_var</name>
      <anchorfile>classGameAPISnowMessage.html</anchorfile>
      <anchor>ade1b0efea193452cff8cc7749ed32d60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D</type>
      <name>start_var</name>
      <anchorfile>classGameAPISnowMessage.html</anchorfile>
      <anchor>a81194c0dffa2a3f8dbe8d1d40834add4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D</type>
      <name>end_var</name>
      <anchorfile>classGameAPISnowMessage.html</anchorfile>
      <anchor>aad6ca062ac82a565144e78f6a678363f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>timeSec_var</name>
      <anchorfile>classGameAPISnowMessage.html</anchorfile>
      <anchor>af96e58249ff3524644442b4c67c55b23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>timeUsec_var</name>
      <anchorfile>classGameAPISnowMessage.html</anchorfile>
      <anchor>a2726b96222fd0894bdb1ef9910ced6a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classGameAPISnowMessage.html</anchorfile>
      <anchor>a3de442667bc28c61ba3e09f2a382ead1</anchor>
      <arglist>(const GameAPISnowMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericPacketParser</name>
    <filename>classGenericPacketParser.html</filename>
    <base>PacketParser</base>
    <member kind="function">
      <type>char *</type>
      <name>encapsulatePayload</name>
      <anchorfile>classGenericPacketParser.html</anchorfile>
      <anchor>a59cf613d6c769d55c5aba353fee77359</anchor>
      <arglist>(cPacket *msg, unsigned int *length)</arglist>
    </member>
    <member kind="function">
      <type>cPacket *</type>
      <name>decapsulatePayload</name>
      <anchorfile>classGenericPacketParser.html</anchorfile>
      <anchor>a8a22dd2876bb54dba436b8fa46a142aa</anchor>
      <arglist>(char *buf, unsigned int length)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cNetCommBuffer</type>
      <name>commBuffer</name>
      <anchorfile>classGenericPacketParser.html</anchorfile>
      <anchor>a37630cb1f200be1d0c0aea4657832d33</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Geometry</name>
    <filename>classGeometry.html</filename>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classGeometry.html</anchorfile>
      <anchor>ac5eed947206dc7997ae6d90b65f33aeb</anchor>
      <arglist>(double deltax, double deltay, Vector2D center, Vector2D old_pos, Vector2D new_pos, double radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classGeometry.html</anchorfile>
      <anchor>ae9a788d2d88a35f4bd8ae18817a6c897</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDebug</name>
      <anchorfile>classGeometry.html</anchorfile>
      <anchor>aaac2706d430cac4882368a42993f42c9</anchor>
      <arglist>(bool debugOutput)</arglist>
    </member>
    <member kind="function">
      <type>Edge *</type>
      <name>bisect</name>
      <anchorfile>classGeometry.html</anchorfile>
      <anchor>a28161e9d30083f92b98751b413f5afef</anchor>
      <arglist>(Site *s1, Site *s2)</arglist>
    </member>
    <member kind="function">
      <type>Site *</type>
      <name>intersect</name>
      <anchorfile>classGeometry.html</anchorfile>
      <anchor>a50867d578fef5c4f88b643a1b9fd8a3f</anchor>
      <arglist>(Halfedge *el1, Halfedge *el2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endpoint</name>
      <anchorfile>classGeometry.html</anchorfile>
      <anchor>afa58eef6fdb8bc89290ba5a7f873d8a1</anchor>
      <arglist>(Edge *e, int lr, Site *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processEdge</name>
      <anchorfile>classGeometry.html</anchorfile>
      <anchor>a927ad687454613c583aa1864989ca436</anchor>
      <arglist>(Edge *e)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dist</name>
      <anchorfile>classGeometry.html</anchorfile>
      <anchor>a90cb3b24a70e2183ca3e8b2051cad6af</anchor>
      <arglist>(Site *s, Site *t)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>intersectCircleLine</name>
      <anchorfile>classGeometry.html</anchorfile>
      <anchor>a263c2f5065d193b7ae5d6962839258f7</anchor>
      <arglist>(Vector2D start, Vector2D dir, Vector2D center, bool lowerBound, bool upperBound)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>intersectCircleSite</name>
      <anchorfile>classGeometry.html</anchorfile>
      <anchor>a620ecf22d9a86c00162e034dc827e529</anchor>
      <arglist>(Site *s, Vector2D center)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Site * &gt;</type>
      <name>SITEVector</name>
      <anchorfile>classGeometry.html</anchorfile>
      <anchor>a6a6583e39902cb31fe6b175259c177f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Edge * &gt;</type>
      <name>EDGEVector</name>
      <anchorfile>classGeometry.html</anchorfile>
      <anchor>a2527e85d7c080c370a6fc39da77e71ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>deltax</name>
      <anchorfile>classGeometry.html</anchorfile>
      <anchor>ad1bc4be17511f62905d706859d42c845</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>deltay</name>
      <anchorfile>classGeometry.html</anchorfile>
      <anchor>ad12c6ca9085302f3a8e70b32d245dc90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>sq_radius</name>
      <anchorfile>classGeometry.html</anchorfile>
      <anchor>a08038de8cb4733cf720ca92286789701</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D</type>
      <name>center</name>
      <anchorfile>classGeometry.html</anchorfile>
      <anchor>a155f643cfb3bd348746db3124367bb84</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debugOutput</name>
      <anchorfile>classGeometry.html</anchorfile>
      <anchor>a6ec3184e77bdd3c7247037fb1fae8272</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>doDiscovery</name>
      <anchorfile>classGeometry.html</anchorfile>
      <anchor>a9044de46db6b01d5c955cc41239cf36b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Get</name>
    <filename>classGet.html</filename>
    <base>XmlRpc::XmlRpcServerMethod</base>
    <member kind="function">
      <type></type>
      <name>Get</name>
      <anchorfile>classGet.html</anchorfile>
      <anchor>a62c9dd05b8cd718f9b6ce662dfe33f67</anchor>
      <arglist>(XmlRpcServer *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>execute</name>
      <anchorfile>classGet.html</anchorfile>
      <anchor>a4c7ceb51336cbdfc4738abb48e09567d</anchor>
      <arglist>(XmlRpcValue &amp;params, XmlRpcValue &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>help</name>
      <anchorfile>classGet.html</anchorfile>
      <anchor>af492ce4b95480e7ab486c05e276deb3d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gia</name>
    <filename>classGia.html</filename>
    <base>BaseOverlay</base>
    <member kind="function">
      <type>void</type>
      <name>initializeOverlay</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a9d82f0ca67d3d29f3e500f839fd7efae</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finishOverlay</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>abc588b36819fb28ca69db4ddbcf4ccc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>changeState</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>ac3079c0ba5f2e1b5377112aee29e0afe</anchor>
      <arglist>(int toStage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateTooltip</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a3003214bef61bed76dd698b1cd28c473</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Gia</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a8d4e537b1448a8c6a804d30b8659ea00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a68d9264a840ca0b77f240d25372a65d2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleUDPMessage</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a93933a7734f571abf2e82812603b4d21</anchor>
      <arglist>(BaseOverlayMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getRoute</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a80ef868479cea58829497e89584ba9b0</anchor>
      <arglist>(const OverlayKey &amp;key, CompType destComp, CompType srcComp, cPacket *msg, const std::vector&lt; TransportAddress &gt; &amp;sourceRoute=TransportAddress::UNSPECIFIED_NODES, RoutingType routingType=DEFAULT_ROUTING)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleAppMessage</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a58ce19fdd1b582e6fabb236b6eeab391</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendToken</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a2a3eb81ee841e9d81161b71664d2fcdf</anchor>
      <arglist>(const GiaNode &amp;dst)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>joinOverlay</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a32d9935c5c4968ab92c8e0467b3219ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>acceptNode</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>af1ffd20693d6b106e96bdf9016b8760f</anchor>
      <arglist>(const GiaNode &amp;newNode, unsigned int degree)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addNeighbor</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>aee98638a082d7b12eea834903399460f</anchor>
      <arglist>(GiaNode &amp;newNode, unsigned int degree)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeNeighbor</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a4f24a9267be09b3411ab954933f584b2</anchor>
      <arglist>(const GiaNode &amp;newNode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>calculateLevelOfSatisfaction</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>af4df409329cea5e7606e7b689ac94b49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMessage_JOIN_REQ</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a833f47297ee39bb4203b7fdedcb5f4d3</anchor>
      <arglist>(const NodeHandle &amp;dst)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMessage_JOIN_RSP</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>ac1ab7d6abb854188fd78c85d12f7c826</anchor>
      <arglist>(const NodeHandle &amp;dst)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMessage_JOIN_ACK</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a853515c8d89a9a58e4e0fd29874a6678</anchor>
      <arglist>(const NodeHandle &amp;dst)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMessage_JOIN_DNY</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>aaee0685ae601ad96200bd2bb7ce84df0</anchor>
      <arglist>(const NodeHandle &amp;dst)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMessage_DISCONNECT</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a1ceea71e6ba50e230266ab27736d384c</anchor>
      <arglist>(const NodeHandle &amp;dst)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMessage_UPDATE</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a592398fd9963408185e722c19e47768f</anchor>
      <arglist>(const NodeHandle &amp;dst)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendKeyListToNeighbor</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a46a1db9a1fc82de6e091cadefab53a02</anchor>
      <arglist>(const NodeHandle &amp;dst)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNeighborList</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a88f2c6011c29a4fdfec763331108a212</anchor>
      <arglist>(GiaMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>forwardSearchResponseMessage</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a3581ed5049d9d8526dade787baa0965e</anchor>
      <arglist>(SearchResponseMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>forwardMessage</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a10e4a2c12cb2abf7e38906b534c42cf7</anchor>
      <arglist>(GiaIDMessage *msg, bool fromApplication)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processSearchMessage</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>aa0adb0ba50c635761fa5bce590fa4752</anchor>
      <arglist>(SearchMessage *msg, bool fromApplication)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendSearchResponseMessage</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a9ba9ac9d853e959ea72d1a04b14d4b25</anchor>
      <arglist>(const GiaNode &amp;srcNode, SearchMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deliverSearchResult</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>ab95e8f1dbefd5b405b3f3e2a4d51d2e9</anchor>
      <arglist>(SearchResponseMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>maxNeighbors</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a0016dd921874c1849afabeb6c5d4a884</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>minNeighbors</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a4ebb2b34317b51c86a96f451c7bfa063</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>maxTopAdaptionInterval</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a0df22c34862d1bd5dd0848ef826e4209</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>topAdaptionAggressiveness</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>aae4e6206bc72091741bed1c720edeb20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxLevelOfSatisfaction</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>ae5b0d131fefa10227009416495430e3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>updateDelay</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a71f7b8f7668ff1097a54825197f2ea3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>maxHopCount</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>ae8164af06be2d49945eb2b8aa4203289</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>messageTimeout</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a40c231dc2be876d25d1795ef699d5f1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>neighborTimeout</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a782ea1fbaa5627e74203671c75e3b17d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>sendTokenTimeout</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a322697a9691b060e6bba77eae98afebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>tokenWaitTime</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a82aeb4fedd7d35631352f8473bc53e47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>keyListDelay</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a3dc9c19a4d035ba14b57e32e576e1a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>outputNodeDetails</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a8d49ee9ff8fd1b3ba078bab31393a6ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>optimizeReversePath</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>adc7c9e4edcd6417a1fed44fdc88fd79e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>levelOfSatisfaction</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a390c60fc0a481b962792a6833fd59180</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>connectionDegree</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>ad68054d1e7bbbc829979c6f1dd12104c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>receivedTokens</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>aa1fbb3e223628fa4f8dfb59b3bd43d19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>sentTokens</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>ac101d03f5736dcaca846a815ec851cfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GiaNode</type>
      <name>thisGiaNode</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a9cf39929d29b49afe4907d85dff047e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>bootstrapNode</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>aa4d9479a25fdf6890df5e89906e4562b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GiaMessageBookkeeping *</type>
      <name>msgBookkeepingList</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>aea0e9b5d6258117962ea7aea8ad8c514</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>stat_joinCount</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a82537dc9baccfa2e36a9729e4b39ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>stat_joinBytesSent</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a676f4c54263630521b7bb5f6cd3823d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>stat_joinREQ</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a00b139231694dd58f225742190777c95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>stat_joinREQBytesSent</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a8509a22b9cf14a49f2b8dc601acfca40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>stat_joinRSP</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a62041c7a63d77fd5a8f74f18315b2dcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>stat_joinRSPBytesSent</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a31caea20c5580582d43b4379c81158a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>stat_joinACK</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a96453e1af1411bddf64c3a2469f62673</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>stat_joinACKBytesSent</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a12e53807a08981d48873276a9f41a432</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>stat_joinDNY</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>ae3db1951b49e406b32b03db4f5b548f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>stat_joinDNYBytesSent</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a68747681d23119157d74838a7add3397</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>stat_disconnectMessages</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a39d7f0761a1986ed3015b69b117d0e01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>stat_disconnectMessagesBytesSent</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a135dbd4de0031391482a1b5231d9f3a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>stat_updateMessages</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a51d8278b729957289b89b561f67f7530</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>stat_updateMessagesBytesSent</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a69f183d688d08d7f65e34a9831d120ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>stat_tokenMessages</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a41da62c4fe651563ac846da136bd6756</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>stat_tokenMessagesBytesSent</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>ae3fa9d724c49bf28fdc1773bb90d7c61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>stat_keyListMessages</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a84843330afda4cfca041aaa2b5a27d73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>stat_keyListMessagesBytesSent</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>adfd400461d47e013abfbfdde2d6ae7b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>stat_routeMessages</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>afa96d8942eccede7a5339a94e3cc48de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>stat_routeMessagesBytesSent</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>ac359e4ecda3b60577a19aec578ecace6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>stat_maxNeighbors</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>adc28124dc7e16671849d079ec2b4492e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>stat_addedNeighbors</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>ae5e0d763033e6e8edcc946018e0713c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>stat_removedNeighbors</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a969e0b5565cfe84ee0bd0143b9b1ae63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>stat_numSatisfactionMessages</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a0717d37e5db26dca79c883e1332bceac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>stat_sumLevelOfSatisfaction</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>abaf9a3098e125a134b33d5e47e402d22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>stat_maxLevelOfSatisfaction</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>af0b742453b90015b20355a56c180f446</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>satisfaction_timer</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>af6ddc7c9017419fe6cd65d2609da355f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>update_timer</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a9e46ba8504046b0b7ce68d48a4bd90a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>timedoutMessages_timer</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a78981084974a06a92785b77cc9701869</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>timedoutNeighbors_timer</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>af958d78e0f21a5aafb7f1b57fa97ed65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>sendKeyList_timer</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>afa7ed38ad991ab29b49e7dfdf9cdad7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>sendToken_timer</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a1b31bef8b20e3d274a18cdcce3395478</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GiaKeyListModule *</type>
      <name>keyListModule</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>ad40c9d50bcac8fc8681d8077027218a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GiaNeighbors *</type>
      <name>neighbors</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a512cfb72f76b592c73d5c1b11c702663</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GiaTokenFactory *</type>
      <name>tokenFactory</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>adc72a9e526f0cf9dcf5591dc54aa46c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GiaNeighborCandidateList</type>
      <name>neighCand</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>aa288e5e6a7891f1381c9adaf1fde128f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GiaNeighborCandidateList</type>
      <name>knownNodes</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a7146fbd9ae39c74fec9328ac5af43bad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GiaKeyList</type>
      <name>keyList</name>
      <anchorfile>classGia.html</anchorfile>
      <anchor>a40b17a5abaa2519ff531d40bf839d386</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GIAanswer</name>
    <filename>classGIAanswer.html</filename>
    <base>GIASearchAppMessage</base>
    <member kind="function">
      <type></type>
      <name>GIAanswer</name>
      <anchorfile>classGIAanswer.html</anchorfile>
      <anchor>a18cba3bcea47fea8c0b4c7984b890d1c</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GIAanswer</name>
      <anchorfile>classGIAanswer.html</anchorfile>
      <anchor>af5578a166bb6d6fc1b505e19e907e9fa</anchor>
      <arglist>(const GIAanswer &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GIAanswer</name>
      <anchorfile>classGIAanswer.html</anchorfile>
      <anchor>a41786190b1f3b0f489ef9b4303795615</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GIAanswer &amp;</type>
      <name>operator=</name>
      <anchorfile>classGIAanswer.html</anchorfile>
      <anchor>adeafa6cda56c114674f7e939ef04e85d</anchor>
      <arglist>(const GIAanswer &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GIAanswer *</type>
      <name>dup</name>
      <anchorfile>classGIAanswer.html</anchorfile>
      <anchor>af18b12feb78bb4b108ff7aab4412cf03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classGIAanswer.html</anchorfile>
      <anchor>adce347369138d269f5e4b7974b6132a1</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classGIAanswer.html</anchorfile>
      <anchor>a60e5e3a537597983dfadffd3e9cf96cb</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getSearchKey</name>
      <anchorfile>classGIAanswer.html</anchorfile>
      <anchor>aa6aa9ecc628ab6eb128a2648155b673f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getSearchKey</name>
      <anchorfile>classGIAanswer.html</anchorfile>
      <anchor>ad3dfbfc441e4ab62bacb08d772980232</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSearchKey</name>
      <anchorfile>classGIAanswer.html</anchorfile>
      <anchor>a2caa74305514a510885242bb0f025c80</anchor>
      <arglist>(const OverlayKey &amp;searchKey)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getNode</name>
      <anchorfile>classGIAanswer.html</anchorfile>
      <anchor>a04c6fe7c8e29695c62949f048ac78bcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getNode</name>
      <anchorfile>classGIAanswer.html</anchorfile>
      <anchor>a62c3e06cc9fa0e477dac522dd5098d32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNode</name>
      <anchorfile>classGIAanswer.html</anchorfile>
      <anchor>a748d8067827ca129e3bb677f07424d19</anchor>
      <arglist>(const NodeHandle &amp;node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGIAanswer.html</anchorfile>
      <anchor>af8ccc4a92c8da7830540baed1e8be286</anchor>
      <arglist>(const GIAanswer &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>searchKey_var</name>
      <anchorfile>classGIAanswer.html</anchorfile>
      <anchor>a1eea30276a453cdaffa47f5717120f19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>node_var</name>
      <anchorfile>classGIAanswer.html</anchorfile>
      <anchor>a6395669b9a23e1c57b2cfc9dc1b2b027</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classGIAanswer.html</anchorfile>
      <anchor>a0c9638f11d8468f5574a758bc2fd7424</anchor>
      <arglist>(const GIAanswer &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GiaIDMessage</name>
    <filename>classGiaIDMessage.html</filename>
    <base>GiaMessage</base>
    <member kind="function">
      <type></type>
      <name>GiaIDMessage</name>
      <anchorfile>classGiaIDMessage.html</anchorfile>
      <anchor>abffad2977698b98fca9a6926ceb9e408</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GiaIDMessage</name>
      <anchorfile>classGiaIDMessage.html</anchorfile>
      <anchor>a5a7d8c20183d26ce2d1751cad8b9984f</anchor>
      <arglist>(const GiaIDMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GiaIDMessage</name>
      <anchorfile>classGiaIDMessage.html</anchorfile>
      <anchor>af97ade1be1e41836777cfc4b1db863e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GiaIDMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classGiaIDMessage.html</anchorfile>
      <anchor>ad59b2b62675e35622fa6374522603b7b</anchor>
      <arglist>(const GiaIDMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GiaIDMessage *</type>
      <name>dup</name>
      <anchorfile>classGiaIDMessage.html</anchorfile>
      <anchor>a8cfdf211c43b4f3e110aaf50bc17cd62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classGiaIDMessage.html</anchorfile>
      <anchor>acc80815de9429c8eb7867337f6e24392</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classGiaIDMessage.html</anchorfile>
      <anchor>aace7a0b4e9c25d8cf21eaa317d371bb2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getDestKey</name>
      <anchorfile>classGiaIDMessage.html</anchorfile>
      <anchor>ae9c97f12b93f4445b6ea666ad1917ad1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getDestKey</name>
      <anchorfile>classGiaIDMessage.html</anchorfile>
      <anchor>af344ba43098c90e750116939d641d253</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestKey</name>
      <anchorfile>classGiaIDMessage.html</anchorfile>
      <anchor>aab1c8f0c159fcda297559188b88e53c9</anchor>
      <arglist>(const OverlayKey &amp;destKey)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getID</name>
      <anchorfile>classGiaIDMessage.html</anchorfile>
      <anchor>a46105288292b36bf33e48a6951a7c081</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getID</name>
      <anchorfile>classGiaIDMessage.html</anchorfile>
      <anchor>ad6dfd497f9160953d6a72b656c56a99f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setID</name>
      <anchorfile>classGiaIDMessage.html</anchorfile>
      <anchor>ac8b0fd1d3335c6f1cb7339d8da579904</anchor>
      <arglist>(const OverlayKey &amp;ID)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGiaIDMessage.html</anchorfile>
      <anchor>a556a3ed7653ecb5cdc663150225beb47</anchor>
      <arglist>(const GiaIDMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>destKey_var</name>
      <anchorfile>classGiaIDMessage.html</anchorfile>
      <anchor>a73fed0cc6aa8ac64bbbcf34ad5af1be8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>ID_var</name>
      <anchorfile>classGiaIDMessage.html</anchorfile>
      <anchor>a998263d4649b73c7834e16cb24be8b40</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classGiaIDMessage.html</anchorfile>
      <anchor>a82eaeade808764860cf5bba6fd652768</anchor>
      <arglist>(const GiaIDMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GiaKeyList</name>
    <filename>classGiaKeyList.html</filename>
    <member kind="function">
      <type>void</type>
      <name>addKeyItem</name>
      <anchorfile>classGiaKeyList.html</anchorfile>
      <anchor>a4623789d8fb9f260a692317a07af452a</anchor>
      <arglist>(const OverlayKey &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeKeyItem</name>
      <anchorfile>classGiaKeyList.html</anchorfile>
      <anchor>a01437e7f53bd2263769c7f92bdb09a56</anchor>
      <arglist>(const OverlayKey &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classGiaKeyList.html</anchorfile>
      <anchor>a083b4ad8e2277fcc472847c834047757</anchor>
      <arglist>(const OverlayKey &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; OverlayKey &gt; &amp;</type>
      <name>getVector</name>
      <anchorfile>classGiaKeyList.html</anchorfile>
      <anchor>a8de74e0294ce26af0ad214f52ba04f32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getSize</name>
      <anchorfile>classGiaKeyList.html</anchorfile>
      <anchor>a7bfc475698b7b3de87da5d8cf27941ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const OverlayKey &amp;</type>
      <name>get</name>
      <anchorfile>classGiaKeyList.html</anchorfile>
      <anchor>a15fa00c437a128cc7cdb68ee7a41c615</anchor>
      <arglist>(uint32_t i)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getPosition</name>
      <anchorfile>classGiaKeyList.html</anchorfile>
      <anchor>a49c6f6fa19dafec50b45ef103664bd6e</anchor>
      <arglist>(const OverlayKey &amp;item)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; OverlayKey &gt;</type>
      <name>keyList</name>
      <anchorfile>classGiaKeyList.html</anchorfile>
      <anchor>ae1cefd88f0f69fd413410bad6137dced</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classGiaKeyList.html</anchorfile>
      <anchor>a38578d104c48a1f4d6550891d79ed2b3</anchor>
      <arglist>(std::ostream &amp;os, const GiaKeyList &amp;k)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GiaKeyListModule</name>
    <filename>classGiaKeyListModule.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classGiaKeyListModule.html</anchorfile>
      <anchor>a4e05fdaeabf5e89855384bbf9190b524</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classGiaKeyListModule.html</anchorfile>
      <anchor>ae23a095d0e2ca0fbb070b29d8690600f</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessages</name>
      <anchorfile>classGiaKeyListModule.html</anchorfile>
      <anchor>a28512d13d3a881528321c74b20a26fd9</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKeyListVector</name>
      <anchorfile>classGiaKeyListModule.html</anchorfile>
      <anchor>a468b358b0bfef8622a014e3071b1beab</anchor>
      <arglist>(const std::vector&lt; OverlayKey &gt; &amp;keyListVector)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; OverlayKey &gt;</type>
      <name>keyListVector</name>
      <anchorfile>classGiaKeyListModule.html</anchorfile>
      <anchor>a59e63fd40ecdde15328eb6465d65cfda</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GiaMessage</name>
    <filename>classGiaMessage.html</filename>
    <base>BaseOverlayMessage</base>
    <member kind="function">
      <type></type>
      <name>GiaMessage</name>
      <anchorfile>classGiaMessage.html</anchorfile>
      <anchor>a2be6079486fa11db24b40cba7816554d</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GiaMessage</name>
      <anchorfile>classGiaMessage.html</anchorfile>
      <anchor>a546d7ebfd267cf0cfbba5ceb06852e11</anchor>
      <arglist>(const GiaMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GiaMessage</name>
      <anchorfile>classGiaMessage.html</anchorfile>
      <anchor>af89187355e218141f1f3c745f8c4be77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GiaMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classGiaMessage.html</anchorfile>
      <anchor>ae841edbbe2b22ae6ba5bc1ed0e1d6793</anchor>
      <arglist>(const GiaMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GiaMessage *</type>
      <name>dup</name>
      <anchorfile>classGiaMessage.html</anchorfile>
      <anchor>a544340be0c8a3339be361efada6fbbbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classGiaMessage.html</anchorfile>
      <anchor>aea475b5f63f4e7824588834dbfc0193c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classGiaMessage.html</anchorfile>
      <anchor>a060a6ce5daaeafe442b25739384b0599</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getSrcNode</name>
      <anchorfile>classGiaMessage.html</anchorfile>
      <anchor>ab4bb4d20c1498faf9996571fe68257eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getSrcNode</name>
      <anchorfile>classGiaMessage.html</anchorfile>
      <anchor>aa1842b026bfcc0c818618ba5d3802be3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcNode</name>
      <anchorfile>classGiaMessage.html</anchorfile>
      <anchor>a84259ca1d6277b770a227d934c698c22</anchor>
      <arglist>(const NodeHandle &amp;srcNode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getHopCount</name>
      <anchorfile>classGiaMessage.html</anchorfile>
      <anchor>a7b0d9207f7e6ecd2893f5c1fa6945b56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHopCount</name>
      <anchorfile>classGiaMessage.html</anchorfile>
      <anchor>ae6f77e981dd3ae0ff7859fc31d58df73</anchor>
      <arglist>(int hopCount)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCommand</name>
      <anchorfile>classGiaMessage.html</anchorfile>
      <anchor>af25cb28f9f3ea1898044fdbcc9966239</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommand</name>
      <anchorfile>classGiaMessage.html</anchorfile>
      <anchor>af3a3182b8a895eb71af1a97a865d92d7</anchor>
      <arglist>(int command)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSrcCapacity</name>
      <anchorfile>classGiaMessage.html</anchorfile>
      <anchor>a4aa5cb67d35184a0522bf03f77d15f53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcCapacity</name>
      <anchorfile>classGiaMessage.html</anchorfile>
      <anchor>aaa791c0b9a74cfb3824e13ed1d213820</anchor>
      <arglist>(double srcCapacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSrcDegree</name>
      <anchorfile>classGiaMessage.html</anchorfile>
      <anchor>a9a8dfd7a2130b99b7be936cc7edec2da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcDegree</name>
      <anchorfile>classGiaMessage.html</anchorfile>
      <anchor>a6d0a0d31facd718ee0c3621511daa4e5</anchor>
      <arglist>(int srcDegree)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGiaMessage.html</anchorfile>
      <anchor>a037d0034f7267895fdae6c28d90f3e86</anchor>
      <arglist>(const GiaMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>srcNode_var</name>
      <anchorfile>classGiaMessage.html</anchorfile>
      <anchor>a80b44399a944a2b609880322c923ea27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>hopCount_var</name>
      <anchorfile>classGiaMessage.html</anchorfile>
      <anchor>abdeaf8e4bd2ec9a6e323fc894dd12088</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>command_var</name>
      <anchorfile>classGiaMessage.html</anchorfile>
      <anchor>a12356824e9cc58bcc5cf1d15c015f43b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>srcCapacity_var</name>
      <anchorfile>classGiaMessage.html</anchorfile>
      <anchor>a0be64b350048aa893c45de7bd730fb01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>srcDegree_var</name>
      <anchorfile>classGiaMessage.html</anchorfile>
      <anchor>a769c67957c97849f84ca1130cb8c75fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classGiaMessage.html</anchorfile>
      <anchor>a374ea7c707f63e5cef7d251c2b74ef30</anchor>
      <arglist>(const GiaMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GiaMessageBookkeeping</name>
    <filename>classGiaMessageBookkeeping.html</filename>
    <class kind="class">GiaMessageBookkeeping::GiaNodeQueueCompare</class>
    <class kind="struct">GiaMessageBookkeeping::MessageItem</class>
    <member kind="function">
      <type></type>
      <name>GiaMessageBookkeeping</name>
      <anchorfile>classGiaMessageBookkeeping.html</anchorfile>
      <anchor>a1421d9b67f9eb040e529783aa1dd8330</anchor>
      <arglist>(GiaNeighbors *neighbors, uint32_t timeout)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GiaMessageBookkeeping</name>
      <anchorfile>classGiaMessageBookkeeping.html</anchorfile>
      <anchor>a1361cb1b49ddff44ce59c3b8f4b4564a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getSize</name>
      <anchorfile>classGiaMessageBookkeeping.html</anchorfile>
      <anchor>a5e25907c55ddef7e11fb7e370de7c39f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMessage</name>
      <anchorfile>classGiaMessageBookkeeping.html</anchorfile>
      <anchor>a977e54e3889d6f63d79c0b6339649eef</anchor>
      <arglist>(GiaIDMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeMessage</name>
      <anchorfile>classGiaMessageBookkeeping.html</anchorfile>
      <anchor>a1588fa2db80a58d9371c5b83dcc7dc82</anchor>
      <arglist>(GiaIDMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classGiaMessageBookkeeping.html</anchorfile>
      <anchor>a2e4c3c93ce5d9993422c48a8dd3f23d1</anchor>
      <arglist>(GiaIDMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>NodeHandle</type>
      <name>getNextHop</name>
      <anchorfile>classGiaMessageBookkeeping.html</anchorfile>
      <anchor>a84b9f392288e78d6a2691be9c4a7e226</anchor>
      <arglist>(GiaIDMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTimedoutMessages</name>
      <anchorfile>classGiaMessageBookkeeping.html</anchorfile>
      <anchor>a752ad110f8982595f5c5c1ec5765d503</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; OverlayKey, MessageItem &gt;</type>
      <name>messages</name>
      <anchorfile>classGiaMessageBookkeeping.html</anchorfile>
      <anchor>a80fd9f7e71b3462002199ab0ef50c766</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GiaNeighbors *</type>
      <name>neighbors</name>
      <anchorfile>classGiaMessageBookkeeping.html</anchorfile>
      <anchor>ab31611459e33f43f1ff7a77607eee644</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>timeout</name>
      <anchorfile>classGiaMessageBookkeeping.html</anchorfile>
      <anchor>aa8e80a2604274315d966ed1df259b1e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GiaMessageBookkeeping::GiaNodeQueueCompare</name>
    <filename>classGiaMessageBookkeeping_1_1GiaNodeQueueCompare.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classGiaMessageBookkeeping_1_1GiaNodeQueueCompare.html</anchorfile>
      <anchor>a070822be90d1078339f970dd92c93e31</anchor>
      <arglist>(const FullGiaNodeInfo &amp;x, const FullGiaNodeInfo &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>GiaMessageBookkeeping::MessageItem</name>
    <filename>structGiaMessageBookkeeping_1_1MessageItem.html</filename>
    <member kind="variable">
      <type>std::vector&lt; GiaNode &gt;</type>
      <name>remainNodes</name>
      <anchorfile>structGiaMessageBookkeeping_1_1MessageItem.html</anchorfile>
      <anchor>aaee60a0c0b02f31d0807391fa11ac344</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>timestamp</name>
      <anchorfile>structGiaMessageBookkeeping_1_1MessageItem.html</anchorfile>
      <anchor>a4a07457e5b81160ce626c44e51eb697f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GiaNeighborCandidateList</name>
    <filename>classGiaNeighborCandidateList.html</filename>
    <member kind="function">
      <type>uint32_t</type>
      <name>getSize</name>
      <anchorfile>classGiaNeighborCandidateList.html</anchorfile>
      <anchor>a563032438b528dafae735636168dbe88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classGiaNeighborCandidateList.html</anchorfile>
      <anchor>a03af8070681a63bf171600c5c80636fe</anchor>
      <arglist>(const NodeHandle &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classGiaNeighborCandidateList.html</anchorfile>
      <anchor>ae18a5dc60e3a78d69e2bea7c9550bbc0</anchor>
      <arglist>(uint32_t position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classGiaNeighborCandidateList.html</anchorfile>
      <anchor>a61561d9159c651e8f09b743c355ca5fe</anchor>
      <arglist>(const NodeHandle &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classGiaNeighborCandidateList.html</anchorfile>
      <anchor>a407b3eb53d61563746a5858d2266ade4</anchor>
      <arglist>(const NodeHandle &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>const NodeHandle &amp;</type>
      <name>getRandomCandidate</name>
      <anchorfile>classGiaNeighborCandidateList.html</anchorfile>
      <anchor>aeeb51a2b759bcaa35c2fb3f7cc26f141</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const NodeHandle &amp;</type>
      <name>get</name>
      <anchorfile>classGiaNeighborCandidateList.html</anchorfile>
      <anchor>aaaa6a343b2fc99d6883a9dec6548fb5e</anchor>
      <arglist>(uint32_t position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classGiaNeighborCandidateList.html</anchorfile>
      <anchor>aa58c8a656556a3cf4bb1752ff9b9539e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; NodeHandle &gt;</type>
      <name>candidates</name>
      <anchorfile>classGiaNeighborCandidateList.html</anchorfile>
      <anchor>ae0d5fb0dfc2298c56fbd2f1c4b77f316</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>GiaNeighborInfo</name>
    <filename>structGiaNeighborInfo.html</filename>
    <member kind="variable">
      <type>unsigned int</type>
      <name>connectionDegree</name>
      <anchorfile>structGiaNeighborInfo.html</anchorfile>
      <anchor>a7c11b4dba86b57f2ff17c787f7ecaa1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>receivedTokens</name>
      <anchorfile>structGiaNeighborInfo.html</anchorfile>
      <anchor>aceec9baf115731684557c0b41672d9db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>sentTokens</name>
      <anchorfile>structGiaNeighborInfo.html</anchorfile>
      <anchor>a59503449f893d650c8de0ead0a38b5c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>timestamp</name>
      <anchorfile>structGiaNeighborInfo.html</anchorfile>
      <anchor>a6957738e6e1b0237268332145808bde8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GiaKeyList</type>
      <name>keyList</name>
      <anchorfile>structGiaNeighborInfo.html</anchorfile>
      <anchor>aa3de7c46c2f676ca35d2c088acef6f4d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GiaNeighborMessage</name>
    <filename>classGiaNeighborMessage.html</filename>
    <base>GiaMessage</base>
    <member kind="function">
      <type></type>
      <name>GiaNeighborMessage</name>
      <anchorfile>classGiaNeighborMessage.html</anchorfile>
      <anchor>a963bb26da96ac4a324a82ea607b081df</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GiaNeighborMessage</name>
      <anchorfile>classGiaNeighborMessage.html</anchorfile>
      <anchor>aa1a22b3d3ffb1d8d7d9803f806491edd</anchor>
      <arglist>(const GiaNeighborMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GiaNeighborMessage</name>
      <anchorfile>classGiaNeighborMessage.html</anchorfile>
      <anchor>a40817feaf9197180877e4d03915774cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GiaNeighborMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classGiaNeighborMessage.html</anchorfile>
      <anchor>a30c6972d0384bfcc2fa71875cb236642</anchor>
      <arglist>(const GiaNeighborMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GiaNeighborMessage *</type>
      <name>dup</name>
      <anchorfile>classGiaNeighborMessage.html</anchorfile>
      <anchor>a196e05e60ef6acdeedb012230009c874</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classGiaNeighborMessage.html</anchorfile>
      <anchor>a30f9cd683a5daa0b0c1e1a2f7b959c09</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classGiaNeighborMessage.html</anchorfile>
      <anchor>a1562be93d8df358304769e2b07e92e39</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNeighborsArraySize</name>
      <anchorfile>classGiaNeighborMessage.html</anchorfile>
      <anchor>aff7c97dcceeb8268fe1b2a64a307f201</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNeighborsArraySize</name>
      <anchorfile>classGiaNeighborMessage.html</anchorfile>
      <anchor>aa020150ad9ae78ce63b70cc9967607dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GiaNode &amp;</type>
      <name>getNeighbors</name>
      <anchorfile>classGiaNeighborMessage.html</anchorfile>
      <anchor>a95608f428558fd6d87255969acb9109b</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const GiaNode &amp;</type>
      <name>getNeighbors</name>
      <anchorfile>classGiaNeighborMessage.html</anchorfile>
      <anchor>a0f6f16f694c674b42e5e4a6e5ea70d48</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNeighbors</name>
      <anchorfile>classGiaNeighborMessage.html</anchorfile>
      <anchor>a0c009f4608fe5a187b9e23b50a80b6c5</anchor>
      <arglist>(unsigned int k, const GiaNode &amp;neighbors)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGiaNeighborMessage.html</anchorfile>
      <anchor>a09b37a1ba7d75fd062d2359e497af6af</anchor>
      <arglist>(const GiaNeighborMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GiaNode *</type>
      <name>neighbors_var</name>
      <anchorfile>classGiaNeighborMessage.html</anchorfile>
      <anchor>a78e3ee03fb6cdf503dabe2a022188633</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>neighbors_arraysize</name>
      <anchorfile>classGiaNeighborMessage.html</anchorfile>
      <anchor>ac85cbc5e843da926f1207bb9e1b04a86</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classGiaNeighborMessage.html</anchorfile>
      <anchor>a307f1ca6d97ad12f9454c0661419d992</anchor>
      <arglist>(const GiaNeighborMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GiaNeighbors</name>
    <filename>classGiaNeighbors.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classGiaNeighbors.html</anchorfile>
      <anchor>a60bc56716c70fd47be594f857cf06de4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classGiaNeighbors.html</anchorfile>
      <anchor>aea1cf9f47da669351ffbb5c82b3251cd</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessages</name>
      <anchorfile>classGiaNeighbors.html</anchorfile>
      <anchor>aac63163817e989ad15582ec4cdae37cf</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSize</name>
      <anchorfile>classGiaNeighbors.html</anchorfile>
      <anchor>a6c49fd1378ad958ffbf7a875c31441ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>contains</name>
      <anchorfile>classGiaNeighbors.html</anchorfile>
      <anchor>a41ce2237926ee2675dba9e636225dada</anchor>
      <arglist>(const GiaNode &amp;node) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>contains</name>
      <anchorfile>classGiaNeighbors.html</anchorfile>
      <anchor>acfefe9a94a01bba0268da2bc6af3c720</anchor>
      <arglist>(const OverlayKey &amp;key) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classGiaNeighbors.html</anchorfile>
      <anchor>a4b7b899bab9e9ba60e1d1f5499cf704a</anchor>
      <arglist>(const GiaNode &amp;node, unsigned int degree)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>remove</name>
      <anchorfile>classGiaNeighbors.html</anchorfile>
      <anchor>ad423987255ee07a5640fada17c2c40cc</anchor>
      <arglist>(const GiaNode &amp;node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const GiaNode &amp;</type>
      <name>get</name>
      <anchorfile>classGiaNeighbors.html</anchorfile>
      <anchor>a471c71a864b492b71739a7a4809f7f4a</anchor>
      <arglist>(unsigned int position)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const GiaNode &amp;</type>
      <name>get</name>
      <anchorfile>classGiaNeighbors.html</anchorfile>
      <anchor>a752a3f2cb65c174e63c77fb2792ebb21</anchor>
      <arglist>(const OverlayKey &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>GiaNeighborInfo *</type>
      <name>get</name>
      <anchorfile>classGiaNeighbors.html</anchorfile>
      <anchor>af8e98dbfe660282a4bab04a13209dde3</anchor>
      <arglist>(const GiaNode &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateTimestamp</name>
      <anchorfile>classGiaNeighbors.html</anchorfile>
      <anchor>adcb0eb3f37220cea6d861690cffa9ed1</anchor>
      <arglist>(const GiaNode &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTimedoutNodes</name>
      <anchorfile>classGiaNeighbors.html</anchorfile>
      <anchor>a28e8d93d9fe5d7353c61630a135e03c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNeighborKeyList</name>
      <anchorfile>classGiaNeighbors.html</anchorfile>
      <anchor>a9aeb7a60fc3abbc6ffb973963befb4b1</anchor>
      <arglist>(const GiaNode &amp;node, const GiaKeyList &amp;keyList)</arglist>
    </member>
    <member kind="function">
      <type>GiaKeyList *</type>
      <name>getNeighborKeyList</name>
      <anchorfile>classGiaNeighbors.html</anchorfile>
      <anchor>affe7cd1577f22248479a73c950ed2fff</anchor>
      <arglist>(const GiaNode &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCapacity</name>
      <anchorfile>classGiaNeighbors.html</anchorfile>
      <anchor>a7a81e4c2d65e2b84e5d2decb59516cbb</anchor>
      <arglist>(const GiaNode &amp;node) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConnectionDegree</name>
      <anchorfile>classGiaNeighbors.html</anchorfile>
      <anchor>a2aaeb921058678c5f0d61aadd81ed348</anchor>
      <arglist>(const GiaNode &amp;node, unsigned int degree)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getConnectionDegree</name>
      <anchorfile>classGiaNeighbors.html</anchorfile>
      <anchor>afc8f6164e18308cf0da604716510ed0e</anchor>
      <arglist>(const GiaNode &amp;node) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReceivedTokens</name>
      <anchorfile>classGiaNeighbors.html</anchorfile>
      <anchor>a0e09922b7f7daa34db85c202c7872e51</anchor>
      <arglist>(const GiaNode &amp;node, unsigned int tokens)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increaseReceivedTokens</name>
      <anchorfile>classGiaNeighbors.html</anchorfile>
      <anchor>a421c14bd6ab7f3c0023314c5ee68b9ee</anchor>
      <arglist>(const GiaNode &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decreaseReceivedTokens</name>
      <anchorfile>classGiaNeighbors.html</anchorfile>
      <anchor>a62be25209d6885ccf265aa31021ac315</anchor>
      <arglist>(const GiaNode &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getReceivedTokens</name>
      <anchorfile>classGiaNeighbors.html</anchorfile>
      <anchor>acf185e28bd495615f3429174173ade80</anchor>
      <arglist>(const GiaNode &amp;node) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSentTokens</name>
      <anchorfile>classGiaNeighbors.html</anchorfile>
      <anchor>acfc59f8e8b9f23041cb6b55297e6b4a4</anchor>
      <arglist>(const GiaNode &amp;node, unsigned int tokens)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increaseSentTokens</name>
      <anchorfile>classGiaNeighbors.html</anchorfile>
      <anchor>a60774c8b7271b120faab6bcfbd16980a</anchor>
      <arglist>(const GiaNode &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSentTokens</name>
      <anchorfile>classGiaNeighbors.html</anchorfile>
      <anchor>ab6e3d1e3c9a722d2d5f37b534bef4202</anchor>
      <arglist>(const GiaNode &amp;node) const </arglist>
    </member>
    <member kind="function">
      <type>const GiaNode &amp;</type>
      <name>getDropCandidate</name>
      <anchorfile>classGiaNeighbors.html</anchorfile>
      <anchor>a2de1eb225cf941a0653939a7884b9ee1</anchor>
      <arglist>(double capacity, unsigned int degree) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; GiaNode, GiaNeighborInfo &gt;::iterator</type>
      <name>NeighborsIterator</name>
      <anchorfile>classGiaNeighbors.html</anchorfile>
      <anchor>a86de986c6d8950a8c6162caea569d639</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; GiaNode, GiaNeighborInfo &gt;::const_iterator</type>
      <name>NeighborsConstIterator</name>
      <anchorfile>classGiaNeighbors.html</anchorfile>
      <anchor>ac066114048739566b14d5c794bb1bd3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; GiaNode, GiaNeighborInfo &gt;</type>
      <name>neighbors</name>
      <anchorfile>classGiaNeighbors.html</anchorfile>
      <anchor>aab741ea0f55c6b68121e24e86b56c041</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GiaNode</type>
      <name>thisNode</name>
      <anchorfile>classGiaNeighbors.html</anchorfile>
      <anchor>afb75504212a951ccd34f966df084dc4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>timeout</name>
      <anchorfile>classGiaNeighbors.html</anchorfile>
      <anchor>a595d3438d338e44849b52e275e477e00</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GiaNode</name>
    <filename>classGiaNode.html</filename>
    <base>NodeHandle</base>
    <member kind="function">
      <type></type>
      <name>GiaNode</name>
      <anchorfile>classGiaNode.html</anchorfile>
      <anchor>aa8bc9697bd979f11b8219d352da57572</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GiaNode</name>
      <anchorfile>classGiaNode.html</anchorfile>
      <anchor>aa375c6cdba3a6037f43d9086d4785ba7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GiaNode</name>
      <anchorfile>classGiaNode.html</anchorfile>
      <anchor>a1cc578d386780c219003ef2de78e5810</anchor>
      <arglist>(const NodeHandle &amp;handle)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GiaNode</name>
      <anchorfile>classGiaNode.html</anchorfile>
      <anchor>a190d22f4769e97d3d2fccbba4b4a9472</anchor>
      <arglist>(const NodeHandle &amp;handle, double cap, int degree)</arglist>
    </member>
    <member kind="function">
      <type>GiaNode &amp;</type>
      <name>operator=</name>
      <anchorfile>classGiaNode.html</anchorfile>
      <anchor>a11b62c60c01c8544fa7e158877597b5b</anchor>
      <arglist>(const NodeHandle &amp;handle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCapacity</name>
      <anchorfile>classGiaNode.html</anchorfile>
      <anchor>a37f637a6aa59fb15a141da49b73d7ca1</anchor>
      <arglist>(double capacity)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCapacity</name>
      <anchorfile>classGiaNode.html</anchorfile>
      <anchor>a63b976464211b7bfc41fdacb2b54d180</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const GiaNode</type>
      <name>UNSPECIFIED_NODE</name>
      <anchorfile>classGiaNode.html</anchorfile>
      <anchor>a45c7e4bc3265652d6b658df6b4918952</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>capacity</name>
      <anchorfile>classGiaNode.html</anchorfile>
      <anchor>abefff637701ceac223062dc767de896b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classGiaNode.html</anchorfile>
      <anchor>a34331cfd1bfd4e1cae7185edad77bc75</anchor>
      <arglist>(std::ostream &amp;os, const GiaNode &amp;n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GIAput</name>
    <filename>classGIAput.html</filename>
    <base>GIASearchAppMessage</base>
    <member kind="function">
      <type></type>
      <name>GIAput</name>
      <anchorfile>classGIAput.html</anchorfile>
      <anchor>a96db5121717e1c91c9ec41b1074d8374</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GIAput</name>
      <anchorfile>classGIAput.html</anchorfile>
      <anchor>aa4684f0e61f808d135261e8d68719735</anchor>
      <arglist>(const GIAput &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GIAput</name>
      <anchorfile>classGIAput.html</anchorfile>
      <anchor>afe40b4afdd3bbbd79d6e51039fa18d13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GIAput &amp;</type>
      <name>operator=</name>
      <anchorfile>classGIAput.html</anchorfile>
      <anchor>a79dce81f28fa234ad4b04cbc3275743a</anchor>
      <arglist>(const GIAput &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GIAput *</type>
      <name>dup</name>
      <anchorfile>classGIAput.html</anchorfile>
      <anchor>a0a9fca5cab60b282e5653ccd2b6ca703</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classGIAput.html</anchorfile>
      <anchor>a1fc56f3ebe42014ead565bf7b218fe42</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classGIAput.html</anchorfile>
      <anchor>a7c1f28a924e258340ff188f25132574a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKeysArraySize</name>
      <anchorfile>classGIAput.html</anchorfile>
      <anchor>a39ab97fdd40e1906f8652c81b337a729</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getKeysArraySize</name>
      <anchorfile>classGIAput.html</anchorfile>
      <anchor>adfc4947b3b906cb8e441f69bf438540a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getKeys</name>
      <anchorfile>classGIAput.html</anchorfile>
      <anchor>a58c0ee9bb1883b3b1996701a06ce2d3a</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getKeys</name>
      <anchorfile>classGIAput.html</anchorfile>
      <anchor>a4b354af0b17bfb34645440f6e17eb29d</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKeys</name>
      <anchorfile>classGIAput.html</anchorfile>
      <anchor>a0f40eae13e7ff316e28f6ae2636d1ab7</anchor>
      <arglist>(unsigned int k, const OverlayKey &amp;keys)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGIAput.html</anchorfile>
      <anchor>a2ef22feeea9ddbabb69fd3416760d1ba</anchor>
      <arglist>(const GIAput &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey *</type>
      <name>keys_var</name>
      <anchorfile>classGIAput.html</anchorfile>
      <anchor>a76388eea1c9d07260733211eb98b21b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>keys_arraysize</name>
      <anchorfile>classGIAput.html</anchorfile>
      <anchor>a7726aa1c856e256f398eacc4de779f5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classGIAput.html</anchorfile>
      <anchor>ad5201e4ab4f2b097688f69837c4505ab</anchor>
      <arglist>(const GIAput &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GIAremove</name>
    <filename>classGIAremove.html</filename>
    <base>GIASearchAppMessage</base>
    <member kind="function">
      <type></type>
      <name>GIAremove</name>
      <anchorfile>classGIAremove.html</anchorfile>
      <anchor>a010c4531ecb67df1a7af3d1feeede716</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GIAremove</name>
      <anchorfile>classGIAremove.html</anchorfile>
      <anchor>af15f8df60e1fd3b44cb77e1615720873</anchor>
      <arglist>(const GIAremove &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GIAremove</name>
      <anchorfile>classGIAremove.html</anchorfile>
      <anchor>aa27773ddcc1be5b8ffdd176c834dbd45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GIAremove &amp;</type>
      <name>operator=</name>
      <anchorfile>classGIAremove.html</anchorfile>
      <anchor>afa64a3dcfb58a73637940db1e0cbc59c</anchor>
      <arglist>(const GIAremove &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GIAremove *</type>
      <name>dup</name>
      <anchorfile>classGIAremove.html</anchorfile>
      <anchor>a5d80ea145c04b9337b029fef2ebecbc5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classGIAremove.html</anchorfile>
      <anchor>a92e95cdf539aaa4e8e4831f65908e33a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classGIAremove.html</anchorfile>
      <anchor>a3c8af92f77bb89c450a57d35eb132198</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGIAremove.html</anchorfile>
      <anchor>af8a11b11de4f7db2b5cb24d99d37d04d</anchor>
      <arglist>(const GIAremove &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classGIAremove.html</anchorfile>
      <anchor>a7c9942056fabc5cd0be07e7ec06b62cd</anchor>
      <arglist>(const GIAremove &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GiaRouteMessage</name>
    <filename>classGiaRouteMessage.html</filename>
    <base>GiaIDMessage</base>
    <member kind="function">
      <type></type>
      <name>GiaRouteMessage</name>
      <anchorfile>classGiaRouteMessage.html</anchorfile>
      <anchor>a4e59246f9d4d90e06e28f868a1e6a1c7</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GiaRouteMessage</name>
      <anchorfile>classGiaRouteMessage.html</anchorfile>
      <anchor>affee13519ca99a6c43473bc8541bc02b</anchor>
      <arglist>(const GiaRouteMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GiaRouteMessage</name>
      <anchorfile>classGiaRouteMessage.html</anchorfile>
      <anchor>a006f5e4feb76a047575cf158e1f86831</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GiaRouteMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classGiaRouteMessage.html</anchorfile>
      <anchor>ac050038e0ab91fbea9e5216e6ce1087a</anchor>
      <arglist>(const GiaRouteMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GiaRouteMessage *</type>
      <name>dup</name>
      <anchorfile>classGiaRouteMessage.html</anchorfile>
      <anchor>a90bbf06c1d94fe5905de4f6be7c51c8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classGiaRouteMessage.html</anchorfile>
      <anchor>ac57f655faa6dda13321b33665303144a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classGiaRouteMessage.html</anchorfile>
      <anchor>ab0eaa5c870698f3e23b0f88023146c32</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getOriginatorKey</name>
      <anchorfile>classGiaRouteMessage.html</anchorfile>
      <anchor>a49740fd43dc0ef74a195b087c8497923</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getOriginatorKey</name>
      <anchorfile>classGiaRouteMessage.html</anchorfile>
      <anchor>aeaf22db5c4854f3fad176635a2532b5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOriginatorKey</name>
      <anchorfile>classGiaRouteMessage.html</anchorfile>
      <anchor>a3f56084d7c536a29d53cbbfcb7a1873f</anchor>
      <arglist>(const OverlayKey &amp;originatorKey)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress &amp;</type>
      <name>getOriginatorIP</name>
      <anchorfile>classGiaRouteMessage.html</anchorfile>
      <anchor>a5924e4f3d0b0cc466e4b2fa935d7f433</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPvXAddress &amp;</type>
      <name>getOriginatorIP</name>
      <anchorfile>classGiaRouteMessage.html</anchorfile>
      <anchor>ae3d9018d3658a428934f26fff1ba8644</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOriginatorIP</name>
      <anchorfile>classGiaRouteMessage.html</anchorfile>
      <anchor>abb5c2758bb54c43bdd9ce095dab0053d</anchor>
      <arglist>(const IPvXAddress &amp;originatorIP)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getOriginatorPort</name>
      <anchorfile>classGiaRouteMessage.html</anchorfile>
      <anchor>aec186442947586b8951e35aaea726090</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOriginatorPort</name>
      <anchorfile>classGiaRouteMessage.html</anchorfile>
      <anchor>a9622d077b984aebd4f43a409082d35e4</anchor>
      <arglist>(int originatorPort)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGiaRouteMessage.html</anchorfile>
      <anchor>a3f4e537032695bd0844902a7dc8757bc</anchor>
      <arglist>(const GiaRouteMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>originatorKey_var</name>
      <anchorfile>classGiaRouteMessage.html</anchorfile>
      <anchor>acfdfe0cb0f530018a286c168e265dec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress</type>
      <name>originatorIP_var</name>
      <anchorfile>classGiaRouteMessage.html</anchorfile>
      <anchor>ac93147f411e536392844ad92708b10dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>originatorPort_var</name>
      <anchorfile>classGiaRouteMessage.html</anchorfile>
      <anchor>a18d4a119d913894e7b39bfa3ee6a3212</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classGiaRouteMessage.html</anchorfile>
      <anchor>a1a7dd499e360526e7fe280e8c0b3af82</anchor>
      <arglist>(const GiaRouteMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GIAsearch</name>
    <filename>classGIAsearch.html</filename>
    <base>GIASearchAppMessage</base>
    <member kind="function">
      <type></type>
      <name>GIAsearch</name>
      <anchorfile>classGIAsearch.html</anchorfile>
      <anchor>a0e225124b53f6c371bbf8296d268b4d7</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GIAsearch</name>
      <anchorfile>classGIAsearch.html</anchorfile>
      <anchor>a62e3fc23bd0b710f8a1efa2d344644a8</anchor>
      <arglist>(const GIAsearch &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GIAsearch</name>
      <anchorfile>classGIAsearch.html</anchorfile>
      <anchor>a4dc4f7711ee45914052477ef303aa2b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GIAsearch &amp;</type>
      <name>operator=</name>
      <anchorfile>classGIAsearch.html</anchorfile>
      <anchor>a0b2fc9484b5bd96071d704fa8527c525</anchor>
      <arglist>(const GIAsearch &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GIAsearch *</type>
      <name>dup</name>
      <anchorfile>classGIAsearch.html</anchorfile>
      <anchor>a7016eb382ca690f2454734785952dda6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classGIAsearch.html</anchorfile>
      <anchor>a9a7f4d84b328817d764a8c6943fccd54</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classGIAsearch.html</anchorfile>
      <anchor>ad92e9738ae61afa105bdefc88e866618</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getSearchKey</name>
      <anchorfile>classGIAsearch.html</anchorfile>
      <anchor>aa93e7b66300d8ab384db700ac00e608d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getSearchKey</name>
      <anchorfile>classGIAsearch.html</anchorfile>
      <anchor>a05a00e69b6b18a0cac0e170d4abb9d64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSearchKey</name>
      <anchorfile>classGIAsearch.html</anchorfile>
      <anchor>a98632c52470d8864ee0b49caab65f369</anchor>
      <arglist>(const OverlayKey &amp;searchKey)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getMaxResponses</name>
      <anchorfile>classGIAsearch.html</anchorfile>
      <anchor>a40309f5cf093a22a97373f15551e32f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMaxResponses</name>
      <anchorfile>classGIAsearch.html</anchorfile>
      <anchor>a73de6ac81661e9c05ffcf9f618e7cf5f</anchor>
      <arglist>(int maxResponses)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGIAsearch.html</anchorfile>
      <anchor>adb200aaacd19a099753e332d1ca8648f</anchor>
      <arglist>(const GIAsearch &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>searchKey_var</name>
      <anchorfile>classGIAsearch.html</anchorfile>
      <anchor>af98f63fd0972e6786696bf4c50745d2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>maxResponses_var</name>
      <anchorfile>classGIAsearch.html</anchorfile>
      <anchor>ac506b6670b02af68e281c0fdddd29e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classGIAsearch.html</anchorfile>
      <anchor>ab1ac0244e33b5ab9767d528b687c9fe4</anchor>
      <arglist>(const GIAsearch &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GIASearchApp</name>
    <filename>classGIASearchApp.html</filename>
    <base>BaseApp</base>
    <member kind="function">
      <type></type>
      <name>GIASearchApp</name>
      <anchorfile>classGIASearchApp.html</anchorfile>
      <anchor>af378dd97e800fd37fa4642c263aab805</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GIASearchApp</name>
      <anchorfile>classGIASearchApp.html</anchorfile>
      <anchor>a52adc8a46e26010ccdb62563a1a4ff61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeApp</name>
      <anchorfile>classGIASearchApp.html</anchorfile>
      <anchor>a097428b58c1abf9282821680c5dc6991</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleLowerMessage</name>
      <anchorfile>classGIASearchApp.html</anchorfile>
      <anchor>a0a0abd0bf69111c0619e1c33977734d9</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classGIASearchApp.html</anchorfile>
      <anchor>afa0920c5aeca3cb9e0c949fed5d8833c</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finishApp</name>
      <anchorfile>classGIASearchApp.html</anchorfile>
      <anchor>ab83936cef7f46a42574258a74d843abc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SearchMsgBookkeeping *</type>
      <name>srMsgBook</name>
      <anchorfile>classGIASearchApp.html</anchorfile>
      <anchor>a49bce56857b0e1de7e23ea5f3497d92b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mean</name>
      <anchorfile>classGIASearchApp.html</anchorfile>
      <anchor>aaa9bd76f26aa300f0458bcb4ca143f77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>deviation</name>
      <anchorfile>classGIASearchApp.html</anchorfile>
      <anchor>aa8749477d8db75611667074f2f7cec77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>randomNodes</name>
      <anchorfile>classGIASearchApp.html</anchorfile>
      <anchor>a3570d458370a137ab1a71e1841e3ede4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>maxResponses</name>
      <anchorfile>classGIASearchApp.html</anchorfile>
      <anchor>ae8d1b331f3250137e39545a92deea328</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>msgByteLength</name>
      <anchorfile>classGIASearchApp.html</anchorfile>
      <anchor>ab52b5bd98680756466dfdaea2f8f15a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>stat_keyListMessagesSent</name>
      <anchorfile>classGIASearchApp.html</anchorfile>
      <anchor>aa5bd3e59c4313f6bba5b38c42576dd66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>stat_keyListBytesSent</name>
      <anchorfile>classGIASearchApp.html</anchorfile>
      <anchor>ae7cebe442a63f55b4c90cadc0beb5a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>stat_searchMessagesSent</name>
      <anchorfile>classGIASearchApp.html</anchorfile>
      <anchor>a084a484607853fca6a08244c8307ac80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>stat_searchBytesSent</name>
      <anchorfile>classGIASearchApp.html</anchorfile>
      <anchor>a250fe0d635c647055f1d4d4583de5c95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>stat_searchResponseMessages</name>
      <anchorfile>classGIASearchApp.html</anchorfile>
      <anchor>a7aac11f63657c1dcf66770272abcb62e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>stat_searchResponseBytes</name>
      <anchorfile>classGIASearchApp.html</anchorfile>
      <anchor>ac31f7331289a21522adced2203828a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>search_timer</name>
      <anchorfile>classGIASearchApp.html</anchorfile>
      <anchor>a6592fab2348b7c497003957585cec6b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>keyList_timer</name>
      <anchorfile>classGIASearchApp.html</anchorfile>
      <anchor>aa23ea2f0b98010e88a94f2909eec06ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const uint32_t</type>
      <name>ID_L</name>
      <anchorfile>classGIASearchApp.html</anchorfile>
      <anchor>af8a2e8b3bdcc00f3baa83bb30143e515</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const uint32_t</type>
      <name>SEQNUM_L</name>
      <anchorfile>classGIASearchApp.html</anchorfile>
      <anchor>aa53df273e9f8283334ddfd668151a432</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; OverlayKey &gt; *</type>
      <name>keyList</name>
      <anchorfile>classGIASearchApp.html</anchorfile>
      <anchor>ac913c88fac4ffe29f2f42b75b1dbb02b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GIASearchAppMessage</name>
    <filename>classGIASearchAppMessage.html</filename>
    <member kind="function">
      <type></type>
      <name>GIASearchAppMessage</name>
      <anchorfile>classGIASearchAppMessage.html</anchorfile>
      <anchor>a7496ea6181c4652dcf6e963a49bb2829</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GIASearchAppMessage</name>
      <anchorfile>classGIASearchAppMessage.html</anchorfile>
      <anchor>a5e9e2a1516c1e16635b89b17ba065bd3</anchor>
      <arglist>(const GIASearchAppMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GIASearchAppMessage</name>
      <anchorfile>classGIASearchAppMessage.html</anchorfile>
      <anchor>a26e84e24310788315a639f55e21c17c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GIASearchAppMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classGIASearchAppMessage.html</anchorfile>
      <anchor>ab86a581844d1d6fd1a7259df1b177dcf</anchor>
      <arglist>(const GIASearchAppMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GIASearchAppMessage *</type>
      <name>dup</name>
      <anchorfile>classGIASearchAppMessage.html</anchorfile>
      <anchor>ace359be2e5e3ea92da7167dd6f7077a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classGIASearchAppMessage.html</anchorfile>
      <anchor>a70cd7f3b4a0d09e787be671f8ccf312f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classGIASearchAppMessage.html</anchorfile>
      <anchor>a8f2ca8d9debf7074dad245bec1ec7c65</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCommand</name>
      <anchorfile>classGIASearchAppMessage.html</anchorfile>
      <anchor>af0ea006945b794a20ef12cd2440750f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommand</name>
      <anchorfile>classGIASearchAppMessage.html</anchorfile>
      <anchor>a0bb9a13bf28291e57db3e95d8c3e1589</anchor>
      <arglist>(int command)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGIASearchAppMessage.html</anchorfile>
      <anchor>a241d240445d7891e971cef056522d414</anchor>
      <arglist>(const GIASearchAppMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>command_var</name>
      <anchorfile>classGIASearchAppMessage.html</anchorfile>
      <anchor>a50e398d43c0fcdff959ed9fd83338d0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classGIASearchAppMessage.html</anchorfile>
      <anchor>a0e3e4d1bb7ac137ccae31f0f7e54d16d</anchor>
      <arglist>(const GIASearchAppMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>GiaSearchStats</name>
    <filename>structGiaSearchStats.html</filename>
    <member kind="variable">
      <type>float</type>
      <name>minDelay</name>
      <anchorfile>structGiaSearchStats.html</anchorfile>
      <anchor>a8a61425ca81150ccb07068823ae2b1eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>maxDelay</name>
      <anchorfile>structGiaSearchStats.html</anchorfile>
      <anchor>a48b98e853d4ec223ded974f104d3317e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>minHopCount</name>
      <anchorfile>structGiaSearchStats.html</anchorfile>
      <anchor>af1179ea604e203bad24c61941e85321e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>maxHopCount</name>
      <anchorfile>structGiaSearchStats.html</anchorfile>
      <anchor>a53ff21a1bb09949ecd26d85810f59478</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>responseCount</name>
      <anchorfile>structGiaSearchStats.html</anchorfile>
      <anchor>abede1724efeff8bbdfbc03eb1da5d7d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GiaTokenFactory</name>
    <filename>classGiaTokenFactory.html</filename>
    <class kind="class">GiaTokenFactory::tokenCompareGiaNode</class>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classGiaTokenFactory.html</anchorfile>
      <anchor>ab6533d1fbd2cdafdca832433dbcfc598</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classGiaTokenFactory.html</anchorfile>
      <anchor>ac59c0b334e21fc7e778d01bc8f56c083</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessages</name>
      <anchorfile>classGiaTokenFactory.html</anchorfile>
      <anchor>a0f1ee462134cd1be34ed60b0c0ed77c7</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNeighbors</name>
      <anchorfile>classGiaTokenFactory.html</anchorfile>
      <anchor>a87645f319c2af09c674c3ca2606794ff</anchor>
      <arglist>(GiaNeighbors *neighbors)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxHopCount</name>
      <anchorfile>classGiaTokenFactory.html</anchorfile>
      <anchor>aac4b3e60794e454e1b3e3a8103aefcba</anchor>
      <arglist>(uint32_t maxHopCount)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>grantToken</name>
      <anchorfile>classGiaTokenFactory.html</anchorfile>
      <anchor>af739a228698812535386a8c8240ab57a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::priority_queue&lt; FullGiaNodeInfo, std::vector&lt; FullGiaNodeInfo &gt;, tokenCompareGiaNode &gt;</type>
      <name>TokenQueue</name>
      <anchorfile>classGiaTokenFactory.html</anchorfile>
      <anchor>a1778fb623c63ff065b8c642edceb45ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createPriorityQueue</name>
      <anchorfile>classGiaTokenFactory.html</anchorfile>
      <anchor>ac44cb31076f47f3f8890b75f1238faab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clearTokenQueue</name>
      <anchorfile>classGiaTokenFactory.html</anchorfile>
      <anchor>a08d8a2241e5175929d43a1fe7d58d492</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateQueueVector</name>
      <anchorfile>classGiaTokenFactory.html</anchorfile>
      <anchor>a1b16071840523141b10e541bfd1f93cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateSentTokens</name>
      <anchorfile>classGiaTokenFactory.html</anchorfile>
      <anchor>a705f719c36d8917132fa2d6c03ed503a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendToken</name>
      <anchorfile>classGiaTokenFactory.html</anchorfile>
      <anchor>ad50915d7f95078b204a8feba37bf4dc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Gia *</type>
      <name>gia</name>
      <anchorfile>classGiaTokenFactory.html</anchorfile>
      <anchor>a743c066ad61d01acabe62ec53a82b7fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TokenQueue</type>
      <name>tokenQueue</name>
      <anchorfile>classGiaTokenFactory.html</anchorfile>
      <anchor>a0a893b31f842a0ea7cd91259f6535e4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GiaNeighbors *</type>
      <name>neighbors</name>
      <anchorfile>classGiaTokenFactory.html</anchorfile>
      <anchor>a504d20663cfbe685a8747047a5cef2b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; GiaNode &gt;</type>
      <name>tokenQueueVector</name>
      <anchorfile>classGiaTokenFactory.html</anchorfile>
      <anchor>a0c3b945827785c3bd221a8189551f184</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>maxHopCount</name>
      <anchorfile>classGiaTokenFactory.html</anchorfile>
      <anchor>a686ce1242cbc2e49d11b188b7d190a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>stat_sentTokens</name>
      <anchorfile>classGiaTokenFactory.html</anchorfile>
      <anchor>abf7c30c8cc655e2026fbbd24cc7da5be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GiaTokenFactory::tokenCompareGiaNode</name>
    <filename>classGiaTokenFactory_1_1tokenCompareGiaNode.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classGiaTokenFactory_1_1tokenCompareGiaNode.html</anchorfile>
      <anchor>a0c25f5027aadfbccbcb1e942a58cfb6d</anchor>
      <arglist>(const FullGiaNodeInfo &amp;x, const FullGiaNodeInfo &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalCoordinator</name>
    <filename>classGlobalCoordinator.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classGlobalCoordinator.html</anchorfile>
      <anchor>a86f10e833fc275387327bca9b8558b62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classGlobalCoordinator.html</anchorfile>
      <anchor>a945084e32f224eb0180c447e55c5d58b</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GlobalCoordinator</name>
      <anchorfile>classGlobalCoordinator.html</anchorfile>
      <anchor>af4011c4bbef0ea5f84030220cfc8beb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increasePositionSize</name>
      <anchorfile>classGlobalCoordinator.html</anchorfile>
      <anchor>afba61c77ccbab2108d650305655b55d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increasePeerCount</name>
      <anchorfile>classGlobalCoordinator.html</anchorfile>
      <anchor>ac6a44416ced3acafc0d775fa0c4553ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPeerCount</name>
      <anchorfile>classGlobalCoordinator.html</anchorfile>
      <anchor>a5d745aacec029ff6e44ca82a6053c7ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector2D &amp;</type>
      <name>getPosition</name>
      <anchorfile>classGlobalCoordinator.html</anchorfile>
      <anchor>ac3a38771e76bc28a69d93c47637da468</anchor>
      <arglist>(int k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classGlobalCoordinator.html</anchorfile>
      <anchor>a5a32d5fac9628a121362f840fad5fd30</anchor>
      <arglist>(int k, const Vector2D &amp;Position)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSeed</name>
      <anchorfile>classGlobalCoordinator.html</anchorfile>
      <anchor>ab55355c4a7918acf751f10590b2a4a3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D *</type>
      <name>Position</name>
      <anchorfile>classGlobalCoordinator.html</anchorfile>
      <anchor>adabd5c17bf9f92cb2ce5213d7b2e3e7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>PositionSize</name>
      <anchorfile>classGlobalCoordinator.html</anchorfile>
      <anchor>a334fd929450601e7a9fabc5e979d5ce8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>PeerCount</name>
      <anchorfile>classGlobalCoordinator.html</anchorfile>
      <anchor>a9bf2c6c9d8d24b1f2f655d523a0c7452</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>Seed</name>
      <anchorfile>classGlobalCoordinator.html</anchorfile>
      <anchor>a10669c33559f6fc84fc82e02898f6d8e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalDhtTestMap</name>
    <filename>classGlobalDhtTestMap.html</filename>
    <member kind="function">
      <type></type>
      <name>GlobalDhtTestMap</name>
      <anchorfile>classGlobalDhtTestMap.html</anchorfile>
      <anchor>a5aad048a2f287a2d2a61242527aa7cc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GlobalDhtTestMap</name>
      <anchorfile>classGlobalDhtTestMap.html</anchorfile>
      <anchor>a8c031fb76e1e321f8a4711c912ff0d78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertEntry</name>
      <anchorfile>classGlobalDhtTestMap.html</anchorfile>
      <anchor>a4325733ef7c67e2e69263afa828cef48</anchor>
      <arglist>(const OverlayKey &amp;key, const DHTEntry &amp;entry)</arglist>
    </member>
    <member kind="function">
      <type>const DHTEntry *</type>
      <name>findEntry</name>
      <anchorfile>classGlobalDhtTestMap.html</anchorfile>
      <anchor>a592087af97fb9215c7096fc80c2d7028</anchor>
      <arglist>(const OverlayKey &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseEntry</name>
      <anchorfile>classGlobalDhtTestMap.html</anchorfile>
      <anchor>a603030fca8fc22a623b7b776944d3b5e</anchor>
      <arglist>(const OverlayKey &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const OverlayKey &amp;</type>
      <name>getRandomKey</name>
      <anchorfile>classGlobalDhtTestMap.html</anchorfile>
      <anchor>aec71c9e60ea7a58c8a0b58215f47c863</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classGlobalDhtTestMap.html</anchorfile>
      <anchor>a24a61d36a4720ea9e01e9302658f69e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>p2pnsNameCount</name>
      <anchorfile>classGlobalDhtTestMap.html</anchorfile>
      <anchor>a89843b7d3d570f4a623e5f9c372094a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classGlobalDhtTestMap.html</anchorfile>
      <anchor>a495a433c3bc3c44ce5e4345af4abe4a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classGlobalDhtTestMap.html</anchorfile>
      <anchor>ab0cf9406816a7c8b3a4cea78e0b050bc</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classGlobalDhtTestMap.html</anchorfile>
      <anchor>af1cf5152836ffbc5c78dc0d3b31b1c60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GlobalStatistics *</type>
      <name>globalStatistics</name>
      <anchorfile>classGlobalDhtTestMap.html</anchorfile>
      <anchor>a18ad9fdc88cf064f8874c12219742ca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; OverlayKey, DHTEntry &gt;</type>
      <name>dataMap</name>
      <anchorfile>classGlobalDhtTestMap.html</anchorfile>
      <anchor>ad0924bc3724de68548f281184c82041f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>periodicTimer</name>
      <anchorfile>classGlobalDhtTestMap.html</anchorfile>
      <anchor>a95c6f58e07e87545a8f3d126d44df275</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const int</type>
      <name>TEST_MAP_INTERVAL</name>
      <anchorfile>classGlobalDhtTestMap.html</anchorfile>
      <anchor>abec428ba985f8534697a53e6ca936754</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalNodeList</name>
    <filename>classGlobalNodeList.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; OverlayKey &gt;</type>
      <name>KeyList</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>ac1e9d2312032c6c9eca36288593c4f3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPeer</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>a82a6c218304d734e2169e1c8fc5817ee</anchor>
      <arglist>(const IPvXAddress &amp;ip, PeerInfo *info)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendNotificationToAllPeers</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>a2ec4791dafc9b0146ecadb1c0236de86</anchor>
      <arglist>(int category)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>killPeer</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>a94d01badb00975930c2ed108e065fdf7</anchor>
      <arglist>(const IPvXAddress &amp;ip)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getRandomNode</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>a4a52b6c813beb1e42e882da2451e623e</anchor>
      <arglist>(int32_t overlayId=-1, int32_t nodeType=-1, bool bootstrappedNeeded=true, bool inoffensiveNeeded=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getBootstrapNode</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>ac2b8737b7228a19ddc599adddfbdc5e9</anchor>
      <arglist>(int32_t overlayId=-1, const NodeHandle &amp;node=NodeHandle::UNSPECIFIED_NODE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>registerPeer</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>a944218e1a3f9a3fcb029079db32eee03</anchor>
      <arglist>(const NodeHandle &amp;peer, int32_t overlayId=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>refreshEntry</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>a8d095a675f945d67cc13e32e42ea8772</anchor>
      <arglist>(const TransportAddress &amp;peer, int32_t overlayId=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removePeer</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>ad71420e64d6f5466ecfd95d8ab56ca55</anchor>
      <arglist>(const TransportAddress &amp;peer, int32_t overlayId=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual KeyList *</type>
      <name>getKeyList</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>addbb881d8eb1b7a6ab3fbed3fd7c019e</anchor>
      <arglist>(uint32_t maximumKeys)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getRandomKeyListItem</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>a3f0f5fadca707a4702a15ad5f46b3502</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOverlayReadyIcon</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>a94604495a81e687f7492564d788c7c36</anchor>
      <arglist>(const TransportAddress &amp;address, bool ready)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PeerInfo *</type>
      <name>getPeerInfo</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>a985bf687f11d68d4a6699e7fa2367e9a</anchor>
      <arglist>(const TransportAddress &amp;peer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMalicious</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>ae9b12c25d356b0f02eefc855e338dbd0</anchor>
      <arglist>(const TransportAddress &amp;address, bool malicious)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMalicious</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>a8312d71c91eac1144c94c41fe121a755</anchor>
      <arglist>(const TransportAddress &amp;address)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject **</type>
      <name>getContext</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>a9c0e986f725906c17373fac655710e5c</anchor>
      <arglist>(const TransportAddress &amp;address)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPreKilled</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>a37e718e913770a0fb9cd9e86c5be65da</anchor>
      <arglist>(const TransportAddress &amp;address)</arglist>
    </member>
    <member kind="function">
      <type>TransportAddress *</type>
      <name>getRandomAliveNode</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>afb768cce8523f2c55eb9449b2d489678</anchor>
      <arglist>(int32_t overlayId=-1, int32_t nodeType=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PeerInfo *</type>
      <name>getRandomPeerInfo</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>a0b09f249680c3ae737af916a8a54f75f</anchor>
      <arglist>(int32_t overlayId=-1, int32_t nodeType=-1, bool bootstrapNeeded=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PeerInfo *</type>
      <name>getPeerInfo</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>a3ec6141b7450b82377b0188d2f007969</anchor>
      <arglist>(const IPvXAddress &amp;ip)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumNodes</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>a00f1090684fefa9f46e571c2d9dab733</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>areNodeTypesConnected</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>ae316b0571ddcfafa6cbaaf1c82cc793a</anchor>
      <arglist>(int32_t a, int32_t b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connectNodeTypes</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>a7508364e103ca5ce8f9d2f806d11ff8f</anchor>
      <arglist>(int32_t a, int32_t b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disconnectNodeTypes</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>aac4d8239382d5ab47a1ba0d3ca87d32c</anchor>
      <arglist>(int32_t a, int32_t b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mergeBootstrapNodes</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>a356c7eefc6f206dbad49797a2186ff28</anchor>
      <arglist>(int toPartition, int fromPartition, int numNodes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incLandmarkPeerSize</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>a645a57272e9ca434469af5e4156be8d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>getLandmarkPeerSize</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>ad4be38c469514c678ee0057eeb65ed65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incLandmarkPeerSizePerType</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>a77494a9be212c2c424047806b559f086</anchor>
      <arglist>(uint16_t type)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; IPvXAddress &gt; *</type>
      <name>getAllIps</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>a76e2eb671109dd6e71b8964e3d0ca54a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NodeHandle *</type>
      <name>getNodeHandle</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>a72f83aa30cf00e53a385730523259c48</anchor>
      <arglist>(const IPvXAddress &amp;address)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>a583c1f5b82bf5dd962965a0388c0f898</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>a7102f90564f3621d498187d079c8864b</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>createKeyList</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>a286d8d9d12c9bbb48e238b20017623c2</anchor>
      <arglist>(uint32_t size)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KeyList</type>
      <name>keyList</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>ab4176b244967b4409c8271ab322735e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint16_t</type>
      <name>landmarkPeerSize</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>a391e81b773080f71c9be63e5eec99af6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint16_t</type>
      <name>landmarkPeerSizePerType</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>ac08b535f15b2f1fdb1259936677a9a04</anchor>
      <arglist>[MAX_NODETYPES]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>preKilledNodes</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>a8c08ac905603f1a5909e9c8e8aab251d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maliciousNodeRatio</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>ae13e4861c860626963f3353db1b05b73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>maliciousNodesVector</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>a0501cf29510bc26a29df6dcf30d7a8c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PeerStorage</type>
      <name>peerStorage</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>ad94afaff9b0fcde5d677729342a336d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>maxNumberOfKeys</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>abbfd18e77e37190e2bea43671ea4fc34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>keyProbability</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>aa50b59ca6bf994c31af430aaba7029d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isKeyListInitialized</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>a2e2bdb081bbb6e30f26418e6948ce141</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GlobalStatistics *</type>
      <name>globalStatistics</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>af4c01335044afdc1268dc648633a73cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>connectionMatrix</name>
      <anchorfile>classGlobalNodeList.html</anchorfile>
      <anchor>a1498b1e44a1c8f9885b57d05f6b8b693</anchor>
      <arglist>[MAX_NODETYPES][MAX_NODETYPES]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalNodeListAccess</name>
    <filename>classGlobalNodeListAccess.html</filename>
    <member kind="function">
      <type>GlobalNodeList *</type>
      <name>get</name>
      <anchorfile>classGlobalNodeListAccess.html</anchorfile>
      <anchor>a632ebc68d476efa2dd053517509786ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalNodeList *</type>
      <name>get</name>
      <anchorfile>classGlobalNodeListAccess.html</anchorfile>
      <anchor>a632ebc68d476efa2dd053517509786ec</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalParameters</name>
    <filename>classGlobalParameters.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>getPrintStateToStdOut</name>
      <anchorfile>classGlobalParameters.html</anchorfile>
      <anchor>a8d700111d72e65cdefdf87e8f1b3b9b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTopologyAdaptation</name>
      <anchorfile>classGlobalParameters.html</anchorfile>
      <anchor>a0f64c088dbdbab14a24de8b493c6f828</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classGlobalParameters.html</anchorfile>
      <anchor>ac4299a4e3077d35fa674471f68eb88e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>printStateToStdOut</name>
      <anchorfile>classGlobalParameters.html</anchorfile>
      <anchor>ad8cef823a5eb8e4faf1d3e8e5ad78ef0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalParametersAccess</name>
    <filename>classGlobalParametersAccess.html</filename>
    <member kind="function">
      <type>GlobalParameters *</type>
      <name>get</name>
      <anchorfile>classGlobalParametersAccess.html</anchorfile>
      <anchor>a472e2df26739d9c174391846b0dd9c64</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalStatistics</name>
    <filename>classGlobalStatistics.html</filename>
    <class kind="struct">GlobalStatistics::OutVector</class>
    <member kind="function">
      <type></type>
      <name>~GlobalStatistics</name>
      <anchorfile>classGlobalStatistics.html</anchorfile>
      <anchor>a26ae065660443e08ffdadf487a5689fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addStdDev</name>
      <anchorfile>classGlobalStatistics.html</anchorfile>
      <anchor>a6a697a0b67f344e4bc214159761f943a</anchor>
      <arglist>(const std::string &amp;name, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recordHistogram</name>
      <anchorfile>classGlobalStatistics.html</anchorfile>
      <anchor>a1d846766f9dda96137504a33b462db65</anchor>
      <arglist>(const std::string &amp;name, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recordOutVector</name>
      <anchorfile>classGlobalStatistics.html</anchorfile>
      <anchor>aa41614baf1d51fab0904abb41b642234</anchor>
      <arglist>(const std::string &amp;name, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startMeasuring</name>
      <anchorfile>classGlobalStatistics.html</anchorfile>
      <anchor>ab45ecba35635f67e477d28102895aef3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMeasuring</name>
      <anchorfile>classGlobalStatistics.html</anchorfile>
      <anchor>ac7fcc2200ed2da08e8f8b8b957c0c1dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getMeasureNetwInitPhase</name>
      <anchorfile>classGlobalStatistics.html</anchorfile>
      <anchor>a0364c85c2484a2109adbe79d03d79f62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getMeasureStartTime</name>
      <anchorfile>classGlobalStatistics.html</anchorfile>
      <anchor>ae3a6592e1949a7413b15cc373c71f3fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>calcMeasuredLifetime</name>
      <anchorfile>classGlobalStatistics.html</anchorfile>
      <anchor>a610799ebfbf64696c59b811870cc8300</anchor>
      <arglist>(simtime_t creationTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalizeStatistics</name>
      <anchorfile>classGlobalStatistics.html</anchorfile>
      <anchor>a528670f846d7dd8d63f96df38ee5b865</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>sentKBRTestAppMessages</name>
      <anchorfile>classGlobalStatistics.html</anchorfile>
      <anchor>ac46f28e295e3d8a66045d4f7d742b795</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>deliveredKBRTestAppMessages</name>
      <anchorfile>classGlobalStatistics.html</anchorfile>
      <anchor>a59bfce2d2d29f05ca1f0610db9c508f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>testCount</name>
      <anchorfile>classGlobalStatistics.html</anchorfile>
      <anchor>aa5292bb0f58279c479399c97e7e25462</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cOutVector</type>
      <name>currentDeliveryVector</name>
      <anchorfile>classGlobalStatistics.html</anchorfile>
      <anchor>a57fbb024632b9cfb59c136b1bb109bc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>MIN_MEASURED</name>
      <anchorfile>classGlobalStatistics.html</anchorfile>
      <anchor>a169810c78519b271f7e32fdc7c9fc641</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classGlobalStatistics.html</anchorfile>
      <anchor>a4d3ee469f077fd40da9ab32ca54b6b0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classGlobalStatistics.html</anchorfile>
      <anchor>ab9b9fe86e25c22a23a342863abfcd5f7</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classGlobalStatistics.html</anchorfile>
      <anchor>ade184a199d0eeee94940e0a185607bb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, cStdDev * &gt;</type>
      <name>stdDevMap</name>
      <anchorfile>classGlobalStatistics.html</anchorfile>
      <anchor>affb433126caee71a25868dc982c3b63f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, cHistogram * &gt;</type>
      <name>histogramMap</name>
      <anchorfile>classGlobalStatistics.html</anchorfile>
      <anchor>a288590df16d5e83db312399a35fcf13f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, OutVector * &gt;</type>
      <name>outVectorMap</name>
      <anchorfile>classGlobalStatistics.html</anchorfile>
      <anchor>aa5067c254073b637c53d7576b9cef15e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>globalStatTimer</name>
      <anchorfile>classGlobalStatistics.html</anchorfile>
      <anchor>a8ad9f159a9b13b2ec7623da065f81875</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>globalStatTimerInterval</name>
      <anchorfile>classGlobalStatistics.html</anchorfile>
      <anchor>aca73369781e376c31ccf63d1b924acac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>measuring</name>
      <anchorfile>classGlobalStatistics.html</anchorfile>
      <anchor>ae55ed1a4856ced36d4746081cc3cb863</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>measureNetwInitPhase</name>
      <anchorfile>classGlobalStatistics.html</anchorfile>
      <anchor>a2a14a49aed11b72d51fa66a6f34c62f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>measureStartTime</name>
      <anchorfile>classGlobalStatistics.html</anchorfile>
      <anchor>ab0ab64b8da5b8f3791a4912d0be38cd5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>GlobalStatistics::OutVector</name>
    <filename>structGlobalStatistics_1_1OutVector.html</filename>
    <member kind="function">
      <type></type>
      <name>OutVector</name>
      <anchorfile>structGlobalStatistics_1_1OutVector.html</anchorfile>
      <anchor>a41fee5a787ef0bec7a124c1793beed1e</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="variable">
      <type>cOutVector</type>
      <name>vector</name>
      <anchorfile>structGlobalStatistics_1_1OutVector.html</anchorfile>
      <anchor>a04a7cbf6da92d4ba1299a776f6f8de17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>count</name>
      <anchorfile>structGlobalStatistics_1_1OutVector.html</anchorfile>
      <anchor>a35cc613e0a5c836c0595f44c373475de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>value</name>
      <anchorfile>structGlobalStatistics_1_1OutVector.html</anchorfile>
      <anchor>acb084debfae39ade58296d971a495933</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>avg</name>
      <anchorfile>structGlobalStatistics_1_1OutVector.html</anchorfile>
      <anchor>ac62f050f9a1769a1e3fa45be5016dd20</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalStatisticsAccess</name>
    <filename>classGlobalStatisticsAccess.html</filename>
    <member kind="function">
      <type>GlobalStatistics *</type>
      <name>get</name>
      <anchorfile>classGlobalStatisticsAccess.html</anchorfile>
      <anchor>ac00f1d00c91c814f250788d315bde4fe</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalTraceManager</name>
    <filename>classGlobalTraceManager.html</filename>
    <member kind="function">
      <type></type>
      <name>GlobalTraceManager</name>
      <anchorfile>classGlobalTraceManager.html</anchorfile>
      <anchor>a94f3eada32575db0b317c7a5b4f81de8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GlobalTraceManager</name>
      <anchorfile>classGlobalTraceManager.html</anchorfile>
      <anchor>a1be98d680e251e51104020bb58adba03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classGlobalTraceManager.html</anchorfile>
      <anchor>a69b1835c242263cfaa3bd247e92cd57d</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classGlobalTraceManager.html</anchorfile>
      <anchor>ad66227aa05307f164d2af36b9660819a</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>readNextBlock</name>
      <anchorfile>classGlobalTraceManager.html</anchorfile>
      <anchor>a6822c5f774ce2ea096f8c762366cff40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>scheduleNextEvent</name>
      <anchorfile>classGlobalTraceManager.html</anchorfile>
      <anchor>a270471e1ff259a370ec4eb23d3f1e9df</anchor>
      <arglist>(double time, int nodeId, char *buf, int line)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createNode</name>
      <anchorfile>classGlobalTraceManager.html</anchorfile>
      <anchor>ad258fb6221cb44c42f31f0ba93f20a70</anchor>
      <arglist>(int nodeId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deleteNode</name>
      <anchorfile>classGlobalTraceManager.html</anchorfile>
      <anchor>a41b1d780f0ced25d82952f22f05eb867</anchor>
      <arglist>(int nodeId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cGate *</type>
      <name>getAppGateById</name>
      <anchorfile>classGlobalTraceManager.html</anchorfile>
      <anchor>afc029ab3e9015f05d2076ba1c9928c96</anchor>
      <arglist>(int nodeId)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UnderlayConfigurator *</type>
      <name>underlayConfigurator</name>
      <anchorfile>classGlobalTraceManager.html</anchorfile>
      <anchor>a61aff16802f452f2d01f6b064b1c416e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GlobalNodeList *</type>
      <name>globalNodeList</name>
      <anchorfile>classGlobalTraceManager.html</anchorfile>
      <anchor>ab8b344fcb96201a65b5295b657b3eeee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>fd</name>
      <anchorfile>classGlobalTraceManager.html</anchorfile>
      <anchor>a0c987aa95d34a55f631ff426ee09cb27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>filesize</name>
      <anchorfile>classGlobalTraceManager.html</anchorfile>
      <anchor>aad59e429366b7f23f154a65df9d6780f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>chunksize</name>
      <anchorfile>classGlobalTraceManager.html</anchorfile>
      <anchor>a475a51287d7f929c447b52e6b96a4544</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>remain</name>
      <anchorfile>classGlobalTraceManager.html</anchorfile>
      <anchor>aa4268132ffbfb04560387cc4693848a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>marginsize</name>
      <anchorfile>classGlobalTraceManager.html</anchorfile>
      <anchor>a2718b2e993640a7a98a95ab027d176fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>offset</name>
      <anchorfile>classGlobalTraceManager.html</anchorfile>
      <anchor>af9a6265179a822d8dfe80a0cc9818590</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>buf</name>
      <anchorfile>classGlobalTraceManager.html</anchorfile>
      <anchor>a708c8dcfbc066ea74e47e9e90d68b692</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>start</name>
      <anchorfile>classGlobalTraceManager.html</anchorfile>
      <anchor>a85ed76e375c1acdc6eb52abcf6eec4ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>nextRead</name>
      <anchorfile>classGlobalTraceManager.html</anchorfile>
      <anchor>a98cfa8336b9900526da457a29783d86d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const int</type>
      <name>readPages</name>
      <anchorfile>classGlobalTraceManager.html</anchorfile>
      <anchor>af40890185133d844726334b7501b114a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalTraceManagerMessage</name>
    <filename>classGlobalTraceManagerMessage.html</filename>
    <member kind="function">
      <type></type>
      <name>GlobalTraceManagerMessage</name>
      <anchorfile>classGlobalTraceManagerMessage.html</anchorfile>
      <anchor>a2984b2d8c67d8ab9eb8befc69f026521</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GlobalTraceManagerMessage</name>
      <anchorfile>classGlobalTraceManagerMessage.html</anchorfile>
      <anchor>afbc9d5452343cbaf97ab2e8461214fba</anchor>
      <arglist>(const GlobalTraceManagerMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GlobalTraceManagerMessage</name>
      <anchorfile>classGlobalTraceManagerMessage.html</anchorfile>
      <anchor>a9fec9f03e73fbd0bf00926c781ddc0c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalTraceManagerMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlobalTraceManagerMessage.html</anchorfile>
      <anchor>ac1ae7029754d99390951125816e7fb37</anchor>
      <arglist>(const GlobalTraceManagerMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GlobalTraceManagerMessage *</type>
      <name>dup</name>
      <anchorfile>classGlobalTraceManagerMessage.html</anchorfile>
      <anchor>ae0cdb70fb8c235b9c580589fd5d64a8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classGlobalTraceManagerMessage.html</anchorfile>
      <anchor>a8e593b38efcfe6b77ca8119bdca240ec</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classGlobalTraceManagerMessage.html</anchorfile>
      <anchor>a36c9d076e63a0784789ed1a806216f51</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getInternalNodeId</name>
      <anchorfile>classGlobalTraceManagerMessage.html</anchorfile>
      <anchor>a9c43242ddb9d4502f44968e5f1be17e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInternalNodeId</name>
      <anchorfile>classGlobalTraceManagerMessage.html</anchorfile>
      <anchor>abdef4109360e0b1e36b6741fdaf808ac</anchor>
      <arglist>(int internalNodeId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getLineNumber</name>
      <anchorfile>classGlobalTraceManagerMessage.html</anchorfile>
      <anchor>a3b75adc63ed72ba8c13397f0d7a81107</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLineNumber</name>
      <anchorfile>classGlobalTraceManagerMessage.html</anchorfile>
      <anchor>a004ed65fbc5d1bf856daf780a4e7733d</anchor>
      <arglist>(int lineNumber)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlobalTraceManagerMessage.html</anchorfile>
      <anchor>aabf6367fc5871f695eb7a93283406de1</anchor>
      <arglist>(const GlobalTraceManagerMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>internalNodeId_var</name>
      <anchorfile>classGlobalTraceManagerMessage.html</anchorfile>
      <anchor>a7ff338d31870e7951babc396b170d4b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lineNumber_var</name>
      <anchorfile>classGlobalTraceManagerMessage.html</anchorfile>
      <anchor>a1725bb4d56c14b8ef7147ec8b5869f8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classGlobalTraceManagerMessage.html</anchorfile>
      <anchor>aae0c3b9b65a8412c81c257aeac211025</anchor>
      <arglist>(const GlobalTraceManagerMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalViewBuilder</name>
    <filename>classGlobalViewBuilder.html</filename>
    <base>AbstractTreeMsgClient</base>
    <member kind="function">
      <type></type>
      <name>GlobalViewBuilder</name>
      <anchorfile>classGlobalViewBuilder.html</anchorfile>
      <anchor>a1e8c929b310614f22df9118759bf7516</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GlobalViewBuilder</name>
      <anchorfile>classGlobalViewBuilder.html</anchorfile>
      <anchor>a3a21dbfa41e2c41787850c7a2c53dcaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeViewBuilder</name>
      <anchorfile>classGlobalViewBuilder.html</anchorfile>
      <anchor>abd89f32ef4f20291e1e06a6d0a58fb13</anchor>
      <arglist>(NeighborCache *neighborCache, BaseOverlay *overlay)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classGlobalViewBuilder.html</anchorfile>
      <anchor>aa8ae1389d89de7cbcb03c13ba68895fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cleanup</name>
      <anchorfile>classGlobalViewBuilder.html</anchorfile>
      <anchor>a6dc363b6ab217e8625b771d5fc7b0cc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classGlobalViewBuilder.html</anchorfile>
      <anchor>ad63b3d40bc4a4025edb25f6801dc8a83</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleCoordSendTimer</name>
      <anchorfile>classGlobalViewBuilder.html</anchorfile>
      <anchor>a7df33976fda402e379ebea2fc4d6a0d8</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleCoordinateRpcCall</name>
      <anchorfile>classGlobalViewBuilder.html</anchorfile>
      <anchor>a60c7234c2e76481a14f6f0880fae1a21</anchor>
      <arglist>(GlobalViewBuilderCall *globalViewBuilderCall)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleCapReqRpcCall</name>
      <anchorfile>classGlobalViewBuilder.html</anchorfile>
      <anchor>a3b1df0f62d302b026bd8bd6fb150a145</anchor>
      <arglist>(CapReqCall *call)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendCapRequest</name>
      <anchorfile>classGlobalViewBuilder.html</anchorfile>
      <anchor>a7b729fbb8bd93471b8fbb0cf81eca4ef</anchor>
      <arglist>(const TransportAddress &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleRpcCall</name>
      <anchorfile>classGlobalViewBuilder.html</anchorfile>
      <anchor>a4f62de45a0457486749cabcad83802e8</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleRpcResponse</name>
      <anchorfile>classGlobalViewBuilder.html</anchorfile>
      <anchor>a2e9b384a9b910c20eff9034f29a16cce</anchor>
      <arglist>(BaseResponseMessage *msg, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleRpcTimeout</name>
      <anchorfile>classGlobalViewBuilder.html</anchorfile>
      <anchor>a608527231ced15aea21f996f3882ff05</anchor>
      <arglist>(BaseCallMessage *msg, const TransportAddress &amp;dest, cPolymorphic *context, int rpcId, const OverlayKey &amp;destKey)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>parProxy</name>
      <anchorfile>classGlobalViewBuilder.html</anchorfile>
      <anchor>afbeb3567a6c453e697865dd99b76dd90</anchor>
      <arglist>(const char *parname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>newParent</name>
      <anchorfile>classGlobalViewBuilder.html</anchorfile>
      <anchor>a8ec353f051f4ff7629a40ebaa93f5db6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCapReady</name>
      <anchorfile>classGlobalViewBuilder.html</anchorfile>
      <anchor>a77d0b11983f93cdc01a8ec95319be791</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCapValid</name>
      <anchorfile>classGlobalViewBuilder.html</anchorfile>
      <anchor>a5e5999c901d2785118175fbce25b4005</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const AP *</type>
      <name>getCAP</name>
      <anchorfile>classGlobalViewBuilder.html</anchorfile>
      <anchor>a06688f06738200cfd819a21387cf1473</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>spreadGlobalView</name>
      <anchorfile>classGlobalViewBuilder.html</anchorfile>
      <anchor>a3899a1102a6bb45b30a852a6b2b6c594</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkOverlayReady</name>
      <anchorfile>classGlobalViewBuilder.html</anchorfile>
      <anchor>ab4072c0c1f5c9b8a82ccb2c4f3f352fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NeighborCache *</type>
      <name>neighborCache</name>
      <anchorfile>classGlobalViewBuilder.html</anchorfile>
      <anchor>ac8f3c2930b82136731cbe716c0d6de4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TreeManagement *</type>
      <name>treeManager</name>
      <anchorfile>classGlobalViewBuilder.html</anchorfile>
      <anchor>ac677cc5eefec422b3657829cf1917817</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AbstractSendStrategy *</type>
      <name>sendStrategy</name>
      <anchorfile>classGlobalViewBuilder.html</anchorfile>
      <anchor>afda44e069fe5aca1221ee8af7aef060c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseOverlay *</type>
      <name>overlay</name>
      <anchorfile>classGlobalViewBuilder.html</anchorfile>
      <anchor>ae7abf229f9aeb3cfd292ba61a7c1b203</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>meanCoordSendInterval</name>
      <anchorfile>classGlobalViewBuilder.html</anchorfile>
      <anchor>a2c7f7a37f909031eac7485e34382f241</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>deviation</name>
      <anchorfile>classGlobalViewBuilder.html</anchorfile>
      <anchor>aa4ba182cd9a1f0a5524cf14b9aa35077</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>coordSendTimer</name>
      <anchorfile>classGlobalViewBuilder.html</anchorfile>
      <anchor>ad58848012107af392ab8499108fa0de6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>spreadCapTimer</name>
      <anchorfile>classGlobalViewBuilder.html</anchorfile>
      <anchor>a1f72d990feb887a9c9faa8d1946c21d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>activeStrategy</name>
      <anchorfile>classGlobalViewBuilder.html</anchorfile>
      <anchor>a8c67fddbf5e3ad008a3d34100546d797</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>onlyAcceptCompleteCCD</name>
      <anchorfile>classGlobalViewBuilder.html</anchorfile>
      <anchor>a32aab99ad6fde5d58decf131aaa83ab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SendStrategyFactory</type>
      <name>sendStrategyFactory</name>
      <anchorfile>classGlobalViewBuilder.html</anchorfile>
      <anchor>a0d1ee4286c6fe99b8574913878deeeee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AP</type>
      <name>cap</name>
      <anchorfile>classGlobalViewBuilder.html</anchorfile>
      <anchor>af06e573952322692e6633f86ce473c73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>capReady</name>
      <anchorfile>classGlobalViewBuilder.html</anchorfile>
      <anchor>ad66fb1502d9109f93fa91460d7df30b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>oldCcdSize</name>
      <anchorfile>classGlobalViewBuilder.html</anchorfile>
      <anchor>a5f159f7b693b83e4e13e772363337354</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalViewBuilderCall</name>
    <filename>classGlobalViewBuilderCall.html</filename>
    <base>TreeAppCall</base>
    <member kind="function">
      <type></type>
      <name>GlobalViewBuilderCall</name>
      <anchorfile>classGlobalViewBuilderCall.html</anchorfile>
      <anchor>ab425f176e0c0bf59d496a8b56e3b1bb9</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GlobalViewBuilderCall</name>
      <anchorfile>classGlobalViewBuilderCall.html</anchorfile>
      <anchor>a390b63161de373f578461513e0f3707b</anchor>
      <arglist>(const GlobalViewBuilderCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GlobalViewBuilderCall</name>
      <anchorfile>classGlobalViewBuilderCall.html</anchorfile>
      <anchor>ac59dbeb063dfd88dc9a9a356fb7811e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalViewBuilderCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlobalViewBuilderCall.html</anchorfile>
      <anchor>a31a664bf2cbe29250b7459807dd60456</anchor>
      <arglist>(const GlobalViewBuilderCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GlobalViewBuilderCall *</type>
      <name>dup</name>
      <anchorfile>classGlobalViewBuilderCall.html</anchorfile>
      <anchor>afe7e7f350c4a2727fb560fdd00dbe0e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classGlobalViewBuilderCall.html</anchorfile>
      <anchor>a5cf4130de20ffe892603854c616319af</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classGlobalViewBuilderCall.html</anchorfile>
      <anchor>ab491b6e40bbdcd23fc2f02dcbe9ea4f3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlobalViewBuilderCall.html</anchorfile>
      <anchor>a5bf48c426875a0f922578715cc0a7d48</anchor>
      <arglist>(const GlobalViewBuilderCall &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classGlobalViewBuilderCall.html</anchorfile>
      <anchor>a0e8f836dcb66c7e32ccbc59dec7b48ea</anchor>
      <arglist>(const GlobalViewBuilderCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalViewBuilderResponse</name>
    <filename>classGlobalViewBuilderResponse.html</filename>
    <base>TreeAppResponse</base>
    <member kind="function">
      <type></type>
      <name>GlobalViewBuilderResponse</name>
      <anchorfile>classGlobalViewBuilderResponse.html</anchorfile>
      <anchor>a0717d3dbeb75cfc5188eb718c8c16989</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GlobalViewBuilderResponse</name>
      <anchorfile>classGlobalViewBuilderResponse.html</anchorfile>
      <anchor>a6bf725f0a4c48822821117243cab2fc0</anchor>
      <arglist>(const GlobalViewBuilderResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GlobalViewBuilderResponse</name>
      <anchorfile>classGlobalViewBuilderResponse.html</anchorfile>
      <anchor>ab92a23ce28888919c7e03bbe9949f6f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalViewBuilderResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlobalViewBuilderResponse.html</anchorfile>
      <anchor>abe9f3304395a7054cf9bca11d0f6748a</anchor>
      <arglist>(const GlobalViewBuilderResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GlobalViewBuilderResponse *</type>
      <name>dup</name>
      <anchorfile>classGlobalViewBuilderResponse.html</anchorfile>
      <anchor>a019cf9e61d614ab47044e0b0d974255d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classGlobalViewBuilderResponse.html</anchorfile>
      <anchor>a5727099e7f7201fad49d17e2e15602a0</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classGlobalViewBuilderResponse.html</anchorfile>
      <anchor>ac7876d7ca0b202af85a8a0efad5dfa06</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlobalViewBuilderResponse.html</anchorfile>
      <anchor>ada494f5b2da219d9c5bca17ee4e0fad8</anchor>
      <arglist>(const GlobalViewBuilderResponse &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classGlobalViewBuilderResponse.html</anchorfile>
      <anchor>adfa2c27efa92b20b66c35d0cfd867e59</anchor>
      <arglist>(const GlobalViewBuilderResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GnpNpsCoordsInfo</name>
    <filename>classGnpNpsCoordsInfo.html</filename>
    <base>EuclideanNcsNodeInfo</base>
    <member kind="function">
      <type></type>
      <name>GnpNpsCoordsInfo</name>
      <anchorfile>classGnpNpsCoordsInfo.html</anchorfile>
      <anchor>a127775e770cb90651fcc07121af8c21e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classGnpNpsCoordsInfo.html</anchorfile>
      <anchor>ad4384dd72167262f92e90a73369ed6f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int8_t</type>
      <name>getLayer</name>
      <anchorfile>classGnpNpsCoordsInfo.html</anchorfile>
      <anchor>aa79b0f19b890c91eb64d802b5bb23f0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLayer</name>
      <anchorfile>classGnpNpsCoordsInfo.html</anchorfile>
      <anchor>aeb654b36205235ddaeef5b93c8ae4da7</anchor>
      <arglist>(int8_t layer)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>classGnpNpsCoordsInfo.html</anchorfile>
      <anchor>a07c1a5bfb38215f086e91a240ce12d5f</anchor>
      <arglist>(const AbstractNcsNodeInfo &amp;abstractInfo)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Coords</name>
      <anchorfile>classGnpNpsCoordsInfo.html</anchorfile>
      <anchor>ad546b19723331ff2473841ccac9c971b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int8_t</type>
      <name>npsLayer</name>
      <anchorfile>classGnpNpsCoordsInfo.html</anchorfile>
      <anchor>adfda8597b0c15d40c80a03a47fc0c694</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>greatGathering</name>
    <filename>classgreatGathering.html</filename>
    <base>MovementGenerator</base>
    <member kind="function">
      <type></type>
      <name>greatGathering</name>
      <anchorfile>classgreatGathering.html</anchorfile>
      <anchor>a95ec1e5a31d9c3ffa557f74c8347b26b</anchor>
      <arglist>(double areaDimension, double speed, NeighborMap *Neighbors, GlobalCoordinator *coordinator, CollisionList *CollisionRect)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~greatGathering</name>
      <anchorfile>classgreatGathering.html</anchorfile>
      <anchor>ad706990f852eaaf5047345a707057149</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>classgreatGathering.html</anchorfile>
      <anchor>af095b15654b1f0e560355174f8dc8fe0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>groupRoaming</name>
    <filename>classgroupRoaming.html</filename>
    <base>MovementGenerator</base>
    <member kind="function">
      <type></type>
      <name>groupRoaming</name>
      <anchorfile>classgroupRoaming.html</anchorfile>
      <anchor>a1df2d5eaf432eacd707ac7239bf047a5</anchor>
      <arglist>(double areaDimension, double speed, NeighborMap *Neighbors, GlobalCoordinator *coordinator, CollisionList *CollisionRect, int groupSize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~groupRoaming</name>
      <anchorfile>classgroupRoaming.html</anchorfile>
      <anchor>a27b01475178b8edabab05967fa679248</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>classgroupRoaming.html</anchorfile>
      <anchor>a6b0f942e1880a068d8776f209a4b1e79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>groupNr</name>
      <anchorfile>classgroupRoaming.html</anchorfile>
      <anchor>a7dedb705316e60a7c6195074c5f21243</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Halfedge</name>
    <filename>classHalfedge.html</filename>
    <member kind="function">
      <type></type>
      <name>Halfedge</name>
      <anchorfile>classHalfedge.html</anchorfile>
      <anchor>a45d010228468982a0f272c01a9208c22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Halfedge *</type>
      <name>ELleft</name>
      <anchorfile>classHalfedge.html</anchorfile>
      <anchor>a7158da8d6a045090adb2f3ac819ac1eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Halfedge *</type>
      <name>ELright</name>
      <anchorfile>classHalfedge.html</anchorfile>
      <anchor>a21b7eac238c19df368e6d3582b5927c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Edge *</type>
      <name>ELedge</name>
      <anchorfile>classHalfedge.html</anchorfile>
      <anchor>a0e7edfac3055d2a9faf8d8e9fa74c3d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>ELpm</name>
      <anchorfile>classHalfedge.html</anchorfile>
      <anchor>a36e688c7989974e7af28c3861e60085d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Site *</type>
      <name>vertex</name>
      <anchorfile>classHalfedge.html</anchorfile>
      <anchor>a6ff7818fbec8e1adad2e970a5960aa6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>ystar</name>
      <anchorfile>classHalfedge.html</anchorfile>
      <anchor>a02d92545c547d59a8c1cd123c0a349e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Halfedge *</type>
      <name>PQnext</name>
      <anchorfile>classHalfedge.html</anchorfile>
      <anchor>a9ceb5916c7271aabfaa718de03874cc9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HCapacityCall</name>
    <filename>classHCapacityCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>HCapacityCall</name>
      <anchorfile>classHCapacityCall.html</anchorfile>
      <anchor>a812be21fdd4311a3f43fe30c5f3760ad</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HCapacityCall</name>
      <anchorfile>classHCapacityCall.html</anchorfile>
      <anchor>a4b70b384bc321c6cfa90bad182d8af0c</anchor>
      <arglist>(const HCapacityCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HCapacityCall</name>
      <anchorfile>classHCapacityCall.html</anchorfile>
      <anchor>a377c81cd69c6c361fe916f7003aefe86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HCapacityCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classHCapacityCall.html</anchorfile>
      <anchor>a198ec146a1018493787faeabdf95acd9</anchor>
      <arglist>(const HCapacityCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HCapacityCall *</type>
      <name>dup</name>
      <anchorfile>classHCapacityCall.html</anchorfile>
      <anchor>a2a0dfad8e30285275ccf37ab7678a455</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classHCapacityCall.html</anchorfile>
      <anchor>a7a2c85a323f83c00caf67df8f2b824f6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classHCapacityCall.html</anchorfile>
      <anchor>a68d7f1fd7be3c217e9a0e06073625be2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getDestinationKey</name>
      <anchorfile>classHCapacityCall.html</anchorfile>
      <anchor>a234b0d185621e627979f0d6c801f7adb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getDestinationKey</name>
      <anchorfile>classHCapacityCall.html</anchorfile>
      <anchor>aecfed0207a80d64892d8ac755faefc59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestinationKey</name>
      <anchorfile>classHCapacityCall.html</anchorfile>
      <anchor>a5c29cf4f4b2efa7b885e1532f877defb</anchor>
      <arglist>(const OverlayKey &amp;destinationKey)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classHCapacityCall.html</anchorfile>
      <anchor>ae776544917462003a9e44d75255f79ff</anchor>
      <arglist>(const HCapacityCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>destinationKey_var</name>
      <anchorfile>classHCapacityCall.html</anchorfile>
      <anchor>a5841421129497f8c10e1c1ab68819241</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classHCapacityCall.html</anchorfile>
      <anchor>ab932e403d78c3f2788611c1df68233fc</anchor>
      <arglist>(const HCapacityCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HCapacityResponse</name>
    <filename>classHCapacityResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>HCapacityResponse</name>
      <anchorfile>classHCapacityResponse.html</anchorfile>
      <anchor>a00f419b58e787475aaec4612ebe4a1bb</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HCapacityResponse</name>
      <anchorfile>classHCapacityResponse.html</anchorfile>
      <anchor>a52ec29e22e9137b861dd33bacc5ca24d</anchor>
      <arglist>(const HCapacityResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HCapacityResponse</name>
      <anchorfile>classHCapacityResponse.html</anchorfile>
      <anchor>a0b757d37f8ff86cb9f357e1ad0cf0887</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HCapacityResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classHCapacityResponse.html</anchorfile>
      <anchor>a1058027c8fe6664548e11cf373bc0d4f</anchor>
      <arglist>(const HCapacityResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HCapacityResponse *</type>
      <name>dup</name>
      <anchorfile>classHCapacityResponse.html</anchorfile>
      <anchor>a1d1c38b0279b9c7707aa777a5a25fbe1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classHCapacityResponse.html</anchorfile>
      <anchor>a0fef9ec1b224a83e353585cd927a44df</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classHCapacityResponse.html</anchorfile>
      <anchor>a4e972e18bca7ce4d86cd91df2c0c8799</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getParentNode</name>
      <anchorfile>classHCapacityResponse.html</anchorfile>
      <anchor>abdb8d60986b7faa5c68c98bf6e0522c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getParentNode</name>
      <anchorfile>classHCapacityResponse.html</anchorfile>
      <anchor>acf82dff356961ad308f2d691395c1127</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParentNode</name>
      <anchorfile>classHCapacityResponse.html</anchorfile>
      <anchor>a552fb1600f3bcece73bac3aef1b57978</anchor>
      <arglist>(const NodeHandle &amp;parentNode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getRespondingNode</name>
      <anchorfile>classHCapacityResponse.html</anchorfile>
      <anchor>a9b0fbe9bd26beb9262f493f66f7b356f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getRespondingNode</name>
      <anchorfile>classHCapacityResponse.html</anchorfile>
      <anchor>a436139b5110d50e891a2aece6645c649</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRespondingNode</name>
      <anchorfile>classHCapacityResponse.html</anchorfile>
      <anchor>a321f254d72d387272a5e39e6cb02509c</anchor>
      <arglist>(const NodeHandle &amp;respondingNode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCapacity</name>
      <anchorfile>classHCapacityResponse.html</anchorfile>
      <anchor>abdece4092ff4d614dcc89b6e03537571</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCapacity</name>
      <anchorfile>classHCapacityResponse.html</anchorfile>
      <anchor>ac949dacc8ae3227b63e1fb51520ca68b</anchor>
      <arglist>(int capacity)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classHCapacityResponse.html</anchorfile>
      <anchor>a25531cef59dbe95d8667819a93cbf674</anchor>
      <arglist>(const HCapacityResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>parentNode_var</name>
      <anchorfile>classHCapacityResponse.html</anchorfile>
      <anchor>a2cd8833e67fa6a86fa1e04227fefb4ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>respondingNode_var</name>
      <anchorfile>classHCapacityResponse.html</anchorfile>
      <anchor>ad26ff6956b3f075729d5aff810310f69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>capacity_var</name>
      <anchorfile>classHCapacityResponse.html</anchorfile>
      <anchor>a5e12a9e4ca9ae0b04048266c7a122c8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classHCapacityResponse.html</anchorfile>
      <anchor>a314ecc36c09ec98d617da416c3a1cde5</anchor>
      <arglist>(const HCapacityResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HeapPQ</name>
    <filename>classHeapPQ.html</filename>
    <member kind="function">
      <type></type>
      <name>HeapPQ</name>
      <anchorfile>classHeapPQ.html</anchorfile>
      <anchor>a5767b6d4f29b5cfd6cd751a3b5a52233</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PQinitialize</name>
      <anchorfile>classHeapPQ.html</anchorfile>
      <anchor>a9ec3f6bf08226399f077bc3e7af1e28e</anchor>
      <arglist>(int sqrt_nsites, double ymin, double deltay)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PQreset</name>
      <anchorfile>classHeapPQ.html</anchorfile>
      <anchor>a9f68f6eeefb48d1767a6516d516eb2ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PQinsert</name>
      <anchorfile>classHeapPQ.html</anchorfile>
      <anchor>a09b36d86656e377d262b1098bd03e17d</anchor>
      <arglist>(Halfedge *he, Site *v, double offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PQdelete</name>
      <anchorfile>classHeapPQ.html</anchorfile>
      <anchor>a361bdd8dffc528d6860d177b107cb3a0</anchor>
      <arglist>(Halfedge *he)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>PQbucket</name>
      <anchorfile>classHeapPQ.html</anchorfile>
      <anchor>a93319fdbd3da60df0eeced14462458fb</anchor>
      <arglist>(Halfedge *he)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>PQempty</name>
      <anchorfile>classHeapPQ.html</anchorfile>
      <anchor>a56f8454b1a800e74372df26289dc55f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector2D</type>
      <name>PQ_min</name>
      <anchorfile>classHeapPQ.html</anchorfile>
      <anchor>a32192681af8227de61ef123ab54e93cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Halfedge *</type>
      <name>PQextractmin</name>
      <anchorfile>classHeapPQ.html</anchorfile>
      <anchor>ab2490259136b824faf5704885637cd24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>PQcount</name>
      <anchorfile>classHeapPQ.html</anchorfile>
      <anchor>a52a70b2807331c74642be1933bb07dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>PQmin</name>
      <anchorfile>classHeapPQ.html</anchorfile>
      <anchor>af704c8e2b70d9a2ae2591132482d14a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>PQhashsize</name>
      <anchorfile>classHeapPQ.html</anchorfile>
      <anchor>a2219f8cfadf8904640ae276d08deedb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>ymin</name>
      <anchorfile>classHeapPQ.html</anchorfile>
      <anchor>aea4df8096e6b79f10a74353d1d1a19ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>deltay</name>
      <anchorfile>classHeapPQ.html</anchorfile>
      <anchor>a49de3d71030e2dfc7a46b3da0e40833b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Halfedge *</type>
      <name>PQhash</name>
      <anchorfile>classHeapPQ.html</anchorfile>
      <anchor>ad8f895162403d8446a5361e19a8dd4ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HGetChildrenCall</name>
    <filename>classHGetChildrenCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>HGetChildrenCall</name>
      <anchorfile>classHGetChildrenCall.html</anchorfile>
      <anchor>ad26f4a66f53253a4bbb5ca7e431b8ddf</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HGetChildrenCall</name>
      <anchorfile>classHGetChildrenCall.html</anchorfile>
      <anchor>a026aba49816dcab1f8bdf84a97613fb5</anchor>
      <arglist>(const HGetChildrenCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HGetChildrenCall</name>
      <anchorfile>classHGetChildrenCall.html</anchorfile>
      <anchor>ac6a4adecd2f074334614bbd2d0fb211b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HGetChildrenCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classHGetChildrenCall.html</anchorfile>
      <anchor>ad4db07e7ade76277a150cdedc9b5245a</anchor>
      <arglist>(const HGetChildrenCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HGetChildrenCall *</type>
      <name>dup</name>
      <anchorfile>classHGetChildrenCall.html</anchorfile>
      <anchor>a84aec76a52f712468e2cbe96c769b60d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classHGetChildrenCall.html</anchorfile>
      <anchor>a424c86ff1c729716d455094bceb22566</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classHGetChildrenCall.html</anchorfile>
      <anchor>a0b83436f5c26460807664a0a43a73405</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classHGetChildrenCall.html</anchorfile>
      <anchor>aa5bb95521e13e137b85ab888eb15f720</anchor>
      <arglist>(const HGetChildrenCall &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classHGetChildrenCall.html</anchorfile>
      <anchor>aba4e15ba0c6d5cfe81abbbd01117c656</anchor>
      <arglist>(const HGetChildrenCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HGetChildrenResponse</name>
    <filename>classHGetChildrenResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>HGetChildrenResponse</name>
      <anchorfile>classHGetChildrenResponse.html</anchorfile>
      <anchor>a49d7709018a063113e99607e0a82cb50</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HGetChildrenResponse</name>
      <anchorfile>classHGetChildrenResponse.html</anchorfile>
      <anchor>a403af00928e53401d304a4b41a04da3b</anchor>
      <arglist>(const HGetChildrenResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HGetChildrenResponse</name>
      <anchorfile>classHGetChildrenResponse.html</anchorfile>
      <anchor>a377a057ccc180f8b8efe570215ae99cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HGetChildrenResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classHGetChildrenResponse.html</anchorfile>
      <anchor>ad931babbde2a648d1f25718f1a7950c3</anchor>
      <arglist>(const HGetChildrenResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HGetChildrenResponse *</type>
      <name>dup</name>
      <anchorfile>classHGetChildrenResponse.html</anchorfile>
      <anchor>a60e50e6dd3ea8476c7853b69e3c0fd45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classHGetChildrenResponse.html</anchorfile>
      <anchor>a116d4d19ee9e8d289d5f605c26ca0706</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classHGetChildrenResponse.html</anchorfile>
      <anchor>a336e7d12ee564d26dc878386f53559c8</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChildrenArraySize</name>
      <anchorfile>classHGetChildrenResponse.html</anchorfile>
      <anchor>a3699af2be44e1f1c4e01106a7eeeb07c</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getChildrenArraySize</name>
      <anchorfile>classHGetChildrenResponse.html</anchorfile>
      <anchor>aabf0f8e1083d8933fc124c6e8fdad169</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getChildren</name>
      <anchorfile>classHGetChildrenResponse.html</anchorfile>
      <anchor>a360070ebc9ffbedded1b14554e58a77c</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getChildren</name>
      <anchorfile>classHGetChildrenResponse.html</anchorfile>
      <anchor>a031d8328fddd679d547de171da3e1de5</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChildren</name>
      <anchorfile>classHGetChildrenResponse.html</anchorfile>
      <anchor>ab47a77c34743d3a15ba5fd9f23951f2e</anchor>
      <arglist>(unsigned int k, const NodeHandle &amp;children)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classHGetChildrenResponse.html</anchorfile>
      <anchor>a49a3a5a621923fa7b5386ca6683cccbf</anchor>
      <arglist>(const HGetChildrenResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle *</type>
      <name>children_var</name>
      <anchorfile>classHGetChildrenResponse.html</anchorfile>
      <anchor>aa88e0ab0b109407194c3c2fe8d86f22b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>children_arraysize</name>
      <anchorfile>classHGetChildrenResponse.html</anchorfile>
      <anchor>aa7ad1fb110fee2e33a04979e36627ba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classHGetChildrenResponse.html</anchorfile>
      <anchor>a0f6458dd344c74a5d3fa8e546d5f97b2</anchor>
      <arglist>(const HGetChildrenResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HGetParametersCall</name>
    <filename>classHGetParametersCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>HGetParametersCall</name>
      <anchorfile>classHGetParametersCall.html</anchorfile>
      <anchor>a589851c57fd95f73b0ae1d05864ce753</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HGetParametersCall</name>
      <anchorfile>classHGetParametersCall.html</anchorfile>
      <anchor>a6df222df34ed02d778da9a2ae6e42ff1</anchor>
      <arglist>(const HGetParametersCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HGetParametersCall</name>
      <anchorfile>classHGetParametersCall.html</anchorfile>
      <anchor>a399114d427ea888cb4ddd03d7e47f519</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HGetParametersCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classHGetParametersCall.html</anchorfile>
      <anchor>aa54998cd989a6284455071d0c0e72120</anchor>
      <arglist>(const HGetParametersCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HGetParametersCall *</type>
      <name>dup</name>
      <anchorfile>classHGetParametersCall.html</anchorfile>
      <anchor>a7fa63f56850be2f8714438b9b308d389</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classHGetParametersCall.html</anchorfile>
      <anchor>ad107fd6c7025df46bf6797b4cc306027</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classHGetParametersCall.html</anchorfile>
      <anchor>a1ffefc5325fd0c776ea74706d8e8d50a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classHGetParametersCall.html</anchorfile>
      <anchor>ad72d6b258ad388b530ec2287f5afe542</anchor>
      <arglist>(const HGetParametersCall &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classHGetParametersCall.html</anchorfile>
      <anchor>a60b4b359a57dc51651a5ca0f74329bb9</anchor>
      <arglist>(const HGetParametersCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HGetParametersResponse</name>
    <filename>classHGetParametersResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>HGetParametersResponse</name>
      <anchorfile>classHGetParametersResponse.html</anchorfile>
      <anchor>a0a49f878425d69c92179436d9a878ead</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HGetParametersResponse</name>
      <anchorfile>classHGetParametersResponse.html</anchorfile>
      <anchor>a002e222c09ef0b55f06afd31d322af57</anchor>
      <arglist>(const HGetParametersResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HGetParametersResponse</name>
      <anchorfile>classHGetParametersResponse.html</anchorfile>
      <anchor>ae68fa4a8b6e542a093c9b38ea30d452e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HGetParametersResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classHGetParametersResponse.html</anchorfile>
      <anchor>a91910c2c67d1f18334df8f504a14049e</anchor>
      <arglist>(const HGetParametersResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HGetParametersResponse *</type>
      <name>dup</name>
      <anchorfile>classHGetParametersResponse.html</anchorfile>
      <anchor>a43a3af684920c53a3c353db236fefb71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classHGetParametersResponse.html</anchorfile>
      <anchor>a20e203562860d677ff5962e2ae0fb55b</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classHGetParametersResponse.html</anchorfile>
      <anchor>abbfe1ba6d2db4520942c72212e68d849</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCapacity</name>
      <anchorfile>classHGetParametersResponse.html</anchorfile>
      <anchor>af7b2e43e319cef3483cf9e1ee2d9acbf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCapacity</name>
      <anchorfile>classHGetParametersResponse.html</anchorfile>
      <anchor>ac4623640388c3cd8e5ffaf03654ab511</anchor>
      <arglist>(int capacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRescueCapacity</name>
      <anchorfile>classHGetParametersResponse.html</anchorfile>
      <anchor>a646adb380c205bd0b761a09cd7ccd2c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRescueCapacity</name>
      <anchorfile>classHGetParametersResponse.html</anchorfile>
      <anchor>a6186c6d0e789c5fb5d4543f75aa3a9e1</anchor>
      <arglist>(int rescueCapacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBandwidth</name>
      <anchorfile>classHGetParametersResponse.html</anchorfile>
      <anchor>a53514d3f206f38a5b78fc51da2c489e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBandwidth</name>
      <anchorfile>classHGetParametersResponse.html</anchorfile>
      <anchor>ace1f3d6b8b7f4049c29a54e535958c3d</anchor>
      <arglist>(double bandwidth)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classHGetParametersResponse.html</anchorfile>
      <anchor>a75a24fcee9a1c7a750de779d39d26295</anchor>
      <arglist>(const HGetParametersResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>capacity_var</name>
      <anchorfile>classHGetParametersResponse.html</anchorfile>
      <anchor>adac235aa701e08e1371ad8dbade8d5fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>rescueCapacity_var</name>
      <anchorfile>classHGetParametersResponse.html</anchorfile>
      <anchor>a7ff4f0b925889d6443772e4b221b9ad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bandwidth_var</name>
      <anchorfile>classHGetParametersResponse.html</anchorfile>
      <anchor>aea2570a1ed46515747ff38c1c2a6fc34</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classHGetParametersResponse.html</anchorfile>
      <anchor>aa3f3316dfb791a793e2c815e128fb7ab</anchor>
      <arglist>(const HGetParametersResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HJoinCall</name>
    <filename>classHJoinCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>HJoinCall</name>
      <anchorfile>classHJoinCall.html</anchorfile>
      <anchor>a6feb9860d1724fa6899e97118295d632</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HJoinCall</name>
      <anchorfile>classHJoinCall.html</anchorfile>
      <anchor>a377728bbdd872fe5069cade056b4a93f</anchor>
      <arglist>(const HJoinCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HJoinCall</name>
      <anchorfile>classHJoinCall.html</anchorfile>
      <anchor>ad596fe5da61c921baaf2a79c08ca283e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HJoinCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classHJoinCall.html</anchorfile>
      <anchor>ad105adb9784f6ff4476b77f09a509816</anchor>
      <arglist>(const HJoinCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HJoinCall *</type>
      <name>dup</name>
      <anchorfile>classHJoinCall.html</anchorfile>
      <anchor>aa3472abd9de47dab33603592d9d4fb22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classHJoinCall.html</anchorfile>
      <anchor>a2e95ddc7672cbbbd396d94c4705ff011</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classHJoinCall.html</anchorfile>
      <anchor>a0cb67645da07d3d39f5a27dcc451e002</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classHJoinCall.html</anchorfile>
      <anchor>a7b4da9cc828ed94811f28740bf0004e7</anchor>
      <arglist>(const HJoinCall &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classHJoinCall.html</anchorfile>
      <anchor>abc4089a81708e9298a134ebeef16cfcc</anchor>
      <arglist>(const HJoinCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HJoinResponse</name>
    <filename>classHJoinResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>HJoinResponse</name>
      <anchorfile>classHJoinResponse.html</anchorfile>
      <anchor>a424a5245804de9cb8a2cf2b36c0824d1</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HJoinResponse</name>
      <anchorfile>classHJoinResponse.html</anchorfile>
      <anchor>a7f2af7da7d7056fa967728474988f6b9</anchor>
      <arglist>(const HJoinResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HJoinResponse</name>
      <anchorfile>classHJoinResponse.html</anchorfile>
      <anchor>ae300bcd4e025b9a141dece3160b51eac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HJoinResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classHJoinResponse.html</anchorfile>
      <anchor>a4094d5f4a298e08b8e1ad68ed507ea45</anchor>
      <arglist>(const HJoinResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HJoinResponse *</type>
      <name>dup</name>
      <anchorfile>classHJoinResponse.html</anchorfile>
      <anchor>a5b327d6a65be29490ec4c495ab670919</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classHJoinResponse.html</anchorfile>
      <anchor>ad8b39eed40d32ef458bd8161fad84f95</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classHJoinResponse.html</anchorfile>
      <anchor>a8e6a5e7743903198b3a444594d2591f5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAncestorsArraySize</name>
      <anchorfile>classHJoinResponse.html</anchorfile>
      <anchor>a01a3b13a87fc8637fb48f0dd96603cbf</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getAncestorsArraySize</name>
      <anchorfile>classHJoinResponse.html</anchorfile>
      <anchor>ac6335e0173bf690674e8d2bd3f347e76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getAncestors</name>
      <anchorfile>classHJoinResponse.html</anchorfile>
      <anchor>a4e0e75ed2b4f63632ed222fe5608658a</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getAncestors</name>
      <anchorfile>classHJoinResponse.html</anchorfile>
      <anchor>a28e85be4d73064a130e8716b9ffffbd2</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAncestors</name>
      <anchorfile>classHJoinResponse.html</anchorfile>
      <anchor>ab549567feae57a398ed98552450ba242</anchor>
      <arglist>(unsigned int k, const NodeHandle &amp;ancestors)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getSuccessorNode</name>
      <anchorfile>classHJoinResponse.html</anchorfile>
      <anchor>a176b0fe8af01ed37a0e2739ac2f64a00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getSuccessorNode</name>
      <anchorfile>classHJoinResponse.html</anchorfile>
      <anchor>a23141d4fef2066ff4d1069c1f1ff59b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSuccessorNode</name>
      <anchorfile>classHJoinResponse.html</anchorfile>
      <anchor>acf0c2c88182cdd8a0fa5f1e1eeb92d96</anchor>
      <arglist>(const NodeHandle &amp;successorNode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getPredecessorNode</name>
      <anchorfile>classHJoinResponse.html</anchorfile>
      <anchor>a225a879c178d4ab0ab2f58da117b5d91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getPredecessorNode</name>
      <anchorfile>classHJoinResponse.html</anchorfile>
      <anchor>acd9284a65573aa10b948ba5e92927d7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPredecessorNode</name>
      <anchorfile>classHJoinResponse.html</anchorfile>
      <anchor>a9d1929385ab5d7879ca2ffda613711de</anchor>
      <arglist>(const NodeHandle &amp;predecessorNode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getJoined</name>
      <anchorfile>classHJoinResponse.html</anchorfile>
      <anchor>a14ccd4749c151b0bd122b0509cbf3f7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setJoined</name>
      <anchorfile>classHJoinResponse.html</anchorfile>
      <anchor>a84fec51b4a6c15d18c538dfbe6c1f7ee</anchor>
      <arglist>(int joined)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classHJoinResponse.html</anchorfile>
      <anchor>ace95ff7f06493b0904fa502655585d73</anchor>
      <arglist>(const HJoinResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle *</type>
      <name>ancestors_var</name>
      <anchorfile>classHJoinResponse.html</anchorfile>
      <anchor>a89cef31ded5c5ea356b909cf1cbb01bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>ancestors_arraysize</name>
      <anchorfile>classHJoinResponse.html</anchorfile>
      <anchor>aaf779e42e0a391d706206973d4654a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>successorNode_var</name>
      <anchorfile>classHJoinResponse.html</anchorfile>
      <anchor>a2c96ef3ad9c80f87460a3befdb8ecc5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>predecessorNode_var</name>
      <anchorfile>classHJoinResponse.html</anchorfile>
      <anchor>aed96d8bacd0610c0ece6526bf70f5b7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>joined_var</name>
      <anchorfile>classHJoinResponse.html</anchorfile>
      <anchor>a28f6f03b87f15be48435a50920e39c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classHJoinResponse.html</anchorfile>
      <anchor>a4a852460c4f1d9a5b2eb45fc5bacd330</anchor>
      <arglist>(const HJoinResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HLeaveOverlayCall</name>
    <filename>classHLeaveOverlayCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>HLeaveOverlayCall</name>
      <anchorfile>classHLeaveOverlayCall.html</anchorfile>
      <anchor>ae60e15d3a8e6d08483fd56943abe56a4</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HLeaveOverlayCall</name>
      <anchorfile>classHLeaveOverlayCall.html</anchorfile>
      <anchor>a4f1ed19d8b978a7bc6c849816e0d1d2e</anchor>
      <arglist>(const HLeaveOverlayCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HLeaveOverlayCall</name>
      <anchorfile>classHLeaveOverlayCall.html</anchorfile>
      <anchor>abb9e1f959c2749a1a4718dc06ab8a786</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HLeaveOverlayCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classHLeaveOverlayCall.html</anchorfile>
      <anchor>abecaf73685cdd59f567d7671c27bd722</anchor>
      <arglist>(const HLeaveOverlayCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HLeaveOverlayCall *</type>
      <name>dup</name>
      <anchorfile>classHLeaveOverlayCall.html</anchorfile>
      <anchor>a75032eb20f56fc3d0aa7316042a6beda</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classHLeaveOverlayCall.html</anchorfile>
      <anchor>a07b2fad44582666453f914554192d6be</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classHLeaveOverlayCall.html</anchorfile>
      <anchor>a6242e61b763f71e301c94a82c0cd2990</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classHLeaveOverlayCall.html</anchorfile>
      <anchor>a0bde4ae19e9afdee6ba95b43f4ae5773</anchor>
      <arglist>(const HLeaveOverlayCall &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classHLeaveOverlayCall.html</anchorfile>
      <anchor>affa8b90a350f073fd0c07a2624fa0c3e</anchor>
      <arglist>(const HLeaveOverlayCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HLeaveOverlayResponse</name>
    <filename>classHLeaveOverlayResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>HLeaveOverlayResponse</name>
      <anchorfile>classHLeaveOverlayResponse.html</anchorfile>
      <anchor>ad8b9652435b6a57cb6056501d917dc99</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HLeaveOverlayResponse</name>
      <anchorfile>classHLeaveOverlayResponse.html</anchorfile>
      <anchor>a11f33707c4da4fc51d358994975e2c25</anchor>
      <arglist>(const HLeaveOverlayResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HLeaveOverlayResponse</name>
      <anchorfile>classHLeaveOverlayResponse.html</anchorfile>
      <anchor>abb6674650cbff22464017c6d6be507bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HLeaveOverlayResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classHLeaveOverlayResponse.html</anchorfile>
      <anchor>a06dec9e46873c97aaafbe410b7ca4272</anchor>
      <arglist>(const HLeaveOverlayResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HLeaveOverlayResponse *</type>
      <name>dup</name>
      <anchorfile>classHLeaveOverlayResponse.html</anchorfile>
      <anchor>a7582dc287e2332645cf23c605913dd09</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classHLeaveOverlayResponse.html</anchorfile>
      <anchor>a314a696c9f962ae716dd00b2053e0976</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classHLeaveOverlayResponse.html</anchorfile>
      <anchor>a70ec5fe97d3c573a0fa55a12036e6a82</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPermissionGranted</name>
      <anchorfile>classHLeaveOverlayResponse.html</anchorfile>
      <anchor>a5748e8154dde1860f50fe50b2e97679c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPermissionGranted</name>
      <anchorfile>classHLeaveOverlayResponse.html</anchorfile>
      <anchor>a4cc65b977b76a82eb3785612b9431a88</anchor>
      <arglist>(int permissionGranted)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classHLeaveOverlayResponse.html</anchorfile>
      <anchor>ae9ba9b9c990901e6ec55e79af8c08718</anchor>
      <arglist>(const HLeaveOverlayResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>permissionGranted_var</name>
      <anchorfile>classHLeaveOverlayResponse.html</anchorfile>
      <anchor>a1ed307d22cd8f7e865def145b42a6dd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classHLeaveOverlayResponse.html</anchorfile>
      <anchor>af2b2e17542c18594626834fbef8febad</anchor>
      <arglist>(const HLeaveOverlayResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HMessage</name>
    <filename>classHMessage.html</filename>
    <member kind="function">
      <type></type>
      <name>HMessage</name>
      <anchorfile>classHMessage.html</anchorfile>
      <anchor>a723f32572d7c34f5265cc3a130eadf56</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HMessage</name>
      <anchorfile>classHMessage.html</anchorfile>
      <anchor>a563967165ac3633e18ee0cdf5ea6cb56</anchor>
      <arglist>(const HMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HMessage</name>
      <anchorfile>classHMessage.html</anchorfile>
      <anchor>ae6036045f51bd626b03a07547551c5c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classHMessage.html</anchorfile>
      <anchor>a8b8406e187c7f0a4d0813c15c32f8824</anchor>
      <arglist>(const HMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HMessage *</type>
      <name>dup</name>
      <anchorfile>classHMessage.html</anchorfile>
      <anchor>a109b686fa959661245d737d23f5d27ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classHMessage.html</anchorfile>
      <anchor>af47d08e24f32f548c55fd0a6f651c04d</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classHMessage.html</anchorfile>
      <anchor>ab3d479ebfb8aacd07d2b6c115ab6943b</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getType</name>
      <anchorfile>classHMessage.html</anchorfile>
      <anchor>a08c6ce76d600a70fa8b7a9198cfb0e63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchorfile>classHMessage.html</anchorfile>
      <anchor>acd5ab5b8a3df53f723ca957b65c1fbec</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransportAddress &amp;</type>
      <name>getSenderAddress</name>
      <anchorfile>classHMessage.html</anchorfile>
      <anchor>a55135faf1af3f6731065ec5df3a9edae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TransportAddress &amp;</type>
      <name>getSenderAddress</name>
      <anchorfile>classHMessage.html</anchorfile>
      <anchor>a563136d4c998039d8b6bac446067cd9d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSenderAddress</name>
      <anchorfile>classHMessage.html</anchorfile>
      <anchor>aa3e614512ae3ebd701f478a22c12be9d</anchor>
      <arglist>(const TransportAddress &amp;senderAddress)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNodeID</name>
      <anchorfile>classHMessage.html</anchorfile>
      <anchor>a84198c9977daffcb0511dba2f95557a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNodeID</name>
      <anchorfile>classHMessage.html</anchorfile>
      <anchor>a1e1455dd5ee74d0f2b005a45925abd87</anchor>
      <arglist>(int nodeID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getParentID</name>
      <anchorfile>classHMessage.html</anchorfile>
      <anchor>aa9671201bcc2bd93a96decc09216930d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParentID</name>
      <anchorfile>classHMessage.html</anchorfile>
      <anchor>a12a284cc8a4392108df92e8e197e44cc</anchor>
      <arglist>(int parentID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getOptionalParameter</name>
      <anchorfile>classHMessage.html</anchorfile>
      <anchor>a7444c88ca486bc45134775786c45ecfe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOptionalParameter</name>
      <anchorfile>classHMessage.html</anchorfile>
      <anchor>a2900d357e0c3fc413a7e5f5c8f4e0e44</anchor>
      <arglist>(int optionalParameter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAnyMessage</name>
      <anchorfile>classHMessage.html</anchorfile>
      <anchor>a48a98a68e7c8d919a38e484a7a681328</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAnyMessage</name>
      <anchorfile>classHMessage.html</anchorfile>
      <anchor>a9d907e01037876e15cd2389bff9fbe66</anchor>
      <arglist>(const char *anyMessage)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classHMessage.html</anchorfile>
      <anchor>a4bc5aed38feefd58b14a3b68249e2c33</anchor>
      <arglist>(const HMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>type_var</name>
      <anchorfile>classHMessage.html</anchorfile>
      <anchor>aa6de0360c93733427634873bc19c2ce9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress</type>
      <name>senderAddress_var</name>
      <anchorfile>classHMessage.html</anchorfile>
      <anchor>a404ab59af90adfd475b79eb3daddf0b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nodeID_var</name>
      <anchorfile>classHMessage.html</anchorfile>
      <anchor>a98fe8d2be132c4ff43ce68f11f282e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>parentID_var</name>
      <anchorfile>classHMessage.html</anchorfile>
      <anchor>a32f8544fb020b8560781638f5d364be3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>optionalParameter_var</name>
      <anchorfile>classHMessage.html</anchorfile>
      <anchor>a5daa6616ab517f62e123650e6652f0d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>anyMessage_var</name>
      <anchorfile>classHMessage.html</anchorfile>
      <anchor>a149082f2bec763c1272cfe1d270514bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classHMessage.html</anchorfile>
      <anchor>a9ee8a08b5a25ebcc84e7552188b2aff4</anchor>
      <arglist>(const HMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HNewParentSelectedCall</name>
    <filename>classHNewParentSelectedCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>HNewParentSelectedCall</name>
      <anchorfile>classHNewParentSelectedCall.html</anchorfile>
      <anchor>a6cd49618001166f096bf9cfc52421efc</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HNewParentSelectedCall</name>
      <anchorfile>classHNewParentSelectedCall.html</anchorfile>
      <anchor>a37e04ce29735df98245b1f7b4055238e</anchor>
      <arglist>(const HNewParentSelectedCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HNewParentSelectedCall</name>
      <anchorfile>classHNewParentSelectedCall.html</anchorfile>
      <anchor>a47ff03fdb9218fc5cdc0fff7c02e9b02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HNewParentSelectedCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classHNewParentSelectedCall.html</anchorfile>
      <anchor>a72c6a4c46496c896a65082767a78c2c2</anchor>
      <arglist>(const HNewParentSelectedCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HNewParentSelectedCall *</type>
      <name>dup</name>
      <anchorfile>classHNewParentSelectedCall.html</anchorfile>
      <anchor>a6c3e0474095d5a527ca91bd55b2fa188</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classHNewParentSelectedCall.html</anchorfile>
      <anchor>a71b4038be7bee938c7a61535255037bd</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classHNewParentSelectedCall.html</anchorfile>
      <anchor>aa3f8a08c55053a87e43e23838804d1dd</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getParent</name>
      <anchorfile>classHNewParentSelectedCall.html</anchorfile>
      <anchor>a3dc46ed1553c965320c40eacb84cb827</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getParent</name>
      <anchorfile>classHNewParentSelectedCall.html</anchorfile>
      <anchor>affb7f0ae3e2b31265ae2806632c1234e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParent</name>
      <anchorfile>classHNewParentSelectedCall.html</anchorfile>
      <anchor>ad611ada4b04c836ad03a13760de1a51d</anchor>
      <arglist>(const NodeHandle &amp;parent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classHNewParentSelectedCall.html</anchorfile>
      <anchor>a94cff6fa70dbfff7e03ed21c79330cff</anchor>
      <arglist>(const HNewParentSelectedCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>parent_var</name>
      <anchorfile>classHNewParentSelectedCall.html</anchorfile>
      <anchor>a90f9d7b69a37c9a4a64b9ea62d9a91bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classHNewParentSelectedCall.html</anchorfile>
      <anchor>a6e18eea69c21ada95ac900ce7ac9cccc</anchor>
      <arglist>(const HNewParentSelectedCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HNode</name>
    <filename>classHNode.html</filename>
    <member kind="function">
      <type></type>
      <name>HNode</name>
      <anchorfile>classHNode.html</anchorfile>
      <anchor>a6c6dc38bd0c0ce6bb02fba6045c012a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HNode</name>
      <anchorfile>classHNode.html</anchorfile>
      <anchor>a697071f3f92740a7b800b4ffc7f8b660</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HNode</name>
      <anchorfile>classHNode.html</anchorfile>
      <anchor>a409f2f9dbacadd262a94578d765f3c90</anchor>
      <arglist>(const HNode &amp;node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HNode</name>
      <anchorfile>classHNode.html</anchorfile>
      <anchor>a2cafad6678ff8506f94a9230e41ec47d</anchor>
      <arglist>(const OverlayKey &amp;key, const IPvXAddress &amp;ip, int port)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HNode</name>
      <anchorfile>classHNode.html</anchorfile>
      <anchor>af3c117587843de0fbb3b0519725616ce</anchor>
      <arglist>(const TransportAddress &amp;ta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HNode</name>
      <anchorfile>classHNode.html</anchorfile>
      <anchor>aa624c9fc9fa5f584ecf045e845192409</anchor>
      <arglist>(const OverlayKey &amp;key, const TransportAddress &amp;ta)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classHNode.html</anchorfile>
      <anchor>ab09ad11a189c63e71006e04ab037f133</anchor>
      <arglist>(const HNode &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classHNode.html</anchorfile>
      <anchor>aee8a57438e2f863fd133595fb3d6ef41</anchor>
      <arglist>(const HNode &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classHNode.html</anchorfile>
      <anchor>aacc025285d3defe57dde7c5e12c35f8b</anchor>
      <arglist>(const HNode &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classHNode.html</anchorfile>
      <anchor>aa018bfdfb3823267a7529e2f0f13d44e</anchor>
      <arglist>(const HNode &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classHNode.html</anchorfile>
      <anchor>a7e145fe7272d4d414b1abbaaf389491b</anchor>
      <arglist>(const HNode &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classHNode.html</anchorfile>
      <anchor>a3d576fe00dd730f5b5de3b093dfd0bf5</anchor>
      <arglist>(const HNode &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>HNode &amp;</type>
      <name>operator=</name>
      <anchorfile>classHNode.html</anchorfile>
      <anchor>a26a8b05b19a057e514027d0bd2ce7a50</anchor>
      <arglist>(const HNode &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const OverlayKey</type>
      <name>getKey</name>
      <anchorfile>classHNode.html</anchorfile>
      <anchor>a354174fab8501d19941af01ea5bcac9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NodeHandle</type>
      <name>getHandle</name>
      <anchorfile>classHNode.html</anchorfile>
      <anchor>ac7621c8504c3f78c131a43c1da912e50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NodeVector</type>
      <name>getNodeVector</name>
      <anchorfile>classHNode.html</anchorfile>
      <anchor>a94f7979fc09f1758dd6da4acce297832</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHandle</name>
      <anchorfile>classHNode.html</anchorfile>
      <anchor>a9d38540dcb6c9873461724f16fb92237</anchor>
      <arglist>(NodeHandle handle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodeVector</name>
      <anchorfile>classHNode.html</anchorfile>
      <anchor>a2676a10333df141fbf516f60475f7ddb</anchor>
      <arglist>(NodeVector nvector)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnspecified</name>
      <anchorfile>classHNode.html</anchorfile>
      <anchor>a135c965113e654c9923607f1959ffbba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchorfile>classHNode.html</anchorfile>
      <anchor>a5551df9ebe0bf4ef780c2c1696dc239e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchorfile>classHNode.html</anchorfile>
      <anchor>aad2da819659eaa8a7311d6eeb6e14a43</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransportAddress *</type>
      <name>dup</name>
      <anchorfile>classHNode.html</anchorfile>
      <anchor>a9da47cda76fed1009d94bbb7e6ce8c6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const HNode</type>
      <name>unspecifiedNode</name>
      <anchorfile>classHNode.html</anchorfile>
      <anchor>a3656242bdd2eee9df2f6a5f5f76bd010</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>handle</name>
      <anchorfile>classHNode.html</anchorfile>
      <anchor>a53045255a0753d4b7e723a8201616981</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeVector</type>
      <name>children</name>
      <anchorfile>classHNode.html</anchorfile>
      <anchor>a05320a3b10582fd310dfeac0bcef55b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>assertUnspecified</name>
      <anchorfile>classHNode.html</anchorfile>
      <anchor>a87a21c345a6cfe545c31823d390ceed3</anchor>
      <arglist>(const HNode &amp;node) const </arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classHNode.html</anchorfile>
      <anchor>a31910a6d682e06b2365a23960ff909fa</anchor>
      <arglist>(std::ostream &amp;os, const HNode &amp;n)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>HNodeReplacement</name>
    <filename>structHNodeReplacement.html</filename>
    <member kind="variable">
      <type>std::map&lt; OverlayKey, int &gt;</type>
      <name>queryNodesSelectionAlgo</name>
      <anchorfile>structHNodeReplacement.html</anchorfile>
      <anchor>afe8e712e1c43ffa85394729032bfbd48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>responseRequired</name>
      <anchorfile>structHNodeReplacement.html</anchorfile>
      <anchor>a0d628e22914962fc03037dfd38e8c02f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NodeHandle</type>
      <name>node</name>
      <anchorfile>structHNodeReplacement.html</anchorfile>
      <anchor>a13b720a646a42631521c149293a9402f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HLeaveOverlayCall *</type>
      <name>mrpc</name>
      <anchorfile>structHNodeReplacement.html</anchorfile>
      <anchor>a23d7d33450725c05d5c18a92e95ad25d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hotspotRoaming</name>
    <filename>classhotspotRoaming.html</filename>
    <base>MovementGenerator</base>
    <class kind="struct">hotspotRoaming::Hotspot</class>
    <member kind="function">
      <type></type>
      <name>hotspotRoaming</name>
      <anchorfile>classhotspotRoaming.html</anchorfile>
      <anchor>a15a7e8f9c70e7f229a78b3b204a252ed</anchor>
      <arglist>(double areaDimension, double speed, NeighborMap *Neighbors, GlobalCoordinator *coordinator, CollisionList *CollisionRect)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDistanceFromHotspot</name>
      <anchorfile>classhotspotRoaming.html</anchorfile>
      <anchor>a5135e5f1b04df7ce3b99a38d3cd7b03e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~hotspotRoaming</name>
      <anchorfile>classhotspotRoaming.html</anchorfile>
      <anchor>a4e92622070f3b16b2edf3568c7d7286e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>classhotspotRoaming.html</anchorfile>
      <anchor>a124ff40fa9be0c6c2b83fe21ed760528</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Hotspot &gt;</type>
      <name>hotspots</name>
      <anchorfile>classhotspotRoaming.html</anchorfile>
      <anchor>a01cfff2117117a90ee5e4815fd6e3dbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Hotspot &gt;::iterator</type>
      <name>curHotspot</name>
      <anchorfile>classhotspotRoaming.html</anchorfile>
      <anchor>a0b081ad8f7b3b0082cba220eb5bd069d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>hotspotStayTime</name>
      <anchorfile>classhotspotRoaming.html</anchorfile>
      <anchor>a743b5a07f06209b7b092dc31cbb6d00c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>stayInHotspot</name>
      <anchorfile>classhotspotRoaming.html</anchorfile>
      <anchor>a3d6d35713b40db0bb945f51296fad2e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hotspotRoaming::Hotspot</name>
    <filename>structhotspotRoaming_1_1Hotspot.html</filename>
    <member kind="variable">
      <type>Vector2D</type>
      <name>center</name>
      <anchorfile>structhotspotRoaming_1_1Hotspot.html</anchorfile>
      <anchor>ae3404819ed15da35f9c3100121593f4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>radius</name>
      <anchorfile>structhotspotRoaming_1_1Hotspot.html</anchorfile>
      <anchor>aae345bbff362cb9f51028a01e6f5cecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>probability</name>
      <anchorfile>structhotspotRoaming_1_1Hotspot.html</anchorfile>
      <anchor>a789bd67e718abd3b17c40fc25085aba1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HResponsibilityAsParentCall</name>
    <filename>classHResponsibilityAsParentCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>HResponsibilityAsParentCall</name>
      <anchorfile>classHResponsibilityAsParentCall.html</anchorfile>
      <anchor>a3f56163a86483ce2c23e51ae89f33eaa</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HResponsibilityAsParentCall</name>
      <anchorfile>classHResponsibilityAsParentCall.html</anchorfile>
      <anchor>a0aed098ed3bbeea112aed424d9efe244</anchor>
      <arglist>(const HResponsibilityAsParentCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HResponsibilityAsParentCall</name>
      <anchorfile>classHResponsibilityAsParentCall.html</anchorfile>
      <anchor>af45bd2f7de7c82b2530c497c4f51af01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HResponsibilityAsParentCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classHResponsibilityAsParentCall.html</anchorfile>
      <anchor>aee1588c69aaf2d12381a369dd26dad99</anchor>
      <arglist>(const HResponsibilityAsParentCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HResponsibilityAsParentCall *</type>
      <name>dup</name>
      <anchorfile>classHResponsibilityAsParentCall.html</anchorfile>
      <anchor>ab8f47b4f8f387433fc81b6217f037c7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classHResponsibilityAsParentCall.html</anchorfile>
      <anchor>a8a2de7db47157fae344c4d89f03cf105</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classHResponsibilityAsParentCall.html</anchorfile>
      <anchor>af0949032af2a79da6699eaf751e9aca4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getParent</name>
      <anchorfile>classHResponsibilityAsParentCall.html</anchorfile>
      <anchor>a1a01577971837756760a58d0c35832dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getParent</name>
      <anchorfile>classHResponsibilityAsParentCall.html</anchorfile>
      <anchor>a13d5ed705a56d59bc2d645128399255a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParent</name>
      <anchorfile>classHResponsibilityAsParentCall.html</anchorfile>
      <anchor>a84ecdc04ca1b8d5a5a03be4b704d4ba2</anchor>
      <arglist>(const NodeHandle &amp;parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChildrenArraySize</name>
      <anchorfile>classHResponsibilityAsParentCall.html</anchorfile>
      <anchor>a2d318a1645d8809cf179966765abf92c</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getChildrenArraySize</name>
      <anchorfile>classHResponsibilityAsParentCall.html</anchorfile>
      <anchor>aea2f5193f8a531c6730356cd540524fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getChildren</name>
      <anchorfile>classHResponsibilityAsParentCall.html</anchorfile>
      <anchor>aa04c718ccab2718f9eb8f6bff20f94fd</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getChildren</name>
      <anchorfile>classHResponsibilityAsParentCall.html</anchorfile>
      <anchor>a4d57f52090dd8e7160ac34f837a949ac</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChildren</name>
      <anchorfile>classHResponsibilityAsParentCall.html</anchorfile>
      <anchor>a4f78a6ffaba3d73e836b8b900f817acb</anchor>
      <arglist>(unsigned int k, const NodeHandle &amp;children)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classHResponsibilityAsParentCall.html</anchorfile>
      <anchor>a81f5c3f30e323e12df56c7d3f3d227a1</anchor>
      <arglist>(const HResponsibilityAsParentCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>parent_var</name>
      <anchorfile>classHResponsibilityAsParentCall.html</anchorfile>
      <anchor>aeccd3ab8f85de63fa7d3dfc12e04998d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle *</type>
      <name>children_var</name>
      <anchorfile>classHResponsibilityAsParentCall.html</anchorfile>
      <anchor>abb9c9ea363bb11664ff23cd7bb18fdf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>children_arraysize</name>
      <anchorfile>classHResponsibilityAsParentCall.html</anchorfile>
      <anchor>ac62897251c8ff9f1399052d39add1766</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classHResponsibilityAsParentCall.html</anchorfile>
      <anchor>abfee785b75073037dac105bd7f26d6b8</anchor>
      <arglist>(const HResponsibilityAsParentCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HScheduleSegmentsCall</name>
    <filename>classHScheduleSegmentsCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>HScheduleSegmentsCall</name>
      <anchorfile>classHScheduleSegmentsCall.html</anchorfile>
      <anchor>a484600611ca5b0e6d7ca9928dabb7d5f</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HScheduleSegmentsCall</name>
      <anchorfile>classHScheduleSegmentsCall.html</anchorfile>
      <anchor>acfeb99b637761266746dec0db52ef3fa</anchor>
      <arglist>(const HScheduleSegmentsCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HScheduleSegmentsCall</name>
      <anchorfile>classHScheduleSegmentsCall.html</anchorfile>
      <anchor>a56f0a22671f013b6084fc4f4252d574b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HScheduleSegmentsCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classHScheduleSegmentsCall.html</anchorfile>
      <anchor>ab5989a72793abeb65f58b65819cd2741</anchor>
      <arglist>(const HScheduleSegmentsCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HScheduleSegmentsCall *</type>
      <name>dup</name>
      <anchorfile>classHScheduleSegmentsCall.html</anchorfile>
      <anchor>a2e3f35c57d27b6c3dc97d575d57453b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classHScheduleSegmentsCall.html</anchorfile>
      <anchor>ae928ac5d4fca8220c160d6c362f09dc3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classHScheduleSegmentsCall.html</anchorfile>
      <anchor>ad40d8dc66bdec84238b4990edbbf1337</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getStartSegmentID</name>
      <anchorfile>classHScheduleSegmentsCall.html</anchorfile>
      <anchor>a0b0060d0225b416d73c7b1b0caff44b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStartSegmentID</name>
      <anchorfile>classHScheduleSegmentsCall.html</anchorfile>
      <anchor>a22615318b6a82984e6b42589bccc333d</anchor>
      <arglist>(int startSegmentID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCount</name>
      <anchorfile>classHScheduleSegmentsCall.html</anchorfile>
      <anchor>a68426e59a67999edd10f649f07d9cf0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCount</name>
      <anchorfile>classHScheduleSegmentsCall.html</anchorfile>
      <anchor>ad221a845a22f77cc200b430ac4b3d049</anchor>
      <arglist>(int count)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classHScheduleSegmentsCall.html</anchorfile>
      <anchor>a685698cb2976de3b677d7ea1f264c674</anchor>
      <arglist>(const HScheduleSegmentsCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>startSegmentID_var</name>
      <anchorfile>classHScheduleSegmentsCall.html</anchorfile>
      <anchor>a996fbafc6f7aac7958f9f73256b20da8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>count_var</name>
      <anchorfile>classHScheduleSegmentsCall.html</anchorfile>
      <anchor>ae8017afd193350f3c979c80b1830786f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classHScheduleSegmentsCall.html</anchorfile>
      <anchor>a0938ab8895b3c68042269058aa0b53b0</anchor>
      <arglist>(const HScheduleSegmentsCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HScheduleSegmentsResponse</name>
    <filename>classHScheduleSegmentsResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>HScheduleSegmentsResponse</name>
      <anchorfile>classHScheduleSegmentsResponse.html</anchorfile>
      <anchor>a4beea9bbb217bb670edb013fa9a93da1</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HScheduleSegmentsResponse</name>
      <anchorfile>classHScheduleSegmentsResponse.html</anchorfile>
      <anchor>ae3d81586f644e67b42fc8ebf0c3af92d</anchor>
      <arglist>(const HScheduleSegmentsResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HScheduleSegmentsResponse</name>
      <anchorfile>classHScheduleSegmentsResponse.html</anchorfile>
      <anchor>a7297422b97baba8876ca1b4aeef9780c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HScheduleSegmentsResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classHScheduleSegmentsResponse.html</anchorfile>
      <anchor>af005c195790882734707219a2ec42e93</anchor>
      <arglist>(const HScheduleSegmentsResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HScheduleSegmentsResponse *</type>
      <name>dup</name>
      <anchorfile>classHScheduleSegmentsResponse.html</anchorfile>
      <anchor>a60aa21aca5930469a546ad0d25875cd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classHScheduleSegmentsResponse.html</anchorfile>
      <anchor>a744c0b7989b32be2ae07f3ccb6673859</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classHScheduleSegmentsResponse.html</anchorfile>
      <anchor>a2517108c3c15d2cae0f09860a5ebfb83</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSegmentsArraySize</name>
      <anchorfile>classHScheduleSegmentsResponse.html</anchorfile>
      <anchor>a85ee9ce32d852a038490df9270ed5023</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSegmentsArraySize</name>
      <anchorfile>classHScheduleSegmentsResponse.html</anchorfile>
      <anchor>a76dffc16fea2fa9637123c74c28e7a47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HVideoSegment &amp;</type>
      <name>getSegments</name>
      <anchorfile>classHScheduleSegmentsResponse.html</anchorfile>
      <anchor>a8aa2f01a7120d70a2a04a0569806ec9f</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const HVideoSegment &amp;</type>
      <name>getSegments</name>
      <anchorfile>classHScheduleSegmentsResponse.html</anchorfile>
      <anchor>a5b1cc75184cd590090f1fca344bea6a4</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSegments</name>
      <anchorfile>classHScheduleSegmentsResponse.html</anchorfile>
      <anchor>ad958a914de05b70f8229bc46e7b56378</anchor>
      <arglist>(unsigned int k, const HVideoSegment &amp;segments)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classHScheduleSegmentsResponse.html</anchorfile>
      <anchor>a09fe511f08215595a2ca109919ebc193</anchor>
      <arglist>(const HScheduleSegmentsResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HVideoSegment *</type>
      <name>segments_var</name>
      <anchorfile>classHScheduleSegmentsResponse.html</anchorfile>
      <anchor>aee9162193a3447d8920fe575959ceabd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>segments_arraysize</name>
      <anchorfile>classHScheduleSegmentsResponse.html</anchorfile>
      <anchor>aa9a7e7a589d8585d34f56e427cae211f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classHScheduleSegmentsResponse.html</anchorfile>
      <anchor>a10b588ff69c55f5ca7a053013915fc97</anchor>
      <arglist>(const HScheduleSegmentsResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HSelectParentCall</name>
    <filename>classHSelectParentCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>HSelectParentCall</name>
      <anchorfile>classHSelectParentCall.html</anchorfile>
      <anchor>a8816ac99d2acff2d571cd517dd362151</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HSelectParentCall</name>
      <anchorfile>classHSelectParentCall.html</anchorfile>
      <anchor>ad8b4a001920f45c93829f31e79366909</anchor>
      <arglist>(const HSelectParentCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HSelectParentCall</name>
      <anchorfile>classHSelectParentCall.html</anchorfile>
      <anchor>aca8c09aec23b0e56f985fe346a9df727</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HSelectParentCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classHSelectParentCall.html</anchorfile>
      <anchor>a4781e4c8691d42654919d6c45b8f0b38</anchor>
      <arglist>(const HSelectParentCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HSelectParentCall *</type>
      <name>dup</name>
      <anchorfile>classHSelectParentCall.html</anchorfile>
      <anchor>a4c5d1ffaa048a685cd206217e4a7192a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classHSelectParentCall.html</anchorfile>
      <anchor>a00a2afcd1526d1927ff7b02e3149c22a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classHSelectParentCall.html</anchorfile>
      <anchor>a0025aab06cfa146bdd02371440d74a23</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getKey</name>
      <anchorfile>classHSelectParentCall.html</anchorfile>
      <anchor>a5985ead22ceb7518bf3c2c25810ae5fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getKey</name>
      <anchorfile>classHSelectParentCall.html</anchorfile>
      <anchor>a52aedcf2215e37104e01fd69af5af229</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKey</name>
      <anchorfile>classHSelectParentCall.html</anchorfile>
      <anchor>ade1e3aef8daafc7053b796fc658d7fff</anchor>
      <arglist>(const OverlayKey &amp;key)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classHSelectParentCall.html</anchorfile>
      <anchor>a9c2c7d854eb1bc7d35467b1d3d66ce26</anchor>
      <arglist>(const HSelectParentCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>key_var</name>
      <anchorfile>classHSelectParentCall.html</anchorfile>
      <anchor>aaecaf71de51660ce07b59c71a89022e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classHSelectParentCall.html</anchorfile>
      <anchor>ab861e2cfda535c41088ab184b7ec27ab</anchor>
      <arglist>(const HSelectParentCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HSelectParentResponse</name>
    <filename>classHSelectParentResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>HSelectParentResponse</name>
      <anchorfile>classHSelectParentResponse.html</anchorfile>
      <anchor>a1a1fde2ce69a4b222459aac5a2433e08</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HSelectParentResponse</name>
      <anchorfile>classHSelectParentResponse.html</anchorfile>
      <anchor>ad703af24cfcf0351083eade09541c312</anchor>
      <arglist>(const HSelectParentResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HSelectParentResponse</name>
      <anchorfile>classHSelectParentResponse.html</anchorfile>
      <anchor>a42a6b23a237da851f5004e011b98c2ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HSelectParentResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classHSelectParentResponse.html</anchorfile>
      <anchor>aef165fe55a8a1a41454a9809746514b7</anchor>
      <arglist>(const HSelectParentResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HSelectParentResponse *</type>
      <name>dup</name>
      <anchorfile>classHSelectParentResponse.html</anchorfile>
      <anchor>a9ed28502c44782f2b5ff9841638a333f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classHSelectParentResponse.html</anchorfile>
      <anchor>a03d86c79188bda9841807729ebcdb22b</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classHSelectParentResponse.html</anchorfile>
      <anchor>a18e068773adc17dff1a6851734dc22e4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getRespondingNode</name>
      <anchorfile>classHSelectParentResponse.html</anchorfile>
      <anchor>adb7c57f7df304f7b875836e6d067a1aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getRespondingNode</name>
      <anchorfile>classHSelectParentResponse.html</anchorfile>
      <anchor>aa11d5e5598e62a08395e07bbe23f46a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRespondingNode</name>
      <anchorfile>classHSelectParentResponse.html</anchorfile>
      <anchor>a282c0aad50413d551e7a803788f163bc</anchor>
      <arglist>(const NodeHandle &amp;respondingNode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classHSelectParentResponse.html</anchorfile>
      <anchor>a7f76b064caaeeff8622469a8c616d234</anchor>
      <arglist>(const HSelectParentResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>respondingNode_var</name>
      <anchorfile>classHSelectParentResponse.html</anchorfile>
      <anchor>a9ac766036b1a488d8a61ebee33be0635</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classHSelectParentResponse.html</anchorfile>
      <anchor>a6a2915382574ff749651322031ab853d</anchor>
      <arglist>(const HSelectParentResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HStreaming</name>
    <filename>classHStreaming.html</filename>
    <base>BaseApp</base>
    <member kind="function">
      <type></type>
      <name>HStreaming</name>
      <anchorfile>classHStreaming.html</anchorfile>
      <anchor>aa9965119f4bea258d20fba628b9b339a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HStreaming</name>
      <anchorfile>classHStreaming.html</anchorfile>
      <anchor>a8312e785a1995fcaa87ba4a22be3547f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initializeApp</name>
      <anchorfile>classHStreaming.html</anchorfile>
      <anchor>a2f9f127946c0a26bfd6f38d9962e1743</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finishApp</name>
      <anchorfile>classHStreaming.html</anchorfile>
      <anchor>a9d57a2aa275e15cf75c7d2b074d99148</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classHStreaming.html</anchorfile>
      <anchor>a3b131aea23e3de1350ebe84fa683a6a5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleReadyMessage</name>
      <anchorfile>classHStreaming.html</anchorfile>
      <anchor>a7c11dccd6487ff7989eb63ba975e1e79</anchor>
      <arglist>(CompReadyMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>sendPeriod</name>
      <anchorfile>classHStreaming.html</anchorfile>
      <anchor>a1dea8249f58980b87dd9456832eef9d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>timerMsg</name>
      <anchorfile>classHStreaming.html</anchorfile>
      <anchor>a0a7a9bc082fa6e8b68daa63e0ec053cd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HSwitchToRescueModeCall</name>
    <filename>classHSwitchToRescueModeCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>HSwitchToRescueModeCall</name>
      <anchorfile>classHSwitchToRescueModeCall.html</anchorfile>
      <anchor>a474ba09e64e95298298248e7c5a41eb8</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HSwitchToRescueModeCall</name>
      <anchorfile>classHSwitchToRescueModeCall.html</anchorfile>
      <anchor>a1c263d70d6b02e0c8bb62f9e055c033c</anchor>
      <arglist>(const HSwitchToRescueModeCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HSwitchToRescueModeCall</name>
      <anchorfile>classHSwitchToRescueModeCall.html</anchorfile>
      <anchor>a019a3a122a49c6652d3ea36850c3b5b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HSwitchToRescueModeCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classHSwitchToRescueModeCall.html</anchorfile>
      <anchor>aedabf1607857ab069de09870eaa7f611</anchor>
      <arglist>(const HSwitchToRescueModeCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HSwitchToRescueModeCall *</type>
      <name>dup</name>
      <anchorfile>classHSwitchToRescueModeCall.html</anchorfile>
      <anchor>a121d935b5e97cbb6bd6ab5a77ba934e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classHSwitchToRescueModeCall.html</anchorfile>
      <anchor>a62e0bc4b1d4a05df32d889d137b1f6f9</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classHSwitchToRescueModeCall.html</anchorfile>
      <anchor>a8f97e333dcdd6a9b331fa1a52a1576c1</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classHSwitchToRescueModeCall.html</anchorfile>
      <anchor>aaa6a03bec7baf9195402cef38afecf6d</anchor>
      <arglist>(const HSwitchToRescueModeCall &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classHSwitchToRescueModeCall.html</anchorfile>
      <anchor>ac1841fe29512254811f700e10377f2f5</anchor>
      <arglist>(const HSwitchToRescueModeCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HTopology</name>
    <filename>classHTopology.html</filename>
    <base>BaseOverlay</base>
    <member kind="function">
      <type></type>
      <name>~HTopology</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a90509c543fc2e4d5520feb12b12dffdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSource</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a2a9305e9079197326723525cd062dcf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeOverlay</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>aaad9a9131f9010c061a1702bfed93dd2</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOwnNodeID</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>ac14e862eb6abf6d84ffdbc3d79ec6aaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>joinOverlay</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a7b3d69b96b06c7dc01839406aacd13af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finishOverlay</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>aa1d359fa9f4ee3a8f43b1e55b8dbe5c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>capacity</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a3bde1b063fe4957287983628ff8357b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rescueCapacity</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a46172515574ed15aa3084af7de04d490</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleJoinTimerExpired</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>ae608980efd343cbd021110348ca86981</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scheduleTimer</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>abc2ae11d706307bb9a276088807fab35</anchor>
      <arglist>(cMessage *timer, double rate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a840e3f0f71ff56e9e66d95f705aa0de9</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function">
      <type>NodeVector *</type>
      <name>findNode</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a476f055a94b0a4e90b13b0b7793a7098</anchor>
      <arglist>(const OverlayKey &amp;key, int numRedundantNodes, int numSiblings, BaseOverlayMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSiblingFor</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a0370eaefcfeb3b6699ebf6e27791e55a</anchor>
      <arglist>(const NodeHandle &amp;node, const OverlayKey &amp;key, int numSiblings, bool *err)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxNumSiblings</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>ab518e13e448e6cdc3d613831cab095d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxNumRedundantNodes</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>af464a88cefc8c6a7c4b23a9864f0da26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleRpcCall</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a36a733934b955ececf3148ce124707e2</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleRpcResponse</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a1d5852e0ede70783e47393e43d4efdd6</anchor>
      <arglist>(BaseResponseMessage *msg, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleRpcTimeout</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>aa1f5692e6fcc3aadbefd2d63e25309d9</anchor>
      <arglist>(BaseCallMessage *msg, const TransportAddress &amp;dest, cPolymorphic *context, int rpcId, const OverlayKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParametersForSelectionAlgo</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a1e35dba701c025e2c4fa58fb9e8cee1a</anchor>
      <arglist>(const OverlayKey &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>goAheadWithRestSelectionProcess</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>af4555cc3c40ae466c5ba86b9985e3fc7</anchor>
      <arglist>(const OverlayKey &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>selectRescueParent</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>aa93c46403acecc211e1ffe7f0ffddccf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addAsRescueChild</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a61b7caed899250f11a43f686306d869d</anchor>
      <arglist>(const NodeHandle &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeRescueChild</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a87184c50ba442b37166db5ac8639dc01</anchor>
      <arglist>(const NodeHandle &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rankRescueNodes</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a0122e767d85586122cf148b9fcaa0cc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scheduleDeadlineSegments</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a0cd5ca20cb2c0fd51f0a52953a15a549</anchor>
      <arglist>(int startSegmentID, int count, int perNode)</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; NodeHandle &gt;</type>
      <name>getRankedRescueNodes</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>aea037e54c882c8e76444171dc029c652</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>optimizeTree</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a0def7ad3e787ed45be65d31d216e3201</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateResourceAllocationPolicy</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>add3d6e40112c47e079f54f25c4b911bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nodeID</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a4f648f236ba989d4cbe8b797a3288089</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>modeOfOperation</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a3aacc68e713d3b466f3d840c09f9226f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TransportAddress</type>
      <name>bootstrapNode</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a1ec772c08ccae2367addf0247c9bc79a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HNode</type>
      <name>parent</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a24f80eb2cf90f3965b3c722fc2e0d5dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HNode</type>
      <name>grandParent</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a6e62b88587883052b3459376db3d431b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HNode</type>
      <name>successorNode</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>abbf8e1733b880972ff1912502a797131</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HNode</type>
      <name>predecessorNode</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a56da85f4a6c22d0a54109e878bd43485</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KeyToNodeMap</type>
      <name>children</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a7222864f5de68bda072b1a6c4fdd1c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KeyToNodeMap</type>
      <name>rescueChildren</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a9ea246057e92c3c600e1fdb39c971f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KeyToRescueNodeMap</type>
      <name>nodesOneUp</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a145a641e8f80e5f93ba1da757cb56b99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KeyToRescueNodeMap</type>
      <name>ancestors</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>ac47702056c6e52a2baef28d5e98777f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a0ec65aba155405242e1d0aeb400a7090</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateTooltip</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a84f73caa68031c9bc9388f825b5567c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>changeState</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a7e67e8c9cc14866b8a1ead415889662b</anchor>
      <arglist>(int state)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>NodeHandle</type>
      <name>getNodeHandle</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a32a59aff214545940579ed558edcab85</anchor>
      <arglist>(MapIterator iter, MapIterator end)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>HVideoSegment</type>
      <name>generateVideoSegment</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a93c9c2b4ddf023cc3bccd80bf041a8b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleVideoSegment</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a9eadc34c72ee67cd89b448f526e5121f</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>sendSegmentToChildren</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a52ce17031bd66e01273a61a9d973f2c0</anchor>
      <arglist>(HVideoSegmentCall *videoCall)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handlePacketGenerationTimer</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a3f6b5de1f51b73df0a2ce5e417806d73</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleRescueParametersEstimationTimer</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>af488424d856945ad5519b5067a590111</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleJoinCall</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>ac000cb4815487979524131e3bebdc8f9</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleLeaveCall</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>ae9a27d3429d9aff97d2fc7890d9b8f0e</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleNewParentSelectedCall</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>aed401af7ecab83253f9933ce4f171e05</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleResponsibilityAsParentCall</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a9d2f6137c8992bf0c87d277ee6d1c3dc</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>addSegmentToCache</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a63df593b0a3bca022e53f3cdbaf8e78e</anchor>
      <arglist>(HVideoSegment &amp;videoSegment)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleScheduleSegmentsCall</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>ad4a9e2f78f495ad82ffb6f155c2fe59f</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleScheduleSegmentsResponse</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>aa538614064325523878fe81ed4097918</anchor>
      <arglist>(BaseResponseMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleCapacityResponse</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a93957f798c696f27945118702de0aec1</anchor>
      <arglist>(BaseResponseMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>selectReplacement</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>acda074ca9985f1fb1f1aff33f76a3b7e</anchor>
      <arglist>(const NodeHandle &amp;node, HLeaveOverlayCall *mrpc)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleSwitchToRescueModeCall</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a8a54f1171dfa3759dea18014b22002db</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleGetParametersCall</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a230a77db07368e87223867ba7e39d58f</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleGetParametersResponse</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a6b7430fadbf912993c117b35c48a448d</anchor>
      <arglist>(BaseResponseMessage *msg, simtime_t rtt)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>sendChildren</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a36339fa94c3841774b062a67ca7a759d</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initializeNodesOneUp</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a725504fdf8614938b4ce15d6e01a957b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setNodesOneUp</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a4f68d41d4575f4d617fdd2550a2ecbcd</anchor>
      <arglist>(BaseResponseMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; OverlayKey, HNodeReplacement &gt;</type>
      <name>leaveRequests</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a59afd663ad8f9ddfd33eb057fc51747a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>parametersResponseReceived</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a3403c0efb6a77fb5fa72ce3d506ef767</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>parametersResponseRequired</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a8b363cd8b3c476e7e6188139b3994d2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>initializedRescueRanks</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a96a5b2076c1cc5c9b11260e4ae5e7415</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>noOfChildren</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a4cfe6fd2410c93104e2085940d234284</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxChildren</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a5043e6c13fc33c1f2100794233bfed93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxRescueChildren</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a4615a56d11dd6c85ee69de45c950625b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>bandwidth</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>af043d119f73788a4bbb021b606e483fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; HVideoSegment &gt;</type>
      <name>cache</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a9c2c502f2f91d3343dfe7bdce53d7f8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>cachePointer</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a54cccf3e71b49c7671f29e700e9556d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>segmentID</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>ad2f478a6f3af546d4172f709efab3048</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>bufferMapSize</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a265a37198ff6e12e5fbc4957851157b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>joinRetry</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a9714ab241d4225d2e572e620c03ab92f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isSource</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a4e771d0dbf55654b1e8248e6a8d0d04f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>join_timer</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a60afcf0fa53e8757ca088315bbf91a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>packetGenTimer</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a00406d8e7437ca5a7811bb1122b5a982</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>rescueParametersTimer</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a06542df27576d72117363b3a8e3d1735</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>joinDelay</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>a1d9b7dc30ae10e4f878dc40a52d1d974</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>packetGenRate</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>aac8cf230c40573c6de063d28211b348b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>rescueParameterEstimationRate</name>
      <anchorfile>classHTopology.html</anchorfile>
      <anchor>aac50125819df7ac2d79b1849ea4fa164</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>HVideoSegment</name>
    <filename>structHVideoSegment.html</filename>
    <member kind="variable">
      <type>char</type>
      <name>videoSegment</name>
      <anchorfile>structHVideoSegment.html</anchorfile>
      <anchor>aebb9b2ea920d8eeceb0e2504f376380d</anchor>
      <arglist>[SEGMENT_SIZE]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>segmentID</name>
      <anchorfile>structHVideoSegment.html</anchorfile>
      <anchor>a2cb32a2764ed5137b4e7f1c7d8c11108</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HVideoSegmentCall</name>
    <filename>classHVideoSegmentCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>HVideoSegmentCall</name>
      <anchorfile>classHVideoSegmentCall.html</anchorfile>
      <anchor>aad761d3aec8dcb79c70d37c7d90f616a</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HVideoSegmentCall</name>
      <anchorfile>classHVideoSegmentCall.html</anchorfile>
      <anchor>ac9942da2c052480098a811730f25d4b6</anchor>
      <arglist>(const HVideoSegmentCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HVideoSegmentCall</name>
      <anchorfile>classHVideoSegmentCall.html</anchorfile>
      <anchor>a3de43d93be4ae2b6d0b7853a79f5a0be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HVideoSegmentCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classHVideoSegmentCall.html</anchorfile>
      <anchor>ad3d55ee864ce897ad0ac6de164c11643</anchor>
      <arglist>(const HVideoSegmentCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HVideoSegmentCall *</type>
      <name>dup</name>
      <anchorfile>classHVideoSegmentCall.html</anchorfile>
      <anchor>a287e429a12238922aa5b5edfcd24efcc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classHVideoSegmentCall.html</anchorfile>
      <anchor>aa77bcc4d8a9e105cf9dd7226a33ae2c8</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classHVideoSegmentCall.html</anchorfile>
      <anchor>a2cf4fd6a2473bb27887f122a9f61d00c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HVideoSegment &amp;</type>
      <name>getSegment</name>
      <anchorfile>classHVideoSegmentCall.html</anchorfile>
      <anchor>a7c805ac1f771812cf4b5d626592885fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const HVideoSegment &amp;</type>
      <name>getSegment</name>
      <anchorfile>classHVideoSegmentCall.html</anchorfile>
      <anchor>aa1290289b249feb1ac81a0eb0d3276b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSegment</name>
      <anchorfile>classHVideoSegmentCall.html</anchorfile>
      <anchor>a23ea56be3cd3658d60a248ac6b76e42e</anchor>
      <arglist>(const HVideoSegment &amp;segment)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classHVideoSegmentCall.html</anchorfile>
      <anchor>a9d80d6b4ce7bc0e215ae1fb682bded92</anchor>
      <arglist>(const HVideoSegmentCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HVideoSegment</type>
      <name>segment_var</name>
      <anchorfile>classHVideoSegmentCall.html</anchorfile>
      <anchor>a3413a9c03a47bde651cf2f4e2ce23b59</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classHVideoSegmentCall.html</anchorfile>
      <anchor>ac6109192f4c1891cd10c60c551664aed</anchor>
      <arglist>(const HVideoSegmentCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>I3</name>
    <filename>classI3.html</filename>
    <base>BaseApp</base>
    <member kind="function">
      <type>I3TriggerTable &amp;</type>
      <name>getTriggerTable</name>
      <anchorfile>classI3.html</anchorfile>
      <anchor>a058b26778ac3020781ab22b8ed934022</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const I3Identifier *</type>
      <name>findClosestMatch</name>
      <anchorfile>classI3.html</anchorfile>
      <anchor>a484a2a57dd80db0497b31f1748ffd7df</anchor>
      <arglist>(const I3Identifier &amp;t) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertTrigger</name>
      <anchorfile>classI3.html</anchorfile>
      <anchor>a41f6d55485f2de6f5ec420e8442552d1</anchor>
      <arglist>(I3Trigger &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTrigger</name>
      <anchorfile>classI3.html</anchorfile>
      <anchor>a28d6ef774301710a6096fcbc106e5c77</anchor>
      <arglist>(I3Trigger &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendPacket</name>
      <anchorfile>classI3.html</anchorfile>
      <anchor>a4f149bf024aa7063d7c16a36ef35c9af</anchor>
      <arglist>(I3SendPacketMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendToNode</name>
      <anchorfile>classI3.html</anchorfile>
      <anchor>a871a4d88bc8957b9897746b03b54c853</anchor>
      <arglist>(I3SendPacketMessage *imsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>numInitStages</name>
      <anchorfile>classI3.html</anchorfile>
      <anchor>af13daff811a3a4d309300bac956e45e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeApp</name>
      <anchorfile>classI3.html</anchorfile>
      <anchor>a1a517ce442b620aa21d619a00e59ecf8</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deliver</name>
      <anchorfile>classI3.html</anchorfile>
      <anchor>a85a00a8f18a553ad74d23d0a8eb987ef</anchor>
      <arglist>(OverlayKey &amp;key, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUDPMessage</name>
      <anchorfile>classI3.html</anchorfile>
      <anchor>a98c0ce72816aa521720a07557ceb2295</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classI3.html</anchorfile>
      <anchor>a8feed795f7a5a6c796a3e54ffff9ea9c</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendQueryReply</name>
      <anchorfile>classI3.html</anchorfile>
      <anchor>a11db4bb912682bba469be963d2b21ab9</anchor>
      <arglist>(const I3Identifier &amp;id, const I3IPAddress &amp;add)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>forward</name>
      <anchorfile>classI3.html</anchorfile>
      <anchor>a8fe47cc727c2716621eed77c17a79de8</anchor>
      <arglist>(OverlayKey *key, cPacket **msg, NodeHandle *nextHopNode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateTriggerTableString</name>
      <anchorfile>classI3.html</anchorfile>
      <anchor>ae1809398bd78886675128005f3f46881</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classI3.html</anchorfile>
      <anchor>a8f0a3fd248bd861185ff8dc3281dfa30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numDroppedPackets</name>
      <anchorfile>classI3.html</anchorfile>
      <anchor>ad72725c7715eab8133eda76d9838fb5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>byteDroppedPackets</name>
      <anchorfile>classI3.html</anchorfile>
      <anchor>a84ecf53883b9dd3f8398e5f73419e901</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numForwardedPackets</name>
      <anchorfile>classI3.html</anchorfile>
      <anchor>a73474922ca1ede3042b2fdc24da41552</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numForwardedBytes</name>
      <anchorfile>classI3.html</anchorfile>
      <anchor>af635c209fccea8f66869a7e23ba4005a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>triggerTimeToLive</name>
      <anchorfile>classI3.html</anchorfile>
      <anchor>a6e1594f629d122f90fdab8b14a52cbc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>I3TriggerTable</type>
      <name>triggerTable</name>
      <anchorfile>classI3.html</anchorfile>
      <anchor>a7023a721d63935a34f2be71c53cf4678</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>expirationTimer</name>
      <anchorfile>classI3.html</anchorfile>
      <anchor>ab949fc88728b48fb2d1b9d1edb5d4370</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>I3Anycast</name>
    <filename>classI3Anycast.html</filename>
    <base>I3BaseApp</base>
    <member kind="function">
      <type>void</type>
      <name>initializeApp</name>
      <anchorfile>classI3Anycast.html</anchorfile>
      <anchor>ace970d6151df253e095bf87a777486ea</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeI3</name>
      <anchorfile>classI3Anycast.html</anchorfile>
      <anchor>a216937cf33b630d75b50240d02905144</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deliver</name>
      <anchorfile>classI3Anycast.html</anchorfile>
      <anchor>a24c8d71b27b8461871c6898c3efe7e8d</anchor>
      <arglist>(I3Trigger &amp;trigger, I3IdentifierStack &amp;stack, cPacket *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classI3Anycast.html</anchorfile>
      <anchor>acc0111d97bbd6be1d8431fbb3495161a</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>myIndex</name>
      <anchorfile>classI3Anycast.html</anchorfile>
      <anchor>a8d3890d3c0e31865abeb46966b1b2602</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>sendPacketTimer</name>
      <anchorfile>classI3Anycast.html</anchorfile>
      <anchor>a811f64e233bd9ff4786b24616ee45f3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static int</type>
      <name>index</name>
      <anchorfile>classI3Anycast.html</anchorfile>
      <anchor>af3dec744057f0e48caacff8ee1d895ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>I3BaseApp</name>
    <filename>classI3BaseApp.html</filename>
    <class kind="struct">I3BaseApp::I3CachedServer</class>
    <member kind="function">
      <type></type>
      <name>I3BaseApp</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>aa2d84b4f6738fea695d820766f5408fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~I3BaseApp</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>ad503e948a0f9c7cf7d0e556cbc49cbdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration">
      <name>I3MobilityStage</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>a32aa3150a4ca4641c2e30fe3d2e80f5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>I3_MOBILITY_BEFORE_UPDATE</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>a32aa3150a4ca4641c2e30fe3d2e80f5fa02c6e034c2cf79d3cd543fbb072d347f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>I3_MOBILITY_UPDATED</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>a32aa3150a4ca4641c2e30fe3d2e80f5fa8095e5bea9811e8bb3c935269e1ff683</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>numInitStages</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>aa3af86e534f4d730be4ffe18e572a79c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>ac3ae90bd739e17bb20ff652718042723</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeApp</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>aa6066b4204c6e4c496ea6c08df1c13be</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>bootstrapI3</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>ac711dcf17641dbb71122f5534939560e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeI3</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>a7b7893603824afa3611077883ee2d895</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>ae5f1baab07cc0105d48bf3dc3ef7e057</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUDPMessage</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>a18be16651d2518a0fb6af6eb3cb41e45</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>af3156b05919116f682ceac58635e8739</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deliver</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>aea71ddcedfef6a0c8d02cde51fcafac5</anchor>
      <arglist>(I3Trigger &amp;trigger, I3IdentifierStack &amp;stack, cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendToI3</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>a5ec27766a5e352a0036913dc9fe7cc18</anchor>
      <arglist>(I3Message *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendThroughUDP</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>a08b3797a36f5db7aa40570dd71be46fc</anchor>
      <arglist>(cMessage *msg, const I3IPAddress &amp;ip)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>refreshTriggers</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>a69aeb5da738cfea1722d4452de305f7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>refreshSamples</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>a62031bb4bf2bb53ecb37e8e981a27bf8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>I3Identifier</type>
      <name>retrieveClosestIdentifier</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>a1af4d14d796637874b72c14a49549958</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendPacket</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>a68053b095070058352215964c5ad375e</anchor>
      <arglist>(const I3Identifier &amp;id, cPacket *msg, bool useHint=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendPacket</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>af4e31dfccf3dc75dd7a8b409ffa31a7a</anchor>
      <arglist>(const I3IdentifierStack &amp;stack, cPacket *msg, bool useHint=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>insertTrigger</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>a23337061eee9bd1792b3068894a992b6</anchor>
      <arglist>(const I3Identifier &amp;identifier, bool store=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>insertTrigger</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>ad15062b9d8c48a6e14da7a2674a1cb28</anchor>
      <arglist>(const I3Identifier &amp;identifier, const I3IdentifierStack &amp;stack, bool store=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>insertTrigger</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>a475891c714a0116b7ef531044a749d7c</anchor>
      <arglist>(const I3Trigger &amp;t, bool store=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeTrigger</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>af3b756630dc30bc55e152699da9346f5</anchor>
      <arglist>(const I3Identifier &amp;identifier)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeTrigger</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>a68253a9f1958b785eeb228fba30b1a18</anchor>
      <arglist>(const I3Trigger &amp;trigger)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::set&lt; I3Trigger &gt; &amp;</type>
      <name>getInsertedTriggers</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>a9391f2bd9265ec8aa783780a494fa40b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>receiveChangeNotification</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>a50f46e045c65824949a221c12244a0ba</anchor>
      <arglist>(int category, const cPolymorphic *details)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doMobilityEvent</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>a9459ef2cc5568d02094c897d6dad58cf</anchor>
      <arglist>(I3MobilityStage stage)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numSent</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>aced3b8b7fdc0d78e1a4c1aabd066b02e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sentBytes</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>ac43cfddcbde6776668307bb00f1d19be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numReceived</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>ad358ae17066ac6f81728bb15bd04c3b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>receivedBytes</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>a3bf7151c9eace249e6adb1a0ae247082</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numIsolations</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>a307c1051e74b5d54e8296bddd8391be3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress</type>
      <name>nodeIPAddress</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>ac5f0e6bc96603ee017aaf3d681208676</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; I3Trigger &gt;</type>
      <name>insertedTriggers</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>a093782cbd28bcbce6c070fd582c2cd11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; I3Identifier, I3CachedServer &gt;</type>
      <name>samplingCache</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>abb7a4d8356428a7fa2472061ab43a813</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; I3Identifier, I3CachedServer &gt;</type>
      <name>identifierCache</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>ad96479e30855ce52cb846803d03967bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>I3CachedServer</type>
      <name>gateway</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>a57438e530a99583efeadbd2d90f90a7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>refreshTriggersTimer</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>aa765d4de34ee5931c8d86f7cfc7f4ee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>refreshTriggersTime</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>a41579ebabece039a0c1e8da7f6439c72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>refreshSamplesTimer</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>aa8c2b57a7dcfe8c13d77dcd3956d315d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>refreshSamplesTime</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>a7c5c6cc8192891a9c95613ff3d9095ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>initializeTimer</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>af3504810336d23fa3d2bbbd86efa07ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>bootstrapTimer</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>a3b5dc68c38b8bcd5e9d7ce5a36dcc97e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mobilityInStages</name>
      <anchorfile>classI3BaseApp.html</anchorfile>
      <anchor>a59b897def4737a6b076139f8d7ef5fd3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>I3BaseApp::I3CachedServer</name>
    <filename>structI3BaseApp_1_1I3CachedServer.html</filename>
    <member kind="function">
      <type></type>
      <name>I3CachedServer</name>
      <anchorfile>structI3BaseApp_1_1I3CachedServer.html</anchorfile>
      <anchor>a1a4c6b4ba391f030435479a8d68b04c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>I3IPAddress</type>
      <name>address</name>
      <anchorfile>structI3BaseApp_1_1I3CachedServer.html</anchorfile>
      <anchor>a918f76ec19bb88c76f717c704ef5180e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>lastReply</name>
      <anchorfile>structI3BaseApp_1_1I3CachedServer.html</anchorfile>
      <anchor>a88fffbf8a14014d2cc48a5c77b602e06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>roundTripTime</name>
      <anchorfile>structI3BaseApp_1_1I3CachedServer.html</anchorfile>
      <anchor>a204f5f4a9eac42a12bc4fafd585c90c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structI3BaseApp_1_1I3CachedServer.html</anchorfile>
      <anchor>a38eb748f86dff27fb13732b90f40f298</anchor>
      <arglist>(std::ostream &amp;os, const I3CachedServer &amp;ip)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>I3Composite</name>
    <filename>classI3Composite.html</filename>
    <base>I3BaseApp</base>
    <member kind="function">
      <type>void</type>
      <name>initializeApp</name>
      <anchorfile>classI3Composite.html</anchorfile>
      <anchor>aa806a6057a5989364f2630b6471d5e4b</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeI3</name>
      <anchorfile>classI3Composite.html</anchorfile>
      <anchor>a143b0872a45ce875526a7b985e6e3fb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deliver</name>
      <anchorfile>classI3Composite.html</anchorfile>
      <anchor>a261dba805ef57bd91e4f5b29f103d05b</anchor>
      <arglist>(I3Trigger &amp;trigger, I3IdentifierStack &amp;stack, cPacket *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classI3Composite.html</anchorfile>
      <anchor>ab2d8a21d56813823de60bebfd97cd1d4</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createMessage</name>
      <anchorfile>classI3Composite.html</anchorfile>
      <anchor>ae54c400e7dcdeab9ff064a97630f03d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>myIndex</name>
      <anchorfile>classI3Composite.html</anchorfile>
      <anchor>af9bcf6ebe89e55ed05fef5140ac8084e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>sendPacketTimer</name>
      <anchorfile>classI3Composite.html</anchorfile>
      <anchor>a5aadae9ac9a398cb4f110865e829632c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static int</type>
      <name>index</name>
      <anchorfile>classI3Composite.html</anchorfile>
      <anchor>aa2769abbf800f3e44ec48d7b7e9a4d6e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>I3CompositeMessage</name>
    <filename>structI3CompositeMessage.html</filename>
    <member kind="function">
      <type>I3CompositeMessage *</type>
      <name>dup</name>
      <anchorfile>structI3CompositeMessage.html</anchorfile>
      <anchor>a3be1e6ccbf48e3a3bb34a40e4d188588</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>sentence</name>
      <anchorfile>structI3CompositeMessage.html</anchorfile>
      <anchor>a626b27b14d9ed3e7a666dac16b562228</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>I3HostMobility</name>
    <filename>classI3HostMobility.html</filename>
    <base>I3BaseApp</base>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initializeApp</name>
      <anchorfile>classI3HostMobility.html</anchorfile>
      <anchor>a2aed9fc4794a59f0a258d0be4a3ed7e1</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initializeI3</name>
      <anchorfile>classI3HostMobility.html</anchorfile>
      <anchor>a344cb84d62c20ea4f4c8f70b0128d3bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classI3HostMobility.html</anchorfile>
      <anchor>a477c0ea951d0f7b4fb3ebd7e155c122d</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleUDPMessage</name>
      <anchorfile>classI3HostMobility.html</anchorfile>
      <anchor>aa952ccfd8fa68643560c7bb60f0ddca2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deliver</name>
      <anchorfile>classI3HostMobility.html</anchorfile>
      <anchor>a15cf7ee82d64382c5b0515574ebb1547</anchor>
      <arglist>(I3Trigger &amp;trigger, I3IdentifierStack &amp;stack, cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doMobilityEvent</name>
      <anchorfile>classI3HostMobility.html</anchorfile>
      <anchor>afc82b9f41610fa943557f44571b2b71a</anchor>
      <arglist>(I3MobilityStage stage)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>discoverPartners</name>
      <anchorfile>classI3HostMobility.html</anchorfile>
      <anchor>a54b5bb89120d474d2c666b17cf9a30b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classI3HostMobility.html</anchorfile>
      <anchor>a85bc5c9100c8e59e2fe6f043f80200e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>checkedPartners</name>
      <anchorfile>classI3HostMobility.html</anchorfile>
      <anchor>a8169333d1cee99806be57b47c0cff183</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numSentPackets</name>
      <anchorfile>classI3HostMobility.html</anchorfile>
      <anchor>aa2056bf9928c8e7bd55d0516202c8432</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::set&lt; int &gt;</type>
      <name>packets</name>
      <anchorfile>classI3HostMobility.html</anchorfile>
      <anchor>ac572c00b37f6431c283c421f6b56d7fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; I3Identifier &gt;</type>
      <name>partners</name>
      <anchorfile>classI3HostMobility.html</anchorfile>
      <anchor>abd50b45af2756e2bca55a7cfbf2c2a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>I3Identifier</type>
      <name>poolId</name>
      <anchorfile>classI3HostMobility.html</anchorfile>
      <anchor>ac416f42d0536f022786bdb4603151be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>I3Identifier</type>
      <name>closestId</name>
      <anchorfile>classI3HostMobility.html</anchorfile>
      <anchor>a3f3b0b6819b046f9c450f68e3bfb577d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>I3Identifier</name>
    <filename>classI3Identifier.html</filename>
    <member kind="function">
      <type></type>
      <name>I3Identifier</name>
      <anchorfile>classI3Identifier.html</anchorfile>
      <anchor>a8a7b0b3cbfb027a730cd385ebc07169e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>I3Identifier</name>
      <anchorfile>classI3Identifier.html</anchorfile>
      <anchor>a25854492f65ad17f9a8915b2895ca892</anchor>
      <arglist>(unsigned char b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>I3Identifier</name>
      <anchorfile>classI3Identifier.html</anchorfile>
      <anchor>ad4d90c96d7daa2198060105ebbefc2d8</anchor>
      <arglist>(int prefixL, int keyL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>I3Identifier</name>
      <anchorfile>classI3Identifier.html</anchorfile>
      <anchor>a5daec8603d9fcfb4535c3aea4776d552</anchor>
      <arglist>(const I3Identifier &amp;id)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>I3Identifier</name>
      <anchorfile>classI3Identifier.html</anchorfile>
      <anchor>a9080eb0f2b0246b79b9a2234b83b47b1</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getKeyLength</name>
      <anchorfile>classI3Identifier.html</anchorfile>
      <anchor>a3f85020f280e731807856247e90c9bd4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPrefixLength</name>
      <anchorfile>classI3Identifier.html</anchorfile>
      <anchor>a53cbc0f47bc6d51c6ec066fc3c3ee909</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classI3Identifier.html</anchorfile>
      <anchor>ad3a281daf5a89cd36dab4d59ed55a924</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareTo</name>
      <anchorfile>classI3Identifier.html</anchorfile>
      <anchor>ae7a7b0def60380fc09df9dbb68369c56</anchor>
      <arglist>(const I3Identifier &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classI3Identifier.html</anchorfile>
      <anchor>acbc6a2e3e57bd36f4862f594e6d385c5</anchor>
      <arglist>(const I3Identifier &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classI3Identifier.html</anchorfile>
      <anchor>a72744a2cf64a2daec710bb26bc4eea77</anchor>
      <arglist>(const I3Identifier &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classI3Identifier.html</anchorfile>
      <anchor>a4fe218034e70f65dc9cb236ffbc57bad</anchor>
      <arglist>(const I3Identifier &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>I3Identifier &amp;</type>
      <name>operator=</name>
      <anchorfile>classI3Identifier.html</anchorfile>
      <anchor>a132b789137c4d9bf2dc3ee8d57985427</anchor>
      <arglist>(const I3Identifier &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isClear</name>
      <anchorfile>classI3Identifier.html</anchorfile>
      <anchor>a3164e711f8fd3a49abb6eac2b2f36460</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMatch</name>
      <anchorfile>classI3Identifier.html</anchorfile>
      <anchor>ae751207ff8567872f662220780e0711b</anchor>
      <arglist>(const I3Identifier &amp;id) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>distanceTo</name>
      <anchorfile>classI3Identifier.html</anchorfile>
      <anchor>af2b0f623cd6db78c53d59b9e1c380dfd</anchor>
      <arglist>(const I3Identifier &amp;id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createFromHash</name>
      <anchorfile>classI3Identifier.html</anchorfile>
      <anchor>a6961f7e1a6427bbae9308cdc0eaf1418</anchor>
      <arglist>(const std::string &amp;s, const std::string &amp;o=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createRandomKey</name>
      <anchorfile>classI3Identifier.html</anchorfile>
      <anchor>ab5db17a7b6f5e1439f77da2776d2d180</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createRandomPrefix</name>
      <anchorfile>classI3Identifier.html</anchorfile>
      <anchor>ac5661c53d6c81095eabb7031e16f1250</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createRandomSuffix</name>
      <anchorfile>classI3Identifier.html</anchorfile>
      <anchor>a6962fb33ef7632c2dc0fbe266527d8ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>classI3Identifier.html</anchorfile>
      <anchor>a10a1b09d5a92ea65b6fbff7469935447</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OverlayKey</type>
      <name>asOverlayKey</name>
      <anchorfile>classI3Identifier.html</anchorfile>
      <anchor>a1efb17b551ff587a48f21f9ff609132a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classI3Identifier.html</anchorfile>
      <anchor>ac0f3d9132f29a83269ecb3842356d6e2</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>classI3Identifier.html</anchorfile>
      <anchor>ac386218ff93aae782227001df4c91e27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~I3Identifier</name>
      <anchorfile>classI3Identifier.html</anchorfile>
      <anchor>a8947b0bf9b2f8c52e3a556bc0e7e5653</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initKey</name>
      <anchorfile>classI3Identifier.html</anchorfile>
      <anchor>a51f0541925e3f94785e281d8cac7ddb9</anchor>
      <arglist>(int prefixL, int keyL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>key</name>
      <anchorfile>classI3Identifier.html</anchorfile>
      <anchor>acdc09d9897c59d3bf85d48a8081cf1ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>prefixLength</name>
      <anchorfile>classI3Identifier.html</anchorfile>
      <anchor>a3175e7ac137d02424395ea3d229d2859</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>keyLength</name>
      <anchorfile>classI3Identifier.html</anchorfile>
      <anchor>a6c77b91b00c31e0e48031fd564c0bbbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classI3Identifier.html</anchorfile>
      <anchor>a1d2b4cc6763b1bc22da0f624e1d48050</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classI3Identifier.html</anchorfile>
      <anchor>a3bc41a684592e3ad5d8f59c090dee174</anchor>
      <arglist>(std::ostream &amp;os, const I3Identifier &amp;id)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>I3IdentifierStack</name>
    <filename>classI3IdentifierStack.html</filename>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>classI3IdentifierStack.html</anchorfile>
      <anchor>aea6b94c0f8f1c52e5ea5a16f31927655</anchor>
      <arglist>(const I3Identifier &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>classI3IdentifierStack.html</anchorfile>
      <anchor>a5d8f211fad1751223e81ccbf00200b2c</anchor>
      <arglist>(const I3IPAddress &amp;ip)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>classI3IdentifierStack.html</anchorfile>
      <anchor>a3e9ab6d4e7a314fb7146ffe872d869a2</anchor>
      <arglist>(const IPvXAddress &amp;add, int port)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>classI3IdentifierStack.html</anchorfile>
      <anchor>a457cc3522e445a0a4bdbe5736a9bc4a6</anchor>
      <arglist>(const I3IdentifierStack &amp;stack)</arglist>
    </member>
    <member kind="function">
      <type>I3SubIdentifier &amp;</type>
      <name>peek</name>
      <anchorfile>classI3IdentifierStack.html</anchorfile>
      <anchor>a4cac49ae77f9d10a09e78502a741c830</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const I3SubIdentifier &amp;</type>
      <name>peek</name>
      <anchorfile>classI3IdentifierStack.html</anchorfile>
      <anchor>a309178b53f771428514c3f8b5a4818cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classI3IdentifierStack.html</anchorfile>
      <anchor>a94c6bc20992b854ee53cbf9b1e20aae0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classI3IdentifierStack.html</anchorfile>
      <anchor>a75ad2ac9a4d49e28b412751ab0aad48c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>size</name>
      <anchorfile>classI3IdentifierStack.html</anchorfile>
      <anchor>aed17301571697e75f9fa9600b0400f6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareTo</name>
      <anchorfile>classI3IdentifierStack.html</anchorfile>
      <anchor>a16eaa583730509f9b063bea1c9e8a7a0</anchor>
      <arglist>(const I3IdentifierStack &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>classI3IdentifierStack.html</anchorfile>
      <anchor>a4097f86775e9d869f3a66cda99445508</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceAddress</name>
      <anchorfile>classI3IdentifierStack.html</anchorfile>
      <anchor>a0890e7f83d10c5c96b7ad0604849268a</anchor>
      <arglist>(const I3IPAddress &amp;source, const I3IPAddress &amp;dest)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; I3SubIdentifier &gt;</type>
      <name>stack</name>
      <anchorfile>classI3IdentifierStack.html</anchorfile>
      <anchor>a7092a64eb2815334cb0e4e9031538350</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classI3IdentifierStack.html</anchorfile>
      <anchor>a3d5fb7855f2949d76578ef48302258c6</anchor>
      <arglist>(std::ostream &amp;os, const I3IdentifierStack &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>I3InsertTriggerMessage</name>
    <filename>classI3InsertTriggerMessage.html</filename>
    <base>I3InsertTriggerMessage_Base</base>
    <member kind="function">
      <type></type>
      <name>I3InsertTriggerMessage</name>
      <anchorfile>classI3InsertTriggerMessage.html</anchorfile>
      <anchor>a0f2dcc569f63e097cbd7e09ab9e575d5</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>I3InsertTriggerMessage</name>
      <anchorfile>classI3InsertTriggerMessage.html</anchorfile>
      <anchor>ab19f8de369e33d88fafd79150c87dbd8</anchor>
      <arglist>(const I3InsertTriggerMessage &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>I3InsertTriggerMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classI3InsertTriggerMessage.html</anchorfile>
      <anchor>ae449b95c9214da8c3ddadc5dab6ab866</anchor>
      <arglist>(const I3InsertTriggerMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual I3InsertTriggerMessage *</type>
      <name>dup</name>
      <anchorfile>classI3InsertTriggerMessage.html</anchorfile>
      <anchor>aa2ddf531317472f9f7d2331d3a6cc67a</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>I3InsertTriggerMessage_Base</name>
    <filename>classI3InsertTriggerMessage__Base.html</filename>
    <base>I3Message</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~I3InsertTriggerMessage_Base</name>
      <anchorfile>classI3InsertTriggerMessage__Base.html</anchorfile>
      <anchor>ae0c1748abf1d2a934e04f08fa281b31e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual I3InsertTriggerMessage_Base *</type>
      <name>dup</name>
      <anchorfile>classI3InsertTriggerMessage__Base.html</anchorfile>
      <anchor>ae456b1380120502a3a786183b63414a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classI3InsertTriggerMessage__Base.html</anchorfile>
      <anchor>a61a83fe72362c70879725fb16dcfa95d</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classI3InsertTriggerMessage__Base.html</anchorfile>
      <anchor>a754b9b46253f78524432d348725396bf</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getSendReply</name>
      <anchorfile>classI3InsertTriggerMessage__Base.html</anchorfile>
      <anchor>ade94f2d2bd91db5438cdbde7421ebaa3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSendReply</name>
      <anchorfile>classI3InsertTriggerMessage__Base.html</anchorfile>
      <anchor>a28a66637ea210d40af24c594cd3261b4</anchor>
      <arglist>(bool sendReply)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual I3Trigger &amp;</type>
      <name>getTrigger</name>
      <anchorfile>classI3InsertTriggerMessage__Base.html</anchorfile>
      <anchor>a5b0c9820dd0c4453e4f9088d3c97d0d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const I3Trigger &amp;</type>
      <name>getTrigger</name>
      <anchorfile>classI3InsertTriggerMessage__Base.html</anchorfile>
      <anchor>a9e72bdb7b321cf2dd8325d31024da5c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTrigger</name>
      <anchorfile>classI3InsertTriggerMessage__Base.html</anchorfile>
      <anchor>a7819a895b0c4589bd4d0ca32d97dff74</anchor>
      <arglist>(const I3Trigger &amp;trigger)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual I3IPAddress &amp;</type>
      <name>getSource</name>
      <anchorfile>classI3InsertTriggerMessage__Base.html</anchorfile>
      <anchor>abec0ddb3254aaa0eae944271c42d71e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const I3IPAddress &amp;</type>
      <name>getSource</name>
      <anchorfile>classI3InsertTriggerMessage__Base.html</anchorfile>
      <anchor>ada7cad28400be84d8045e78f7aad0ed5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSource</name>
      <anchorfile>classI3InsertTriggerMessage__Base.html</anchorfile>
      <anchor>abe8a1d678f07a1e1566959616984bc7b</anchor>
      <arglist>(const I3IPAddress &amp;source)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classI3InsertTriggerMessage__Base.html</anchorfile>
      <anchor>a146dc0181d00b3a29adf7924693f50cc</anchor>
      <arglist>(const I3InsertTriggerMessage_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>I3InsertTriggerMessage_Base</name>
      <anchorfile>classI3InsertTriggerMessage__Base.html</anchorfile>
      <anchor>a72d86134e003797b802be768a6e3bdd4</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>I3InsertTriggerMessage_Base</name>
      <anchorfile>classI3InsertTriggerMessage__Base.html</anchorfile>
      <anchor>a9dd5a2ea0e8914eca2b35b522b8fe91f</anchor>
      <arglist>(const I3InsertTriggerMessage_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>I3InsertTriggerMessage_Base &amp;</type>
      <name>operator=</name>
      <anchorfile>classI3InsertTriggerMessage__Base.html</anchorfile>
      <anchor>a3676069d53df44a1060b274c8b7690df</anchor>
      <arglist>(const I3InsertTriggerMessage_Base &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sendReply_var</name>
      <anchorfile>classI3InsertTriggerMessage__Base.html</anchorfile>
      <anchor>a49cf71e97017870327fe6585abf4d832</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>I3Trigger</type>
      <name>trigger_var</name>
      <anchorfile>classI3InsertTriggerMessage__Base.html</anchorfile>
      <anchor>a320dfc23143cd4322ea5e19dad9eb8a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>I3IPAddress</type>
      <name>source_var</name>
      <anchorfile>classI3InsertTriggerMessage__Base.html</anchorfile>
      <anchor>ab602c8ca2a600bea156205f10ea1c6db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classI3InsertTriggerMessage__Base.html</anchorfile>
      <anchor>abdd28dfd74e1071b102522645fcbf54b</anchor>
      <arglist>(const I3InsertTriggerMessage_Base &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>I3IPAddress</name>
    <filename>structI3IPAddress.html</filename>
    <base>TransportAddress</base>
    <member kind="function">
      <type></type>
      <name>I3IPAddress</name>
      <anchorfile>structI3IPAddress.html</anchorfile>
      <anchor>a3a5a2e865bb7879c885f02a642c0a6f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>I3IPAddress</name>
      <anchorfile>structI3IPAddress.html</anchorfile>
      <anchor>a44fb675ef20b63a9b3db173daca209b6</anchor>
      <arglist>(IPvXAddress add, int port)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structI3IPAddress.html</anchorfile>
      <anchor>a8146438dc8f35bdb6fa7bf864745b125</anchor>
      <arglist>(const I3IPAddress &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structI3IPAddress.html</anchorfile>
      <anchor>a6ff7f665f6538746e05c49acee7ef3f5</anchor>
      <arglist>(const I3IPAddress &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>structI3IPAddress.html</anchorfile>
      <anchor>a71481e667e6df1b28b8b63d212a311f6</anchor>
      <arglist>(const I3IPAddress &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>structI3IPAddress.html</anchorfile>
      <anchor>a7f0b9043f48594a5822f0651ebed0289</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structI3IPAddress.html</anchorfile>
      <anchor>a0eec4f4fd3808b6b7e44b7d47cf31027</anchor>
      <arglist>(std::ostream &amp;os, const I3IPAddress &amp;ip)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>I3LatencyStretch</name>
    <filename>classI3LatencyStretch.html</filename>
    <base>I3BaseApp</base>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initializeApp</name>
      <anchorfile>classI3LatencyStretch.html</anchorfile>
      <anchor>a7f4c8598d5cc0521e08015eb48926b66</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initializeI3</name>
      <anchorfile>classI3LatencyStretch.html</anchorfile>
      <anchor>aada68081678f8b66d294a1f1c483a780</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classI3LatencyStretch.html</anchorfile>
      <anchor>a3dc08a34b811e6bff0e3b8181e86f03e</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleUDPMessage</name>
      <anchorfile>classI3LatencyStretch.html</anchorfile>
      <anchor>a40baa2f7de222de7a15dcb11a6fc4a8f</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deliver</name>
      <anchorfile>classI3LatencyStretch.html</anchorfile>
      <anchor>a5a12bbab61b7122c722a00112bb26a13</anchor>
      <arglist>(I3Trigger &amp;trigger, I3IdentifierStack &amp;stack, cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classI3LatencyStretch.html</anchorfile>
      <anchor>ab6318b8db156bd80df4387c639406eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>samplingType</name>
      <anchorfile>classI3LatencyStretch.html</anchorfile>
      <anchor>a81bbef37e0e0decc6cbdfdc0e135a050</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>I3Identifier</type>
      <name>generalId</name>
      <anchorfile>classI3LatencyStretch.html</anchorfile>
      <anchor>a8d26ba668747b9b2590040cd529fa1eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>I3Identifier</type>
      <name>myId</name>
      <anchorfile>classI3LatencyStretch.html</anchorfile>
      <anchor>ab883031677e0b9496a0a29acc9cd5445</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeIdentity</type>
      <name>partner</name>
      <anchorfile>classI3LatencyStretch.html</anchorfile>
      <anchor>af15d3998a9aae0559bad14765bab1394</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>foundPartner</name>
      <anchorfile>classI3LatencyStretch.html</anchorfile>
      <anchor>ab7f20ddd90f3fbf6c16875812120c39d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cStdDev</type>
      <name>myStats</name>
      <anchorfile>classI3LatencyStretch.html</anchorfile>
      <anchor>ac015907b3e5372141e86808270e481f9</anchor>
      <arglist>[NUM_STATS]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; I3IPAddress, LatencyInfo &gt;</type>
      <name>latencies</name>
      <anchorfile>classI3LatencyStretch.html</anchorfile>
      <anchor>a235a9c81e333dbde44e855061393f137</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>I3Message</name>
    <filename>classI3Message.html</filename>
    <member kind="function">
      <type></type>
      <name>I3Message</name>
      <anchorfile>classI3Message.html</anchorfile>
      <anchor>a8dd47f0be77d73d649b44e512a60b51c</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>I3Message</name>
      <anchorfile>classI3Message.html</anchorfile>
      <anchor>af8424572d379cba4e38e2411f79a4972</anchor>
      <arglist>(const I3Message &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~I3Message</name>
      <anchorfile>classI3Message.html</anchorfile>
      <anchor>a16eef32f2ec46bbf76456109bcf7caf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>I3Message &amp;</type>
      <name>operator=</name>
      <anchorfile>classI3Message.html</anchorfile>
      <anchor>a07a106d55e882bc33229b911b4af0e1b</anchor>
      <arglist>(const I3Message &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual I3Message *</type>
      <name>dup</name>
      <anchorfile>classI3Message.html</anchorfile>
      <anchor>a99e2b5ec39a0227f9072483268f363f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classI3Message.html</anchorfile>
      <anchor>afb9ad94bcf484ea64b83ecf9ccc4eecf</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classI3Message.html</anchorfile>
      <anchor>aba0d1e75095866a783f719ae3538a9ab</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getType</name>
      <anchorfile>classI3Message.html</anchorfile>
      <anchor>abd2d0964bb06d466f4fc81c7179b689f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchorfile>classI3Message.html</anchorfile>
      <anchor>a75a2bf7896c65052e85cdcf392eefc4d</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classI3Message.html</anchorfile>
      <anchor>a74a7fdec9659d820ec05d3de53586abc</anchor>
      <arglist>(const I3Message &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>type_var</name>
      <anchorfile>classI3Message.html</anchorfile>
      <anchor>a91abb1a619e34205ca02eca260f21bec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classI3Message.html</anchorfile>
      <anchor>af93f081526a75c054dfa408a1126158f</anchor>
      <arglist>(const I3Message &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>I3Multicast</name>
    <filename>classI3Multicast.html</filename>
    <base>I3BaseApp</base>
    <member kind="function">
      <type>void</type>
      <name>initializeApp</name>
      <anchorfile>classI3Multicast.html</anchorfile>
      <anchor>aabf3bdb7719bbb779b4c5b6d360a5b9c</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeI3</name>
      <anchorfile>classI3Multicast.html</anchorfile>
      <anchor>a3614b98da2218f1bd395b2e2f56a8427</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deliver</name>
      <anchorfile>classI3Multicast.html</anchorfile>
      <anchor>afcf2797d0598f6fad0b5325c187400ca</anchor>
      <arglist>(I3Trigger &amp;trigger, I3IdentifierStack &amp;stack, cPacket *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classI3Multicast.html</anchorfile>
      <anchor>a128598c95082a9190ba7979154a85470</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>sendPacketTimer</name>
      <anchorfile>classI3Multicast.html</anchorfile>
      <anchor>a3221528d989b06d2f94d10fe1ee700fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>I3QueryReplyMessage</name>
    <filename>classI3QueryReplyMessage.html</filename>
    <base>I3QueryReplyMessage_Base</base>
    <member kind="function">
      <type></type>
      <name>I3QueryReplyMessage</name>
      <anchorfile>classI3QueryReplyMessage.html</anchorfile>
      <anchor>abc4caba144b347bcd2ff80b84b180cc3</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>I3QueryReplyMessage</name>
      <anchorfile>classI3QueryReplyMessage.html</anchorfile>
      <anchor>afec7362b11319e181677ca07ef30f6fc</anchor>
      <arglist>(const I3QueryReplyMessage &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>I3QueryReplyMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classI3QueryReplyMessage.html</anchorfile>
      <anchor>ab18aab5b9338f5d9de7714f5066af13f</anchor>
      <arglist>(const I3QueryReplyMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual I3QueryReplyMessage *</type>
      <name>dup</name>
      <anchorfile>classI3QueryReplyMessage.html</anchorfile>
      <anchor>ac2f1af914518d7eed7f7c661290272f6</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>I3QueryReplyMessage_Base</name>
    <filename>classI3QueryReplyMessage__Base.html</filename>
    <base>I3Message</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~I3QueryReplyMessage_Base</name>
      <anchorfile>classI3QueryReplyMessage__Base.html</anchorfile>
      <anchor>a9f0977b34ddb6d9f2230c034a83225b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual I3QueryReplyMessage_Base *</type>
      <name>dup</name>
      <anchorfile>classI3QueryReplyMessage__Base.html</anchorfile>
      <anchor>af476a2894da8f5093f4660e82ce4d5d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classI3QueryReplyMessage__Base.html</anchorfile>
      <anchor>a8ad9280464df525b5e23424657f7c536</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classI3QueryReplyMessage__Base.html</anchorfile>
      <anchor>ad6a4ec84e9d486128cffa451103543f3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual I3IPAddress &amp;</type>
      <name>getSource</name>
      <anchorfile>classI3QueryReplyMessage__Base.html</anchorfile>
      <anchor>aaae827384104488dc5d6c04f159d5481</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const I3IPAddress &amp;</type>
      <name>getSource</name>
      <anchorfile>classI3QueryReplyMessage__Base.html</anchorfile>
      <anchor>a54bcfe7f790dbd243438c779f740abc5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSource</name>
      <anchorfile>classI3QueryReplyMessage__Base.html</anchorfile>
      <anchor>aea292ebe6585650e690660a6b6a05e5c</anchor>
      <arglist>(const I3IPAddress &amp;source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual I3Identifier &amp;</type>
      <name>getIdentifier</name>
      <anchorfile>classI3QueryReplyMessage__Base.html</anchorfile>
      <anchor>a75ec3db76e4e2e9080475aaf40fa586b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const I3Identifier &amp;</type>
      <name>getIdentifier</name>
      <anchorfile>classI3QueryReplyMessage__Base.html</anchorfile>
      <anchor>a39c0c7319735be0f195e748304dcbda6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIdentifier</name>
      <anchorfile>classI3QueryReplyMessage__Base.html</anchorfile>
      <anchor>a879ec24a8c28578671cab3b057c8eb40</anchor>
      <arglist>(const I3Identifier &amp;identifier)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getSendingTime</name>
      <anchorfile>classI3QueryReplyMessage__Base.html</anchorfile>
      <anchor>a179d64efa60f1f7292ca06e3814ee1cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSendingTime</name>
      <anchorfile>classI3QueryReplyMessage__Base.html</anchorfile>
      <anchor>a9b6a7eb18addc4b4991472242526ccd0</anchor>
      <arglist>(simtime_t sendingTime)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classI3QueryReplyMessage__Base.html</anchorfile>
      <anchor>a76ddb4f2b317e3d6845b4bd3c2f62682</anchor>
      <arglist>(const I3QueryReplyMessage_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>I3QueryReplyMessage_Base</name>
      <anchorfile>classI3QueryReplyMessage__Base.html</anchorfile>
      <anchor>a3aa607fdc53d05feed0927329e0094f5</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>I3QueryReplyMessage_Base</name>
      <anchorfile>classI3QueryReplyMessage__Base.html</anchorfile>
      <anchor>a7925dd3a62e970cff7b876386b2d9b86</anchor>
      <arglist>(const I3QueryReplyMessage_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>I3QueryReplyMessage_Base &amp;</type>
      <name>operator=</name>
      <anchorfile>classI3QueryReplyMessage__Base.html</anchorfile>
      <anchor>aa12000e537fe4987380ece1a2acbb4fc</anchor>
      <arglist>(const I3QueryReplyMessage_Base &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>I3IPAddress</type>
      <name>source_var</name>
      <anchorfile>classI3QueryReplyMessage__Base.html</anchorfile>
      <anchor>a0e249fd28a45d1240b13fc4b2052df95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>I3Identifier</type>
      <name>identifier_var</name>
      <anchorfile>classI3QueryReplyMessage__Base.html</anchorfile>
      <anchor>aa01725d41462c361a098b27d727a7096</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>sendingTime_var</name>
      <anchorfile>classI3QueryReplyMessage__Base.html</anchorfile>
      <anchor>a9c5aa1af9fc809490b006c55af422932</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classI3QueryReplyMessage__Base.html</anchorfile>
      <anchor>a6267adf90683521477ecf25d8dfcfd09</anchor>
      <arglist>(const I3QueryReplyMessage_Base &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>I3RemoveTriggerMessage</name>
    <filename>classI3RemoveTriggerMessage.html</filename>
    <base>I3RemoveTriggerMessage_Base</base>
    <member kind="function">
      <type></type>
      <name>I3RemoveTriggerMessage</name>
      <anchorfile>classI3RemoveTriggerMessage.html</anchorfile>
      <anchor>a3a6ca5d7d35e81d7e1bfe4ad2527f2d6</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>I3RemoveTriggerMessage</name>
      <anchorfile>classI3RemoveTriggerMessage.html</anchorfile>
      <anchor>a8028fdfe2fa20a2ce7486422915a0ad0</anchor>
      <arglist>(const I3RemoveTriggerMessage &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>I3RemoveTriggerMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classI3RemoveTriggerMessage.html</anchorfile>
      <anchor>accc884363ddd47f8ed4eaf5e148470c2</anchor>
      <arglist>(const I3RemoveTriggerMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual I3RemoveTriggerMessage *</type>
      <name>dup</name>
      <anchorfile>classI3RemoveTriggerMessage.html</anchorfile>
      <anchor>a4239b3f458a58cbb7d2e2e50d9872ff4</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>I3RemoveTriggerMessage_Base</name>
    <filename>classI3RemoveTriggerMessage__Base.html</filename>
    <base>I3Message</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~I3RemoveTriggerMessage_Base</name>
      <anchorfile>classI3RemoveTriggerMessage__Base.html</anchorfile>
      <anchor>ad68b5f38d37b26329c08d1cbb0bd1554</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual I3RemoveTriggerMessage_Base *</type>
      <name>dup</name>
      <anchorfile>classI3RemoveTriggerMessage__Base.html</anchorfile>
      <anchor>a898a52facd6578b73135223525a67702</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classI3RemoveTriggerMessage__Base.html</anchorfile>
      <anchor>a1e20006938f4748ef8102737eb46f32c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classI3RemoveTriggerMessage__Base.html</anchorfile>
      <anchor>a1be73a66eb191c90930d203694347d89</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual I3Trigger &amp;</type>
      <name>getTrigger</name>
      <anchorfile>classI3RemoveTriggerMessage__Base.html</anchorfile>
      <anchor>a81df4fb1ab3db6943e8ff28f37e246d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const I3Trigger &amp;</type>
      <name>getTrigger</name>
      <anchorfile>classI3RemoveTriggerMessage__Base.html</anchorfile>
      <anchor>af9bfe450a060df026186a73400d3c730</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTrigger</name>
      <anchorfile>classI3RemoveTriggerMessage__Base.html</anchorfile>
      <anchor>acdc34290cfa59b794264c72ad2c02889</anchor>
      <arglist>(const I3Trigger &amp;trigger)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classI3RemoveTriggerMessage__Base.html</anchorfile>
      <anchor>a12469fc24d8efbdab5ef171358d790c5</anchor>
      <arglist>(const I3RemoveTriggerMessage_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>I3RemoveTriggerMessage_Base</name>
      <anchorfile>classI3RemoveTriggerMessage__Base.html</anchorfile>
      <anchor>a43ea7ca542c451a90c6815dfbae0ea07</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>I3RemoveTriggerMessage_Base</name>
      <anchorfile>classI3RemoveTriggerMessage__Base.html</anchorfile>
      <anchor>ae6f195abb65550e6cd0c8841449dc003</anchor>
      <arglist>(const I3RemoveTriggerMessage_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>I3RemoveTriggerMessage_Base &amp;</type>
      <name>operator=</name>
      <anchorfile>classI3RemoveTriggerMessage__Base.html</anchorfile>
      <anchor>a18ba092de4fbc4b844e1a410908987c3</anchor>
      <arglist>(const I3RemoveTriggerMessage_Base &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>I3Trigger</type>
      <name>trigger_var</name>
      <anchorfile>classI3RemoveTriggerMessage__Base.html</anchorfile>
      <anchor>a5c4c6d506783dde2d0e1e6e7121ef5cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classI3RemoveTriggerMessage__Base.html</anchorfile>
      <anchor>ad1a5dd76b6f84f254d75410defeddc5e</anchor>
      <arglist>(const I3RemoveTriggerMessage_Base &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>I3SendPacketMessage</name>
    <filename>classI3SendPacketMessage.html</filename>
    <base>I3SendPacketMessage_Base</base>
    <member kind="function">
      <type></type>
      <name>I3SendPacketMessage</name>
      <anchorfile>classI3SendPacketMessage.html</anchorfile>
      <anchor>a401cb245deffaf1c5bafa229221727eb</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>I3SendPacketMessage</name>
      <anchorfile>classI3SendPacketMessage.html</anchorfile>
      <anchor>a07f38ec5542b6fc4ad8d5dd2a7a51f0e</anchor>
      <arglist>(const I3SendPacketMessage &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>I3SendPacketMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classI3SendPacketMessage.html</anchorfile>
      <anchor>a9d1e1543d3ee305d317d51697ded75ef</anchor>
      <arglist>(const I3SendPacketMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual I3SendPacketMessage *</type>
      <name>dup</name>
      <anchorfile>classI3SendPacketMessage.html</anchorfile>
      <anchor>a94adb703961d68d365efe5bdf8ef0fc1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>I3SendPacketMessage_Base</name>
    <filename>classI3SendPacketMessage__Base.html</filename>
    <base>I3Message</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~I3SendPacketMessage_Base</name>
      <anchorfile>classI3SendPacketMessage__Base.html</anchorfile>
      <anchor>a09699bb22ea6aca931e57e5a88660b0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual I3SendPacketMessage_Base *</type>
      <name>dup</name>
      <anchorfile>classI3SendPacketMessage__Base.html</anchorfile>
      <anchor>a0b6f0da82a324d523b5d4236df70a6c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classI3SendPacketMessage__Base.html</anchorfile>
      <anchor>ad6ded5c4d44ba91a3ed8079f9372cf4e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classI3SendPacketMessage__Base.html</anchorfile>
      <anchor>a8968ef0322a12d26bda25348e924da02</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual I3IdentifierStack &amp;</type>
      <name>getIdentifierStack</name>
      <anchorfile>classI3SendPacketMessage__Base.html</anchorfile>
      <anchor>af0180ec364a7d5c110d62419e1f615b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const I3IdentifierStack &amp;</type>
      <name>getIdentifierStack</name>
      <anchorfile>classI3SendPacketMessage__Base.html</anchorfile>
      <anchor>a5eacf612923e39cf5420171c74aa004c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIdentifierStack</name>
      <anchorfile>classI3SendPacketMessage__Base.html</anchorfile>
      <anchor>acbee1a28d0795d224ca4dc10aa2ade1d</anchor>
      <arglist>(const I3IdentifierStack &amp;identifierStack)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual I3Trigger &amp;</type>
      <name>getMatchedTrigger</name>
      <anchorfile>classI3SendPacketMessage__Base.html</anchorfile>
      <anchor>a5e02e5ee4a4f07a09f0f294c321d1c89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const I3Trigger &amp;</type>
      <name>getMatchedTrigger</name>
      <anchorfile>classI3SendPacketMessage__Base.html</anchorfile>
      <anchor>a34ba1a3a87eb12523a80dd12c977572a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMatchedTrigger</name>
      <anchorfile>classI3SendPacketMessage__Base.html</anchorfile>
      <anchor>a9c07cbf4208f34fc685f7fa615f25102</anchor>
      <arglist>(const I3Trigger &amp;matchedTrigger)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getSendReply</name>
      <anchorfile>classI3SendPacketMessage__Base.html</anchorfile>
      <anchor>ad4e0c00383e83a4ce5c233c52a8de5cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSendReply</name>
      <anchorfile>classI3SendPacketMessage__Base.html</anchorfile>
      <anchor>af8f20c4af41eb1ecbec3622e9d7a4625</anchor>
      <arglist>(bool sendReply)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual I3IPAddress &amp;</type>
      <name>getSource</name>
      <anchorfile>classI3SendPacketMessage__Base.html</anchorfile>
      <anchor>aa6de703f618e463af31967d03b235f6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const I3IPAddress &amp;</type>
      <name>getSource</name>
      <anchorfile>classI3SendPacketMessage__Base.html</anchorfile>
      <anchor>ab454b6f1f2fb662b782b24cdbff20267</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSource</name>
      <anchorfile>classI3SendPacketMessage__Base.html</anchorfile>
      <anchor>a92540b1f5e606566c28f95917a9cdd68</anchor>
      <arglist>(const I3IPAddress &amp;source)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classI3SendPacketMessage__Base.html</anchorfile>
      <anchor>af2c7b4d474bf11db99d43db6697339a3</anchor>
      <arglist>(const I3SendPacketMessage_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>I3SendPacketMessage_Base</name>
      <anchorfile>classI3SendPacketMessage__Base.html</anchorfile>
      <anchor>a7dfc4051baae70d6ca7f957483d41d3d</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>I3SendPacketMessage_Base</name>
      <anchorfile>classI3SendPacketMessage__Base.html</anchorfile>
      <anchor>a9153798fa22da425fdf040f68e404b49</anchor>
      <arglist>(const I3SendPacketMessage_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>I3SendPacketMessage_Base &amp;</type>
      <name>operator=</name>
      <anchorfile>classI3SendPacketMessage__Base.html</anchorfile>
      <anchor>a8083b168bc4944cb69963e9f62063a69</anchor>
      <arglist>(const I3SendPacketMessage_Base &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>I3IdentifierStack</type>
      <name>identifierStack_var</name>
      <anchorfile>classI3SendPacketMessage__Base.html</anchorfile>
      <anchor>a94b0e888e08eae1b285437b7ba676421</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>I3Trigger</type>
      <name>matchedTrigger_var</name>
      <anchorfile>classI3SendPacketMessage__Base.html</anchorfile>
      <anchor>a532a3a68cc8df8131bdcaab4bcad95b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sendReply_var</name>
      <anchorfile>classI3SendPacketMessage__Base.html</anchorfile>
      <anchor>ad205848c295ebd15bdd4c86b0ecce1a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>I3IPAddress</type>
      <name>source_var</name>
      <anchorfile>classI3SendPacketMessage__Base.html</anchorfile>
      <anchor>a0d4435277df2455fd42dc066015d16db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classI3SendPacketMessage__Base.html</anchorfile>
      <anchor>a0cfbdf9f3748a1366554601e9511d7d9</anchor>
      <arglist>(const I3SendPacketMessage_Base &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>I3SessionClient</name>
    <filename>classI3SessionClient.html</filename>
    <base>I3BaseApp</base>
    <member kind="function">
      <type>void</type>
      <name>initializeApp</name>
      <anchorfile>classI3SessionClient.html</anchorfile>
      <anchor>a975b5842685e4b5b8074da5c2f5e4b56</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeI3</name>
      <anchorfile>classI3SessionClient.html</anchorfile>
      <anchor>a98f51bc3572253299c060b0e3d68e530</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deliver</name>
      <anchorfile>classI3SessionClient.html</anchorfile>
      <anchor>a2951b6c833ed5f9d387bbe87fee9ee55</anchor>
      <arglist>(I3Trigger &amp;trigger, I3IdentifierStack &amp;stack, cPacket *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classI3SessionClient.html</anchorfile>
      <anchor>ac8a72a780a40fe85a3cc2ecf57b70403</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classI3SessionClient.html</anchorfile>
      <anchor>aedcddd6ddff94742a3dd166a01e2bb0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>cStdDev</type>
      <name>myStats</name>
      <anchorfile>classI3SessionClient.html</anchorfile>
      <anchor>aaafa3bcbc5a21aa25d96bfe68d718444</anchor>
      <arglist>[NUM_STATS]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numForeignPackets</name>
      <anchorfile>classI3SessionClient.html</anchorfile>
      <anchor>a1fb5a68b8a56a7f91d0cb20d9f5332b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numSessions</name>
      <anchorfile>classI3SessionClient.html</anchorfile>
      <anchor>aa0742ff27a572de09eee96fb5d7854b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numExchanged</name>
      <anchorfile>classI3SessionClient.html</anchorfile>
      <anchor>a0cc3e509453152d1843495af1a6862c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>holdsSession</name>
      <anchorfile>classI3SessionClient.html</anchorfile>
      <anchor>a457fdc9a834dc85467e86369945a66a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>actualValue</name>
      <anchorfile>classI3SessionClient.html</anchorfile>
      <anchor>ae8c0887af376f34567e738822690d91d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>I3Identifier</type>
      <name>clientIdentifier</name>
      <anchorfile>classI3SessionClient.html</anchorfile>
      <anchor>ab736e05f98dd2ca2f930407ca6aa52e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>I3Identifier</type>
      <name>serverIdentifier</name>
      <anchorfile>classI3SessionClient.html</anchorfile>
      <anchor>adbc92c6c3c1fda37f0ea702d2bcfb385</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>I3Identifier</type>
      <name>poolIdentifier</name>
      <anchorfile>classI3SessionClient.html</anchorfile>
      <anchor>af2c1f23bf4082dcf1648c80ba11f3a94</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>I3SessionClientStarter</name>
    <filename>classI3SessionClientStarter.html</filename>
    <base>I3SessionClient</base>
    <member kind="function">
      <type>void</type>
      <name>initializeI3</name>
      <anchorfile>classI3SessionClientStarter.html</anchorfile>
      <anchor>a3cae4719127153df77e47ea152e1c7c1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>I3SessionServer</name>
    <filename>classI3SessionServer.html</filename>
    <base>I3BaseApp</base>
    <member kind="function">
      <type>void</type>
      <name>initializeI3</name>
      <anchorfile>classI3SessionServer.html</anchorfile>
      <anchor>a689ce8e1ab68667ed6ccc8b869250e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deliver</name>
      <anchorfile>classI3SessionServer.html</anchorfile>
      <anchor>a1834c750d0924eebeff38e1054ae531d</anchor>
      <arglist>(I3Trigger &amp;trigger, I3IdentifierStack &amp;stack, cPacket *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classI3SessionServer.html</anchorfile>
      <anchor>aa3cbece6e340f581ef2980d007c888ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numExchanged</name>
      <anchorfile>classI3SessionServer.html</anchorfile>
      <anchor>a084a83371fb33e5b39e6d394ead3642b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>I3Identifier</type>
      <name>myIdentifier</name>
      <anchorfile>classI3SessionServer.html</anchorfile>
      <anchor>a2b4c1fad9447f0fd1966467190bff3f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>I3Identifier</type>
      <name>clientIdentifier</name>
      <anchorfile>classI3SessionServer.html</anchorfile>
      <anchor>a9e029ac0d44ac1983a59c872afe44de7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>I3SubIdentifier</name>
    <filename>classI3SubIdentifier.html</filename>
    <member kind="enumeration">
      <name>IdentifierType</name>
      <anchorfile>classI3SubIdentifier.html</anchorfile>
      <anchor>a194013cc3797514e06818c6cab1b4ed8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Invalid</name>
      <anchorfile>classI3SubIdentifier.html</anchorfile>
      <anchor>a194013cc3797514e06818c6cab1b4ed8a1706bdea81d3611c397548150dfcfc5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Identifier</name>
      <anchorfile>classI3SubIdentifier.html</anchorfile>
      <anchor>a194013cc3797514e06818c6cab1b4ed8a6df904f1820ca172003c07061cb58525</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAddress</name>
      <anchorfile>classI3SubIdentifier.html</anchorfile>
      <anchor>a194013cc3797514e06818c6cab1b4ed8a7fb96edc088de944cffd641b899957f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>I3SubIdentifier</name>
      <anchorfile>classI3SubIdentifier.html</anchorfile>
      <anchor>a09f9c94f59b3c3ba1f80bf2c509e8e5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIPAddress</name>
      <anchorfile>classI3SubIdentifier.html</anchorfile>
      <anchor>a4fb72a1c8ad07737ba0f4f3aa7e87a36</anchor>
      <arglist>(const I3IPAddress &amp;address)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentifier</name>
      <anchorfile>classI3SubIdentifier.html</anchorfile>
      <anchor>abfa84dade12e9ea379d763150a479d44</anchor>
      <arglist>(const I3Identifier &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>IdentifierType</type>
      <name>getType</name>
      <anchorfile>classI3SubIdentifier.html</anchorfile>
      <anchor>a8e2b2f6354e24556ac78e91e5e467510</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>I3IPAddress &amp;</type>
      <name>getIPAddress</name>
      <anchorfile>classI3SubIdentifier.html</anchorfile>
      <anchor>aca40c15817a73d7854b1a3d395eb1ee5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>I3Identifier &amp;</type>
      <name>getIdentifier</name>
      <anchorfile>classI3SubIdentifier.html</anchorfile>
      <anchor>a4250f1068693c6e25be429d7417233a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareTo</name>
      <anchorfile>classI3SubIdentifier.html</anchorfile>
      <anchor>a87d3a63d11218b3ea38a55d8a8889233</anchor>
      <arglist>(const I3SubIdentifier &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>classI3SubIdentifier.html</anchorfile>
      <anchor>a33654dd9bc974e846038fab2d4670828</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IdentifierType</type>
      <name>type</name>
      <anchorfile>classI3SubIdentifier.html</anchorfile>
      <anchor>a73c1a6b7b89ce02cb976f6e832244e00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>I3IPAddress</type>
      <name>ipAddress</name>
      <anchorfile>classI3SubIdentifier.html</anchorfile>
      <anchor>a75538832f54d5e471c882b87be0bb196</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>I3Identifier</type>
      <name>identifier</name>
      <anchorfile>classI3SubIdentifier.html</anchorfile>
      <anchor>a52b50d0c96f250fcd77cdd275e957c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classI3SubIdentifier.html</anchorfile>
      <anchor>a167b32f938bec8d3e6faeecfebef16a1</anchor>
      <arglist>(std::ostream &amp;os, const I3SubIdentifier &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>I3Trigger</name>
    <filename>classI3Trigger.html</filename>
    <member kind="function">
      <type></type>
      <name>I3Trigger</name>
      <anchorfile>classI3Trigger.html</anchorfile>
      <anchor>ae25d67643644a513535cfe0296290692</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareTo</name>
      <anchorfile>classI3Trigger.html</anchorfile>
      <anchor>a79c667f24858e61d96fc6da7e7ff4c54</anchor>
      <arglist>(const I3Trigger &amp;t) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classI3Trigger.html</anchorfile>
      <anchor>a8cdeb93e44fea7b0e247b892ca70c7a9</anchor>
      <arglist>(const I3Trigger &amp;t) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classI3Trigger.html</anchorfile>
      <anchor>ac6ad5f78e97ea5ea9bac60a0414fb8a4</anchor>
      <arglist>(const I3Trigger &amp;t) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classI3Trigger.html</anchorfile>
      <anchor>aed4487e1092152cdf7b4d736295d7f82</anchor>
      <arglist>(const I3Trigger &amp;t) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentifier</name>
      <anchorfile>classI3Trigger.html</anchorfile>
      <anchor>a725ac2b3320c84d6b22d3afec2b50870</anchor>
      <arglist>(const I3Identifier &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInsertionTime</name>
      <anchorfile>classI3Trigger.html</anchorfile>
      <anchor>aa4578d84b46cb850124ad91ddb801e42</anchor>
      <arglist>(simtime_t time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentifierStack</name>
      <anchorfile>classI3Trigger.html</anchorfile>
      <anchor>afc785551de407a74c3f0e822b4d18c7b</anchor>
      <arglist>(I3IdentifierStack &amp;stack)</arglist>
    </member>
    <member kind="function">
      <type>I3Identifier &amp;</type>
      <name>getIdentifier</name>
      <anchorfile>classI3Trigger.html</anchorfile>
      <anchor>a008b5dc32f9d4a0203be48f2dab0e540</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const I3Identifier &amp;</type>
      <name>getIdentifier</name>
      <anchorfile>classI3Trigger.html</anchorfile>
      <anchor>a4523ecef9e5e57aee72247db0e225e45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getInsertionTime</name>
      <anchorfile>classI3Trigger.html</anchorfile>
      <anchor>a166c9095c1c25e74278acc6bed02bc07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classI3Trigger.html</anchorfile>
      <anchor>a53235c41a0781badc78c4be32d28749e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>I3IdentifierStack &amp;</type>
      <name>getIdentifierStack</name>
      <anchorfile>classI3Trigger.html</anchorfile>
      <anchor>aa9151cb1f263902d4aff32f8d9ea56c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const I3IdentifierStack &amp;</type>
      <name>getIdentifierStack</name>
      <anchorfile>classI3Trigger.html</anchorfile>
      <anchor>a052a287ab7e0031f077fbf45394203c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>classI3Trigger.html</anchorfile>
      <anchor>ac9acb07a14dec17422a596e8c6f9a47a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>I3Identifier</type>
      <name>identifier</name>
      <anchorfile>classI3Trigger.html</anchorfile>
      <anchor>abd45a9d45e8120084d28133eec1c6ddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>I3IdentifierStack</type>
      <name>identifierStack</name>
      <anchorfile>classI3Trigger.html</anchorfile>
      <anchor>a7132732244f72019e20325adfb5f0426</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>insertionTime</name>
      <anchorfile>classI3Trigger.html</anchorfile>
      <anchor>ab427d49ec92011a67460c2216bf19728</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classI3Trigger.html</anchorfile>
      <anchor>a90228bbd2e7b841c61fc781a47ceac59</anchor>
      <arglist>(std::ostream &amp;os, const I3Trigger &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>I3Triggers</name>
    <filename>classI3Triggers.html</filename>
    <base>I3BaseApp</base>
    <class kind="struct">I3Triggers::Client</class>
    <member kind="function">
      <type>void</type>
      <name>initializeApp</name>
      <anchorfile>classI3Triggers.html</anchorfile>
      <anchor>ae68f54311acc5de1a98d4a5b2131e58f</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeI3</name>
      <anchorfile>classI3Triggers.html</anchorfile>
      <anchor>a2a70701c14daf78bcddeb5825edbe544</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deliver</name>
      <anchorfile>classI3Triggers.html</anchorfile>
      <anchor>a2d29f37b06c4286c0ec4ef943c2bfa4f</anchor>
      <arglist>(I3Trigger &amp;trigger, I3IdentifierStack &amp;stack, cPacket *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classI3Triggers.html</anchorfile>
      <anchor>ad7221a908e5c5dcb25c7946204b15428</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createMessage</name>
      <anchorfile>classI3Triggers.html</anchorfile>
      <anchor>a67bbc456e2e8f43d1496aefecdc15972</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>myIndex</name>
      <anchorfile>classI3Triggers.html</anchorfile>
      <anchor>a6da5e4f5d2f472d5191eb2f22b13f9af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>I3Identifier</type>
      <name>myIdentifier</name>
      <anchorfile>classI3Triggers.html</anchorfile>
      <anchor>a4248a76762c06c9bf3b53703018a759a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>map&lt; I3Identifier, Client &gt;</type>
      <name>clients</name>
      <anchorfile>classI3Triggers.html</anchorfile>
      <anchor>a08ebae131f836b2f33c5c06aa0e7b8c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>I3Identifier</type>
      <name>publicIdentifier</name>
      <anchorfile>classI3Triggers.html</anchorfile>
      <anchor>afee0e55125209f0f83900f405ff47fbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>I3Identifier</type>
      <name>privateIdentifier</name>
      <anchorfile>classI3Triggers.html</anchorfile>
      <anchor>adc197911b56b715f0caf05445f2b59a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>handShakeTimer</name>
      <anchorfile>classI3Triggers.html</anchorfile>
      <anchor>a430ef2ab5e345d421735f569e414fcea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>sendPacketTimer</name>
      <anchorfile>classI3Triggers.html</anchorfile>
      <anchor>a3939aab66a38ac2ca9391ced47accc46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static int</type>
      <name>index</name>
      <anchorfile>classI3Triggers.html</anchorfile>
      <anchor>a6c2ff8d80b5f08eec17f8e9033b1ebe4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>I3Triggers::Client</name>
    <filename>structI3Triggers_1_1Client.html</filename>
    <member kind="variable">
      <type>I3Identifier</type>
      <name>clientId</name>
      <anchorfile>structI3Triggers_1_1Client.html</anchorfile>
      <anchor>a276ab0cc8e3493baad19cbae02ea1e27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>I3Identifier</type>
      <name>privateId</name>
      <anchorfile>structI3Triggers_1_1Client.html</anchorfile>
      <anchor>a3c0ef17a3f349591e76a92cf3524e0a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sentValue</name>
      <anchorfile>structI3Triggers_1_1Client.html</anchorfile>
      <anchor>ad958405a8504eb1fa4dd69a40d108089</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>I3TriggerSet</name>
    <filename>classI3TriggerSet.html</filename>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classI3TriggerSet.html</anchorfile>
      <anchor>a4de5761d6de90d117e33dc7314ddc331</anchor>
      <arglist>(std::ostream &amp;os, const I3TriggerSet &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>I3TRTClient</name>
    <filename>classI3TRTClient.html</filename>
    <base>I3BaseApp</base>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initializeI3</name>
      <anchorfile>classI3TRTClient.html</anchorfile>
      <anchor>aa0a6dada3a59eb784e3e5e9e63be90c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classI3TRTClient.html</anchorfile>
      <anchor>aba11cf3db6d21a1f4856aa5bbf2c8f93</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>I3TRTServer</name>
    <filename>classI3TRTServer.html</filename>
    <base>I3</base>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initializeApp</name>
      <anchorfile>classI3TRTServer.html</anchorfile>
      <anchor>a519a1018e61fc3442b656c18247a44a8</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deliver</name>
      <anchorfile>classI3TRTServer.html</anchorfile>
      <anchor>a5353a87055cb25bc71601deb2d0a34d4</anchor>
      <arglist>(OverlayKey &amp;key, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classI3TRTServer.html</anchorfile>
      <anchor>a9d5869a2da2559534bfe58c22018991d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InetInfo</name>
    <filename>classInetInfo.html</filename>
    <base>PeerInfo</base>
    <member kind="function">
      <type></type>
      <name>InetInfo</name>
      <anchorfile>classInetInfo.html</anchorfile>
      <anchor>a455d5bef6eff4bfc929858e1a0501921</anchor>
      <arglist>(uint32_t type, int moduleId, cObject **context)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAccessNetModule</name>
      <anchorfile>classInetInfo.html</anchorfile>
      <anchor>a9585d1249c2b1afcfedbf79e7256dcb9</anchor>
      <arglist>(AccessNet *accessNetModule)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodeID</name>
      <anchorfile>classInetInfo.html</anchorfile>
      <anchor>ad815c71baf87d6e6104aedade4f8aa73</anchor>
      <arglist>(int nodeID)</arglist>
    </member>
    <member kind="function">
      <type>AccessNet *</type>
      <name>getAccessNetModule</name>
      <anchorfile>classInetInfo.html</anchorfile>
      <anchor>a4daa8d6aa4109c5add6ed2f5da7adf23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNodeID</name>
      <anchorfile>classInetInfo.html</anchorfile>
      <anchor>a85bd199781386272bf66bb3af9141a08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dummy</name>
      <anchorfile>classInetInfo.html</anchorfile>
      <anchor>ad507f7f658cc465a56f39b6cc472219d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AccessNet *</type>
      <name>accessNetModule</name>
      <anchorfile>classInetInfo.html</anchorfile>
      <anchor>af213a466fd3c0f8f9737bc782eb8eac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nodeID</name>
      <anchorfile>classInetInfo.html</anchorfile>
      <anchor>a73cca148f3d6b58400f11a08aafb5d48</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InetUnderlayConfigurator</name>
    <filename>classInetUnderlayConfigurator.html</filename>
    <base>UnderlayConfigurator</base>
    <member kind="function">
      <type>TransportAddress *</type>
      <name>createNode</name>
      <anchorfile>classInetUnderlayConfigurator.html</anchorfile>
      <anchor>ae8568a771c843767277558c4350774ec</anchor>
      <arglist>(NodeType type, bool initialize=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preKillNode</name>
      <anchorfile>classInetUnderlayConfigurator.html</anchorfile>
      <anchor>ad2416c55aa741e9fb8a5c534c8dbdf58</anchor>
      <arglist>(NodeType type, TransportAddress *addr=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>migrateNode</name>
      <anchorfile>classInetUnderlayConfigurator.html</anchorfile>
      <anchor>a66db5fcccbd12df400b1707863cae9e1</anchor>
      <arglist>(NodeType type, TransportAddress *addr=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initializeUnderlay</name>
      <anchorfile>classInetUnderlayConfigurator.html</anchorfile>
      <anchor>ab2766113859f05dc03723dbc2a9736a6</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setUpIPv4</name>
      <anchorfile>classInetUnderlayConfigurator.html</anchorfile>
      <anchor>a8a7d9b35842e31ffa7a590110d11205a</anchor>
      <arglist>(cTopology &amp;topo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setUpIPv6</name>
      <anchorfile>classInetUnderlayConfigurator.html</anchorfile>
      <anchor>ac37e6f6adee00d6dfbce628b3fc735f9</anchor>
      <arglist>(cTopology &amp;topo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classInetUnderlayConfigurator.html</anchorfile>
      <anchor>ab228f2cb20ae7bd43befd637645b4f7e</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finishUnderlay</name>
      <anchorfile>classInetUnderlayConfigurator.html</anchorfile>
      <anchor>a49b4205bc24b00ef83d3eb634f6f8f63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setDisplayString</name>
      <anchorfile>classInetUnderlayConfigurator.html</anchorfile>
      <anchor>a4745a89b7610e8b79207d6ea5b667a92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; cModule * &gt;</type>
      <name>accessNode</name>
      <anchorfile>classInetUnderlayConfigurator.html</anchorfile>
      <anchor>a8271d89920574711ddd9c8cd4a65fab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::deque&lt; IPvXAddress &gt;</type>
      <name>killList</name>
      <anchorfile>classInetUnderlayConfigurator.html</anchorfile>
      <anchor>a9dd551ac81ef13c2da0aed929c5c3256</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; int &gt;</type>
      <name>scheduledID</name>
      <anchorfile>classInetUnderlayConfigurator.html</anchorfile>
      <anchor>a703bd91d5cc400f60418ef23b40e0944</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numCreated</name>
      <anchorfile>classInetUnderlayConfigurator.html</anchorfile>
      <anchor>a3ce6afb58a3a639cd8fc7977233b02b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numKilled</name>
      <anchorfile>classInetUnderlayConfigurator.html</anchorfile>
      <anchor>aa7434e33dfa90cc8b0b14575a12a33fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>accessRouterNum</name>
      <anchorfile>classInetUnderlayConfigurator.html</anchorfile>
      <anchor>af94467080ac95c8b5197568da39cb1fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>overlayAccessRouterNum</name>
      <anchorfile>classInetUnderlayConfigurator.html</anchorfile>
      <anchor>a9ba1baa1cd1979f23eda0585eadd39e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>overlayTerminalNum</name>
      <anchorfile>classInetUnderlayConfigurator.html</anchorfile>
      <anchor>a0bf427de189feb3897000684a12aee55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IPv6Words</name>
    <filename>structIPv6Words.html</filename>
    <member kind="function">
      <type></type>
      <name>IPv6Words</name>
      <anchorfile>structIPv6Words.html</anchorfile>
      <anchor>ae5725c87d072596acab751cb7d709d64</anchor>
      <arglist>(IPvXAddress addr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IPv6Words</name>
      <anchorfile>structIPv6Words.html</anchorfile>
      <anchor>a525936096223a987011ea49fb34acb18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>d0</name>
      <anchorfile>structIPv6Words.html</anchorfile>
      <anchor>a02ec1eedad12fdb90a2632a32616aee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>d1</name>
      <anchorfile>structIPv6Words.html</anchorfile>
      <anchor>aec4a2eb8a6be8e6a216e56e2d0a150eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>d2</name>
      <anchorfile>structIPv6Words.html</anchorfile>
      <anchor>a8048b4119ed9147a7f38efa7f8038cf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>d3</name>
      <anchorfile>structIPv6Words.html</anchorfile>
      <anchor>ad5a73f32f7caaa24ea432f81d38b04ab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IterativeLookup</name>
    <filename>classIterativeLookup.html</filename>
    <base>RpcListener</base>
    <base>AbstractLookup</base>
    <base>Comparator&lt; OverlayKey &gt;</base>
    <class kind="class">IterativeLookup::RpcInfo</class>
    <class kind="class">IterativeLookup::RpcInfoVector</class>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>a4e40bb98c6b43e7bdabb4bdbd099658e</anchor>
      <arglist>(const OverlayKey &amp;lhs, const OverlayKey &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IterativeLookup</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>a936cb263f7a1eea687355eb58af67bb8</anchor>
      <arglist>(BaseOverlay *overlay, RoutingType routingType, const IterativeLookupConfiguration &amp;config, const cPacket *findNodeExt=NULL, bool appLookup=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IterativeLookup</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>a6384bfe8bb60a1883cfe80c570642ad8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>a3261d37586fab649d36ad2a77bc09f99</anchor>
      <arglist>(const OverlayKey &amp;key, int numSiblings=1, int hopCountMax=0, int retries=0, LookupListener *listener=NULL)</arglist>
    </member>
    <member kind="function">
      <type>const NodeVector &amp;</type>
      <name>getResult</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>a791ae1fd8f40914e677a8f2997989427</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>ae38d87dbf2763eff00ab8e2acffaa9f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abortLookup</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>a27c139f19966151e2a10dfa1b00cd3a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getAccumulatedHops</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>a29364035c8af63fc0a39d64e7902a110</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; int, int &gt;</type>
      <name>PendingPings</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>a8e0b2d509851ef8b1af8e675e7b74a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::set&lt; NodeHandle &gt;</type>
      <name>MajoritySiblings</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>a5eaba80fb4cf5372879e84a34b0d1e20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>UNORDERED_MAP&lt; TransportAddress, RpcInfoVector, TransportAddress::hashFcn &gt;</type>
      <name>RpcInfoMap</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>a41dc12f1417a1adfb9295fe48b0eb948</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IterativePathLookup *</type>
      <name>createPathLookup</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>a5675f19066a7dff58b7b2c87376ff31e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual FindNodeCall *</type>
      <name>createFindNodeCall</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>ac5d6839433784bba411b7e1b1030fa7c</anchor>
      <arglist>(cPacket *findNodeExt=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>addSibling</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>a4dd593d1dd314c7330d07a76c1bdd184</anchor>
      <arglist>(const NodeHandle &amp;handle, bool assured=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setVisited</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>a8c65603748059e4da09d35aa235d9f8b</anchor>
      <arglist>(const TransportAddress &amp;addr, bool visitedFlag=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getVisited</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>a6df8493b4698270c495368900b4659d9</anchor>
      <arglist>(const TransportAddress &amp;addr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setPinged</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>a86791872205db6de1e0340747c6b32a7</anchor>
      <arglist>(const TransportAddress &amp;addr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getPinged</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>af06f5dff81d924eae4b0049e7d4941ba</anchor>
      <arglist>(const TransportAddress &amp;addr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setDead</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>abd0a99508534271d002c86187d52a04c</anchor>
      <arglist>(const TransportAddress &amp;addr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getDead</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>a7f40e9e9e60e7bfde140dce5ca711dde</anchor>
      <arglist>(const TransportAddress &amp;addr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRpcResponse</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>a2da433367aefbe195e73fab55e6bb93b</anchor>
      <arglist>(BaseResponseMessage *msg, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRpcTimeout</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>acc8075b11d44969beed5a2561bc9d144</anchor>
      <arglist>(BaseCallMessage *msg, const TransportAddress &amp;dest, cPolymorphic *context, int rpcId, const OverlayKey &amp;destKey=OverlayKey::UNSPECIFIED_KEY)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendRpc</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>aa08c88d2280307cdfa25cf4d620a49c3</anchor>
      <arglist>(const NodeHandle &amp;handle, FindNodeCall *call, IterativePathLookup *listener, int rpcId)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>a327bf14e920465e98d8e2de487fd6f18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>aab42716cc4ee23093e445dac11bfa107</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkStop</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>aa26828914188fcb77e0183ad9cca8896</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>key</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>af10bb4b9ffc2769f68354cc9ffdceaa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseOverlay *</type>
      <name>overlay</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>acd6493a771f0a7b2810e446e3c3e0200</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LookupListener *</type>
      <name>listener</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>adca8041747c3611391e3248925936054</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; IterativePathLookup * &gt;</type>
      <name>paths</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>a8749c654ec3f0cc91325c898e309efb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RoutingType</type>
      <name>routingType</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>a5e73fc1eb5b50ecc90b599f404fcf2c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IterativeLookupConfiguration</type>
      <name>config</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>a77ce1fdafab25e2fe812a4f1a63c2e7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cPacket *</type>
      <name>firstCallExt</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>a7cc5f2ddf7e4371b57069d7658284f51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>finishedPaths</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>a7bb1277a4cee83b6edf0d38711f598d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>successfulPaths</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>a76b6a21018008c7e61962c937b88ee0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>accumulatedHops</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>abefa68c674e7a1c2dc989ce5fcc35345</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>finished</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>ad68666d67446df103953c44063717cd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>success</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>a9ea0263fb2157bb620c119126e7d2adb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>running</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>a402f8a30665edd47a45d54790c143886</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>retries</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>a0d8c0ae1d1027e449f5e56a16da0cc7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>appLookup</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>aacf1fb5f99f1865cd0bee3d4ab5c591e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimTime</type>
      <name>startTime</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>afa42639fe71b40ced9389487b82b9f54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeVector</type>
      <name>siblings</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>af181530c3bd6653be8076630349072e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress::Set</type>
      <name>visited</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>ad68222af27834798e59c4f76f547589e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress::Set</type>
      <name>dead</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>ac2afd23f53e7a75ea17de721f703071f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress::Set</type>
      <name>pinged</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>aa89709037bda955931030be770414d4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MajoritySiblings</type>
      <name>majoritySiblings</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>ad3cb08eb3f41686cd172f37b90b12dbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numSiblings</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>aec93d80195dd47d68f544b03c0831688</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>hopCountMax</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>a3025d2e121c4e8faf15f59383ad00ca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PendingPings</type>
      <name>pendingPings</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>a300ce1df9fc89515178ee19812813581</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RpcInfoMap</type>
      <name>rpcs</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>a7547422c7787a93b656857153448ca60</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>IterativePathLookup</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>aef42f314710869966a27962174cb1ca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BaseOverlay</name>
      <anchorfile>classIterativeLookup.html</anchorfile>
      <anchor>a5e3aa0e4c690d9649bf10dfca1e81a5c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IterativeLookup::RpcInfo</name>
    <filename>classIterativeLookup_1_1RpcInfo.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>vrpcId</name>
      <anchorfile>classIterativeLookup_1_1RpcInfo.html</anchorfile>
      <anchor>a252d972f97f7c256a757ebf7bde58c6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>proxVectorId</name>
      <anchorfile>classIterativeLookup_1_1RpcInfo.html</anchorfile>
      <anchor>af83aa6bbf6a768b4b786623041fa3a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IterativePathLookup *</type>
      <name>path</name>
      <anchorfile>classIterativeLookup_1_1RpcInfo.html</anchorfile>
      <anchor>ae33bf07bafe69957f39defc761d60960</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IterativeLookup::RpcInfoVector</name>
    <filename>classIterativeLookup_1_1RpcInfoVector.html</filename>
    <base>std::vector</base>
    <member kind="variable">
      <type>uint32_t</type>
      <name>nonce</name>
      <anchorfile>classIterativeLookup_1_1RpcInfoVector.html</anchorfile>
      <anchor>a5120188ca58f1cb131baa1b1b790caa4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IterativeLookupConfiguration</name>
    <filename>classIterativeLookupConfiguration.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>redundantNodes</name>
      <anchorfile>classIterativeLookupConfiguration.html</anchorfile>
      <anchor>a5ffefd1d559420cc498307521ae1fac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>parallelPaths</name>
      <anchorfile>classIterativeLookupConfiguration.html</anchorfile>
      <anchor>ad847495e9bdd53b83437150b0b26381e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>parallelRpcs</name>
      <anchorfile>classIterativeLookupConfiguration.html</anchorfile>
      <anchor>ad0cc5694665de82ca47d2763d829238a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>strictParallelRpcs</name>
      <anchorfile>classIterativeLookupConfiguration.html</anchorfile>
      <anchor>a4b0e4def1dc1071314091dc9e5ec854a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>useAllParallelResponses</name>
      <anchorfile>classIterativeLookupConfiguration.html</anchorfile>
      <anchor>a0285a36b3308b2d9d9531658fe08cb29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>newRpcOnEveryTimeout</name>
      <anchorfile>classIterativeLookupConfiguration.html</anchorfile>
      <anchor>a691b1a92109829e5a7e84bfbddd868ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>newRpcOnEveryResponse</name>
      <anchorfile>classIterativeLookupConfiguration.html</anchorfile>
      <anchor>a9b8b8df5836e6d138869c54a0e59ca26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>finishOnFirstUnchanged</name>
      <anchorfile>classIterativeLookupConfiguration.html</anchorfile>
      <anchor>a156800b5539367619349b4b55542931c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>verifySiblings</name>
      <anchorfile>classIterativeLookupConfiguration.html</anchorfile>
      <anchor>ac4f7617d2cf8e6a7a9d178b9092fec7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>majoritySiblings</name>
      <anchorfile>classIterativeLookupConfiguration.html</anchorfile>
      <anchor>a948fd1a937d5d2fb516e0e9181183078</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>merge</name>
      <anchorfile>classIterativeLookupConfiguration.html</anchorfile>
      <anchor>a1bb036f4f3d11da022eacb20c9175132</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>failedNodeRpcs</name>
      <anchorfile>classIterativeLookupConfiguration.html</anchorfile>
      <anchor>a7e4a47e8ecba9deba2509cb674c53e8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>visitOnlyOnce</name>
      <anchorfile>classIterativeLookupConfiguration.html</anchorfile>
      <anchor>a7c59dacd3b232a23104bf8d6e9986f61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>acceptLateSiblings</name>
      <anchorfile>classIterativeLookupConfiguration.html</anchorfile>
      <anchor>addae3ccd0ed97c72baea50ad03711f5a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IterativePathLookup</name>
    <filename>classIterativePathLookup.html</filename>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>accepts</name>
      <anchorfile>classIterativePathLookup.html</anchorfile>
      <anchor>a3304a09e2c2626895b5276a014de27e5</anchor>
      <arglist>(int rpcId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleResponse</name>
      <anchorfile>classIterativePathLookup.html</anchorfile>
      <anchor>a1af4426e938ba4ba9d76ec4d46ca0348</anchor>
      <arglist>(FindNodeResponse *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleTimeout</name>
      <anchorfile>classIterativePathLookup.html</anchorfile>
      <anchor>a11066878c6d037344ca487f19ad3077a</anchor>
      <arglist>(BaseCallMessage *msg, const TransportAddress &amp;dest, int rpcId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleFailedNodeResponse</name>
      <anchorfile>classIterativePathLookup.html</anchorfile>
      <anchor>a2d22965879ebb8da5b908b7d065ba990</anchor>
      <arglist>(const NodeHandle &amp;src, cPacket *findNodeExt, bool retry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IterativePathLookup</name>
      <anchorfile>classIterativePathLookup.html</anchorfile>
      <anchor>a2cf0c0fc6ca78c5100349a9362348a7b</anchor>
      <arglist>(IterativeLookup *lookup)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~IterativePathLookup</name>
      <anchorfile>classIterativePathLookup.html</anchorfile>
      <anchor>a0dbf826c94da753a4634946066cb0c71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>add</name>
      <anchorfile>classIterativePathLookup.html</anchorfile>
      <anchor>a2ad91c0346d1e407c236f3a2cd41c27c</anchor>
      <arglist>(const NodeHandle &amp;handle, const NodeHandle &amp;source=NodeHandle::UNSPECIFIED_NODE)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IterativeLookup *</type>
      <name>lookup</name>
      <anchorfile>classIterativePathLookup.html</anchorfile>
      <anchor>af9aa789d7d9f6ff3adb53cc43ac10ef9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseOverlay *</type>
      <name>overlay</name>
      <anchorfile>classIterativePathLookup.html</anchorfile>
      <anchor>af8a1b88da9e28f3cc57a631e71630049</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>hops</name>
      <anchorfile>classIterativePathLookup.html</anchorfile>
      <anchor>a23bb77aa499d97a05d0ec2b1c4df3e8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>step</name>
      <anchorfile>classIterativePathLookup.html</anchorfile>
      <anchor>a410d6a3a364b1f86b58f29aa25df22a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>pendingRpcs</name>
      <anchorfile>classIterativePathLookup.html</anchorfile>
      <anchor>af6f338001023ab9b7c63b3eaccfce1f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>finished</name>
      <anchorfile>classIterativePathLookup.html</anchorfile>
      <anchor>a6435f0c488ffa7d3687b612d132933f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>success</name>
      <anchorfile>classIterativePathLookup.html</anchorfile>
      <anchor>a39ceb52b27a3d55d3e631a619dca9ece</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LookupVector</type>
      <name>nextHops</name>
      <anchorfile>classIterativePathLookup.html</anchorfile>
      <anchor>a5b08bcc52ca95e3ffa62ef4e6b27b6f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; TransportAddress, NodeHandle &gt;</type>
      <name>oldNextHops</name>
      <anchorfile>classIterativePathLookup.html</anchorfile>
      <anchor>a800823ba22e2d85df41327e1cde10505</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>sendRpc</name>
      <anchorfile>classIterativePathLookup.html</anchorfile>
      <anchor>acefe314ef7bdfe0060451f9084d42ae3</anchor>
      <arglist>(int num, cPacket *FindNodeExt=NULL)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>sendNewRpcAfterTimeout</name>
      <anchorfile>classIterativePathLookup.html</anchorfile>
      <anchor>aa13625e9aa3bb0e8c26a849bd069ab03</anchor>
      <arglist>(cPacket *findNodeExt)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>IterativeLookup</name>
      <anchorfile>classIterativePathLookup.html</anchorfile>
      <anchor>af4b6fb17cb1da8f210d175cdba0c2c5a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JoinCall</name>
    <filename>classJoinCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>JoinCall</name>
      <anchorfile>classJoinCall.html</anchorfile>
      <anchor>a47bd81203c1f531a64ce17b6829abc8e</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JoinCall</name>
      <anchorfile>classJoinCall.html</anchorfile>
      <anchor>a7567ac218327c92bcd7f10c62fc37616</anchor>
      <arglist>(const JoinCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~JoinCall</name>
      <anchorfile>classJoinCall.html</anchorfile>
      <anchor>a791d4e63ae6ad76c45ed0c0637109ae8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>JoinCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classJoinCall.html</anchorfile>
      <anchor>a120879df5da12a1af2177f72141a6f44</anchor>
      <arglist>(const JoinCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual JoinCall *</type>
      <name>dup</name>
      <anchorfile>classJoinCall.html</anchorfile>
      <anchor>ae1fdb8ea793858e985ef30c3b3014294</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classJoinCall.html</anchorfile>
      <anchor>ac1747121229efef8086f28b1073cc60f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classJoinCall.html</anchorfile>
      <anchor>a3fb4b4514f2e5fd2d0e293f6aa742eed</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classJoinCall.html</anchorfile>
      <anchor>acb9946ae312ca1fdd3b8ffa7b8a15f82</anchor>
      <arglist>(const JoinCall &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classJoinCall.html</anchorfile>
      <anchor>ab7a9aaac8c5de07a3a8ecaf91ebfbafb</anchor>
      <arglist>(const JoinCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JoinOverlay</name>
    <filename>classJoinOverlay.html</filename>
    <base>XmlRpc::XmlRpcServerMethod</base>
    <member kind="function">
      <type></type>
      <name>JoinOverlay</name>
      <anchorfile>classJoinOverlay.html</anchorfile>
      <anchor>a558fdad6737655d5fc6fcb62e4a6fa93</anchor>
      <arglist>(XmlRpcServer *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>execute</name>
      <anchorfile>classJoinOverlay.html</anchorfile>
      <anchor>a62584d826421174a535e39dc7f696f8b</anchor>
      <arglist>(XmlRpcValue &amp;params, XmlRpcValue &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>help</name>
      <anchorfile>classJoinOverlay.html</anchorfile>
      <anchor>a6470154aa8aff35d644db70a7022e2a9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JoinResponse</name>
    <filename>classJoinResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>JoinResponse</name>
      <anchorfile>classJoinResponse.html</anchorfile>
      <anchor>a3f686a97c290a9fe8756eb05aa3e6f8a</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JoinResponse</name>
      <anchorfile>classJoinResponse.html</anchorfile>
      <anchor>a4d264c63ce0b4da6f331852770f22bdf</anchor>
      <arglist>(const JoinResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~JoinResponse</name>
      <anchorfile>classJoinResponse.html</anchorfile>
      <anchor>a64dfe6ef0f147712a2ac258eab9a3abd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>JoinResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classJoinResponse.html</anchorfile>
      <anchor>ad6e2c851ab7217ba452125be465a18de</anchor>
      <arglist>(const JoinResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual JoinResponse *</type>
      <name>dup</name>
      <anchorfile>classJoinResponse.html</anchorfile>
      <anchor>a9dd0e12e58b78275bf29999dbe510916</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classJoinResponse.html</anchorfile>
      <anchor>ad71a51d72f02c6d6523cd035be9e0da4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classJoinResponse.html</anchorfile>
      <anchor>a67394b56445c32fafb32c626d03adb9e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSucNum</name>
      <anchorfile>classJoinResponse.html</anchorfile>
      <anchor>a3482fae5bbcec91a90412a89fa9dda81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSucNum</name>
      <anchorfile>classJoinResponse.html</anchorfile>
      <anchor>a4f7b7086ea9b9793b8b78bb2dcf74301</anchor>
      <arglist>(int sucNum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSucNodeArraySize</name>
      <anchorfile>classJoinResponse.html</anchorfile>
      <anchor>a2fa562a6bd7ba75d5bc589ec1ca7c51f</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSucNodeArraySize</name>
      <anchorfile>classJoinResponse.html</anchorfile>
      <anchor>a24fdedb28a061278167ef1a0fef19c3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getSucNode</name>
      <anchorfile>classJoinResponse.html</anchorfile>
      <anchor>a29032a553da742b193eaf72d915889c9</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getSucNode</name>
      <anchorfile>classJoinResponse.html</anchorfile>
      <anchor>aa93ecc1d49841a9cf41dcd1d059eac5f</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSucNode</name>
      <anchorfile>classJoinResponse.html</anchorfile>
      <anchor>a6afb5a5de36f68f4cb3c5cb50bf138a2</anchor>
      <arglist>(unsigned int k, const NodeHandle &amp;sucNode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getPreNode</name>
      <anchorfile>classJoinResponse.html</anchorfile>
      <anchor>a0e1bd74c6e2e250f0d0b9d349f443d41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getPreNode</name>
      <anchorfile>classJoinResponse.html</anchorfile>
      <anchor>a0c69353e4db3fe4dbc26bf6e8cb068fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPreNode</name>
      <anchorfile>classJoinResponse.html</anchorfile>
      <anchor>a1fdbdcfea9968c800edfc6d60eac9632</anchor>
      <arglist>(const NodeHandle &amp;preNode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classJoinResponse.html</anchorfile>
      <anchor>a67b241b8d37042fe705fc4afbbefb1b8</anchor>
      <arglist>(const JoinResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sucNum_var</name>
      <anchorfile>classJoinResponse.html</anchorfile>
      <anchor>a6c06fa8cd71017df0f94b48d052a5e80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle *</type>
      <name>sucNode_var</name>
      <anchorfile>classJoinResponse.html</anchorfile>
      <anchor>aab57762229b431b5918c31b33f5f97bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>sucNode_arraysize</name>
      <anchorfile>classJoinResponse.html</anchorfile>
      <anchor>aad360f0d66f42ca3c8f618a1bb732343</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>preNode_var</name>
      <anchorfile>classJoinResponse.html</anchorfile>
      <anchor>ae0e95c21a9dde180c8aa44819a9937ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classJoinResponse.html</anchorfile>
      <anchor>ada7006f6ec4753c3eece33b5bbb30d15</anchor>
      <arglist>(const JoinResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Kademlia</name>
    <filename>classKademlia.html</filename>
    <base>BaseOverlay</base>
    <base>ProxListener</base>
    <member kind="function">
      <type></type>
      <name>Kademlia</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a75d6af36c354ebd0a180eb15a392def5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Kademlia</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a76944a48a365d24b78df662970484bc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeOverlay</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a3230c643b585b8f0745cebb7a577349c</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finishOverlay</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a9682b56476fa08cd0af341312d2c8186</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>joinOverlay</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a23662900f3d17541a2b9051a3821a226</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSiblingFor</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>ada80a26aba760ec53ce539d8180cf865</anchor>
      <arglist>(const NodeHandle &amp;node, const OverlayKey &amp;key, int numSiblings, bool *err)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxNumSiblings</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a7253ff80d709265f6e74d3ebf4e691ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxNumRedundantNodes</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a5127b16ed36be0a202ecb7b890a7e634</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a27b31a4a713eadd2c8f1a83d66dc69a7</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleRpcCall</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a82d872d3d7797e94985557d04f7c9ed5</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleUDPMessage</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>af1edeee0ba2c1f2fb26355076814f102</anchor>
      <arglist>(BaseOverlayMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>proxCallback</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a7545cb508c37d7bf706b3e5a4950c695</anchor>
      <arglist>(const TransportAddress &amp;node, int rpcId, cPolymorphic *contextPointer, Prox prox)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeVector *</type>
      <name>findNode</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>aafad68d123da52e5fefb719699ed2dc3</anchor>
      <arglist>(const OverlayKey &amp;key, int numRedundantNodes, int numSiblings, BaseOverlayMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleRpcResponse</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>af8451d8dae93dbb1117574b3820af76e</anchor>
      <arglist>(BaseResponseMessage *msg, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleRpcTimeout</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a9c237aa2447a9b2323bf34a95c852005</anchor>
      <arglist>(BaseCallMessage *msg, const TransportAddress &amp;dest, cPolymorphic *context, int rpcId, const OverlayKey &amp;destKey)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleBucketRefreshTimerExpired</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a53a73a3a496d4fe37c0310b7b6eee214</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>OverlayKey</type>
      <name>distance</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a8267f4c6d125a1cdd749164f6a1ee65e</anchor>
      <arglist>(const OverlayKey &amp;x, const OverlayKey &amp;y, bool useAlternative=false) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateTooltip</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>acd029f455e0c6150c038c69fa493696c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>lookupFinished</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>adac287af3943cfcbc1a3834fa8d0c37d</anchor>
      <arglist>(bool isValid)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleNodeGracefulLeaveNotification</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>ae21a58f63a448c1b41edd84c2e5a0cb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>k</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>acc2f4767a1687764f2d732872511a7ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>b</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a13735e80816c965e135d6a686d5e4713</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>s</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>aa10a75cebe4964a98840643b84063548</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>maxStaleCount</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a742e20c8d232a8623f4a85c2f0cad1e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>exhaustiveRefresh</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>ae7a670589ec838bbf79d684fba016185</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>pingNewSiblings</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a113faa91ed3ec564f8b61718101695c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>secureMaintenance</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a1f28727c1a562f3e40cd315dd22dd8cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>newMaintenance</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a68e77f3b48652f19219a6c6c9a1a76d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>enableReplacementCache</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a151fd59bc6de940e684fbad408083ac4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>replacementCachePing</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>adc22fe7536c4bea9677ed901b95820a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint</type>
      <name>replacementCandidates</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a8ebc8abde092aad89dfa813ba640e6ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>siblingRefreshNodes</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>ad4d31fcf8c7300404ae07523daab8cc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bucketRefreshNodes</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a5ab8d39b7c098f21d9577d5dfc82a4f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>activePing</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>aa83e5da5199e71427e731d4a1ad7ce9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>proximityRouting</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>aa8b1be416dea22c671ae2774936226c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>proximityNeighborSelection</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>aa1c9d6f7ff020a8a9249f1da3d1fedbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>altRecMode</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a53857e5e13f67a12e810db01a18400dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>minSiblingTableRefreshInterval</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>ae22800e069a69a317d4906a29e4da71d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>minBucketRefreshInterval</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>abda8d541b714ec855d891a2938fa8b3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>siblingPingInterval</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a99dbb3ee2302a9861a518b3d75cb3eb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>bucketRefreshTimer</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>aba4bc00b985d8a3758cb2b1b9e4a74b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>siblingPingTimer</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a683327ac98618e38b3dd1dfe5850ab09</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>routingInit</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a0fc8d7eadb6ed086536cbc273460d7a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>routingDeinit</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>ad54c5bcac7db895e0e0eec5cd0109da2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>routingBucketIndex</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>ac281bfbd16423020b46561a0df3d28c5</anchor>
      <arglist>(const OverlayKey &amp;key, bool firstOnLayer=false)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>KademliaBucket *</type>
      <name>routingBucket</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a12ad26290a17accd9645415e7e8cb9d3</anchor>
      <arglist>(const OverlayKey &amp;key, bool ensure)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>routingAdd</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a9c72c87286495818109f5460a7eefea9</anchor>
      <arglist>(const NodeHandle &amp;handle, bool isAlive, simtime_t rtt=MAXTIME, bool maintenanceLookup=false)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>routingTimeout</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a21ca74bfdaf4114ca2f468935856e67b</anchor>
      <arglist>(const OverlayKey &amp;key, bool immediately=false)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>refillSiblingTable</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a0cf73bc94792b9be525f73fa3a4551da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>sendSiblingFindNodeCall</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a837fc1c137eebd1189ff401b4bd97a99</anchor>
      <arglist>(const TransportAddress &amp;dest)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setBucketUsage</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a7581a168ae2e143001a7a93ff4a1779a</anchor>
      <arglist>(const OverlayKey &amp;key)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>recursiveRoutingHook</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a2d0f3eebfa308ff4c88831d917efa8fd</anchor>
      <arglist>(const TransportAddress &amp;dest, BaseRouteMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>handleFailedNode</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>aebd62488323d6cebf7812974114ed38b</anchor>
      <arglist>(const TransportAddress &amp;failed)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>bucketRefreshCount</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a210614b1ea667d544d256a1cc5e94490</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>siblingTableRefreshCount</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a9b7cdab70352fcc52c0cfe55541807ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>nodesReplaced</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>aa1eda90d9ae7c58ff916a9d493d7c1e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>KeyDistanceComparator&lt; KeyXorMetric &gt; *</type>
      <name>comparator</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a2121cb9b6da909626b69a2253923ae11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>KademliaBucket *</type>
      <name>siblingTable</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a12d33f20db6e3709117f9894e73c6534</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; KademliaBucket * &gt;</type>
      <name>routingTable</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a326e44556787c7708ff8b252caff5ad1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numBuckets</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a307336180b2937d77360219c9ac91c3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>KademliaLookupListener</name>
      <anchorfile>classKademlia.html</anchorfile>
      <anchor>a61b072e95046f98ad49a3f5589fe9a45</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KademliaBucket</name>
    <filename>classKademliaBucket.html</filename>
    <base>BaseKeySortedVector&lt; KademliaBucketEntry &gt;</base>
    <member kind="function">
      <type></type>
      <name>KademliaBucket</name>
      <anchorfile>classKademliaBucket.html</anchorfile>
      <anchor>a72a107710664dfede95afd83f16a0827</anchor>
      <arglist>(uint16_t maxSize=0, const Comparator&lt; OverlayKey &gt; *comparator=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~KademliaBucket</name>
      <anchorfile>classKademliaBucket.html</anchorfile>
      <anchor>aece5e99e4843951bb1b49f880265f246</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLastUsage</name>
      <anchorfile>classKademliaBucket.html</anchorfile>
      <anchor>a8b5481352d9ad3354647e5cae8c6e5fa</anchor>
      <arglist>(simtime_t time)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getLastUsage</name>
      <anchorfile>classKademliaBucket.html</anchorfile>
      <anchor>af0d14164aa8f871b1696245b78ad9a6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>std::list&lt; KademliaBucketEntry &gt;</type>
      <name>replacementCache</name>
      <anchorfile>classKademliaBucket.html</anchorfile>
      <anchor>a6b0dc39d58d9d8ba705d37c89529c16a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>lastUsage</name>
      <anchorfile>classKademliaBucket.html</anchorfile>
      <anchor>a73dfade8a41e7530733cb47265ce6222</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KademliaBucketEntry</name>
    <filename>classKademliaBucketEntry.html</filename>
    <base>ProxNodeHandle</base>
    <member kind="function">
      <type></type>
      <name>KademliaBucketEntry</name>
      <anchorfile>classKademliaBucketEntry.html</anchorfile>
      <anchor>a50bedf4b1b391f8082ac9a02741cdc2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KademliaBucketEntry</name>
      <anchorfile>classKademliaBucketEntry.html</anchorfile>
      <anchor>a615bed57aa0e12e926c6dc17930c2105</anchor>
      <arglist>(const NodeHandle &amp;handle, simtime_t prox=MAXTIME)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getRtt</name>
      <anchorfile>classKademliaBucketEntry.html</anchorfile>
      <anchor>a9f844940589695ff73900586247e47bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRtt</name>
      <anchorfile>classKademliaBucketEntry.html</anchorfile>
      <anchor>a9e29a141071d1dcfb9b6a5ef8151aebd</anchor>
      <arglist>(simtime_t rtt)</arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>getStaleCount</name>
      <anchorfile>classKademliaBucketEntry.html</anchorfile>
      <anchor>a8515d0f0c8944b90178010f9c776c816</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStaleCount</name>
      <anchorfile>classKademliaBucketEntry.html</anchorfile>
      <anchor>a8a2def80fbc6a35e21de8c13c334633c</anchor>
      <arglist>(uint8_t staleCount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetStaleCount</name>
      <anchorfile>classKademliaBucketEntry.html</anchorfile>
      <anchor>a394716e3b5f9ef18898577340beea6d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incStaleCount</name>
      <anchorfile>classKademliaBucketEntry.html</anchorfile>
      <anchor>a2c497dd359c921ed3a101846acc6c868</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLastSeen</name>
      <anchorfile>classKademliaBucketEntry.html</anchorfile>
      <anchor>a7dcf9a1bf9e8f22d2f23bdee614e1dac</anchor>
      <arglist>(simtime_t lastSeen)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getLastSeen</name>
      <anchorfile>classKademliaBucketEntry.html</anchorfile>
      <anchor>a7e21f75e645f046e5b5eaf8bc773caea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPingSent</name>
      <anchorfile>classKademliaBucketEntry.html</anchorfile>
      <anchor>a8a762048a7af58122109f72d3a0a8a83</anchor>
      <arglist>(bool pingSent)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPingSent</name>
      <anchorfile>classKademliaBucketEntry.html</anchorfile>
      <anchor>af71eea78bfe187553ace90082402396c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint8_t</type>
      <name>staleCount</name>
      <anchorfile>classKademliaBucketEntry.html</anchorfile>
      <anchor>ab7d66e2fc4e3f517344543c813901c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>lastSeen</name>
      <anchorfile>classKademliaBucketEntry.html</anchorfile>
      <anchor>a61bebcc64bccda92215e3b1f097250b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>pingSent</name>
      <anchorfile>classKademliaBucketEntry.html</anchorfile>
      <anchor>a1e53bfcb2037ffb66da0c5b5a8d02acd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classKademliaBucketEntry.html</anchorfile>
      <anchor>af0676d6dff4f270ca18e42085b6d6a28</anchor>
      <arglist>(std::ostream &amp;os, const KademliaBucketEntry &amp;n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KademliaLookupListener</name>
    <filename>classKademliaLookupListener.html</filename>
    <base>LookupListener</base>
    <member kind="function">
      <type></type>
      <name>KademliaLookupListener</name>
      <anchorfile>classKademliaLookupListener.html</anchorfile>
      <anchor>a359df785f335d5d493f65b0f1387d5d9</anchor>
      <arglist>(Kademlia *overlay)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lookupFinished</name>
      <anchorfile>classKademliaLookupListener.html</anchorfile>
      <anchor>a587aaf8753012294f7320ed1ad7b35fb</anchor>
      <arglist>(AbstractLookup *lookup)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Kademlia *</type>
      <name>overlay</name>
      <anchorfile>classKademliaLookupListener.html</anchorfile>
      <anchor>ae50b49d95bf500c12de3f936ade6aa4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KademliaPRComparator</name>
    <filename>classKademliaPRComparator.html</filename>
    <base>ProxKeyComparator&lt; KeyPrefixMetric &gt;</base>
    <member kind="function">
      <type></type>
      <name>KademliaPRComparator</name>
      <anchorfile>classKademliaPRComparator.html</anchorfile>
      <anchor>a38f289f20051d1c37d1f14d0a3c6d902</anchor>
      <arglist>(const OverlayKey &amp;relativeKey, uint32_t bitsPerDigit=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classKademliaPRComparator.html</anchorfile>
      <anchor>a47d26e3f61244ea354135a0ba6e115ba</anchor>
      <arglist>(const ProxKey &amp;lhs, const ProxKey &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KademliaRoutingInfoMessage</name>
    <filename>classKademliaRoutingInfoMessage.html</filename>
    <base>BaseOverlayMessage</base>
    <member kind="function">
      <type></type>
      <name>KademliaRoutingInfoMessage</name>
      <anchorfile>classKademliaRoutingInfoMessage.html</anchorfile>
      <anchor>a3ce14bed0711fbfe7dcd7b0fbc3ecabb</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KademliaRoutingInfoMessage</name>
      <anchorfile>classKademliaRoutingInfoMessage.html</anchorfile>
      <anchor>a495bfa279232a4b335f72d0c90145ec3</anchor>
      <arglist>(const KademliaRoutingInfoMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KademliaRoutingInfoMessage</name>
      <anchorfile>classKademliaRoutingInfoMessage.html</anchorfile>
      <anchor>a5489a9806e3953a0060611b2ffcd1f77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KademliaRoutingInfoMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classKademliaRoutingInfoMessage.html</anchorfile>
      <anchor>ab8561190e1a44f2fcfac76bdbae6dcc9</anchor>
      <arglist>(const KademliaRoutingInfoMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual KademliaRoutingInfoMessage *</type>
      <name>dup</name>
      <anchorfile>classKademliaRoutingInfoMessage.html</anchorfile>
      <anchor>a560a4fbfdf2ed0016c476f469caddab9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classKademliaRoutingInfoMessage.html</anchorfile>
      <anchor>a874bf55176cf786eee1e62f4811454c0</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classKademliaRoutingInfoMessage.html</anchorfile>
      <anchor>a29336795c8d8c46829848e0a3d026721</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getSrcNode</name>
      <anchorfile>classKademliaRoutingInfoMessage.html</anchorfile>
      <anchor>a695a541567589f66e6231e4a983a68c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getSrcNode</name>
      <anchorfile>classKademliaRoutingInfoMessage.html</anchorfile>
      <anchor>a13b1e3d067936451a41e9a99e6fc4055</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcNode</name>
      <anchorfile>classKademliaRoutingInfoMessage.html</anchorfile>
      <anchor>a171861ca1cc1573080b9d52122ef9bce</anchor>
      <arglist>(const NodeHandle &amp;srcNode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getDestKey</name>
      <anchorfile>classKademliaRoutingInfoMessage.html</anchorfile>
      <anchor>aec43d7ac961b5007e034e4d37f5ab23e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getDestKey</name>
      <anchorfile>classKademliaRoutingInfoMessage.html</anchorfile>
      <anchor>a258044b4e3b5b78abec3f7369c6d3ea3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestKey</name>
      <anchorfile>classKademliaRoutingInfoMessage.html</anchorfile>
      <anchor>a8fe01d5f1f6477360b7ab41a7cd05113</anchor>
      <arglist>(const OverlayKey &amp;destKey)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNextHopsArraySize</name>
      <anchorfile>classKademliaRoutingInfoMessage.html</anchorfile>
      <anchor>a50d02e3579322c7ed1aae9a8d1e27d6f</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNextHopsArraySize</name>
      <anchorfile>classKademliaRoutingInfoMessage.html</anchorfile>
      <anchor>afc9c8f14e031dafada5cdad66e856f5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MarkedNodeHandle &amp;</type>
      <name>getNextHops</name>
      <anchorfile>classKademliaRoutingInfoMessage.html</anchorfile>
      <anchor>a5f6910bf47ee3bbafb38db67c3a712f2</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MarkedNodeHandle &amp;</type>
      <name>getNextHops</name>
      <anchorfile>classKademliaRoutingInfoMessage.html</anchorfile>
      <anchor>a48662317051cabc25166682acbe19290</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNextHops</name>
      <anchorfile>classKademliaRoutingInfoMessage.html</anchorfile>
      <anchor>a710682e457400a471e846ca06e45a56a</anchor>
      <arglist>(unsigned int k, const MarkedNodeHandle &amp;nextHops)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classKademliaRoutingInfoMessage.html</anchorfile>
      <anchor>a3efa5d7acc4eba815a3a0f71132bde51</anchor>
      <arglist>(const KademliaRoutingInfoMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>srcNode_var</name>
      <anchorfile>classKademliaRoutingInfoMessage.html</anchorfile>
      <anchor>aed854a680a5ad7773569fd1fc43c3462</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>destKey_var</name>
      <anchorfile>classKademliaRoutingInfoMessage.html</anchorfile>
      <anchor>a225909e6c71d0ab66b4a48204a6d4960</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MarkedNodeHandle *</type>
      <name>nextHops_var</name>
      <anchorfile>classKademliaRoutingInfoMessage.html</anchorfile>
      <anchor>ac11de93b1796bf965a87770585fc1a3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>nextHops_arraysize</name>
      <anchorfile>classKademliaRoutingInfoMessage.html</anchorfile>
      <anchor>a400e4a8a892288fa68c79413d54796b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classKademliaRoutingInfoMessage.html</anchorfile>
      <anchor>a399c57581ebd9ea0bbdc921f55c4fb7a</anchor>
      <arglist>(const KademliaRoutingInfoMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KBRdeliver</name>
    <filename>classKBRdeliver.html</filename>
    <base>CommonAPIMessage</base>
    <member kind="function">
      <type></type>
      <name>KBRdeliver</name>
      <anchorfile>classKBRdeliver.html</anchorfile>
      <anchor>a0fe423c74102ad4c24766113e1d97bbf</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KBRdeliver</name>
      <anchorfile>classKBRdeliver.html</anchorfile>
      <anchor>a511f82a69531f835b120ebb80c68154c</anchor>
      <arglist>(const KBRdeliver &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KBRdeliver</name>
      <anchorfile>classKBRdeliver.html</anchorfile>
      <anchor>af60f6f267c7e7a69d186f80dcb52c86f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KBRdeliver &amp;</type>
      <name>operator=</name>
      <anchorfile>classKBRdeliver.html</anchorfile>
      <anchor>a2a4ac6122afb7cb3e862dc3f3b2d3480</anchor>
      <arglist>(const KBRdeliver &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual KBRdeliver *</type>
      <name>dup</name>
      <anchorfile>classKBRdeliver.html</anchorfile>
      <anchor>ad997108a0cbcf88629cd4195c53a1cec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classKBRdeliver.html</anchorfile>
      <anchor>a7d33123297b07a8865df4d6874a7ff5c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classKBRdeliver.html</anchorfile>
      <anchor>aa5a15c440f233bc3ada98ee22fac8d73</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getDestKey</name>
      <anchorfile>classKBRdeliver.html</anchorfile>
      <anchor>a90ac98ca2bbc4b7694abfa41f8213319</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getDestKey</name>
      <anchorfile>classKBRdeliver.html</anchorfile>
      <anchor>a81f75d80a1f62f51319d6ed8a666ce91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestKey</name>
      <anchorfile>classKBRdeliver.html</anchorfile>
      <anchor>a7b24e6d50100af723d77491519489068</anchor>
      <arglist>(const OverlayKey &amp;destKey)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classKBRdeliver.html</anchorfile>
      <anchor>ac56ab15b148ee4da7a964eca0c1613fd</anchor>
      <arglist>(const KBRdeliver &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>destKey_var</name>
      <anchorfile>classKBRdeliver.html</anchorfile>
      <anchor>a9431a17e6b11e807c013e60fabc0116c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classKBRdeliver.html</anchorfile>
      <anchor>a0d518b02265765eac59f2d83d6793c18</anchor>
      <arglist>(const KBRdeliver &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KBRforward</name>
    <filename>classKBRforward.html</filename>
    <base>CommonAPIMessage</base>
    <member kind="function">
      <type></type>
      <name>KBRforward</name>
      <anchorfile>classKBRforward.html</anchorfile>
      <anchor>ac13ed3f11948eebf0ada6f0aa58abbcf</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KBRforward</name>
      <anchorfile>classKBRforward.html</anchorfile>
      <anchor>a4f6bd79f84a4dde9410538b7a508469d</anchor>
      <arglist>(const KBRforward &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KBRforward</name>
      <anchorfile>classKBRforward.html</anchorfile>
      <anchor>adefa1795eab42d6ed1ba29605f78005d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KBRforward &amp;</type>
      <name>operator=</name>
      <anchorfile>classKBRforward.html</anchorfile>
      <anchor>a646dabdea0dc3cb564cdf4b6d330808e</anchor>
      <arglist>(const KBRforward &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual KBRforward *</type>
      <name>dup</name>
      <anchorfile>classKBRforward.html</anchorfile>
      <anchor>a28eb13bad496126e9b720f70500c09e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classKBRforward.html</anchorfile>
      <anchor>acb9633dd0e8f3a419214626e4d293920</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classKBRforward.html</anchorfile>
      <anchor>ad1316c1cfe3d040cb681ab0924f8b84b</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getDestKey</name>
      <anchorfile>classKBRforward.html</anchorfile>
      <anchor>a5c9aa80a6bd136a034e37af25f9beb42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getDestKey</name>
      <anchorfile>classKBRforward.html</anchorfile>
      <anchor>a4e5b6f7ddbe0c7ab81b5d57707cfea18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestKey</name>
      <anchorfile>classKBRforward.html</anchorfile>
      <anchor>aa6a9c8c10a8ccd22d1a943def961da11</anchor>
      <arglist>(const OverlayKey &amp;destKey)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getNextHopNode</name>
      <anchorfile>classKBRforward.html</anchorfile>
      <anchor>a7e0e868fc677593aab3e8302e38f7274</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getNextHopNode</name>
      <anchorfile>classKBRforward.html</anchorfile>
      <anchor>ad2c9693c664618697e81e0221d0b5735</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNextHopNode</name>
      <anchorfile>classKBRforward.html</anchorfile>
      <anchor>acc57dc0ef5d698d7a6d05e4789d722a7</anchor>
      <arglist>(const NodeHandle &amp;nextHopNode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classKBRforward.html</anchorfile>
      <anchor>af745734135039b1a1236f94490296780</anchor>
      <arglist>(const KBRforward &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>destKey_var</name>
      <anchorfile>classKBRforward.html</anchorfile>
      <anchor>a91df90a10bfb77abf2a29224f56e217c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>nextHopNode_var</name>
      <anchorfile>classKBRforward.html</anchorfile>
      <anchor>a2a5cdafc00d32e068da41a455da570b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classKBRforward.html</anchorfile>
      <anchor>a23b9bd4dc8e2c2da83c33413f8d6c71b</anchor>
      <arglist>(const KBRforward &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KBRroute</name>
    <filename>classKBRroute.html</filename>
    <base>CommonAPIMessage</base>
    <member kind="function">
      <type></type>
      <name>KBRroute</name>
      <anchorfile>classKBRroute.html</anchorfile>
      <anchor>a486e5ddf2e280543dba6007a49952ec6</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KBRroute</name>
      <anchorfile>classKBRroute.html</anchorfile>
      <anchor>aa42e3458ef0cc6dec4a87a98eb6ca5f3</anchor>
      <arglist>(const KBRroute &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KBRroute</name>
      <anchorfile>classKBRroute.html</anchorfile>
      <anchor>ae7602f18b1424c8bcee3c821aee7a2b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KBRroute &amp;</type>
      <name>operator=</name>
      <anchorfile>classKBRroute.html</anchorfile>
      <anchor>ac4baf495c12d958d0c11f8ca15fba6ea</anchor>
      <arglist>(const KBRroute &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual KBRroute *</type>
      <name>dup</name>
      <anchorfile>classKBRroute.html</anchorfile>
      <anchor>a47006bb584515050b960798b4d6de8cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classKBRroute.html</anchorfile>
      <anchor>ab7e9ecfdae77dc554bbb3a3b766bfde8</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classKBRroute.html</anchorfile>
      <anchor>a2191b5e27b0a8cec05948ec91b84ad55</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getDestKey</name>
      <anchorfile>classKBRroute.html</anchorfile>
      <anchor>acfbdd202d6783de8d6731d46ab382e00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getDestKey</name>
      <anchorfile>classKBRroute.html</anchorfile>
      <anchor>a168bd7ce8ad92f7dd00a2f399aa49745</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestKey</name>
      <anchorfile>classKBRroute.html</anchorfile>
      <anchor>a4b7686544c75614f741e4ad0b7cd60d4</anchor>
      <arglist>(const OverlayKey &amp;destKey)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDestComp</name>
      <anchorfile>classKBRroute.html</anchorfile>
      <anchor>a32e7dbb5aaeee13f316f1f6c8e55d2b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestComp</name>
      <anchorfile>classKBRroute.html</anchorfile>
      <anchor>a510e8fd0cf5e8e0c1d6b2fa834effe8d</anchor>
      <arglist>(int destComp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSrcComp</name>
      <anchorfile>classKBRroute.html</anchorfile>
      <anchor>a1667fc25f4d80791d79e11c399196353</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcComp</name>
      <anchorfile>classKBRroute.html</anchorfile>
      <anchor>a4f00c9117784be033c11f6f70a957d73</anchor>
      <arglist>(int srcComp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSourceRouteArraySize</name>
      <anchorfile>classKBRroute.html</anchorfile>
      <anchor>a494838a09a64d72560dc39ac2cfb42c5</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSourceRouteArraySize</name>
      <anchorfile>classKBRroute.html</anchorfile>
      <anchor>ad2ffb68e9163898b3a4846943c687a53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransportAddress &amp;</type>
      <name>getSourceRoute</name>
      <anchorfile>classKBRroute.html</anchorfile>
      <anchor>a40bab7a8989b1eb12246c9e014ba384c</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TransportAddress &amp;</type>
      <name>getSourceRoute</name>
      <anchorfile>classKBRroute.html</anchorfile>
      <anchor>a22f6151c81625c8c5e54a97a046042d0</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSourceRoute</name>
      <anchorfile>classKBRroute.html</anchorfile>
      <anchor>aa93a3cebd8a4a9dc33e80882f11013c8</anchor>
      <arglist>(unsigned int k, const TransportAddress &amp;sourceRoute)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRoutingType</name>
      <anchorfile>classKBRroute.html</anchorfile>
      <anchor>a79a82337e0bed38470b5c2f432362bc1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRoutingType</name>
      <anchorfile>classKBRroute.html</anchorfile>
      <anchor>a38e04d37a2b58746be920c13c4265604</anchor>
      <arglist>(int routingType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classKBRroute.html</anchorfile>
      <anchor>aff5d5bee64a8b077fcbd92727df0869d</anchor>
      <arglist>(const KBRroute &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>destKey_var</name>
      <anchorfile>classKBRroute.html</anchorfile>
      <anchor>a6355698b923bbc0904d9076eae9a4e24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>destComp_var</name>
      <anchorfile>classKBRroute.html</anchorfile>
      <anchor>a791188ab1cf0c57c19f2074429e8b593</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>srcComp_var</name>
      <anchorfile>classKBRroute.html</anchorfile>
      <anchor>ac4233cbe2aa8bfa12fff55166b71d890</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress *</type>
      <name>sourceRoute_var</name>
      <anchorfile>classKBRroute.html</anchorfile>
      <anchor>ab485938e01290074bea843921e8274de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>sourceRoute_arraysize</name>
      <anchorfile>classKBRroute.html</anchorfile>
      <anchor>a8c65781cadaa4f343cc20626326995ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>routingType_var</name>
      <anchorfile>classKBRroute.html</anchorfile>
      <anchor>a8b02f81d9111a4d009c53ffc25b20f72</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classKBRroute.html</anchorfile>
      <anchor>a4a899bbf3af9d95827d9f008ae396f1e</anchor>
      <arglist>(const KBRroute &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KbrRpcContext</name>
    <filename>classKbrRpcContext.html</filename>
    <member kind="function">
      <type></type>
      <name>KbrRpcContext</name>
      <anchorfile>classKbrRpcContext.html</anchorfile>
      <anchor>af59887c38d336ae69fb7d7759228c317</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KbrRpcContext</name>
      <anchorfile>classKbrRpcContext.html</anchorfile>
      <anchor>a443e6ea807cb0177c4485a242b3714d6</anchor>
      <arglist>(const KbrRpcContext &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KbrRpcContext</name>
      <anchorfile>classKbrRpcContext.html</anchorfile>
      <anchor>a90318fbd48466764748ae17734e47262</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KbrRpcContext &amp;</type>
      <name>operator=</name>
      <anchorfile>classKbrRpcContext.html</anchorfile>
      <anchor>aceb495fbf1b4a8feb99f68c94066c05c</anchor>
      <arglist>(const KbrRpcContext &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual KbrRpcContext *</type>
      <name>dup</name>
      <anchorfile>classKbrRpcContext.html</anchorfile>
      <anchor>a7bda6767df0ecbadd1e3d1b7913282ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classKbrRpcContext.html</anchorfile>
      <anchor>a51237c578e9eb798463cd5675c9ad923</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classKbrRpcContext.html</anchorfile>
      <anchor>a69f411846d0146ddf74910112cd843ee</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getDestKey</name>
      <anchorfile>classKbrRpcContext.html</anchorfile>
      <anchor>ac380908abfe9686cf5aa708b41da712a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getDestKey</name>
      <anchorfile>classKbrRpcContext.html</anchorfile>
      <anchor>a84014f170759eaa6355d385d2a3792b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestKey</name>
      <anchorfile>classKbrRpcContext.html</anchorfile>
      <anchor>a23f96766445d8bb622cd466f889bc5e3</anchor>
      <arglist>(const OverlayKey &amp;destKey)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransportAddress &amp;</type>
      <name>getDestAddr</name>
      <anchorfile>classKbrRpcContext.html</anchorfile>
      <anchor>aefc33ab8b0fca563b931f38fe702666f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TransportAddress &amp;</type>
      <name>getDestAddr</name>
      <anchorfile>classKbrRpcContext.html</anchorfile>
      <anchor>ac526312f588d4709bab3decd7f1e6b64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestAddr</name>
      <anchorfile>classKbrRpcContext.html</anchorfile>
      <anchor>a23cd0dcda8a59174370fcc16b44c70a5</anchor>
      <arglist>(const TransportAddress &amp;destAddr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getMeasurementPhase</name>
      <anchorfile>classKbrRpcContext.html</anchorfile>
      <anchor>a0c2d69d2d75cecbd5b35b888db5b6069</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMeasurementPhase</name>
      <anchorfile>classKbrRpcContext.html</anchorfile>
      <anchor>a4a4448c7a3d64c78f06a56f2dc1ecd7d</anchor>
      <arglist>(bool measurementPhase)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classKbrRpcContext.html</anchorfile>
      <anchor>a2f3311b6c87dbe93e144349067135eca</anchor>
      <arglist>(const KbrRpcContext &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>destKey_var</name>
      <anchorfile>classKbrRpcContext.html</anchorfile>
      <anchor>a7f7bcb66e95ef511f0012fd47ad285a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress</type>
      <name>destAddr_var</name>
      <anchorfile>classKbrRpcContext.html</anchorfile>
      <anchor>a629213a2125f19f2e259fcce41c180e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>measurementPhase_var</name>
      <anchorfile>classKbrRpcContext.html</anchorfile>
      <anchor>a9facd0d4532da660b39504f1043dd5aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classKbrRpcContext.html</anchorfile>
      <anchor>a7d221cc566c86b6f428077cd729e3f9e</anchor>
      <arglist>(const KbrRpcContext &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KBRTestApp</name>
    <filename>classKBRTestApp.html</filename>
    <base>BaseApp</base>
    <class kind="struct">KBRTestApp::MsgHandle</class>
    <member kind="function">
      <type></type>
      <name>KBRTestApp</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a3ffbda9662ea20986ea2e0856a0c89f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~KBRTestApp</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a6f65cfb13966c697b51b0ab5c02b2503</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; MsgHandle &gt;</type>
      <name>MsgHandleBuf</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>ad9837f0d6d4ceaac664870aa186f44a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initializeApp</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a40381ef6a970530fa0706d138fe256f6</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>finishApp</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>ad99186daad4bdf6c77fa667a0bb07056</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a544559c72c244032558522e8345bf6a1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deliver</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>aab30e051b905b39deef371ad3a418473</anchor>
      <arglist>(OverlayKey &amp;key, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>forward</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a860b762b8a8b843551c349beb130966c</anchor>
      <arglist>(OverlayKey *key, cPacket **msg, NodeHandle *nextHopNode)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>checkSeen</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a1c22d7bc56871a63cce151e599a83229</anchor>
      <arglist>(const OverlayKey &amp;key, int seqNum)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>evaluateData</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>acf7fa74f658d890e579a60ea04a5b0a6</anchor>
      <arglist>(simtime_t timeDelay, int hopCount, long int bytes)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>handleRpcCall</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>acffbd277d53a7b3e9c854395563b37d0</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>kbrTestCall</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a5d99afa79b6a0d5b9ec46ce2aab86290</anchor>
      <arglist>(KbrTestCall *call)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>underlayTestCall</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a1eb66b9882fd5f602b5e0fbf70fe7043</anchor>
      <arglist>(UnderlayTestCall *call)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleRpcResponse</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a16c87b0aff614a09cf41271cb45ec4f0</anchor>
      <arglist>(BaseResponseMessage *msg, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleRpcTimeout</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>aa5cd3e30e7a2ecefc0821a5291dce864</anchor>
      <arglist>(BaseCallMessage *msg, const TransportAddress &amp;dest, cPolymorphic *context, int rpcId, const OverlayKey &amp;destKey)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleLookupResponse</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>abe4fcc0a674ba6c843a2e1467bc458c8</anchor>
      <arglist>(LookupResponse *msg, cObject *context, simtime_t latency)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>pingResponse</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>afec33d48dc2b5c2920391f29abab1237</anchor>
      <arglist>(PingResponse *response, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>handleNodeLeaveNotification</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a67197e64e41b044dc37a9d8d6fbadc75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::pair&lt; OverlayKey, TransportAddress &gt;</type>
      <name>createDestKey</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>af428946a37da5ca4a29b85a034869e61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>kbrOneWayTest</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>afd14f68bbfff247b4f32498e5b241993</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>kbrRpcTest</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a64f89ade2d0af91791f6524b7b08cc29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>kbrLookupTest</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>aea8edb2d1c871881b1090c93b0325338</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>underlayTest</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>aaf1a1a1fdbaa133fb8dc06d4dc6c9093</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>testMsgSize</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>af332ff958983a9bb25252feba3e2590e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mean</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a73450fb0a1503f2751c75d8cf9d51e04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>deviation</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>af8c8a7e64e6ed514be5cd90920dd115e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>activeNetwInitPhase</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a5664ac71c5ceb3cc70e710717c8888e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>lookupNodeIds</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>af63f7f8bdcfce448593663484c0cd5a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>nodeIsLeavingSoon</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a567d933d3c6a8f0c1d0194c5e779dbea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>onlyLookupInoffensiveNodes</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a833410beacd955fe47a27bbf7f29107f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>rpcRetries</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a41dcfc5b05deda0623530dd85bc3fc74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>numSent</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a8ce13256ea63aa80192971d5c2ac50cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>bytesSent</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a52e5ba5ffe02fd9800db83b15a796b40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>numDelivered</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a12358b55f911eed27f411a402e308542</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>bytesDelivered</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>ad71a94daa5c574ab6d57c1baa984bc9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>numDropped</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a0b9c2e82f3287e4200d6f12d26371739</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>bytesDropped</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a3243446a1be631c71455e80d8c25e475</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>numRpcSent</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>aafa44894b8e262682596aea6b235bcf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>bytesRpcSent</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a2d746dbca5bf7f81ac484c763c651cf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>numRpcDelivered</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>ad9ea83ac232db846335c38619e6d9d04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>bytesRpcDelivered</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>ac9287ba30b44d05c1f1e2b3af6e0f2e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>numRpcDropped</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a837931e670a4117501d5b5d06d91a147</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>bytesRpcDropped</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a1c76cf2493d997bea95577ad53792e5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>rpcSuccLatencySum</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>aeb37374bdf671e95a65ce93143cb2afc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>rpcSuccLatencyCount</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>ae755fda691b0e7b8ed23b318c52871f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>rpcTotalLatencySum</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>af4d1d4d8f6c1e5ce301b25ca958cc2e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>rpcTotalLatencyCount</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>acb9b120ab10edc6a08b554e7ea6f732b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>numLookupSent</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a7d87083e30472441f161c47b617a427f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>numLookupSuccess</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a627fe29d5bed8ea2d7f1b2fbe2881e53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>numLookupFailed</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>ae243723c9d57797ed147e668c953f6ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>numUnderlaySent</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>aa3ce14b7182753ccf770d6aeb74913f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>bytesUnderlaySent</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a509fe672ed218ffeaa255fd2b45a6ef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>numUnderlayDelivered</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a207c30de6b17507d64187fd78d7f705e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>bytesUnderlayDelivered</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a1d7a3ba320bc3046d87262d7fd7722b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>onewayTimer</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>ae5be1d5ec79f8e69184fa221d1b3d3d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>rpcTimer</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a13818c2e1fb89ff3639fc4dc48962100</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>lookupTimer</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a2f4f7a5ef238222fdcf9cc890ab5c40f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>underlayTimer</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>ad5ac3f97138ebeaf211db5d5b48d505b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>failureLatency</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>ab7d25f9b4fd4445596114c7ae1912496</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>sequenceNumber</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a6ef9eba5d0b033538a778f288f4a4654</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>msgHandleBufSize</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>af60509b56e28684a4eb49f25df6552f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MsgHandleBuf</type>
      <name>mhBuf</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a5af0e7b9efe2ae1aad0d815f19ef25e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MsgHandleBuf::iterator</type>
      <name>mhBufBegin</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a3485ceb9284504b412d371e9eecaf27f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MsgHandleBuf::iterator</type>
      <name>mhBufNext</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a26eff89ff4d9ea19681a4e2df67e7332</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MsgHandleBuf::iterator</type>
      <name>mhBufEnd</name>
      <anchorfile>classKBRTestApp.html</anchorfile>
      <anchor>a9a44c784eb9297c7b8fadf276a358c9f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>KBRTestApp::MsgHandle</name>
    <filename>structKBRTestApp_1_1MsgHandle.html</filename>
    <member kind="function">
      <type></type>
      <name>MsgHandle</name>
      <anchorfile>structKBRTestApp_1_1MsgHandle.html</anchorfile>
      <anchor>a473b6dcd99f824bd4668a1b22f6827e8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MsgHandle</name>
      <anchorfile>structKBRTestApp_1_1MsgHandle.html</anchorfile>
      <anchor>a5d40d2c1b3162d2fc7d8359169fc7fc3</anchor>
      <arglist>(const OverlayKey &amp;key, int seqNum)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structKBRTestApp_1_1MsgHandle.html</anchorfile>
      <anchor>a98cc559b77a6fc5924dff111c4706c06</anchor>
      <arglist>(const MsgHandle &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>MsgHandle &amp;</type>
      <name>operator=</name>
      <anchorfile>structKBRTestApp_1_1MsgHandle.html</anchorfile>
      <anchor>a18741d6cc8e93e211db045c9abdb83a9</anchor>
      <arglist>(const MsgHandle &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>OverlayKey</type>
      <name>key</name>
      <anchorfile>structKBRTestApp_1_1MsgHandle.html</anchorfile>
      <anchor>a3f7619b918201095744b732fa2357710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>seqNum</name>
      <anchorfile>structKBRTestApp_1_1MsgHandle.html</anchorfile>
      <anchor>a3e54abab7195a159b8c5339b42d71161</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KbrTestCall</name>
    <filename>classKbrTestCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>KbrTestCall</name>
      <anchorfile>classKbrTestCall.html</anchorfile>
      <anchor>a3b63a763ecab89355ede5fa573d998c6</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KbrTestCall</name>
      <anchorfile>classKbrTestCall.html</anchorfile>
      <anchor>aa60ddc75c1200b09950f872243cb4434</anchor>
      <arglist>(const KbrTestCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KbrTestCall</name>
      <anchorfile>classKbrTestCall.html</anchorfile>
      <anchor>ad204d51409e4608bf2e2cc4e6f921cd0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KbrTestCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classKbrTestCall.html</anchorfile>
      <anchor>a5db58b664829c0a516fc2809270f8dd6</anchor>
      <arglist>(const KbrTestCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual KbrTestCall *</type>
      <name>dup</name>
      <anchorfile>classKbrTestCall.html</anchorfile>
      <anchor>a777d5e4da2ec4b6c5f2c901bf7bb243b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classKbrTestCall.html</anchorfile>
      <anchor>ad46eb1558a1a556bdd0f7aeb22222a99</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classKbrTestCall.html</anchorfile>
      <anchor>add0ad149e36add7e8cf1d7a6770b6916</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classKbrTestCall.html</anchorfile>
      <anchor>ae6b93747f90a287404e6de02779f11df</anchor>
      <arglist>(const KbrTestCall &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classKbrTestCall.html</anchorfile>
      <anchor>a5bb2fbf88315c334ab3a0432d9bf30da</anchor>
      <arglist>(const KbrTestCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KBRTestMessage</name>
    <filename>classKBRTestMessage.html</filename>
    <member kind="function">
      <type></type>
      <name>KBRTestMessage</name>
      <anchorfile>classKBRTestMessage.html</anchorfile>
      <anchor>a283689fb98334e11346a0d09ec996fd7</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KBRTestMessage</name>
      <anchorfile>classKBRTestMessage.html</anchorfile>
      <anchor>a45672b8310a3d141b1ce501756b4e98e</anchor>
      <arglist>(const KBRTestMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KBRTestMessage</name>
      <anchorfile>classKBRTestMessage.html</anchorfile>
      <anchor>a6983f68384cbceafe41911ca91a8b056</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KBRTestMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classKBRTestMessage.html</anchorfile>
      <anchor>a06c92c0487034a7e9dce590493d08cb4</anchor>
      <arglist>(const KBRTestMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual KBRTestMessage *</type>
      <name>dup</name>
      <anchorfile>classKBRTestMessage.html</anchorfile>
      <anchor>a28869b407c26f86ad606a4819f28b9df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classKBRTestMessage.html</anchorfile>
      <anchor>a63bd8baf4a9aad5b36e2a377efe8a1a2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classKBRTestMessage.html</anchorfile>
      <anchor>a3c799518e7e92b220e3b15f407536209</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getId</name>
      <anchorfile>classKBRTestMessage.html</anchorfile>
      <anchor>a122ee155877c50d1a8197f6bf10c3c33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setId</name>
      <anchorfile>classKBRTestMessage.html</anchorfile>
      <anchor>ac3b7ce126aa6ae945cc8c1b5147e138a</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSeqNum</name>
      <anchorfile>classKBRTestMessage.html</anchorfile>
      <anchor>afef3881404f5399344823456b5605284</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSeqNum</name>
      <anchorfile>classKBRTestMessage.html</anchorfile>
      <anchor>ad2e21c9dac484de1f77fa68aa0b3f388</anchor>
      <arglist>(int seqNum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getMeasurementPhase</name>
      <anchorfile>classKBRTestMessage.html</anchorfile>
      <anchor>a51abb3c29b2b4d109994530269035282</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMeasurementPhase</name>
      <anchorfile>classKBRTestMessage.html</anchorfile>
      <anchor>a0219f4d92022698ce12cb6039a5ee268</anchor>
      <arglist>(bool measurementPhase)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setVisitedNodesArraySize</name>
      <anchorfile>classKBRTestMessage.html</anchorfile>
      <anchor>a3ccdd28b9b2708727f35808a69a106ea</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getVisitedNodesArraySize</name>
      <anchorfile>classKBRTestMessage.html</anchorfile>
      <anchor>a506760f8eae4c5ddd19d7848f032ef29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IPvXAddress &amp;</type>
      <name>getVisitedNodes</name>
      <anchorfile>classKBRTestMessage.html</anchorfile>
      <anchor>a015da6c1441927796ad9487453e9a215</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IPvXAddress &amp;</type>
      <name>getVisitedNodes</name>
      <anchorfile>classKBRTestMessage.html</anchorfile>
      <anchor>aab2fda9fdab17545741aed1687718747</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setVisitedNodes</name>
      <anchorfile>classKBRTestMessage.html</anchorfile>
      <anchor>a4142fc2a5707109af7d38d8428f7a6f1</anchor>
      <arglist>(unsigned int k, const IPvXAddress &amp;visitedNodes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classKBRTestMessage.html</anchorfile>
      <anchor>aaf2b8434af6b5e3886e3ca83a5e9ebb3</anchor>
      <arglist>(const KBRTestMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>id_var</name>
      <anchorfile>classKBRTestMessage.html</anchorfile>
      <anchor>ae12e67fbb1d5143b07d4500308a2d973</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>seqNum_var</name>
      <anchorfile>classKBRTestMessage.html</anchorfile>
      <anchor>a9a9e1f055864041de960799c9d927068</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>measurementPhase_var</name>
      <anchorfile>classKBRTestMessage.html</anchorfile>
      <anchor>a9a48dd4e228381a6910586e6d25208cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress *</type>
      <name>visitedNodes_var</name>
      <anchorfile>classKBRTestMessage.html</anchorfile>
      <anchor>a106a843aaf3a93a05876e2c21180b1c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>visitedNodes_arraysize</name>
      <anchorfile>classKBRTestMessage.html</anchorfile>
      <anchor>ac695b1d4b0e0902ef25598c0d3528776</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classKBRTestMessage.html</anchorfile>
      <anchor>ab0841ca5feac4e8172753e6b29e3990d</anchor>
      <arglist>(const KBRTestMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KbrTestResponse</name>
    <filename>classKbrTestResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>KbrTestResponse</name>
      <anchorfile>classKbrTestResponse.html</anchorfile>
      <anchor>a81d8b260feea4dd85fdb625b2f730c59</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KbrTestResponse</name>
      <anchorfile>classKbrTestResponse.html</anchorfile>
      <anchor>a94aa4352bef846ba0f339467c9550878</anchor>
      <arglist>(const KbrTestResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KbrTestResponse</name>
      <anchorfile>classKbrTestResponse.html</anchorfile>
      <anchor>a230184313e9ad7a804c1317dbbece7bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KbrTestResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classKbrTestResponse.html</anchorfile>
      <anchor>ac5ed9b2a53d6b434c246ee331ae8c924</anchor>
      <arglist>(const KbrTestResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual KbrTestResponse *</type>
      <name>dup</name>
      <anchorfile>classKbrTestResponse.html</anchorfile>
      <anchor>a288ef092886de41eb489a8a55a852320</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classKbrTestResponse.html</anchorfile>
      <anchor>a1d9f9d8862cbf3db97300c0ea3bd5250</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classKbrTestResponse.html</anchorfile>
      <anchor>a5dccf5c922582f50311f5112e19fb8db</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classKbrTestResponse.html</anchorfile>
      <anchor>a670129d2969cabcbd9d7a54a6473817d</anchor>
      <arglist>(const KbrTestResponse &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classKbrTestResponse.html</anchorfile>
      <anchor>a1f3a3a13e2d96c7c5d9c89e22eec672e</anchor>
      <arglist>(const KbrTestResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KBRupdate</name>
    <filename>classKBRupdate.html</filename>
    <base>CommonAPIMessage</base>
    <member kind="function">
      <type></type>
      <name>KBRupdate</name>
      <anchorfile>classKBRupdate.html</anchorfile>
      <anchor>a218e51d6da11741a3ddfe72d1a35d2cc</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KBRupdate</name>
      <anchorfile>classKBRupdate.html</anchorfile>
      <anchor>a46e46275ec08c2f20d7a1df88edb3191</anchor>
      <arglist>(const KBRupdate &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KBRupdate</name>
      <anchorfile>classKBRupdate.html</anchorfile>
      <anchor>a52716bd31fea828aaea7db700a5b1050</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KBRupdate &amp;</type>
      <name>operator=</name>
      <anchorfile>classKBRupdate.html</anchorfile>
      <anchor>ad082a408bc650a6225f6fe9b9b8521f0</anchor>
      <arglist>(const KBRupdate &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual KBRupdate *</type>
      <name>dup</name>
      <anchorfile>classKBRupdate.html</anchorfile>
      <anchor>ae5f1d3fbf871953f3e6eb284d013d4e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classKBRupdate.html</anchorfile>
      <anchor>a1654bdafafbbf6416defebc5e6563d32</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classKBRupdate.html</anchorfile>
      <anchor>a2e8bbb0f2cabbf01fc22b8b841e2a78d</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getNode</name>
      <anchorfile>classKBRupdate.html</anchorfile>
      <anchor>aca77d7594a5acd03f9ed7dcec616eee6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getNode</name>
      <anchorfile>classKBRupdate.html</anchorfile>
      <anchor>afea5ab59efcb8960f161aeef4cf2e91e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNode</name>
      <anchorfile>classKBRupdate.html</anchorfile>
      <anchor>a473c183cceaf4567b0c89f9c01ceddb7</anchor>
      <arglist>(const NodeHandle &amp;node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getJoined</name>
      <anchorfile>classKBRupdate.html</anchorfile>
      <anchor>a59bac3f950f7d535542c0da2862deb83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setJoined</name>
      <anchorfile>classKBRupdate.html</anchorfile>
      <anchor>aa55d713fb18cb90e65e967ea78f18c91</anchor>
      <arglist>(bool joined)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classKBRupdate.html</anchorfile>
      <anchor>a5d33a5f848bd3302aa0c4591273c9621</anchor>
      <arglist>(const KBRupdate &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>node_var</name>
      <anchorfile>classKBRupdate.html</anchorfile>
      <anchor>ac24a4783a62398cd02eb8af838e3a2e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>joined_var</name>
      <anchorfile>classKBRupdate.html</anchorfile>
      <anchor>a42d1e062070f16b6cec733365e6832eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classKBRupdate.html</anchorfile>
      <anchor>a5acee3388f83e40e9fe93529006c0846</anchor>
      <arglist>(const KBRupdate &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KeyCcwRingMetric</name>
    <filename>classKeyCcwRingMetric.html</filename>
    <member kind="function">
      <type>OverlayKey</type>
      <name>distance</name>
      <anchorfile>classKeyCcwRingMetric.html</anchorfile>
      <anchor>a0148eafa1f3a1bd5692793f90f83d87b</anchor>
      <arglist>(const OverlayKey &amp;x, const OverlayKey &amp;y) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KeyCwRingMetric</name>
    <filename>classKeyCwRingMetric.html</filename>
    <member kind="function">
      <type>OverlayKey</type>
      <name>distance</name>
      <anchorfile>classKeyCwRingMetric.html</anchorfile>
      <anchor>a69d72b8dc267721f6fef11f8f950bdb4</anchor>
      <arglist>(const OverlayKey &amp;x, const OverlayKey &amp;y) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KeyDistanceComparator</name>
    <filename>classKeyDistanceComparator.html</filename>
    <templarg>Metric</templarg>
    <base>Comparator&lt; OverlayKey &gt;</base>
    <member kind="function">
      <type></type>
      <name>KeyDistanceComparator</name>
      <anchorfile>classKeyDistanceComparator.html</anchorfile>
      <anchor>a97534e272086e88615e6c0e088a76350</anchor>
      <arglist>(const OverlayKey &amp;relativeKey)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classKeyDistanceComparator.html</anchorfile>
      <anchor>ae649cec1e88e3430734a2f1b5b0d3014</anchor>
      <arglist>(const OverlayKey &amp;lhs, const OverlayKey &amp;rhs) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Metric</type>
      <name>m</name>
      <anchorfile>classKeyDistanceComparator.html</anchorfile>
      <anchor>a85a5dea9c36011b59a042cee0b0c01da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OverlayKey</type>
      <name>key</name>
      <anchorfile>classKeyDistanceComparator.html</anchorfile>
      <anchor>a03b9440da144d934a07acba655a68285</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KeyDistanceComparator&lt; KeyPrefixMetric &gt;</name>
    <filename>classKeyDistanceComparator_3_01KeyPrefixMetric_01_4.html</filename>
    <base>Comparator&lt; OverlayKey &gt;</base>
    <member kind="function">
      <type></type>
      <name>KeyDistanceComparator</name>
      <anchorfile>classKeyDistanceComparator_3_01KeyPrefixMetric_01_4.html</anchorfile>
      <anchor>a7d30988c2ee04211ba8609a40432a6fa</anchor>
      <arglist>(const OverlayKey &amp;relativeKey, uint32_t bitsPerDigit=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classKeyDistanceComparator_3_01KeyPrefixMetric_01_4.html</anchorfile>
      <anchor>a2100191e5f4a829164b0947021b51763</anchor>
      <arglist>(const OverlayKey &amp;lhs, const OverlayKey &amp;rhs) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>KeyPrefixMetric</type>
      <name>m</name>
      <anchorfile>classKeyDistanceComparator_3_01KeyPrefixMetric_01_4.html</anchorfile>
      <anchor>aa895a906e819f2f9704d1e9961d8fd07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OverlayKey</type>
      <name>key</name>
      <anchorfile>classKeyDistanceComparator_3_01KeyPrefixMetric_01_4.html</anchorfile>
      <anchor>aa9557b8767537c2c5b32fcd6b3002688</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>KeyExtractor</name>
    <filename>structKeyExtractor.html</filename>
    <templarg>T</templarg>
    <member kind="function" static="yes">
      <type>static const OverlayKey &amp;</type>
      <name>key</name>
      <anchorfile>structKeyExtractor.html</anchorfile>
      <anchor>a8624ad0fea42749472c7387927dc0d5f</anchor>
      <arglist>(const T &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>KeyExtractor&lt; KademliaBucketEntry &gt;</name>
    <filename>structKeyExtractor_3_01KademliaBucketEntry_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static const OverlayKey &amp;</type>
      <name>key</name>
      <anchorfile>structKeyExtractor_3_01KademliaBucketEntry_01_4.html</anchorfile>
      <anchor>a057bf6e784ed9a0275d25df8b05c17a1</anchor>
      <arglist>(const KademliaBucketEntry &amp;entry)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>KeyExtractor&lt; LookupEntry &gt;</name>
    <filename>structKeyExtractor_3_01LookupEntry_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static const OverlayKey &amp;</type>
      <name>key</name>
      <anchorfile>structKeyExtractor_3_01LookupEntry_01_4.html</anchorfile>
      <anchor>a467207135eb7ec4d8a5cd06b03db1b29</anchor>
      <arglist>(const LookupEntry &amp;nodes)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>KeyExtractor&lt; MarkedNodeHandle &gt;</name>
    <filename>structKeyExtractor_3_01MarkedNodeHandle_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static const OverlayKey &amp;</type>
      <name>key</name>
      <anchorfile>structKeyExtractor_3_01MarkedNodeHandle_01_4.html</anchorfile>
      <anchor>ab080eada61172b82175989a351ff3cbd</anchor>
      <arglist>(const MarkedNodeHandle &amp;node)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>KeyExtractor&lt; NodeHandle &gt;</name>
    <filename>structKeyExtractor_3_01NodeHandle_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static const OverlayKey &amp;</type>
      <name>key</name>
      <anchorfile>structKeyExtractor_3_01NodeHandle_01_4.html</anchorfile>
      <anchor>a9e12cfb1d2fb54b356c3582dd047785e</anchor>
      <arglist>(const NodeHandle &amp;node)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>KeyExtractor&lt; ProxNodeHandle &gt;</name>
    <filename>structKeyExtractor_3_01ProxNodeHandle_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static const OverlayKey &amp;</type>
      <name>key</name>
      <anchorfile>structKeyExtractor_3_01ProxNodeHandle_01_4.html</anchorfile>
      <anchor>a26f7e1e94b73b24e09147acab8dc8e05</anchor>
      <arglist>(const ProxNodeHandle &amp;node)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>KeyExtractor&lt; std::pair&lt; NodeHandle, simtime_t &gt; &gt;</name>
    <filename>structKeyExtractor_3_01std_1_1pair_3_01NodeHandle_00_01simtime__t_01_4_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static const OverlayKey &amp;</type>
      <name>key</name>
      <anchorfile>structKeyExtractor_3_01std_1_1pair_3_01NodeHandle_00_01simtime__t_01_4_01_4.html</anchorfile>
      <anchor>abbd16d2abf82f78728835390846a3c5e</anchor>
      <arglist>(const std::pair&lt; NodeHandle, simtime_t &gt; &amp;nodes)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KeyListMessage</name>
    <filename>classKeyListMessage.html</filename>
    <base>GiaMessage</base>
    <member kind="function">
      <type></type>
      <name>KeyListMessage</name>
      <anchorfile>classKeyListMessage.html</anchorfile>
      <anchor>a9c63e9cde4d9bd8ee39ef4db4ed0e135</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyListMessage</name>
      <anchorfile>classKeyListMessage.html</anchorfile>
      <anchor>a97711b95790382f72a35fb247f768c2e</anchor>
      <arglist>(const KeyListMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KeyListMessage</name>
      <anchorfile>classKeyListMessage.html</anchorfile>
      <anchor>a782b2853c949e8b3319cb3193e8ec861</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KeyListMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classKeyListMessage.html</anchorfile>
      <anchor>ad7797032439edaa513bddfb59220d80f</anchor>
      <arglist>(const KeyListMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual KeyListMessage *</type>
      <name>dup</name>
      <anchorfile>classKeyListMessage.html</anchorfile>
      <anchor>ad4aaa20cb4d0060e1b79f4a7eaa54611</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classKeyListMessage.html</anchorfile>
      <anchor>ad155204827b0aecefd3a5423fabf1f5a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classKeyListMessage.html</anchorfile>
      <anchor>a2b13f5b7f7919eb936289c5d0d97e106</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKeysArraySize</name>
      <anchorfile>classKeyListMessage.html</anchorfile>
      <anchor>ab50bc2266bfe687fa55f4e7afe227ac7</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getKeysArraySize</name>
      <anchorfile>classKeyListMessage.html</anchorfile>
      <anchor>a4ca4174f84b975e2dfa7d85e5f16d3c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getKeys</name>
      <anchorfile>classKeyListMessage.html</anchorfile>
      <anchor>aecaacfd59587d459ab4ed8ac3770ebe3</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getKeys</name>
      <anchorfile>classKeyListMessage.html</anchorfile>
      <anchor>a56d0064fc1cf9f7c421a3235995cef86</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKeys</name>
      <anchorfile>classKeyListMessage.html</anchorfile>
      <anchor>a15b7abdef0398a3157e25f09b768958a</anchor>
      <arglist>(unsigned int k, const OverlayKey &amp;keys)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classKeyListMessage.html</anchorfile>
      <anchor>ab70eb2d6700a9a2b88f079cff51a6d3f</anchor>
      <arglist>(const KeyListMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey *</type>
      <name>keys_var</name>
      <anchorfile>classKeyListMessage.html</anchorfile>
      <anchor>a80ec06cf526dc27a091ec72fa6fcb977</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>keys_arraysize</name>
      <anchorfile>classKeyListMessage.html</anchorfile>
      <anchor>a0a30fe742efb9e286cd387a4a2832f71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classKeyListMessage.html</anchorfile>
      <anchor>ac2685772a0e430ef3464095b149b03e1</anchor>
      <arglist>(const KeyListMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KeyPrefixMetric</name>
    <filename>classKeyPrefixMetric.html</filename>
    <member kind="function">
      <type></type>
      <name>KeyPrefixMetric</name>
      <anchorfile>classKeyPrefixMetric.html</anchorfile>
      <anchor>a19c9e7189814bf681d39783e212a412a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OverlayKey</type>
      <name>distance</name>
      <anchorfile>classKeyPrefixMetric.html</anchorfile>
      <anchor>a78d831ece61ba3e17c9200f4ad733cdb</anchor>
      <arglist>(const OverlayKey &amp;x, const OverlayKey &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBitsPerDigit</name>
      <anchorfile>classKeyPrefixMetric.html</anchorfile>
      <anchor>a4eeedbfaa51b9ba3ec7eefe36e4dd295</anchor>
      <arglist>(uint8_t bitsPerDigit)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint8_t</type>
      <name>bitsPerDigit</name>
      <anchorfile>classKeyPrefixMetric.html</anchorfile>
      <anchor>a96d79bd64dcd038f1ced9a89629dc503</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KeyRingMetric</name>
    <filename>classKeyRingMetric.html</filename>
    <member kind="function" static="yes">
      <type>static OverlayKey</type>
      <name>distance</name>
      <anchorfile>classKeyRingMetric.html</anchorfile>
      <anchor>a85547c6014f59c334c6d64d227049094</anchor>
      <arglist>(const OverlayKey &amp;x, const OverlayKey &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KeyStdMetric</name>
    <filename>classKeyStdMetric.html</filename>
    <member kind="function">
      <type>OverlayKey</type>
      <name>distance</name>
      <anchorfile>classKeyStdMetric.html</anchorfile>
      <anchor>a07443c7abae99c0d05b82f9343ae2a58</anchor>
      <arglist>(const OverlayKey &amp;x, const OverlayKey &amp;y) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KeyXorMetric</name>
    <filename>classKeyXorMetric.html</filename>
    <member kind="function">
      <type>OverlayKey</type>
      <name>distance</name>
      <anchorfile>classKeyXorMetric.html</anchorfile>
      <anchor>aa3392ff3f5c6adbd792fbee14ce54361</anchor>
      <arglist>(const OverlayKey &amp;x, const OverlayKey &amp;y) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KoordeFindNodeExtMessage</name>
    <filename>classKoordeFindNodeExtMessage.html</filename>
    <member kind="function">
      <type></type>
      <name>KoordeFindNodeExtMessage</name>
      <anchorfile>classKoordeFindNodeExtMessage.html</anchorfile>
      <anchor>a502866e410bcdede3adf057cc14fee51</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KoordeFindNodeExtMessage</name>
      <anchorfile>classKoordeFindNodeExtMessage.html</anchorfile>
      <anchor>acebc2cfa20e06d518cdc9ddd2e6ca97e</anchor>
      <arglist>(const KoordeFindNodeExtMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KoordeFindNodeExtMessage</name>
      <anchorfile>classKoordeFindNodeExtMessage.html</anchorfile>
      <anchor>a1838ac73a1ce52ab8d15df70faffd85a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KoordeFindNodeExtMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classKoordeFindNodeExtMessage.html</anchorfile>
      <anchor>a53033a139fb9f14ed0a90fb9b4bfef42</anchor>
      <arglist>(const KoordeFindNodeExtMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual KoordeFindNodeExtMessage *</type>
      <name>dup</name>
      <anchorfile>classKoordeFindNodeExtMessage.html</anchorfile>
      <anchor>a772afc061047878d20963b3095318009</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classKoordeFindNodeExtMessage.html</anchorfile>
      <anchor>ac5f9cc5b2debb3b6e8f7d77b0b9602f4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classKoordeFindNodeExtMessage.html</anchorfile>
      <anchor>a34d83dd35fb391ccf7f10761e290e2fa</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getRouteKey</name>
      <anchorfile>classKoordeFindNodeExtMessage.html</anchorfile>
      <anchor>a6a3874f6cf9a35ebc66841abe87c7dfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getRouteKey</name>
      <anchorfile>classKoordeFindNodeExtMessage.html</anchorfile>
      <anchor>a3513e4bbdc3550fa3796fb92836b8102</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRouteKey</name>
      <anchorfile>classKoordeFindNodeExtMessage.html</anchorfile>
      <anchor>aeb894264eab91506f5b14429cb24510a</anchor>
      <arglist>(const OverlayKey &amp;routeKey)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getStep</name>
      <anchorfile>classKoordeFindNodeExtMessage.html</anchorfile>
      <anchor>ab5b3fd2f2492f8f330f5ef9c631d3a71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStep</name>
      <anchorfile>classKoordeFindNodeExtMessage.html</anchorfile>
      <anchor>a5de2bd74cb48cec03ce04bf25023e4ac</anchor>
      <arglist>(int step)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classKoordeFindNodeExtMessage.html</anchorfile>
      <anchor>aa52361afce8779bd1d8ed8af24233ca7</anchor>
      <arglist>(const KoordeFindNodeExtMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>routeKey_var</name>
      <anchorfile>classKoordeFindNodeExtMessage.html</anchorfile>
      <anchor>a48906a248e52722c64a4c05dc268fa98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>step_var</name>
      <anchorfile>classKoordeFindNodeExtMessage.html</anchorfile>
      <anchor>abae71941210a7b3bd4efa388e1096e49</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classKoordeFindNodeExtMessage.html</anchorfile>
      <anchor>a08cac52dcf333507a712dccd5435aa08</anchor>
      <arglist>(const KoordeFindNodeExtMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Landmark</name>
    <filename>classLandmark.html</filename>
    <base>BaseApp</base>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual</type>
      <name>~Landmark</name>
      <anchorfile>classLandmark.html</anchorfile>
      <anchor>add8b834269cebb84cc638c183ff83208</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeApp</name>
      <anchorfile>classLandmark.html</anchorfile>
      <anchor>a2ba09a36df0fd9a216075e36c72819e5</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>finishApp</name>
      <anchorfile>classLandmark.html</anchorfile>
      <anchor>a36707865ac87e9edd61dbb50058019c0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LandmarkDataEntry</name>
    <filename>structLandmarkDataEntry.html</filename>
    <member kind="variable">
      <type>simtime_t</type>
      <name>rtt</name>
      <anchorfile>structLandmarkDataEntry.html</anchorfile>
      <anchor>ad5d601343f46d6e18a36bbb31828566e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int8_t</type>
      <name>layer</name>
      <anchorfile>structLandmarkDataEntry.html</anchorfile>
      <anchor>a1cca78790ce843cd40639f3365326bcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>coordinates</name>
      <anchorfile>structLandmarkDataEntry.html</anchorfile>
      <anchor>a29d9ff495b30857526efa7973f2e9f96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const IPvXAddress *</type>
      <name>ip</name>
      <anchorfile>structLandmarkDataEntry.html</anchorfile>
      <anchor>aac6d7ca064c48202149a6cee22f4c55b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LatencyInfo</name>
    <filename>structLatencyInfo.html</filename>
    <member kind="variable">
      <type>simtime_t</type>
      <name>i3Time</name>
      <anchorfile>structLatencyInfo.html</anchorfile>
      <anchor>adc90eea1f5c99c5295ca726d012cbc49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>ipTime</name>
      <anchorfile>structLatencyInfo.html</anchorfile>
      <anchor>a184d7bd96d8b914fc83f45476fbf5c96</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lcEntry</name>
    <filename>classlcEntry.html</filename>
    <member kind="function">
      <type></type>
      <name>lcEntry</name>
      <anchorfile>classlcEntry.html</anchorfile>
      <anchor>a1403f38902557916a199be7bf754cbb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>lcEntry</name>
      <anchorfile>classlcEntry.html</anchorfile>
      <anchor>a5a9b8484699b4af4c58f391ffc4d13d7</anchor>
      <arglist>(Vector2D p, simtime_t t)</arglist>
    </member>
    <member kind="variable">
      <type>Vector2D</type>
      <name>pos</name>
      <anchorfile>classlcEntry.html</anchorfile>
      <anchor>aba8c65566063173537c97150c5db364f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>time</name>
      <anchorfile>classlcEntry.html</anchorfile>
      <anchor>a62f9551b2eda3f1f9be66e0eafc3413a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>leqDim</name>
    <filename>classleqDim.html</filename>
    <member kind="function">
      <type></type>
      <name>leqDim</name>
      <anchorfile>classleqDim.html</anchorfile>
      <anchor>a032f93b0d4d9f1d77ac2e2a325b514f3</anchor>
      <arglist>(uint8_t dim)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>classleqDim.html</anchorfile>
      <anchor>a3e5f273d3b2bcef9540b426ac9aeb5b5</anchor>
      <arglist>(const Coords &amp;left, const Coords &amp;right)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint8_t</type>
      <name>dim</name>
      <anchorfile>classleqDim.html</anchorfile>
      <anchor>a49e829f3fd6bd38996686a2e536c0348</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LifetimeChurn</name>
    <filename>classLifetimeChurn.html</filename>
    <base>ChurnGenerator</base>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classLifetimeChurn.html</anchorfile>
      <anchor>a57446a889ae92d190565604f0878c534</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeChurn</name>
      <anchorfile>classLifetimeChurn.html</anchorfile>
      <anchor>a02ca376284c64fef6e6e4f3487fbd158</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LifetimeChurn</name>
      <anchorfile>classLifetimeChurn.html</anchorfile>
      <anchor>afa4b3ee4d42d90bf48b58abd4268845e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LifetimeChurn</name>
      <anchorfile>classLifetimeChurn.html</anchorfile>
      <anchor>a686dd3b9dd850b2dd704a983d13ab861</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateDisplayString</name>
      <anchorfile>classLifetimeChurn.html</anchorfile>
      <anchor>a167a75c50a42cdbdd45943c78692fa03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createNode</name>
      <anchorfile>classLifetimeChurn.html</anchorfile>
      <anchor>acc33a45630df4927907016f3b4d57449</anchor>
      <arglist>(simtime_t lifetime, bool initialize, int contextPos)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deleteNode</name>
      <anchorfile>classLifetimeChurn.html</anchorfile>
      <anchor>a3e4b97d2a0e36a71296a03ec9b17b1c7</anchor>
      <arglist>(TransportAddress &amp;addr, int contextPos)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distributionFunction</name>
      <anchorfile>classLifetimeChurn.html</anchorfile>
      <anchor>aa9061157d1ca0e78469c9b89b25aadf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>scheduleCreateNodeAt</name>
      <anchorfile>classLifetimeChurn.html</anchorfile>
      <anchor>a6f9f133a4bd39af8e283627039bb7444</anchor>
      <arglist>(simtime_t creationTime, simtime_t lifetime, int contextPos)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GlobalStatistics *</type>
      <name>globalStatistics</name>
      <anchorfile>classLifetimeChurn.html</anchorfile>
      <anchor>a7345f0b31a5841ad5dc209c7e662d9af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>initialMean</name>
      <anchorfile>classLifetimeChurn.html</anchorfile>
      <anchor>a3045604000daec53226661a96e3dfd4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>initialDeviation</name>
      <anchorfile>classLifetimeChurn.html</anchorfile>
      <anchor>ad46a4a5c5839569e8b037d6103e787e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>targetMean</name>
      <anchorfile>classLifetimeChurn.html</anchorfile>
      <anchor>ad5ac910b3d9443279280b589968ee426</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>lifetimeDistName</name>
      <anchorfile>classLifetimeChurn.html</anchorfile>
      <anchor>a9a7a265a2ba1a7a18eab89b350493bce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>lifetimeMean</name>
      <anchorfile>classLifetimeChurn.html</anchorfile>
      <anchor>a8940d7857c3c41541c0d9d222977163f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>lifetimeDistPar1</name>
      <anchorfile>classLifetimeChurn.html</anchorfile>
      <anchor>a44ba4da8c4ec53bebf5d918fa8421f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>initFinishedTimer</name>
      <anchorfile>classLifetimeChurn.html</anchorfile>
      <anchor>ad3f52c1d0c3e76027815cab4d11f8b80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; cObject * &gt;</type>
      <name>contextVector</name>
      <anchorfile>classLifetimeChurn.html</anchorfile>
      <anchor>ac358275bd79fd59b0bf5d9920d0d1934</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>lastCreate</name>
      <anchorfile>classLifetimeChurn.html</anchorfile>
      <anchor>a8f6078c2b2b5cc7bdca07f1f6a2c04fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>lastDelete</name>
      <anchorfile>classLifetimeChurn.html</anchorfile>
      <anchor>addede9222e8a03fe9ab97c9d50df3070</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ListMethods</name>
    <filename>classListMethods.html</filename>
    <base>XmlRpc::XmlRpcServerMethod</base>
    <member kind="function">
      <type></type>
      <name>ListMethods</name>
      <anchorfile>classListMethods.html</anchorfile>
      <anchor>a915b0f8e1447f462be68aa90ad31cb63</anchor>
      <arglist>(XmlRpcServer *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>execute</name>
      <anchorfile>classListMethods.html</anchorfile>
      <anchor>a2315a3c1739ce9e7ffaf816112f55233</anchor>
      <arglist>(XmlRpcValue &amp;params, XmlRpcValue &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>help</name>
      <anchorfile>classListMethods.html</anchorfile>
      <anchor>aa90db0d282ab90fd13d47230e21147c7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LocalLookup</name>
    <filename>classLocalLookup.html</filename>
    <base>XmlRpc::XmlRpcServerMethod</base>
    <member kind="function">
      <type></type>
      <name>LocalLookup</name>
      <anchorfile>classLocalLookup.html</anchorfile>
      <anchor>a7a36586b58b7664472d95d4a76eede2a</anchor>
      <arglist>(XmlRpcServer *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>execute</name>
      <anchorfile>classLocalLookup.html</anchorfile>
      <anchor>a73b48cf861f350b92f7483bcea66ab34</anchor>
      <arglist>(XmlRpcValue &amp;params, XmlRpcValue &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>help</name>
      <anchorfile>classLocalLookup.html</anchorfile>
      <anchor>af97aaa3d5f58cbf2ac71ef7b8c42e3cc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LoginCache</name>
    <filename>classLoginCache.html</filename>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classLoginCache.html</anchorfile>
      <anchor>aafa3d64a5d9c04e9c8c6abd2e4eb5534</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classLoginCache.html</anchorfile>
      <anchor>a4f7f469ace6dc0cc1f04582e74e19ec1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NodeHandle</type>
      <name>getLoginNode</name>
      <anchorfile>classLoginCache.html</anchorfile>
      <anchor>a94d884e9c619e981adeafdb12b21d7c1</anchor>
      <arglist>(Vector2D pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerPos</name>
      <anchorfile>classLoginCache.html</anchorfile>
      <anchor>ae9ee5141c732f56eacbf64f179336084</anchor>
      <arglist>(NodeHandle node, Vector2D pos)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; NodeHandle, lcEntry &gt;</type>
      <name>nodelist</name>
      <anchorfile>classLoginCache.html</anchorfile>
      <anchor>a3c7095eb16129f5be69ffd7045cdf3f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>movementSpeed</name>
      <anchorfile>classLoginCache.html</anchorfile>
      <anchor>a85fbb69f1e2418a66e9e1e40ab617639</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>bytessend</name>
      <anchorfile>classLoginCache.html</anchorfile>
      <anchor>a2f1aadf9803346243a1b3c7bf36d3aea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>bytesrecv</name>
      <anchorfile>classLoginCache.html</anchorfile>
      <anchor>a33ab0e352666f9d84176bf75a13bb277</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GlobalStatistics *</type>
      <name>globalStatistics</name>
      <anchorfile>classLoginCache.html</anchorfile>
      <anchor>adb91fb92cad55385794ca98dffe330be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Lookup</name>
    <filename>classLookup.html</filename>
    <base>XmlRpc::XmlRpcServerMethod</base>
    <member kind="function">
      <type></type>
      <name>Lookup</name>
      <anchorfile>classLookup.html</anchorfile>
      <anchor>a5e1264bfe0eb1e622a7e60d3706f4ac8</anchor>
      <arglist>(XmlRpcServer *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>execute</name>
      <anchorfile>classLookup.html</anchorfile>
      <anchor>a0592b6cf31628ad48e0f3fe212b941e2</anchor>
      <arglist>(XmlRpcValue &amp;params, XmlRpcValue &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>help</name>
      <anchorfile>classLookup.html</anchorfile>
      <anchor>a72b151fd74bff85f33996f3d356a5443</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LookupCall</name>
    <filename>classLookupCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>LookupCall</name>
      <anchorfile>classLookupCall.html</anchorfile>
      <anchor>a5598064aa3c391d5a05db95f41eb30e8</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LookupCall</name>
      <anchorfile>classLookupCall.html</anchorfile>
      <anchor>aacae287138db3b43fa4526089d54e6bf</anchor>
      <arglist>(const LookupCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LookupCall</name>
      <anchorfile>classLookupCall.html</anchorfile>
      <anchor>a2c375003eea96cc7abd77126cd60e1c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LookupCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classLookupCall.html</anchorfile>
      <anchor>aa21b136dc9c4044080626d6c9bef61f0</anchor>
      <arglist>(const LookupCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LookupCall *</type>
      <name>dup</name>
      <anchorfile>classLookupCall.html</anchorfile>
      <anchor>a9843e947c86d4985176f8811a320e044</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classLookupCall.html</anchorfile>
      <anchor>a1d2da40779f029cfb895125008b5671d</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classLookupCall.html</anchorfile>
      <anchor>a0053cfb5fc8073801440ebfc577f5346</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getKey</name>
      <anchorfile>classLookupCall.html</anchorfile>
      <anchor>ac899d550007c1e632e299e917d38b705</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getKey</name>
      <anchorfile>classLookupCall.html</anchorfile>
      <anchor>aea8de54e0af77bd8aa54e373dee56853</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKey</name>
      <anchorfile>classLookupCall.html</anchorfile>
      <anchor>ac9cfcf7fe5298270b6b3898b65541a4b</anchor>
      <arglist>(const OverlayKey &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumSiblings</name>
      <anchorfile>classLookupCall.html</anchorfile>
      <anchor>a5be7c8b099438db99f2fb0c129ff1edb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumSiblings</name>
      <anchorfile>classLookupCall.html</anchorfile>
      <anchor>a1a365b8c947e000203e7fdc144715c2b</anchor>
      <arglist>(int numSiblings)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRoutingType</name>
      <anchorfile>classLookupCall.html</anchorfile>
      <anchor>ad0d7ad53c1de441b8567c8c3ecf17753</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRoutingType</name>
      <anchorfile>classLookupCall.html</anchorfile>
      <anchor>a3e24128a42dc4b729ed8aa3a7811d56a</anchor>
      <arglist>(int routingType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classLookupCall.html</anchorfile>
      <anchor>a7dd0d5fd657df098705f96605eea0aa9</anchor>
      <arglist>(const LookupCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>key_var</name>
      <anchorfile>classLookupCall.html</anchorfile>
      <anchor>ab9d804f883b15883c0cdedaf127fddca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numSiblings_var</name>
      <anchorfile>classLookupCall.html</anchorfile>
      <anchor>a77901449fb7677a7c5d42a034940a8cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>routingType_var</name>
      <anchorfile>classLookupCall.html</anchorfile>
      <anchor>a9b79fbf82598e406feb411a0167b0941</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classLookupCall.html</anchorfile>
      <anchor>a20750bedb01de99cefbcad6425d4545a</anchor>
      <arglist>(const LookupCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LookupEntry</name>
    <filename>classLookupEntry.html</filename>
    <member kind="function">
      <type></type>
      <name>LookupEntry</name>
      <anchorfile>classLookupEntry.html</anchorfile>
      <anchor>aa02789d9a85605cbef7c5183f646dc67</anchor>
      <arglist>(const NodeHandle &amp;handle, const NodeHandle &amp;source, bool alreadyUsed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LookupEntry</name>
      <anchorfile>classLookupEntry.html</anchorfile>
      <anchor>ac731add753e51e545faa030cbfd555db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>NodeHandle</type>
      <name>handle</name>
      <anchorfile>classLookupEntry.html</anchorfile>
      <anchor>abd92b3aab56636f952c1019bf5d348c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NodeHandle</type>
      <name>source</name>
      <anchorfile>classLookupEntry.html</anchorfile>
      <anchor>ae0acc3c0044b13445a09ddb23ad43571</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>alreadyUsed</name>
      <anchorfile>classLookupEntry.html</anchorfile>
      <anchor>ad8b05a056fac7eadfc405fdc4c27ad8d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LookupListener</name>
    <filename>classLookupListener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LookupListener</name>
      <anchorfile>classLookupListener.html</anchorfile>
      <anchor>a2e1a88ccbbaaaf0aa76f4bba500cdb2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>lookupFinished</name>
      <anchorfile>classLookupListener.html</anchorfile>
      <anchor>acf45d13c80a956edd062b0915ac5facd</anchor>
      <arglist>(AbstractLookup *lookup)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LookupResponse</name>
    <filename>classLookupResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>LookupResponse</name>
      <anchorfile>classLookupResponse.html</anchorfile>
      <anchor>a16c2f4a4f0fb10587bcafcbae97774b4</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LookupResponse</name>
      <anchorfile>classLookupResponse.html</anchorfile>
      <anchor>af733458ac09e7e463aa88a82a28b9068</anchor>
      <arglist>(const LookupResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LookupResponse</name>
      <anchorfile>classLookupResponse.html</anchorfile>
      <anchor>a00e0a2d39f460484cb22810cd597e870</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LookupResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classLookupResponse.html</anchorfile>
      <anchor>ada4ad7b5988a6dce162e890aeeb8b31e</anchor>
      <arglist>(const LookupResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LookupResponse *</type>
      <name>dup</name>
      <anchorfile>classLookupResponse.html</anchorfile>
      <anchor>ae7ba0d57794321d4de71fd5cb992a58c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classLookupResponse.html</anchorfile>
      <anchor>ad2b8a78ac7b774df179fb689a086342f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classLookupResponse.html</anchorfile>
      <anchor>a01582322e2b7bd44a3d698c7f98344cd</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getKey</name>
      <anchorfile>classLookupResponse.html</anchorfile>
      <anchor>a0eb7ae69a84948251e35be07be9e3911</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getKey</name>
      <anchorfile>classLookupResponse.html</anchorfile>
      <anchor>a658f6ef858660d43f75b0be086f82628</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKey</name>
      <anchorfile>classLookupResponse.html</anchorfile>
      <anchor>a89a549b892fa55f591e4da67b2c803f8</anchor>
      <arglist>(const OverlayKey &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getHopCount</name>
      <anchorfile>classLookupResponse.html</anchorfile>
      <anchor>a277634ab3f48de28473727805f8af76f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHopCount</name>
      <anchorfile>classLookupResponse.html</anchorfile>
      <anchor>a0066fdf7696ded9c1613f6aee680daae</anchor>
      <arglist>(int hopCount)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getIsValid</name>
      <anchorfile>classLookupResponse.html</anchorfile>
      <anchor>a86a9d5fd7849c18b989f2e5260cfbf12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsValid</name>
      <anchorfile>classLookupResponse.html</anchorfile>
      <anchor>a3a4e3e942bbac01c738c719655fc7b4e</anchor>
      <arglist>(bool isValid)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSiblingsArraySize</name>
      <anchorfile>classLookupResponse.html</anchorfile>
      <anchor>ab82d47b328532843aa1f5352be560578</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSiblingsArraySize</name>
      <anchorfile>classLookupResponse.html</anchorfile>
      <anchor>a294d30cb0b365a24c1b1bff9478f45ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getSiblings</name>
      <anchorfile>classLookupResponse.html</anchorfile>
      <anchor>a4c0f21b5ab1a7865cd23d8f6e3a1640c</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getSiblings</name>
      <anchorfile>classLookupResponse.html</anchorfile>
      <anchor>ac5e8ec5c383a42dce65c138f7825b7da</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSiblings</name>
      <anchorfile>classLookupResponse.html</anchorfile>
      <anchor>a104d4604305a65c9f23418cd551bb208</anchor>
      <arglist>(unsigned int k, const NodeHandle &amp;siblings)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classLookupResponse.html</anchorfile>
      <anchor>aea4f21a52a6d8e3498f8915169401ff1</anchor>
      <arglist>(const LookupResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>key_var</name>
      <anchorfile>classLookupResponse.html</anchorfile>
      <anchor>a2152e2d4a6faabb9e9364c807e504660</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>hopCount_var</name>
      <anchorfile>classLookupResponse.html</anchorfile>
      <anchor>a472a0c2a035f80ab2bd9fbbfe09e52b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isValid_var</name>
      <anchorfile>classLookupResponse.html</anchorfile>
      <anchor>ac767e8cacb16bca27f4f4e5c6596616b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle *</type>
      <name>siblings_var</name>
      <anchorfile>classLookupResponse.html</anchorfile>
      <anchor>a1293c866577e55909305816101f81477</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>siblings_arraysize</name>
      <anchorfile>classLookupResponse.html</anchorfile>
      <anchor>a716af937b537df9afc455b2d08616bdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classLookupResponse.html</anchorfile>
      <anchor>a69b07e94baf672721aad5bacd4e49d5f</anchor>
      <arglist>(const LookupResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MarkedNodeHandle</name>
    <filename>classMarkedNodeHandle.html</filename>
    <base>NodeHandle</base>
    <member kind="function">
      <type></type>
      <name>MarkedNodeHandle</name>
      <anchorfile>classMarkedNodeHandle.html</anchorfile>
      <anchor>a32249ac03bcd37a931877c0f0d8ce3a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MarkedNodeHandle</name>
      <anchorfile>classMarkedNodeHandle.html</anchorfile>
      <anchor>a00ac47c6d122f67ebb53a66cbbd996ae</anchor>
      <arglist>(const NodeHandle &amp;handle, bool isAlive=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIsAlive</name>
      <anchorfile>classMarkedNodeHandle.html</anchorfile>
      <anchor>ae98d974c4b3edc4c3e37a2a5546d25d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsAlive</name>
      <anchorfile>classMarkedNodeHandle.html</anchorfile>
      <anchor>a873307d5a571c71924b6e348a9ec994b</anchor>
      <arglist>(bool isAlive)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isAlive</name>
      <anchorfile>classMarkedNodeHandle.html</anchorfile>
      <anchor>aa6e18f351979b8a476d20d9ffdafb672</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classMarkedNodeHandle.html</anchorfile>
      <anchor>a2822a8339d5599dbe0b5a1a6690e8cd6</anchor>
      <arglist>(std::ostream &amp;os, const MarkedNodeHandle &amp;n)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MessageContent</name>
    <filename>structMessageContent.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>id</name>
      <anchorfile>structMessageContent.html</anchorfile>
      <anchor>a6211bd9cb55ec70783f1961bafbb5d5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>I3Identifier</type>
      <name>source</name>
      <anchorfile>structMessageContent.html</anchorfile>
      <anchor>a216749a3f84c25d4cd9127d44056fa6b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MessageObserver</name>
    <filename>classMessageObserver.html</filename>
    <class kind="struct">MessageObserver::MulticastGroup</class>
    <member kind="function">
      <type></type>
      <name>MessageObserver</name>
      <anchorfile>classMessageObserver.html</anchorfile>
      <anchor>a4b6a4fdeb74eaac6a1f3a27b0d37f60e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MessageObserver</name>
      <anchorfile>classMessageObserver.html</anchorfile>
      <anchor>afe2c65b6a35731eb2fdf7161f4bb4e12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classMessageObserver.html</anchorfile>
      <anchor>a61df9ca70728e3f3ebccd9b29268c074</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classMessageObserver.html</anchorfile>
      <anchor>a1f962b0d8d1d7967601415a820ddeb4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classMessageObserver.html</anchorfile>
      <anchor>a15904825bcae212d67cd9e0c227608be</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>joinedGroup</name>
      <anchorfile>classMessageObserver.html</anchorfile>
      <anchor>ae7cdd80dae8fa87307312897db056232</anchor>
      <arglist>(int moduleId, OverlayKey groupId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leftGroup</name>
      <anchorfile>classMessageObserver.html</anchorfile>
      <anchor>a46781c52cfdb9c45f295ecbb8b711931</anchor>
      <arglist>(int moduleId, OverlayKey groupId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sentMessage</name>
      <anchorfile>classMessageObserver.html</anchorfile>
      <anchor>a3f224a9c6d264277691991f0ede74c9d</anchor>
      <arglist>(ALMTestTracedMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>receivedMessage</name>
      <anchorfile>classMessageObserver.html</anchorfile>
      <anchor>a0c4f74f84facea1ee63d22c301d9d032</anchor>
      <arglist>(ALMTestTracedMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nodeDead</name>
      <anchorfile>classMessageObserver.html</anchorfile>
      <anchor>aa245eb0c30d301698edb1b5c03e41a0c</anchor>
      <arglist>(int moduleId)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::pair&lt; int, OverlayKey &gt;</type>
      <name>NodeGroupPair</name>
      <anchorfile>classMessageObserver.html</anchorfile>
      <anchor>aabfcf7b56b844dc5409859926f2b11bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::pair&lt; int, long &gt;</type>
      <name>NodeMessagePair</name>
      <anchorfile>classMessageObserver.html</anchorfile>
      <anchor>a3939a5a942819a931ef9afbfe9facb03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>creationTime</name>
      <anchorfile>classMessageObserver.html</anchorfile>
      <anchor>a2af0be1ec6a4357800430f87d89d8b2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; OverlayKey, MulticastGroup &gt;</type>
      <name>groups</name>
      <anchorfile>classMessageObserver.html</anchorfile>
      <anchor>afad81b2d24284bf1d04c9c397139c984</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; NodeGroupPair, simtime_t &gt;</type>
      <name>joinedAt</name>
      <anchorfile>classMessageObserver.html</anchorfile>
      <anchor>a4c2a44c41a354ff6c3b64f056d1f4c95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; NodeMessagePair, simtime_t &gt;</type>
      <name>receivedAt</name>
      <anchorfile>classMessageObserver.html</anchorfile>
      <anchor>a2237cd1f410e309d093434a0a6cfc813</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>gcTimer</name>
      <anchorfile>classMessageObserver.html</anchorfile>
      <anchor>a03a8b85d34e3dba033b8880ef06bd04c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>gcInterval</name>
      <anchorfile>classMessageObserver.html</anchorfile>
      <anchor>a564b70c24977ae5ddfc852488b7cd2e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>cacheMaxAge</name>
      <anchorfile>classMessageObserver.html</anchorfile>
      <anchor>ac29b3625750ccb37ce288fe4cd618bf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numLooped</name>
      <anchorfile>classMessageObserver.html</anchorfile>
      <anchor>ad77f40480893ee99ebf1a181bf410790</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GlobalStatistics *</type>
      <name>globalStatistics</name>
      <anchorfile>classMessageObserver.html</anchorfile>
      <anchor>ada9c738e1362e2d1efeee80896297997</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classMessageObserver.html</anchorfile>
      <anchor>a8f32b0caa624b1003f9f7a382c634798</anchor>
      <arglist>(std::ostream &amp;os, MessageObserver::MulticastGroup const &amp;mg)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classMessageObserver.html</anchorfile>
      <anchor>a0ff05e9659b6489a97476781dcb50ba2</anchor>
      <arglist>(std::ostream &amp;os, MessageObserver::NodeGroupPair const &amp;ngp)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MessageObserver::MulticastGroup</name>
    <filename>structMessageObserver_1_1MulticastGroup.html</filename>
    <member kind="function">
      <type></type>
      <name>MulticastGroup</name>
      <anchorfile>structMessageObserver_1_1MulticastGroup.html</anchorfile>
      <anchor>a18d2966cbf9e46401bcb50f18da0b5b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>size</name>
      <anchorfile>structMessageObserver_1_1MulticastGroup.html</anchorfile>
      <anchor>a13a65b3293ff5d7df490daf5d052514d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64_t</type>
      <name>sent</name>
      <anchorfile>structMessageObserver_1_1MulticastGroup.html</anchorfile>
      <anchor>a740c35dbc35e8d7fd195d2d1abfc437a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64_t</type>
      <name>received</name>
      <anchorfile>structMessageObserver_1_1MulticastGroup.html</anchorfile>
      <anchor>af3a2822f3264cb7ad4c9440da1862d88</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MethodHelp</name>
    <filename>classMethodHelp.html</filename>
    <base>XmlRpc::XmlRpcServerMethod</base>
    <member kind="function">
      <type></type>
      <name>MethodHelp</name>
      <anchorfile>classMethodHelp.html</anchorfile>
      <anchor>aa8b96129f5cf175df320f1c0e78a7727</anchor>
      <arglist>(XmlRpcServer *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>execute</name>
      <anchorfile>classMethodHelp.html</anchorfile>
      <anchor>af87a5987b71d52d06738270ece7159ae</anchor>
      <arglist>(XmlRpcValue &amp;params, XmlRpcValue &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>help</name>
      <anchorfile>classMethodHelp.html</anchorfile>
      <anchor>aaed76173124f0924f476df7f17e485ed</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MovementGenerator</name>
    <filename>classMovementGenerator.html</filename>
    <member kind="function">
      <type></type>
      <name>MovementGenerator</name>
      <anchorfile>classMovementGenerator.html</anchorfile>
      <anchor>ad858405d1a32d7dbdcda30b5b239a298</anchor>
      <arglist>(double areaDimension, double speed, NeighborMap *Neighbors, GlobalCoordinator *coordinator, CollisionList *CollisionRect)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MovementGenerator</name>
      <anchorfile>classMovementGenerator.html</anchorfile>
      <anchor>af7a3b5243527667d132653f2485cfea8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>classMovementGenerator.html</anchorfile>
      <anchor>abb22f6c21909e5db74e86e3aad6543b3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>Vector2D</type>
      <name>getPosition</name>
      <anchorfile>classMovementGenerator.html</anchorfile>
      <anchor>ac1dc20e9f1d431b1ea78d14847c2c0f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>testBounds</name>
      <anchorfile>classMovementGenerator.html</anchorfile>
      <anchor>a6d1b439c4333ad1cf18771d96e6176e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>flock</name>
      <anchorfile>classMovementGenerator.html</anchorfile>
      <anchor>af433b509bb5a1cae19f315b61f3f577c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateScenery</name>
      <anchorfile>classMovementGenerator.html</anchorfile>
      <anchor>a638d2374df0ce0b1c798f29152efe8be</anchor>
      <arglist>(unsigned int seed)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>areaDimension</name>
      <anchorfile>classMovementGenerator.html</anchorfile>
      <anchor>ac10e32dbd7788692b8efbdb5d3dcf971</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>speed</name>
      <anchorfile>classMovementGenerator.html</anchorfile>
      <anchor>a501f8d2099ae74192fdb86af941fa9ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D</type>
      <name>direction</name>
      <anchorfile>classMovementGenerator.html</anchorfile>
      <anchor>a2bd19c724daf7f17e392034ebfcd8ce3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D</type>
      <name>position</name>
      <anchorfile>classMovementGenerator.html</anchorfile>
      <anchor>afef2160697a98f954d8af63d1764bc95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D</type>
      <name>target</name>
      <anchorfile>classMovementGenerator.html</anchorfile>
      <anchor>aa373f2d714a240f3842faffeec9fab6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NeighborMap *</type>
      <name>Neighbors</name>
      <anchorfile>classMovementGenerator.html</anchorfile>
      <anchor>a036e27db44635f4eab0ed1d54c111679</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NeighborMap::iterator</type>
      <name>itNeighbors</name>
      <anchorfile>classMovementGenerator.html</anchorfile>
      <anchor>af5e2c89ab3dcb5686975159170131d18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GlobalCoordinator *</type>
      <name>coordinator</name>
      <anchorfile>classMovementGenerator.html</anchorfile>
      <anchor>af011410f544931d8f829428727d61ac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CollisionList *</type>
      <name>CollisionRect</name>
      <anchorfile>classMovementGenerator.html</anchorfile>
      <anchor>a3c1bf9f56d4320e7e7e3197856557551</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MsgContent</name>
    <filename>structMsgContent.html</filename>
    <member kind="variable">
      <type>I3Identifier</type>
      <name>sourceId</name>
      <anchorfile>structMsgContent.html</anchorfile>
      <anchor>a55c8e9c82aef3f44d28fec02768bd83c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>I3IPAddress</type>
      <name>sourceIp</name>
      <anchorfile>structMsgContent.html</anchorfile>
      <anchor>aa306a56992093d24b7341feba1fbd1ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>creationTime</name>
      <anchorfile>structMsgContent.html</anchorfile>
      <anchor>ace1fa01979508e6400814c7ecb272070</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Mtx</name>
    <filename>classMtx.html</filename>
    <member kind="function">
      <type></type>
      <name>Mtx</name>
      <anchorfile>classMtx.html</anchorfile>
      <anchor>ae476dbffec65a4ff98343287ce1cc4eb</anchor>
      <arglist>(int n, int m, double **)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mtx</name>
      <anchorfile>classMtx.html</anchorfile>
      <anchor>a4f15985d15d5dce9eb6148e272b6f208</anchor>
      <arglist>(int n, int m, double d=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mtx</name>
      <anchorfile>classMtx.html</anchorfile>
      <anchor>ab0c1cb1235120089f6ab8fef29a330dc</anchor>
      <arglist>(const Mtx &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Mtx</name>
      <anchorfile>classMtx.html</anchorfile>
      <anchor>ad923cc7d013853bfe4876601202e9229</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Mtx &amp;</type>
      <name>operator=</name>
      <anchorfile>classMtx.html</anchorfile>
      <anchor>a1d6eeb616723a026a313b4f3b5b9738e</anchor>
      <arglist>(const Mtx &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Mtx &amp;</type>
      <name>operator+=</name>
      <anchorfile>classMtx.html</anchorfile>
      <anchor>a308c8c9f8cdd4055267d80e64ca4c68e</anchor>
      <arglist>(const Mtx &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Mtx &amp;</type>
      <name>operator-=</name>
      <anchorfile>classMtx.html</anchorfile>
      <anchor>a490383545236b984b788566ba439c878</anchor>
      <arglist>(const Mtx &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Vtr</type>
      <name>operator*</name>
      <anchorfile>classMtx.html</anchorfile>
      <anchor>a4238e3f72438311d1095145f81551346</anchor>
      <arglist>(const Vtr &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>operator[]</name>
      <anchorfile>classMtx.html</anchorfile>
      <anchor>af9f34a292f9cca0f8f42f6c27bc4637b</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>Mtx &amp;</type>
      <name>operator+</name>
      <anchorfile>classMtx.html</anchorfile>
      <anchor>a9cb1c64b9ae09fac3d0211903cf3672d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Mtx</type>
      <name>operator+</name>
      <anchorfile>classMtx.html</anchorfile>
      <anchor>ace8b3a3a02d407faf1e8a03ec40aeca3</anchor>
      <arglist>(const Mtx &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rows</name>
      <anchorfile>classMtx.html</anchorfile>
      <anchor>a0fb1fb0077d19875e39f7a2e05e5ce93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cols</name>
      <anchorfile>classMtx.html</anchorfile>
      <anchor>ae44286ffe426362611fbea572dd043d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getcol</name>
      <anchorfile>classMtx.html</anchorfile>
      <anchor>a5746953701bc504f77b0dde9c6205db7</anchor>
      <arglist>(int i, Vtr &amp;vec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setcol</name>
      <anchorfile>classMtx.html</anchorfile>
      <anchor>a9e8b7bbcb84142e18d13253ae932ed85</anchor>
      <arglist>(int i, const Vtr &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classMtx.html</anchorfile>
      <anchor>a1c5de31d03a78a446ed8da8dd0a932d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>transpose</name>
      <anchorfile>classMtx.html</anchorfile>
      <anchor>a88a9f4387013bd081fbfaf5ce3affe6d</anchor>
      <arglist>(Mtx &amp;dest) const </arglist>
    </member>
    <member kind="function">
      <type>Mtx</type>
      <name>operator*</name>
      <anchorfile>classMtx.html</anchorfile>
      <anchor>aba7c44b50470f5fd8d8ed1343a6bb4a7</anchor>
      <arglist>(const Mtx &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator()</name>
      <anchorfile>classMtx.html</anchorfile>
      <anchor>a4f22237e80890d66d87b61ebe38530ec</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classMtx.html</anchorfile>
      <anchor>a03c8bd12f7eb0a185c1e42c61680260f</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>QRdecomp</name>
      <anchorfile>classMtx.html</anchorfile>
      <anchor>a68f05111f5ee1205c3ddcca513130c23</anchor>
      <arglist>(Mtx &amp;Q, Mtx &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>QRdecomp_slow</name>
      <anchorfile>classMtx.html</anchorfile>
      <anchor>adcb9beab7b55ff672f32c5e79f8d9b04</anchor>
      <arglist>(Mtx &amp;Q, Mtx &amp;R)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nrows</name>
      <anchorfile>classMtx.html</anchorfile>
      <anchor>a64e8cbb360f431f27c6e52fa927bd8fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>ncols</name>
      <anchorfile>classMtx.html</anchorfile>
      <anchor>a3b9825671e35f6b0fa0dbb06bad27e99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double **</type>
      <name>ets</name>
      <anchorfile>classMtx.html</anchorfile>
      <anchor>a842f8c716c3831327efbfa72cb9294c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend Mtx</type>
      <name>operator-</name>
      <anchorfile>classMtx.html</anchorfile>
      <anchor>aa46acda2087f2f5765ee63f9ad4f299e</anchor>
      <arglist>(const Mtx &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend Mtx</type>
      <name>operator-</name>
      <anchorfile>classMtx.html</anchorfile>
      <anchor>af48ce95bfb838c89163a48c953ce3a04</anchor>
      <arglist>(const Mtx &amp;, const Mtx &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend Vtr</type>
      <name>operator*</name>
      <anchorfile>classMtx.html</anchorfile>
      <anchor>ac04e69745981b1ece348f5f96c5732f1</anchor>
      <arglist>(const Vtr &amp;, const Mtx &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classMtx.html</anchorfile>
      <anchor>aaa77876b546a099799c32c6dc200e88f</anchor>
      <arglist>(std::ostream &amp;, const Mtx &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MyApplication</name>
    <filename>classMyApplication.html</filename>
    <base>BaseApp</base>
    <member kind="function">
      <type></type>
      <name>MyApplication</name>
      <anchorfile>classMyApplication.html</anchorfile>
      <anchor>a886459f038bb1a49908840a6f39550f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MyApplication</name>
      <anchorfile>classMyApplication.html</anchorfile>
      <anchor>a51d0aceb30882a384e9d78859da9bae8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initializeApp</name>
      <anchorfile>classMyApplication.html</anchorfile>
      <anchor>a560383b10876eb88907371fe36cfe9e8</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>finishApp</name>
      <anchorfile>classMyApplication.html</anchorfile>
      <anchor>afe03a52e1c6912d44a3345c50f1198a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classMyApplication.html</anchorfile>
      <anchor>a9b075bf0301762be15b63a1e3b69f06a</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deliver</name>
      <anchorfile>classMyApplication.html</anchorfile>
      <anchor>a570395eea33faf2a1b3e5b82bae169a9</anchor>
      <arglist>(OverlayKey &amp;key, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleUDPMessage</name>
      <anchorfile>classMyApplication.html</anchorfile>
      <anchor>aa8e005a71cd6c7d9979fc801043150cb</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>sendPeriod</name>
      <anchorfile>classMyApplication.html</anchorfile>
      <anchor>a8a71d22d42abb4cdbba490d87030322a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numToSend</name>
      <anchorfile>classMyApplication.html</anchorfile>
      <anchor>a9664c61f5485a5a6d43e6c9a1882bcd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>largestKey</name>
      <anchorfile>classMyApplication.html</anchorfile>
      <anchor>a5da96001b5d09d43cc1791d13a68304e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numSent</name>
      <anchorfile>classMyApplication.html</anchorfile>
      <anchor>aed8f85ea07a74be9e6ee05abc6b36968</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numReceived</name>
      <anchorfile>classMyApplication.html</anchorfile>
      <anchor>a275b951464026e78b405750229c28a6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>timerMsg</name>
      <anchorfile>classMyApplication.html</anchorfile>
      <anchor>a57dfe3c8a3db45443a2cc08880e9e6e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MyMessage</name>
    <filename>classMyMessage.html</filename>
    <member kind="function">
      <type></type>
      <name>MyMessage</name>
      <anchorfile>classMyMessage.html</anchorfile>
      <anchor>ab81fe6e23bd23a77a3f0ecd3f0f80fd3</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MyMessage</name>
      <anchorfile>classMyMessage.html</anchorfile>
      <anchor>a405fb4115552cf738d7d308a6f84199a</anchor>
      <arglist>(const MyMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MyMessage</name>
      <anchorfile>classMyMessage.html</anchorfile>
      <anchor>a2f1f50277bf5910fa2edbf6efdc3b43e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MyMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classMyMessage.html</anchorfile>
      <anchor>a9df585fbc285a2bf837c9e7656892103</anchor>
      <arglist>(const MyMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MyMessage *</type>
      <name>dup</name>
      <anchorfile>classMyMessage.html</anchorfile>
      <anchor>adfd615d27b3f9b4fdce157233c309440</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classMyMessage.html</anchorfile>
      <anchor>a49f50dc7d4e2d98d611627024b06c520</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classMyMessage.html</anchorfile>
      <anchor>a440050e71f582607c0ce38dd009f4f51</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getType</name>
      <anchorfile>classMyMessage.html</anchorfile>
      <anchor>aa81246f61bee15b9de7e07e679328398</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchorfile>classMyMessage.html</anchorfile>
      <anchor>a8731ea992805505d9b33819549c74504</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransportAddress &amp;</type>
      <name>getSenderAddress</name>
      <anchorfile>classMyMessage.html</anchorfile>
      <anchor>a9e68fa14b58c662385ef0bd988e7ab51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TransportAddress &amp;</type>
      <name>getSenderAddress</name>
      <anchorfile>classMyMessage.html</anchorfile>
      <anchor>ae06a9d20229d1fb3087fbb9a83f062cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSenderAddress</name>
      <anchorfile>classMyMessage.html</anchorfile>
      <anchor>a5b7b7973ed1e3d566e4303561fdaff4a</anchor>
      <arglist>(const TransportAddress &amp;senderAddress)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classMyMessage.html</anchorfile>
      <anchor>ad358693e9750d1ce2f8dc556e6670d3b</anchor>
      <arglist>(const MyMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>type_var</name>
      <anchorfile>classMyMessage.html</anchorfile>
      <anchor>aa2c828c4eb202cba97523386500c6e73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress</type>
      <name>senderAddress_var</name>
      <anchorfile>classMyMessage.html</anchorfile>
      <anchor>a4a859a081b960694d13dc2861b4aa46c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classMyMessage.html</anchorfile>
      <anchor>a7623ed65cd1de491466e070657679d70</anchor>
      <arglist>(const MyMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MyNeighborCall</name>
    <filename>classMyNeighborCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>MyNeighborCall</name>
      <anchorfile>classMyNeighborCall.html</anchorfile>
      <anchor>a9e325d894b8f530f0204050f92e97301</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MyNeighborCall</name>
      <anchorfile>classMyNeighborCall.html</anchorfile>
      <anchor>aec49bc53c422391af20b337d96d34530</anchor>
      <arglist>(const MyNeighborCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MyNeighborCall</name>
      <anchorfile>classMyNeighborCall.html</anchorfile>
      <anchor>a9565daaeff62821f49810202cde22317</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MyNeighborCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classMyNeighborCall.html</anchorfile>
      <anchor>ad9a449f0ddd6dce0bf493772432dc0dc</anchor>
      <arglist>(const MyNeighborCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MyNeighborCall *</type>
      <name>dup</name>
      <anchorfile>classMyNeighborCall.html</anchorfile>
      <anchor>a619d254b871d3595b1e3f3024a9332da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classMyNeighborCall.html</anchorfile>
      <anchor>a74bfd84c1313d1eb7bf13ee15a8faf41</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classMyNeighborCall.html</anchorfile>
      <anchor>a0735240ac25f0d8421a18b6a8c764cdb</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getDestinationKey</name>
      <anchorfile>classMyNeighborCall.html</anchorfile>
      <anchor>a82546ebc4d1737ac38b56944c940bb70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getDestinationKey</name>
      <anchorfile>classMyNeighborCall.html</anchorfile>
      <anchor>abd17947c45f65425aff9358e7c720d8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestinationKey</name>
      <anchorfile>classMyNeighborCall.html</anchorfile>
      <anchor>af2f15607ae352dbc6d78cfc1ceeea35b</anchor>
      <arglist>(const OverlayKey &amp;destinationKey)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classMyNeighborCall.html</anchorfile>
      <anchor>adae197c2f615e3b22daab98f94c70e4d</anchor>
      <arglist>(const MyNeighborCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>destinationKey_var</name>
      <anchorfile>classMyNeighborCall.html</anchorfile>
      <anchor>a09d38495f3d15771a61d55e2a012b291</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classMyNeighborCall.html</anchorfile>
      <anchor>af86ee7837480addae0e252bc20d76700</anchor>
      <arglist>(const MyNeighborCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MyNeighborResponse</name>
    <filename>classMyNeighborResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>MyNeighborResponse</name>
      <anchorfile>classMyNeighborResponse.html</anchorfile>
      <anchor>afca7efb8835b289b913ca54f4b061bf4</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MyNeighborResponse</name>
      <anchorfile>classMyNeighborResponse.html</anchorfile>
      <anchor>a335542619a1ae9b742692449cb5f7b0b</anchor>
      <arglist>(const MyNeighborResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MyNeighborResponse</name>
      <anchorfile>classMyNeighborResponse.html</anchorfile>
      <anchor>a9ee670b7f0da07f5425fdbb0b6fdcefe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MyNeighborResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classMyNeighborResponse.html</anchorfile>
      <anchor>a0dc1c53fae91b90c5a924958068bdec8</anchor>
      <arglist>(const MyNeighborResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MyNeighborResponse *</type>
      <name>dup</name>
      <anchorfile>classMyNeighborResponse.html</anchorfile>
      <anchor>a4a975a353cd133853d254fee04ce3b41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classMyNeighborResponse.html</anchorfile>
      <anchor>a04ad8b23f2c8f51b12564bf16385437a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classMyNeighborResponse.html</anchorfile>
      <anchor>a412b0b1c0b47d4e5e0a475eb1aa8522a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getRespondingNode</name>
      <anchorfile>classMyNeighborResponse.html</anchorfile>
      <anchor>af0fa0a0fcf034d6b1428632d07df14fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getRespondingNode</name>
      <anchorfile>classMyNeighborResponse.html</anchorfile>
      <anchor>aca7d66aa50053e069a5243542717af2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRespondingNode</name>
      <anchorfile>classMyNeighborResponse.html</anchorfile>
      <anchor>a932fef3a5ca7c38a96f7fff14f3934b5</anchor>
      <arglist>(const NodeHandle &amp;respondingNode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getPrevNeighbor</name>
      <anchorfile>classMyNeighborResponse.html</anchorfile>
      <anchor>a940642558b27916a97048650e713143d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getPrevNeighbor</name>
      <anchorfile>classMyNeighborResponse.html</anchorfile>
      <anchor>adeff7a2b5fda8879c7d334d770086721</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPrevNeighbor</name>
      <anchorfile>classMyNeighborResponse.html</anchorfile>
      <anchor>ad11df52c11e62fde0f10ed01f559d344</anchor>
      <arglist>(const NodeHandle &amp;prevNeighbor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getNextNeighbor</name>
      <anchorfile>classMyNeighborResponse.html</anchorfile>
      <anchor>ab620ae960038e7c5a7c986e8e416d38c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getNextNeighbor</name>
      <anchorfile>classMyNeighborResponse.html</anchorfile>
      <anchor>a4fd1027727d3d68c9c0356c30835ba2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNextNeighbor</name>
      <anchorfile>classMyNeighborResponse.html</anchorfile>
      <anchor>ae0aecd23c1205753dde9d6cfe644c9fc</anchor>
      <arglist>(const NodeHandle &amp;nextNeighbor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classMyNeighborResponse.html</anchorfile>
      <anchor>a7c200603d7797d92168d49b591623e44</anchor>
      <arglist>(const MyNeighborResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>respondingNode_var</name>
      <anchorfile>classMyNeighborResponse.html</anchorfile>
      <anchor>ab380fa46b6dd0549a8f656401b6d7c74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>prevNeighbor_var</name>
      <anchorfile>classMyNeighborResponse.html</anchorfile>
      <anchor>aac3ddec903166304d6b260e79eab551a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>nextNeighbor_var</name>
      <anchorfile>classMyNeighborResponse.html</anchorfile>
      <anchor>a4e903a2d6d0902a5a8ad817531be8286</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classMyNeighborResponse.html</anchorfile>
      <anchor>ad8f1de58a1d4607e42b34ec9c4f2f219</anchor>
      <arglist>(const MyNeighborResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MyOverlay</name>
    <filename>classMyOverlay.html</filename>
    <base>BaseOverlay</base>
    <member kind="function">
      <type></type>
      <name>MyOverlay</name>
      <anchorfile>classMyOverlay.html</anchorfile>
      <anchor>a963b6240e2e917a70c329b2153d19734</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MyOverlay</name>
      <anchorfile>classMyOverlay.html</anchorfile>
      <anchor>a6bfa6db09589828cd6e6dcf81c778d81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classMyOverlay.html</anchorfile>
      <anchor>a9fa3f3705a1825911d534892d6846237</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initializeOverlay</name>
      <anchorfile>classMyOverlay.html</anchorfile>
      <anchor>a651f1dbe4f6371f3a58dff39ad457d48</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setOwnNodeID</name>
      <anchorfile>classMyOverlay.html</anchorfile>
      <anchor>a9d5aadf1daaa6e02cf3c785811278b0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>joinOverlay</name>
      <anchorfile>classMyOverlay.html</anchorfile>
      <anchor>a98f93274ec15fefc1bd3fa24af43b35c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>finishOverlay</name>
      <anchorfile>classMyOverlay.html</anchorfile>
      <anchor>a2c99f0d95f68f8135dac6acc3a24011b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>NodeVector *</type>
      <name>findNode</name>
      <anchorfile>classMyOverlay.html</anchorfile>
      <anchor>a9bcbf789e463e45f5d8c2028e8568ca7</anchor>
      <arglist>(const OverlayKey &amp;key, int numRedundantNodes, int numSiblings, BaseOverlayMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>isSiblingFor</name>
      <anchorfile>classMyOverlay.html</anchorfile>
      <anchor>a1a588f5af9c3aee2484d9d0e8ed89b44</anchor>
      <arglist>(const NodeHandle &amp;node, const OverlayKey &amp;key, int numSiblings, bool *err)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getMaxNumSiblings</name>
      <anchorfile>classMyOverlay.html</anchorfile>
      <anchor>a4afcf38dab3c871471fc658c7a12ee4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getMaxNumRedundantNodes</name>
      <anchorfile>classMyOverlay.html</anchorfile>
      <anchor>a6e8306f62ca6378f317d401b378af724</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getNeighbors</name>
      <anchorfile>classMyOverlay.html</anchorfile>
      <anchor>ac42f8d1581e303ac02eb3d165c54df72</anchor>
      <arglist>(const OverlayKey &amp;neighborKey)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>callbackNeighbors</name>
      <anchorfile>classMyOverlay.html</anchorfile>
      <anchor>a55d11f3488949255da4a147bbd86b83e</anchor>
      <arglist>(const NodeHandle &amp;neighborKey, const NodeHandle &amp;prevNeighbor, const NodeHandle &amp;nextNeighbor)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>callbackTimeout</name>
      <anchorfile>classMyOverlay.html</anchorfile>
      <anchor>ab5282917369412abe224bbf606482284</anchor>
      <arglist>(const OverlayKey &amp;neighborKey)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>handleRpcCall</name>
      <anchorfile>classMyOverlay.html</anchorfile>
      <anchor>af4b0a674e6403aff467c6d94a03fce95</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleRpcResponse</name>
      <anchorfile>classMyOverlay.html</anchorfile>
      <anchor>a1ce676207ea25678af8eacc5d2b52902</anchor>
      <arglist>(BaseResponseMessage *msg, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleRpcTimeout</name>
      <anchorfile>classMyOverlay.html</anchorfile>
      <anchor>ad0bd399bae0aa1631314d8904efe4038</anchor>
      <arglist>(BaseCallMessage *msg, const TransportAddress &amp;dest, cPolymorphic *context, int rpcId, const OverlayKey &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>rpcTimer</name>
      <anchorfile>classMyOverlay.html</anchorfile>
      <anchor>aebb5e36a760d5ad0b908d90da801b4f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>myKey</name>
      <anchorfile>classMyOverlay.html</anchorfile>
      <anchor>a2fa7ec8e7a3ddc53f12f713de777932f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeHandle</type>
      <name>prevNode</name>
      <anchorfile>classMyOverlay.html</anchorfile>
      <anchor>a76ed822ecdba26c0f636cff3a9e402b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeHandle</type>
      <name>nextNode</name>
      <anchorfile>classMyOverlay.html</anchorfile>
      <anchor>af27533b75a26ab0f4a4eebb3f6680639</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>dropChance</name>
      <anchorfile>classMyOverlay.html</anchorfile>
      <anchor>a50231da7a7af9554661dafb98eb3ad61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numDropped</name>
      <anchorfile>classMyOverlay.html</anchorfile>
      <anchor>ac900d0d8bd93f7b17a6519d5ae1d8bc6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NeighborCache</name>
    <filename>classNeighborCache.html</filename>
    <base>BaseApp</base>
    <class kind="struct">NeighborCache::NeighborCacheEntry</class>
    <class kind="struct">NeighborCache::WaitingContext</class>
    <member kind="function">
      <type></type>
      <name>~NeighborCache</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>adbaa89b2beef3d6b0cf307bd3948efc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a2ce120e786b37cb5823d53f31ae82ff3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TransportAddress &amp;</type>
      <name>getBootstrapNode</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a807c7e77f42e52bf22d1340e207125a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>piggybackOwnCoords</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>abfd044fbe032dede0011d4a7925c3949</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const AbstractNcs &amp;</type>
      <name>getNcsAccess</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>affdf04759fd1df8315954b8789d91eab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NodeHandle &amp;</type>
      <name>getOverlayThisNode</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a54e923d5f3f6ca83696e23cc466f8e09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>getNeighborCacheSize</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a23203e2d09c77efbba57a85212f2f9df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEntry</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a416f18a5fea738589845fd630d6cf071</anchor>
      <arglist>(const TransportAddress &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getNodeAge</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a8a19fa241b9d8eda9092a93a4a41b9bb</anchor>
      <arglist>(const TransportAddress &amp;handle)</arglist>
    </member>
    <member kind="function">
      <type>const NodeHandle &amp;</type>
      <name>getNodeHandle</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a393f2dab8d25fcc23ad3c53cf9228080</anchor>
      <arglist>(const TransportAddress &amp;add)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getNodeTimeout</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a23056db53fc60a2eaedf425b7370146e</anchor>
      <arglist>(const NodeHandle &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>TransportAddress</type>
      <name>getNearestNode</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a2172131cd1f7e5958ad3e8c359ca3109</anchor>
      <arglist>(uint8_t maxLayer)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAvgAbsPredictionError</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a850073aebd8d46ba5432ed79a62885c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; TransportAddress &gt; *</type>
      <name>getClosestNodes</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a07cb82893b7483ca7f247bad059b5a3e</anchor>
      <arglist>(uint8_t number)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; TransportAddress &gt; *</type>
      <name>getSpreadedNodes</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a125eb149eacf6814a06adbb5937bca19</anchor>
      <arglist>(uint8_t number)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateNode</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a057e94a37705dfab0ab1f91417603450</anchor>
      <arglist>(const NodeHandle &amp;add, simtime_t rtt, const NodeHandle &amp;srcRoute=NodeHandle::UNSPECIFIED_NODE, AbstractNcsNodeInfo *ncsInfo=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateNcsInfo</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a8b5247ae66c36e40addd51db3aa33a3c</anchor>
      <arglist>(const TransportAddress &amp;node, AbstractNcsNodeInfo *ncsInfo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodeTimeout</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a93099fadb692a42cbe4c0757f28cf0c3</anchor>
      <arglist>(const TransportAddress &amp;handle)</arglist>
    </member>
    <member kind="function">
      <type>Prox</type>
      <name>getProx</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>ab934be8fb503f9629cf6eb83e7d1b576</anchor>
      <arglist>(const TransportAddress &amp;node, NeighborCacheQueryType type=NEIGHBORCACHE_AVAILABLE, int rpcId=-1, ProxListener *listener=NULL, cPolymorphic *contextPointer=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Prox</type>
      <name>estimateProx</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a1d0b6dc71b5933f46f888100c8aaf70a</anchor>
      <arglist>(const TransportAddress &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>const AbstractNcsNodeInfo *</type>
      <name>getNodeCoordsInfo</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a5bfc95cec29a0c320e3586629fb85504</anchor>
      <arglist>(const TransportAddress &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>TreeManagement *</type>
      <name>getTreeManager</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a8317329015f5923320d94ae628401de2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; simtime_t, simtime_t &gt;</type>
      <name>getMeanVarRtt</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>af02289b6b99c9b1e7c902175ef76d175</anchor>
      <arglist>(const TransportAddress &amp;node, bool returnVar)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>UNORDERED_MAP&lt; TransportAddress, NeighborCacheEntry &gt;::iterator</type>
      <name>NeighborCacheIterator</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>aed1572b2a597a0654f4d355760aa5942</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>UNORDERED_MAP&lt; TransportAddress, NeighborCacheEntry &gt;::const_iterator</type>
      <name>NeighborCacheConstIterator</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a81f00b07e9a47f134156759e5b878443</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::multimap&lt; simtime_t, TransportAddress &gt;::iterator</type>
      <name>neighborCacheExpireMapIterator</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a7f7da64944cfeee91fcecb1d5fb23dd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initializeApp</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a9d114395eec6daa793b36bca06e24a22</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finishApp</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>aaad39bfe85c0214910e38f774d53ab1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual CompType</type>
      <name>getThisCompType</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>aa6aafdbff910a02b3dc631a57f2b3ac4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a54e488bca853c3d1b4ea1480fefc81e8</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>queryProx</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>aab267d208202e7bf8dc1c7aecc66b550</anchor>
      <arglist>(const TransportAddress &amp;node, int rpcId, ProxListener *listener, cPolymorphic *contextPointer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handleRpcCall</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a0b7a352cb7d5eb83c9a04b1e0f52a5d0</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleReadyMessage</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a4981e919440eb9decd3c8f75cb3d68ac</anchor>
      <arglist>(CompReadyMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>getRttBasedTimeout</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a1ba760d3b98f17dd3951ba64ec54e30f</anchor>
      <arglist>(const NodeHandle &amp;node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>getNcsBasedTimeout</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>aa6f7beabed784d0269bfde141217557c</anchor>
      <arglist>(const NodeHandle &amp;node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>callbackDiscoveryFinished</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a4f8b972def963e1508ec598fb5f87644</anchor>
      <arglist>(const TransportAddress &amp;nearNode)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GlobalStatistics *</type>
      <name>globalStatistics</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a0ffa19a84d406ad8de4b86148a5879ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UNORDERED_MAP&lt; TransportAddress, NeighborCacheEntry &gt;</type>
      <name>neighborCache</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a6f9e10ff6b8ac2ecb0f8126f77a8ad4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::multimap&lt; simtime_t, TransportAddress &gt;</type>
      <name>neighborCacheExpireMap</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a13fe4a3a70c426257244008e5e1fd0f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ProxAddressVector *</type>
      <name>closestNodes</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a5102f8173d859bf7431989d46e75395a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>NeighborCacheRttState</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>aefe728f567b9040c8c01c8bbf93d9c99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTTSTATE_VALID</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>aefe728f567b9040c8c01c8bbf93d9c99ad335b9827dedaf0b54e8f8f85a9ed56f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTTSTATE_UNKNOWN</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>aefe728f567b9040c8c01c8bbf93d9c99a9bcd0d18a9801aa587532affb6374eea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTTSTATE_TIMEOUT</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>aefe728f567b9040c8c01c8bbf93d9c99add78d4f762a1db85d7609729b2a5267c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RTTSTATE_WAITING</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>aefe728f567b9040c8c01c8bbf93d9c99a8a3460a12b4cd0b4d6d89d58fffc3ac0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; WaitingContext &gt;</type>
      <name>WaitingContexts</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>aa690fa08dd5460980e15bae581ef04d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::pair&lt; simtime_t, NeighborCacheRttState &gt;</type>
      <name>Rtt</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>ad6b6e27419b9657874d3517f2cc62dcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>cleanupCache</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>acd2bd11282ed8d69d6291946a184b127</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateEntry</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a77a2ecd09d989f19bc2c0cf7e9f0e5b8</anchor>
      <arglist>(const TransportAddress &amp;address, simtime_t insertTime)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Prox</type>
      <name>getCoordinateBasedProx</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>ad9e7edece1f862fc607302542a62879b</anchor>
      <arglist>(const TransportAddress &amp;node)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>recordNcsEstimationError</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>ac08424d2bc22ec75e91b2da484d3075d</anchor>
      <arglist>(const NodeHandle &amp;handle, simtime_t rtt)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>insertNodeContext</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a414a936f37e71490de6af0eda317fa83</anchor>
      <arglist>(const TransportAddress &amp;handle, cPolymorphic *context, ProxListener *rpcListener, int rpcId)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>NeighborCache::WaitingContexts</type>
      <name>getNodeContexts</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a2dae7f2c34de3d5ce4e9032f0b00c07b</anchor>
      <arglist>(const TransportAddress &amp;handle)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Rtt</type>
      <name>getNodeRtt</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>ab94f734ab0667605962f2bb4f315e9f1</anchor>
      <arglist>(const TransportAddress &amp;add)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>pingResponse</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>ab3c80224821887880caf9192c4d83a8e</anchor>
      <arglist>(PingResponse *response, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>pingTimeout</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>aef4fca6b3c22482d4424f83d7656ddc1</anchor>
      <arglist>(PingCall *call, const TransportAddress &amp;dest, cPolymorphic *context, int rpcId)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>prepareOverlay</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a0df75e09a10623f6ad9e45ee05f20938</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setCbrNodeId</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>ab3b6bdb65927ffa2d71496c0351c54f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>enableNeighborCache</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a14ea96324f1a0c102dee609d89cff72a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint8_t</type>
      <name>collectClosestNodes</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>aeff6d75027528c27a7424fafc0fd5ae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>rttExpirationTime</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>ab3ba13a3310b16ef691ee52eac897c72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>maxSize</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>aacdd8a0ee2a9e893e21caf58cceb8576</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>discoveryFinished</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a4dab83c82964a5be2da87477aeb7f6f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>misses</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a54211a9fd7c6562ff15323e5b9863814</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>hits</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a39da5066d1b99988174cc8546564600b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AbstractNcs *</type>
      <name>ncs</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>aea802dc1c5065f1abd3756079f47fce3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TreeManagement *</type>
      <name>treeManager</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>ae33c98df5571a15f537ea51fd9298a6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GlobalViewBuilder *</type>
      <name>globalViewBuilder</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>ac5f48962709290d0d62ebfe2b94da14a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>capReqFinished</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a3597f3dbce17346140258f34d17b4209</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>ncsPiggybackOwnCoords</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a9921c0eaa97c6836b731327abe0f0829</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useNcsForTimeout</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a35eddfa8e8b64ba9cdbe138f8067d07f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>StdProxComparator *</type>
      <name>proxComparator</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>ac8feda3e317250804eeb41b727b4456c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DiscoveryMode *</type>
      <name>discoveryMode</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a13751f12b261fdf63d0a44cd42cb4836</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CoordBasedRouting *</type>
      <name>coordBasedRouting</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a7cc33529f354fc9c21f5cbebf4cbdfc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NeighborCacheQueryType</type>
      <name>defaultQueryType</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a11a4145a2f976de746ffb5eb80b8720e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NeighborCacheQueryType</type>
      <name>defaultQueryTypeI</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a88e4d57df1eece811a04c75c2eb61c00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NeighborCacheQueryType</type>
      <name>defaultQueryTypeQ</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a8a01390ead6fc76dcc7d76e5e2253481</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>landmarkTimer</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a850be66fd299373b7843c92378b4d54a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>cbrTimer</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a0a24e2ba7ad8f0328e4b4b829eae9e63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; TransportAddress, std::vector&lt; double &gt; &gt;</type>
      <name>lastAbsoluteErrorPerNode</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>ad25610d40940fb6395a623bcb3b4a612</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>numMsg</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a22a9c8f9d8054711dd9b4c972940fdcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>absoluteError</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a3a41df8495c9a6b70fc715e308a8ea2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>relativeError</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a2a635befdb541a1d491b23fe52616370</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>numRttErrorToHigh</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a5de22621c8d7fa8bbe85e49d3b6b8927</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>numRttErrorToLow</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a86b66679e384f12f73bd4dbcc770f8e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>rttHistory</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a825fc8881da994d38c7574ecfc110f4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>timeoutAccuracyLimit</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a05ae665acfd7d6504d624d69a95428ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const std::vector&lt; double &gt;</type>
      <name>coordsDummy</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a306e1f0b6cdea15e32762ce421d1734a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const double</type>
      <name>RTT_TIMEOUT_ADJUSTMENT</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>abf8f22a91e7e5bb6095df851e586858f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const double</type>
      <name>NCS_TIMEOUT_CONSTANT</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>ab645ed14a47c403b86243192fcbfa27c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Nps</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a936e38853be592103df5f12cd5d5924a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SimpleUnderlayNCS</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>aede157b6cef68cd553f881605bae6687</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>TreeManagement</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>aa4eb45f96f21fd5aa25a058b3477139e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>GlobalViewBuilder</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a3a28c1eff4d9ebfab15f049d8b665ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>DiscoveryMode</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>a44f490d79205f6b037374da5cd72ba9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classNeighborCache.html</anchorfile>
      <anchor>ac08e4d48d12d21383076ed55ae3959a3</anchor>
      <arglist>(std::ostream &amp;os, const NeighborCacheEntry &amp;entry)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>NeighborCache::NeighborCacheEntry</name>
    <filename>structNeighborCache_1_1NeighborCacheEntry.html</filename>
    <member kind="function">
      <type></type>
      <name>NeighborCacheEntry</name>
      <anchorfile>structNeighborCache_1_1NeighborCacheEntry.html</anchorfile>
      <anchor>a20c2968ac1d07f4980cfe3bb9c2fd17e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NeighborCacheEntry</name>
      <anchorfile>structNeighborCache_1_1NeighborCacheEntry.html</anchorfile>
      <anchor>a3fb84310a2136b63d099378db97b1b17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>insertTime</name>
      <anchorfile>structNeighborCache_1_1NeighborCacheEntry.html</anchorfile>
      <anchor>a3a8bd0dbbd552a073ec58328979b2c77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>rtt</name>
      <anchorfile>structNeighborCache_1_1NeighborCacheEntry.html</anchorfile>
      <anchor>acb6c8b8ffba6233a4051feb1e92a59cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NeighborCacheRttState</type>
      <name>rttState</name>
      <anchorfile>structNeighborCache_1_1NeighborCacheEntry.html</anchorfile>
      <anchor>a312b85552f2a7a77c94e3c4a778f313d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::deque&lt; simtime_t &gt;</type>
      <name>lastRtts</name>
      <anchorfile>structNeighborCache_1_1NeighborCacheEntry.html</anchorfile>
      <anchor>a945ee3bcdae7c9c2e9ff3c20fa1cc5dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NodeHandle</type>
      <name>nodeRef</name>
      <anchorfile>structNeighborCache_1_1NeighborCacheEntry.html</anchorfile>
      <anchor>ad8205927e323e7ece58a63e076579a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NodeHandle</type>
      <name>srcRoute</name>
      <anchorfile>structNeighborCache_1_1NeighborCacheEntry.html</anchorfile>
      <anchor>a6e649a5418ea3a1156347b131e322e4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AbstractNcsNodeInfo *</type>
      <name>coordsInfo</name>
      <anchorfile>structNeighborCache_1_1NeighborCacheEntry.html</anchorfile>
      <anchor>a1932313d933d3593b55509d9ace257a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>WaitingContexts</type>
      <name>waitingContexts</name>
      <anchorfile>structNeighborCache_1_1NeighborCacheEntry.html</anchorfile>
      <anchor>ae9565058fe615fa7359dfe4130f59dc0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>NeighborCache::WaitingContext</name>
    <filename>structNeighborCache_1_1WaitingContext.html</filename>
    <member kind="function">
      <type></type>
      <name>WaitingContext</name>
      <anchorfile>structNeighborCache_1_1WaitingContext.html</anchorfile>
      <anchor>a38bc3323a30c8c013b0840b0ff890705</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WaitingContext</name>
      <anchorfile>structNeighborCache_1_1WaitingContext.html</anchorfile>
      <anchor>a5c1fa8cdf94553dff9f7a88fa9927b53</anchor>
      <arglist>(ProxListener *listener, cPolymorphic *context, uint32_t id)</arglist>
    </member>
    <member kind="variable">
      <type>ProxListener *</type>
      <name>proxListener</name>
      <anchorfile>structNeighborCache_1_1WaitingContext.html</anchorfile>
      <anchor>aa1446eb7d2d36a70c81126146e807c28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cPolymorphic *</type>
      <name>proxContext</name>
      <anchorfile>structNeighborCache_1_1WaitingContext.html</anchorfile>
      <anchor>affdd75121632c2a4f3462c2a0fd087fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>id</name>
      <anchorfile>structNeighborCache_1_1WaitingContext.html</anchorfile>
      <anchor>af6b9cb553321b68f35d7d1c2ecdc49bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NeighborMapEntry</name>
    <filename>classNeighborMapEntry.html</filename>
    <member kind="variable">
      <type>Vector2D</type>
      <name>position</name>
      <anchorfile>classNeighborMapEntry.html</anchorfile>
      <anchor>ad549fefe16c35a232a2e1d1384081015</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector2D</type>
      <name>direction</name>
      <anchorfile>classNeighborMapEntry.html</anchorfile>
      <anchor>a9341847df246b2e97bf0b87975eb1958</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classNeighborMapEntry.html</anchorfile>
      <anchor>af36964b7f5fee57731a17ee6973a889e</anchor>
      <arglist>(std::ostream &amp;Stream, const NeighborMapEntry &amp;e)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NewSuccessorHintMessage</name>
    <filename>classNewSuccessorHintMessage.html</filename>
    <base>ChordMessage</base>
    <member kind="function">
      <type></type>
      <name>NewSuccessorHintMessage</name>
      <anchorfile>classNewSuccessorHintMessage.html</anchorfile>
      <anchor>a0b2f39d9344bc236f187a5760c4b5227</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NewSuccessorHintMessage</name>
      <anchorfile>classNewSuccessorHintMessage.html</anchorfile>
      <anchor>a664b43d4541061c2bdca2766c3c51365</anchor>
      <arglist>(const NewSuccessorHintMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NewSuccessorHintMessage</name>
      <anchorfile>classNewSuccessorHintMessage.html</anchorfile>
      <anchor>a097f2189f435b67506f2998c073bedd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NewSuccessorHintMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classNewSuccessorHintMessage.html</anchorfile>
      <anchor>a342c1ba78dfb135f3c61832102dcc982</anchor>
      <arglist>(const NewSuccessorHintMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NewSuccessorHintMessage *</type>
      <name>dup</name>
      <anchorfile>classNewSuccessorHintMessage.html</anchorfile>
      <anchor>a0e6f707603621c98e8fd29ae1e650c8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classNewSuccessorHintMessage.html</anchorfile>
      <anchor>a166dca97eee489cba3aac6c93020e2df</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classNewSuccessorHintMessage.html</anchorfile>
      <anchor>a64e9c2450eb2c07a26303bdba1436c89</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getSrcNode</name>
      <anchorfile>classNewSuccessorHintMessage.html</anchorfile>
      <anchor>af069a942a2515ca402a84f9a4fd285b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getSrcNode</name>
      <anchorfile>classNewSuccessorHintMessage.html</anchorfile>
      <anchor>a886eced5d64867709728e1e487e28783</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcNode</name>
      <anchorfile>classNewSuccessorHintMessage.html</anchorfile>
      <anchor>a56656bad02d44873ef71d2df085975f8</anchor>
      <arglist>(const NodeHandle &amp;srcNode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getPreNode</name>
      <anchorfile>classNewSuccessorHintMessage.html</anchorfile>
      <anchor>a478bf91299340623a653894ff5932395</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getPreNode</name>
      <anchorfile>classNewSuccessorHintMessage.html</anchorfile>
      <anchor>a81e47168534996a4df628b9c8a45f875</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPreNode</name>
      <anchorfile>classNewSuccessorHintMessage.html</anchorfile>
      <anchor>aadb2ac1e136761a5157f9d186a7dde93</anchor>
      <arglist>(const NodeHandle &amp;preNode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classNewSuccessorHintMessage.html</anchorfile>
      <anchor>a56f9d34f4a3d2d5e1cdf66fb28f0a01f</anchor>
      <arglist>(const NewSuccessorHintMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>srcNode_var</name>
      <anchorfile>classNewSuccessorHintMessage.html</anchorfile>
      <anchor>a8874e093019344af262e69c41292746e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>preNode_var</name>
      <anchorfile>classNewSuccessorHintMessage.html</anchorfile>
      <anchor>a911338deb0b90e000c44deb9440a614c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classNewSuccessorHintMessage.html</anchorfile>
      <anchor>a11a70548519b773f8f96b2cc464baf4d</anchor>
      <arglist>(const NewSuccessorHintMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NextHopCall</name>
    <filename>classNextHopCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>NextHopCall</name>
      <anchorfile>classNextHopCall.html</anchorfile>
      <anchor>a3729660d823135729b64b2f8be548484</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NextHopCall</name>
      <anchorfile>classNextHopCall.html</anchorfile>
      <anchor>af524e49c4e9ebf90fb1a20164b7dbd65</anchor>
      <arglist>(const NextHopCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NextHopCall</name>
      <anchorfile>classNextHopCall.html</anchorfile>
      <anchor>a281def4d8c566e5192419f47cfa60845</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NextHopCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classNextHopCall.html</anchorfile>
      <anchor>a8bfe2aaf5f6433579bc3ef10f7457fd8</anchor>
      <arglist>(const NextHopCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NextHopCall *</type>
      <name>dup</name>
      <anchorfile>classNextHopCall.html</anchorfile>
      <anchor>a9ba4dbf11d99bbff0399ae3e0b43ab6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classNextHopCall.html</anchorfile>
      <anchor>a4e0ca769529b7284b33623c8c650819e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classNextHopCall.html</anchorfile>
      <anchor>a3ba2c46b344a700a669c1fe7257818b3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classNextHopCall.html</anchorfile>
      <anchor>a3c80ce2c5297016a160ba5ead0ad549b</anchor>
      <arglist>(const NextHopCall &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classNextHopCall.html</anchorfile>
      <anchor>adbb7f5289ef824799763def383497140</anchor>
      <arglist>(const NextHopCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NextHopResponse</name>
    <filename>classNextHopResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>NextHopResponse</name>
      <anchorfile>classNextHopResponse.html</anchorfile>
      <anchor>a82867ebb76da0a4a52c13464faf68fd0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NextHopResponse</name>
      <anchorfile>classNextHopResponse.html</anchorfile>
      <anchor>a5fcc61e84dff8385458c1b7622ce9563</anchor>
      <arglist>(const NextHopResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NextHopResponse</name>
      <anchorfile>classNextHopResponse.html</anchorfile>
      <anchor>a043f7bfc3b0305236d1c7bde06c48df5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NextHopResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classNextHopResponse.html</anchorfile>
      <anchor>aadb95c00fe40cae3ab2e801e832d9670</anchor>
      <arglist>(const NextHopResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NextHopResponse *</type>
      <name>dup</name>
      <anchorfile>classNextHopResponse.html</anchorfile>
      <anchor>abbd5954e824d1191f3f74da14ac25c75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classNextHopResponse.html</anchorfile>
      <anchor>adf1df22b2d074d0d984106dd93ad68a1</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classNextHopResponse.html</anchorfile>
      <anchor>a7456d0585aed5562ed02c864cb136920</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classNextHopResponse.html</anchorfile>
      <anchor>aa51b88b862d7c7b5478e30849632118e</anchor>
      <arglist>(const NextHopResponse &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classNextHopResponse.html</anchorfile>
      <anchor>a94960b9b76d39e4fd55a59a576945ee5</anchor>
      <arglist>(const NextHopResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NiceCluster</name>
    <filename>classNiceCluster.html</filename>
    <member kind="function">
      <type></type>
      <name>NiceCluster</name>
      <anchorfile>classNiceCluster.html</anchorfile>
      <anchor>a8151c4b507491961003e3eac00646142</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classNiceCluster.html</anchorfile>
      <anchor>abf66af103a6767b2c7fbce63bc18ce19</anchor>
      <arglist>(const TransportAddress &amp;member)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classNiceCluster.html</anchorfile>
      <anchor>ad66e5cfc867561bef65fcfd43dbc7d13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classNiceCluster.html</anchorfile>
      <anchor>aedcd9705997d3f701d2a47a5ca7bdb65</anchor>
      <arglist>(const TransportAddress &amp;member)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSize</name>
      <anchorfile>classNiceCluster.html</anchorfile>
      <anchor>a297262ed253d2e90815e6ce5d22d8653</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TransportAddress &amp;</type>
      <name>get</name>
      <anchorfile>classNiceCluster.html</anchorfile>
      <anchor>afd9bfdb9d012120a93d45b85c486916c</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classNiceCluster.html</anchorfile>
      <anchor>a9d03dd60f2ac8c6e64e159b8fd39982c</anchor>
      <arglist>(const TransportAddress &amp;member)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLeader</name>
      <anchorfile>classNiceCluster.html</anchorfile>
      <anchor>a1e05f1adaf751ab276de29c3eb8fbe56</anchor>
      <arglist>(const TransportAddress &amp;leader)</arglist>
    </member>
    <member kind="function">
      <type>const TransportAddress &amp;</type>
      <name>getLeader</name>
      <anchorfile>classNiceCluster.html</anchorfile>
      <anchor>a048e67d14f1e98002ffc304b5fbc3f2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; TransportAddress &gt;::const_iterator</type>
      <name>begin</name>
      <anchorfile>classNiceCluster.html</anchorfile>
      <anchor>a3208511b96045dbd22ec18c9bd457737</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; TransportAddress &gt;::const_iterator</type>
      <name>end</name>
      <anchorfile>classNiceCluster.html</anchorfile>
      <anchor>aed386323e43a572eb51c3e2a97790a6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getLastLT</name>
      <anchorfile>classNiceCluster.html</anchorfile>
      <anchor>a55203103492dc11ec1f008c7d2e80273</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLastLT</name>
      <anchorfile>classNiceCluster.html</anchorfile>
      <anchor>a504cfb2783119f7291efe806522b0568</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLeaderConfirmed</name>
      <anchorfile>classNiceCluster.html</anchorfile>
      <anchor>a6aaac2ce8b950758447e5b11424612fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>confirmLeader</name>
      <anchorfile>classNiceCluster.html</anchorfile>
      <anchor>a33ebaaa6d22be0dbce87337ec52742b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLeaderHeartbeatsSent</name>
      <anchorfile>classNiceCluster.html</anchorfile>
      <anchor>a3bf9ecf56bce076522101d38abbf8d88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLeaderHeartbeatsSent</name>
      <anchorfile>classNiceCluster.html</anchorfile>
      <anchor>aa28a85284b7b37d135c22cef6df3e0b5</anchor>
      <arglist>(int heartbeats)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::set&lt; TransportAddress &gt;::const_iterator</type>
      <name>ConstClusterIterator</name>
      <anchorfile>classNiceCluster.html</anchorfile>
      <anchor>a2793131c581c5ddd309893adac04b32f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::set&lt; TransportAddress &gt;::iterator</type>
      <name>ClusterIterator</name>
      <anchorfile>classNiceCluster.html</anchorfile>
      <anchor>aa9dc892b6476a3331d54e38e5d52f004</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::set&lt; TransportAddress &gt;</type>
      <name>cluster</name>
      <anchorfile>classNiceCluster.html</anchorfile>
      <anchor>ac9dc0931d34aec708d7d8b9b6055dad6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TransportAddress</type>
      <name>leader</name>
      <anchorfile>classNiceCluster.html</anchorfile>
      <anchor>a5ef073606d7371b6004751577155465f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>lastLT</name>
      <anchorfile>classNiceCluster.html</anchorfile>
      <anchor>a64a930193bc28491ea9cdd113690b5b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>leaderConfirmed</name>
      <anchorfile>classNiceCluster.html</anchorfile>
      <anchor>a52692911a6009952b31bed3025efc7ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>leaderHeartbeatsSent</name>
      <anchorfile>classNiceCluster.html</anchorfile>
      <anchor>af4848b0a05ca56560661630fceafacc0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NiceClusterMerge</name>
    <filename>classNiceClusterMerge.html</filename>
    <base>NiceMemberMessage</base>
    <member kind="function">
      <type></type>
      <name>NiceClusterMerge</name>
      <anchorfile>classNiceClusterMerge.html</anchorfile>
      <anchor>acc43da81f8417dd80eeca5b3024330f5</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NiceClusterMerge</name>
      <anchorfile>classNiceClusterMerge.html</anchorfile>
      <anchor>af437199603c53b1b655db07c815c563a</anchor>
      <arglist>(const NiceClusterMerge &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NiceClusterMerge</name>
      <anchorfile>classNiceClusterMerge.html</anchorfile>
      <anchor>af8fef717e417595a2565cc4b7be9a140</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NiceClusterMerge &amp;</type>
      <name>operator=</name>
      <anchorfile>classNiceClusterMerge.html</anchorfile>
      <anchor>a061df1bb67111b8fc4187f5d49a4d451</anchor>
      <arglist>(const NiceClusterMerge &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NiceClusterMerge *</type>
      <name>dup</name>
      <anchorfile>classNiceClusterMerge.html</anchorfile>
      <anchor>a499d4ad8edf432a14410e4cc0bf5cfcd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classNiceClusterMerge.html</anchorfile>
      <anchor>ad91f4c6e6d7b9542c440aaabfdfc85ff</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classNiceClusterMerge.html</anchorfile>
      <anchor>a2ea6be3e691edf6d6b15a573de3f592c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransportAddress &amp;</type>
      <name>getNewClusterLeader</name>
      <anchorfile>classNiceClusterMerge.html</anchorfile>
      <anchor>a2e7dcf8ad12383d51f7286ebaa50eb6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TransportAddress &amp;</type>
      <name>getNewClusterLeader</name>
      <anchorfile>classNiceClusterMerge.html</anchorfile>
      <anchor>a48f6bb24c6bce7a6c9992973e88c3dd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNewClusterLeader</name>
      <anchorfile>classNiceClusterMerge.html</anchorfile>
      <anchor>adedc4a976f99fcd1a08b54172f6e4441</anchor>
      <arglist>(const TransportAddress &amp;newClusterLeader)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classNiceClusterMerge.html</anchorfile>
      <anchor>a38c2320809e250dc70144063d5c08576</anchor>
      <arglist>(const NiceClusterMerge &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress</type>
      <name>newClusterLeader_var</name>
      <anchorfile>classNiceClusterMerge.html</anchorfile>
      <anchor>ad0f1de3434a4ee6f04994b551ad793c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classNiceClusterMerge.html</anchorfile>
      <anchor>a3e1c5675e5b8955f39e28cf8ef8d9b05</anchor>
      <arglist>(const NiceClusterMerge &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NiceHeartbeat</name>
    <filename>classNiceHeartbeat.html</filename>
    <base>NiceMemberMessage</base>
    <member kind="function">
      <type></type>
      <name>NiceHeartbeat</name>
      <anchorfile>classNiceHeartbeat.html</anchorfile>
      <anchor>a899fa80eea5c1025e717b55753976521</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NiceHeartbeat</name>
      <anchorfile>classNiceHeartbeat.html</anchorfile>
      <anchor>a9a3b506b72c9d25ee2f23f550103e9e1</anchor>
      <arglist>(const NiceHeartbeat &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NiceHeartbeat</name>
      <anchorfile>classNiceHeartbeat.html</anchorfile>
      <anchor>a6e26c7052c2ad66b478b212a9814d806</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NiceHeartbeat &amp;</type>
      <name>operator=</name>
      <anchorfile>classNiceHeartbeat.html</anchorfile>
      <anchor>afa71d78c046f73946c8213a2e5d340ca</anchor>
      <arglist>(const NiceHeartbeat &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NiceHeartbeat *</type>
      <name>dup</name>
      <anchorfile>classNiceHeartbeat.html</anchorfile>
      <anchor>a4e40700a0c15a866ad68dd0fb26b957e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classNiceHeartbeat.html</anchorfile>
      <anchor>a343fcae30115076271c7a5420f428025</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classNiceHeartbeat.html</anchorfile>
      <anchor>a858a97dc922d41d60499cda9e69f4f00</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSeqNo</name>
      <anchorfile>classNiceHeartbeat.html</anchorfile>
      <anchor>a1ffed790cd05d6ece1a90fdf8667e4a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSeqNo</name>
      <anchorfile>classNiceHeartbeat.html</anchorfile>
      <anchor>a643a493c5206dbc97ac26366251fee57</anchor>
      <arglist>(unsigned int seqNo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSeqRspNo</name>
      <anchorfile>classNiceHeartbeat.html</anchorfile>
      <anchor>a1e1ce43834004fcf4719cf46a4413910</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSeqRspNo</name>
      <anchorfile>classNiceHeartbeat.html</anchorfile>
      <anchor>a3913805b1742726111c1818f4a5924ee</anchor>
      <arglist>(unsigned int seqRspNo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getHb_delay</name>
      <anchorfile>classNiceHeartbeat.html</anchorfile>
      <anchor>a7f1d42e1b29d5df17fabf7ac057a7fff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHb_delay</name>
      <anchorfile>classNiceHeartbeat.html</anchorfile>
      <anchor>ae087f2c105db3e2d5648cfe2298e105c</anchor>
      <arglist>(double hb_delay)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistancesArraySize</name>
      <anchorfile>classNiceHeartbeat.html</anchorfile>
      <anchor>aad6d2b8cff33bee09f5872e0d5424d6d</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getDistancesArraySize</name>
      <anchorfile>classNiceHeartbeat.html</anchorfile>
      <anchor>aa1d22f77b32dab88c820497748c995ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getDistances</name>
      <anchorfile>classNiceHeartbeat.html</anchorfile>
      <anchor>a46c68af3c70fcbe454bb1e8dc9f31cfd</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistances</name>
      <anchorfile>classNiceHeartbeat.html</anchorfile>
      <anchor>a05173657a49d444dbd5596cbbe4c079e</anchor>
      <arglist>(unsigned int k, double distances)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getOne_hop_distance</name>
      <anchorfile>classNiceHeartbeat.html</anchorfile>
      <anchor>acdab925b36e599c32982f1cba8faa7b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOne_hop_distance</name>
      <anchorfile>classNiceHeartbeat.html</anchorfile>
      <anchor>ad94dec2e5e4c00a4cd443ae6cdc6c515</anchor>
      <arglist>(double one_hop_distance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSublayermembers</name>
      <anchorfile>classNiceHeartbeat.html</anchorfile>
      <anchor>ac27f7dc591e6e8a11bd918d214ec45ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSublayermembers</name>
      <anchorfile>classNiceHeartbeat.html</anchorfile>
      <anchor>a3ad3c123ec3441b8f01059158057c366</anchor>
      <arglist>(unsigned int sublayermembers)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classNiceHeartbeat.html</anchorfile>
      <anchor>ab403975c1c6dca6576dcabcf505125f7</anchor>
      <arglist>(const NiceHeartbeat &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>seqNo_var</name>
      <anchorfile>classNiceHeartbeat.html</anchorfile>
      <anchor>a36c593e26dd0f48cf1b52599322513f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>seqRspNo_var</name>
      <anchorfile>classNiceHeartbeat.html</anchorfile>
      <anchor>a0367ef4f845b3017a962e7efb6ef00f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>hb_delay_var</name>
      <anchorfile>classNiceHeartbeat.html</anchorfile>
      <anchor>a44dacf9f3c67e3debeb0a31da931b007</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>distances_var</name>
      <anchorfile>classNiceHeartbeat.html</anchorfile>
      <anchor>a4621e5cb5d76dbbf32764bb67745ef14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>distances_arraysize</name>
      <anchorfile>classNiceHeartbeat.html</anchorfile>
      <anchor>ac5472ddb9979e6083da82feb3ce52b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>one_hop_distance_var</name>
      <anchorfile>classNiceHeartbeat.html</anchorfile>
      <anchor>a7518a4133b1b4600711ba01f6c583ff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>sublayermembers_var</name>
      <anchorfile>classNiceHeartbeat.html</anchorfile>
      <anchor>a1b83dc0e11356a52ee0b17f5c9063b7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classNiceHeartbeat.html</anchorfile>
      <anchor>a94f37b2a97c4a433bbb5c079eb233b03</anchor>
      <arglist>(const NiceHeartbeat &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NiceLeaderHeartbeat</name>
    <filename>classNiceLeaderHeartbeat.html</filename>
    <base>NiceHeartbeat</base>
    <member kind="function">
      <type></type>
      <name>NiceLeaderHeartbeat</name>
      <anchorfile>classNiceLeaderHeartbeat.html</anchorfile>
      <anchor>ab990e16a2e9b4c3def91d40a67cb5a44</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NiceLeaderHeartbeat</name>
      <anchorfile>classNiceLeaderHeartbeat.html</anchorfile>
      <anchor>abab10822d3620540c4e35d82be26684b</anchor>
      <arglist>(const NiceLeaderHeartbeat &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NiceLeaderHeartbeat</name>
      <anchorfile>classNiceLeaderHeartbeat.html</anchorfile>
      <anchor>ab55b76322f3904e095387e762dff5057</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NiceLeaderHeartbeat &amp;</type>
      <name>operator=</name>
      <anchorfile>classNiceLeaderHeartbeat.html</anchorfile>
      <anchor>ac9f82cf5070ad22e2c38f11734aa47b9</anchor>
      <arglist>(const NiceLeaderHeartbeat &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NiceLeaderHeartbeat *</type>
      <name>dup</name>
      <anchorfile>classNiceLeaderHeartbeat.html</anchorfile>
      <anchor>a755aef8896ea6ad905e156cd43fa46eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classNiceLeaderHeartbeat.html</anchorfile>
      <anchor>a1a10725f61e9cf1ef2823dfa258f2b0a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classNiceLeaderHeartbeat.html</anchorfile>
      <anchor>a057981d38d1598da53efd6bedcfcb7d2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransportAddress &amp;</type>
      <name>getSupercluster_leader</name>
      <anchorfile>classNiceLeaderHeartbeat.html</anchorfile>
      <anchor>ad4698d7c76d6d68b9c6999b9522f3fc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TransportAddress &amp;</type>
      <name>getSupercluster_leader</name>
      <anchorfile>classNiceLeaderHeartbeat.html</anchorfile>
      <anchor>ada0cbb4dcd4471c2dfe2d04cc90c43ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSupercluster_leader</name>
      <anchorfile>classNiceLeaderHeartbeat.html</anchorfile>
      <anchor>a42d0f56c57dd4d37b257e923e27838ce</anchor>
      <arglist>(const TransportAddress &amp;supercluster_leader)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSupercluster_membersArraySize</name>
      <anchorfile>classNiceLeaderHeartbeat.html</anchorfile>
      <anchor>a0709257e24c8dce4f9c23d3874c9ea1b</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSupercluster_membersArraySize</name>
      <anchorfile>classNiceLeaderHeartbeat.html</anchorfile>
      <anchor>acec737297fa8a4e7337c2e82ba52df74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransportAddress &amp;</type>
      <name>getSupercluster_members</name>
      <anchorfile>classNiceLeaderHeartbeat.html</anchorfile>
      <anchor>a7a3b0d42a894a34f1947cb4ad0e0c27e</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TransportAddress &amp;</type>
      <name>getSupercluster_members</name>
      <anchorfile>classNiceLeaderHeartbeat.html</anchorfile>
      <anchor>a69fdf517c2bebcf77142fce8e8a6cf62</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSupercluster_members</name>
      <anchorfile>classNiceLeaderHeartbeat.html</anchorfile>
      <anchor>ad698e549d637b1489ffbf0b5fb840d4a</anchor>
      <arglist>(unsigned int k, const TransportAddress &amp;supercluster_members)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getK</name>
      <anchorfile>classNiceLeaderHeartbeat.html</anchorfile>
      <anchor>ad5b37ec27536e5b22b1b5e2332ec2f7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setK</name>
      <anchorfile>classNiceLeaderHeartbeat.html</anchorfile>
      <anchor>a941b94806e831ab9f9cb5144f9a85eb0</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSc_tolerance</name>
      <anchorfile>classNiceLeaderHeartbeat.html</anchorfile>
      <anchor>aa1254a0d0f399207b364ee5eca03a680</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSc_tolerance</name>
      <anchorfile>classNiceLeaderHeartbeat.html</anchorfile>
      <anchor>a94b4e15347aca0e4af0ce23fb7021ec6</anchor>
      <arglist>(unsigned int sc_tolerance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classNiceLeaderHeartbeat.html</anchorfile>
      <anchor>aa68c7ca5891c4de4a26cdb43e1e33cd1</anchor>
      <arglist>(const NiceLeaderHeartbeat &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress</type>
      <name>supercluster_leader_var</name>
      <anchorfile>classNiceLeaderHeartbeat.html</anchorfile>
      <anchor>aab589e1efe36e1bb4ff3456b388caf56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress *</type>
      <name>supercluster_members_var</name>
      <anchorfile>classNiceLeaderHeartbeat.html</anchorfile>
      <anchor>a53d2d3cd51688210d53a8b26295197db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>supercluster_members_arraysize</name>
      <anchorfile>classNiceLeaderHeartbeat.html</anchorfile>
      <anchor>a7f47c681904a2b3b4994286aa76fd587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>k_var</name>
      <anchorfile>classNiceLeaderHeartbeat.html</anchorfile>
      <anchor>a9ad964771e59b12553c00f8b1810b610</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>sc_tolerance_var</name>
      <anchorfile>classNiceLeaderHeartbeat.html</anchorfile>
      <anchor>adde45487aa25ff9ffbfbee76fa48ac0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classNiceLeaderHeartbeat.html</anchorfile>
      <anchor>a950da4cfbc447a3e7113417ad6902d36</anchor>
      <arglist>(const NiceLeaderHeartbeat &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NiceMemberMessage</name>
    <filename>classNiceMemberMessage.html</filename>
    <base>NiceMessage</base>
    <member kind="function">
      <type></type>
      <name>NiceMemberMessage</name>
      <anchorfile>classNiceMemberMessage.html</anchorfile>
      <anchor>aebd9ae9231ac764df26f9ba7bcaf7fac</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NiceMemberMessage</name>
      <anchorfile>classNiceMemberMessage.html</anchorfile>
      <anchor>a4e9e27f14cbe970a908d73048311498b</anchor>
      <arglist>(const NiceMemberMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NiceMemberMessage</name>
      <anchorfile>classNiceMemberMessage.html</anchorfile>
      <anchor>a7a82b5dd4b7c652198216c21f6df42e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NiceMemberMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classNiceMemberMessage.html</anchorfile>
      <anchor>a1e8a25b9905317b985168ca0dd7f31e6</anchor>
      <arglist>(const NiceMemberMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NiceMemberMessage *</type>
      <name>dup</name>
      <anchorfile>classNiceMemberMessage.html</anchorfile>
      <anchor>a97aeebbb95a7ea13e3e3104179b125ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classNiceMemberMessage.html</anchorfile>
      <anchor>a6a6b13b3206fcfc24715e95e63a88277</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classNiceMemberMessage.html</anchorfile>
      <anchor>a2cfb47d8eb34f119e113671b6af42482</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMembersArraySize</name>
      <anchorfile>classNiceMemberMessage.html</anchorfile>
      <anchor>aa7ae9d6e4a78b2c5493da57bd40748e9</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getMembersArraySize</name>
      <anchorfile>classNiceMemberMessage.html</anchorfile>
      <anchor>a3a982e7732b06ff920e6d9235e99e43f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransportAddress &amp;</type>
      <name>getMembers</name>
      <anchorfile>classNiceMemberMessage.html</anchorfile>
      <anchor>ae8308ac72b5f07bf3920615387cc4376</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TransportAddress &amp;</type>
      <name>getMembers</name>
      <anchorfile>classNiceMemberMessage.html</anchorfile>
      <anchor>a2553da68d04faa3918a2adc6023d4fcc</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMembers</name>
      <anchorfile>classNiceMemberMessage.html</anchorfile>
      <anchor>a5aec4bd795065c56c7f95f5075d061b4</anchor>
      <arglist>(unsigned int k, const TransportAddress &amp;members)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classNiceMemberMessage.html</anchorfile>
      <anchor>afde0c54475440504d79405585d0a9c02</anchor>
      <arglist>(const NiceMemberMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress *</type>
      <name>members_var</name>
      <anchorfile>classNiceMemberMessage.html</anchorfile>
      <anchor>ad2f5089814daa0f5b036a545d0c3f735</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>members_arraysize</name>
      <anchorfile>classNiceMemberMessage.html</anchorfile>
      <anchor>a1cb58f2960fa0fe6071ffb99d7398b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classNiceMemberMessage.html</anchorfile>
      <anchor>a596abe07a26e846d4e2cc7480d02d3a3</anchor>
      <arglist>(const NiceMemberMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NiceMessage</name>
    <filename>classNiceMessage.html</filename>
    <base>BaseOverlayMessage</base>
    <member kind="function">
      <type></type>
      <name>NiceMessage</name>
      <anchorfile>classNiceMessage.html</anchorfile>
      <anchor>aeb8a9e1a718ca41ef3f45ff97146607e</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NiceMessage</name>
      <anchorfile>classNiceMessage.html</anchorfile>
      <anchor>a86276584edd33177b1fde344ea7ffe7b</anchor>
      <arglist>(const NiceMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NiceMessage</name>
      <anchorfile>classNiceMessage.html</anchorfile>
      <anchor>a72db6fd96d5bcedb3afdceaf22139dde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NiceMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classNiceMessage.html</anchorfile>
      <anchor>ad95fe21b2a83fa8679607241f1ef2e08</anchor>
      <arglist>(const NiceMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NiceMessage *</type>
      <name>dup</name>
      <anchorfile>classNiceMessage.html</anchorfile>
      <anchor>a68d57e786b6a43f8f18f6c899eebd50e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classNiceMessage.html</anchorfile>
      <anchor>a8263701ad905d98e9cf25d1a95b3f41e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classNiceMessage.html</anchorfile>
      <anchor>aee78e00e3c549ab300f96640d1049ce4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCommand</name>
      <anchorfile>classNiceMessage.html</anchorfile>
      <anchor>a3569492f722da94c494a21014e51240f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommand</name>
      <anchorfile>classNiceMessage.html</anchorfile>
      <anchor>ae0e08dc071897363e475e720c614af8d</anchor>
      <arglist>(int command)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransportAddress &amp;</type>
      <name>getSrcNode</name>
      <anchorfile>classNiceMessage.html</anchorfile>
      <anchor>aecd3c064af0f390ca24b0364f8490e36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TransportAddress &amp;</type>
      <name>getSrcNode</name>
      <anchorfile>classNiceMessage.html</anchorfile>
      <anchor>af4ef970a6a88f5341650a63a0e02f0e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcNode</name>
      <anchorfile>classNiceMessage.html</anchorfile>
      <anchor>a6dc4817975b9b4f821387f46e7a128cc</anchor>
      <arglist>(const TransportAddress &amp;srcNode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getLayer</name>
      <anchorfile>classNiceMessage.html</anchorfile>
      <anchor>abad7afc5c784b3d48193da8b7e9c11eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLayer</name>
      <anchorfile>classNiceMessage.html</anchorfile>
      <anchor>a6623c95d09425cd401f15a26899ab038</anchor>
      <arglist>(short layer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classNiceMessage.html</anchorfile>
      <anchor>ad756866396d63c02c8837eaa3849b6c7</anchor>
      <arglist>(const NiceMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>command_var</name>
      <anchorfile>classNiceMessage.html</anchorfile>
      <anchor>a935a334b89d8ff57f1d015dff1b60945</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress</type>
      <name>srcNode_var</name>
      <anchorfile>classNiceMessage.html</anchorfile>
      <anchor>a001ad6c9d9124bd68da5a88f375e0a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>short</type>
      <name>layer_var</name>
      <anchorfile>classNiceMessage.html</anchorfile>
      <anchor>ab9f25f75e0841988b42b74fd57591ffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classNiceMessage.html</anchorfile>
      <anchor>a8ab110dfea316258ce6e4b75937b8692</anchor>
      <arglist>(const NiceMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NiceMulticastMessage</name>
    <filename>classNiceMulticastMessage.html</filename>
    <base>NiceMessage</base>
    <member kind="function">
      <type></type>
      <name>NiceMulticastMessage</name>
      <anchorfile>classNiceMulticastMessage.html</anchorfile>
      <anchor>a41db9ac1d6905fcf7c0b5de5c3016ac7</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NiceMulticastMessage</name>
      <anchorfile>classNiceMulticastMessage.html</anchorfile>
      <anchor>a63664a840899c6439f85ff13a90ac2d9</anchor>
      <arglist>(const NiceMulticastMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NiceMulticastMessage</name>
      <anchorfile>classNiceMulticastMessage.html</anchorfile>
      <anchor>a849faa87f93d92408482ca1d5528deb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NiceMulticastMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classNiceMulticastMessage.html</anchorfile>
      <anchor>af84864008521a25c161999d8ac43c8ef</anchor>
      <arglist>(const NiceMulticastMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NiceMulticastMessage *</type>
      <name>dup</name>
      <anchorfile>classNiceMulticastMessage.html</anchorfile>
      <anchor>aaba4eefdbfdf69697d76240b5c918470</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classNiceMulticastMessage.html</anchorfile>
      <anchor>aac6e7e2d1b8f714360d47c701e4c06da</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classNiceMulticastMessage.html</anchorfile>
      <anchor>aba380b106e09011c98952c653dd9c3b5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransportAddress &amp;</type>
      <name>getLastHop</name>
      <anchorfile>classNiceMulticastMessage.html</anchorfile>
      <anchor>a24f21e29d178a8691398b184c87efcb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TransportAddress &amp;</type>
      <name>getLastHop</name>
      <anchorfile>classNiceMulticastMessage.html</anchorfile>
      <anchor>ac9e5414062e4e68f7a1c50e7ac0a9e36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLastHop</name>
      <anchorfile>classNiceMulticastMessage.html</anchorfile>
      <anchor>af18a67f43fa20742d1e1b5e3667ae704</anchor>
      <arglist>(const TransportAddress &amp;lastHop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSendTime</name>
      <anchorfile>classNiceMulticastMessage.html</anchorfile>
      <anchor>a1b37067882047973f11f9aa8af05ff07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSendTime</name>
      <anchorfile>classNiceMulticastMessage.html</anchorfile>
      <anchor>a3ba3bfed17b7c76784d13096cf7b6d31</anchor>
      <arglist>(double sendTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSeqNo</name>
      <anchorfile>classNiceMulticastMessage.html</anchorfile>
      <anchor>a1f2f5be3b9706afff1857f853365d9f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSeqNo</name>
      <anchorfile>classNiceMulticastMessage.html</anchorfile>
      <anchor>a5234992ac337a101856158273fc93ec2</anchor>
      <arglist>(unsigned int seqNo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getHopCount</name>
      <anchorfile>classNiceMulticastMessage.html</anchorfile>
      <anchor>a117259826a5d1d444b8fa6c94e37c686</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHopCount</name>
      <anchorfile>classNiceMulticastMessage.html</anchorfile>
      <anchor>a4444398854777b6d5ab5f24674c42054</anchor>
      <arglist>(unsigned int hopCount)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classNiceMulticastMessage.html</anchorfile>
      <anchor>a60c01803fbc3b3262817f4a7d73926ff</anchor>
      <arglist>(const NiceMulticastMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress</type>
      <name>lastHop_var</name>
      <anchorfile>classNiceMulticastMessage.html</anchorfile>
      <anchor>a261c14d7e4cc41012a7c6f78b11a21e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>sendTime_var</name>
      <anchorfile>classNiceMulticastMessage.html</anchorfile>
      <anchor>a1711044659076caed7baf1f2c1015447</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>seqNo_var</name>
      <anchorfile>classNiceMulticastMessage.html</anchorfile>
      <anchor>ada5116fa1e4d8179ab8a42452116e53c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>hopCount_var</name>
      <anchorfile>classNiceMulticastMessage.html</anchorfile>
      <anchor>a39ae6fce0b2cfaf94a2d5018188588a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classNiceMulticastMessage.html</anchorfile>
      <anchor>a2d0e55e0d532750498f0d72ec5d9b18d</anchor>
      <arglist>(const NiceMulticastMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoChurn</name>
    <filename>classNoChurn.html</filename>
    <base>ChurnGenerator</base>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classNoChurn.html</anchorfile>
      <anchor>a9c6ab55d50ba1e24f786ebacdc6ae4fb</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeChurn</name>
      <anchorfile>classNoChurn.html</anchorfile>
      <anchor>a8b432c8986caf1cfb1c90e8197323e13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NoChurn</name>
      <anchorfile>classNoChurn.html</anchorfile>
      <anchor>af0546a9e3195f4826a6ec81ed7a14871</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateDisplayString</name>
      <anchorfile>classNoChurn.html</anchorfile>
      <anchor>a97c83c75b77a3f6d41e428e28ed84584</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>initialMean</name>
      <anchorfile>classNoChurn.html</anchorfile>
      <anchor>a9ce0c9d3402f9d950bf4a41d69ef2b35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>initialDeviation</name>
      <anchorfile>classNoChurn.html</anchorfile>
      <anchor>ad3f76fd843e857fddecddc1865ef97ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>initAddMoreTerminals</name>
      <anchorfile>classNoChurn.html</anchorfile>
      <anchor>a86f9cef1b11a0249137915b686ef1141</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>mobilityTimer</name>
      <anchorfile>classNoChurn.html</anchorfile>
      <anchor>ac21099b5207beae79cf04ad87bf9a882</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NodeHandle</name>
    <filename>classNodeHandle.html</filename>
    <base>TransportAddress</base>
    <member kind="function">
      <type></type>
      <name>NodeHandle</name>
      <anchorfile>classNodeHandle.html</anchorfile>
      <anchor>adbe4ab5a0ee98829e2c0d20689629462</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeHandle</name>
      <anchorfile>classNodeHandle.html</anchorfile>
      <anchor>a8c43258b6639106900f318799a6eb0c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeHandle</name>
      <anchorfile>classNodeHandle.html</anchorfile>
      <anchor>a2ca2d46c222f4436447d79235d9271e9</anchor>
      <arglist>(const NodeHandle &amp;handle)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeHandle</name>
      <anchorfile>classNodeHandle.html</anchorfile>
      <anchor>aab01419f91bba9fc561af49b74a4b50a</anchor>
      <arglist>(const OverlayKey &amp;key, const IPvXAddress &amp;ip, int port)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeHandle</name>
      <anchorfile>classNodeHandle.html</anchorfile>
      <anchor>a4ec6093bf896e0eb2d1de91e2e7502f4</anchor>
      <arglist>(const TransportAddress &amp;ta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeHandle</name>
      <anchorfile>classNodeHandle.html</anchorfile>
      <anchor>a77aac09d97b526ab53cd3b6b862b56c6</anchor>
      <arglist>(const OverlayKey &amp;key, const TransportAddress &amp;ta)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classNodeHandle.html</anchorfile>
      <anchor>a585c11f6775ca1f581e7c235ad5821d7</anchor>
      <arglist>(const NodeHandle &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classNodeHandle.html</anchorfile>
      <anchor>abca84e049570b6c1a8082624920bf532</anchor>
      <arglist>(const NodeHandle &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classNodeHandle.html</anchorfile>
      <anchor>ade7d1ec54e57afedb17fc037949a4de9</anchor>
      <arglist>(const NodeHandle &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classNodeHandle.html</anchorfile>
      <anchor>a571dbd8d982d35f439085f7d431642bc</anchor>
      <arglist>(const NodeHandle &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classNodeHandle.html</anchorfile>
      <anchor>a3738df0dafe475162d87e89dfda9d763</anchor>
      <arglist>(const NodeHandle &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classNodeHandle.html</anchorfile>
      <anchor>a08cb88df3d2071afda8b44ed31eb0cd6</anchor>
      <arglist>(const NodeHandle &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>NodeHandle &amp;</type>
      <name>operator=</name>
      <anchorfile>classNodeHandle.html</anchorfile>
      <anchor>aefb59df5650da254eff0e9af6974e59f</anchor>
      <arglist>(const NodeHandle &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKey</name>
      <anchorfile>classNodeHandle.html</anchorfile>
      <anchor>af3992f1fda9ea42dc10bf4739e47700a</anchor>
      <arglist>(const OverlayKey &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const OverlayKey &amp;</type>
      <name>getKey</name>
      <anchorfile>classNodeHandle.html</anchorfile>
      <anchor>aef531103cdf07c8353267f4d30a80112</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnspecified</name>
      <anchorfile>classNodeHandle.html</anchorfile>
      <anchor>ab5136375a4548ced7c2014a73c8743c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchorfile>classNodeHandle.html</anchorfile>
      <anchor>a7eb12ad8b8e4f5dd3c9f667ec946718c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchorfile>classNodeHandle.html</anchorfile>
      <anchor>aaab877e70371f480be0cbddfd7ade6fc</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransportAddress *</type>
      <name>dup</name>
      <anchorfile>classNodeHandle.html</anchorfile>
      <anchor>a6a7935d1c5ed48edca3b7c649f42ee68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const NodeHandle</type>
      <name>UNSPECIFIED_NODE</name>
      <anchorfile>classNodeHandle.html</anchorfile>
      <anchor>a79bf2c5e29c969cbd0b2581cb188d8a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>key</name>
      <anchorfile>classNodeHandle.html</anchorfile>
      <anchor>a3af855b5cf97fe5aea812f66eb8b7dfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>assertUnspecified</name>
      <anchorfile>classNodeHandle.html</anchorfile>
      <anchor>aacfe396daaf72b5042385a7c87a5d79f</anchor>
      <arglist>(const NodeHandle &amp;handle) const </arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classNodeHandle.html</anchorfile>
      <anchor>a78dee38c3e150a0c48ead0a04de50801</anchor>
      <arglist>(std::ostream &amp;os, const NodeHandle &amp;n)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>NodeIdentity</name>
    <filename>structNodeIdentity.html</filename>
    <member kind="variable">
      <type>I3Identifier</type>
      <name>id</name>
      <anchorfile>structNodeIdentity.html</anchorfile>
      <anchor>a043c1d9ed095c2b91277e17c39c69379</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>I3IPAddress</type>
      <name>address</name>
      <anchorfile>structNodeIdentity.html</anchorfile>
      <anchor>acdeb5b931b29ae0fd04d494b14da955a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NodeInfo</name>
    <filename>classNodeInfo.html</filename>
    <member kind="variable">
      <type>IPvXAddress</type>
      <name>IPAddress</name>
      <anchorfile>classNodeInfo.html</anchorfile>
      <anchor>afce95dc66ed824aa9907258cdc61bf7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classNodeInfo.html</anchorfile>
      <anchor>a656c57d0798151f122b886b9cee0878f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IInterfaceTable *</type>
      <name>interfaceTable</name>
      <anchorfile>classNodeInfo.html</anchorfile>
      <anchor>a4dc393bd94676a4c4bbdb9c29e9ab444</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IRoutingTable *</type>
      <name>routingTable</name>
      <anchorfile>classNodeInfo.html</anchorfile>
      <anchor>a8ccd50235c18b483e14ad7e3b2358cf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RoutingTable6 *</type>
      <name>routingTable6</name>
      <anchorfile>classNodeInfo.html</anchorfile>
      <anchor>ae52fa675b9f7429ad9092c408359b818</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>createdAt</name>
      <anchorfile>classNodeInfo.html</anchorfile>
      <anchor>a5ed47a1d8a21b910962dd8c67e2aacd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classNodeInfo.html</anchorfile>
      <anchor>af547d2641eef703c9c2b422bb5ac7cd8</anchor>
      <arglist>(std::ostream &amp;os, NodeInfo &amp;n)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>nodeInfoAS</name>
    <filename>structnodeInfoAS.html</filename>
    <member kind="function">
      <type></type>
      <name>nodeInfoAS</name>
      <anchorfile>structnodeInfoAS.html</anchorfile>
      <anchor>a2ebf16f1c07b13ae5781e9fc7cc39357</anchor>
      <arglist>(cTopology::Node *node, IPAddress a, IPAddress m)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>id</name>
      <anchorfile>structnodeInfoAS.html</anchorfile>
      <anchor>af78a42ee28293a0b1a98e6d9e422a724</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>asType</name>
      <anchorfile>structnodeInfoAS.html</anchorfile>
      <anchor>adbad2d37ca49bad88849aa482871d377</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cTopology::Node *</type>
      <name>node</name>
      <anchorfile>structnodeInfoAS.html</anchorfile>
      <anchor>a67fd5857a7106ef4ea540d554c1b777c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>structnodeInfoAS.html</anchorfile>
      <anchor>a223eeeeee9ac9821292f88ad7b61122f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NODE_MAP</type>
      <name>nodeMap</name>
      <anchorfile>structnodeInfoAS.html</anchorfile>
      <anchor>aa50927e73d778fc3b8e201dc87bd1e2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NODE_INFO_RL_VEC</type>
      <name>coreNode</name>
      <anchorfile>structnodeInfoAS.html</anchorfile>
      <anchor>a99d4242969fb579b7c28083a809b1571</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>addr</name>
      <anchorfile>structnodeInfoAS.html</anchorfile>
      <anchor>a9bb59c60111cfda43b5fe63d1945a099</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>netmask</name>
      <anchorfile>structnodeInfoAS.html</anchorfile>
      <anchor>ad83bcf8d815214c7d327dd18a041d112</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>subnetmask</name>
      <anchorfile>structnodeInfoAS.html</anchorfile>
      <anchor>a04a0f2d7dabb7a6eca0754935851c979</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EDGE_ROUTER_VEC</type>
      <name>edgeRouter</name>
      <anchorfile>structnodeInfoAS.html</anchorfile>
      <anchor>a98b48f924b844cf584f829bbba893921</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>nodeInfoRL</name>
    <filename>structnodeInfoRL.html</filename>
    <member kind="function">
      <type></type>
      <name>nodeInfoRL</name>
      <anchorfile>structnodeInfoRL.html</anchorfile>
      <anchor>a140b24d316c4265ba22c7aa6b85220dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>nodeInfoRL</name>
      <anchorfile>structnodeInfoRL.html</anchorfile>
      <anchor>a126644beb87891492d846d3067f6b192</anchor>
      <arglist>(cTopology::Node *node)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isIPNode</name>
      <anchorfile>structnodeInfoRL.html</anchorfile>
      <anchor>a3a4516699b4d25796a6eac741877925b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IInterfaceTable *</type>
      <name>ift</name>
      <anchorfile>structnodeInfoRL.html</anchorfile>
      <anchor>a2093424e604a83bd35e0851919cbb309</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InterfaceEntry *</type>
      <name>defaultRouteIE</name>
      <anchorfile>structnodeInfoRL.html</anchorfile>
      <anchor>a09c11d1e424b19a7328d48b494ef1598</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>asId</name>
      <anchorfile>structnodeInfoRL.html</anchorfile>
      <anchor>ad0a98b416877f6c8bd34cd9815f39cbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>asType</name>
      <anchorfile>structnodeInfoRL.html</anchorfile>
      <anchor>a33f9cd5194bced8f5b45b3471aa7f993</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>routerType</name>
      <anchorfile>structnodeInfoRL.html</anchorfile>
      <anchor>a3522354bb22b8f5afcf90bdadf09812c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>moduleId</name>
      <anchorfile>structnodeInfoRL.html</anchorfile>
      <anchor>af2821e673f6189d6ecd4d283a80aff6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IRoutingTable *</type>
      <name>rt</name>
      <anchorfile>structnodeInfoRL.html</anchorfile>
      <anchor>a84254528f9e2a6c16507147cc4083b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPAddress</type>
      <name>addr</name>
      <anchorfile>structnodeInfoRL.html</anchorfile>
      <anchor>ad630ef964da3d252e86c7d25ffeb097e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>usesDefaultRoute</name>
      <anchorfile>structnodeInfoRL.html</anchorfile>
      <anchor>aa5e1383d2afeee6674a98e28d00ce2ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>structnodeInfoRL.html</anchorfile>
      <anchor>aab015d1c3ca29bcbc53d6b47fa877747</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cTopology::Node *</type>
      <name>node</name>
      <anchorfile>structnodeInfoRL.html</anchorfile>
      <anchor>a699add7ac7de1847c7e0830908fe2b5d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NodeRecord</name>
    <filename>classNodeRecord.html</filename>
    <base>BaseLocation</base>
    <member kind="function">
      <type></type>
      <name>NodeRecord</name>
      <anchorfile>classNodeRecord.html</anchorfile>
      <anchor>aa60b112db53e27c1714cef5701de9de0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NodeRecord</name>
      <anchorfile>classNodeRecord.html</anchorfile>
      <anchor>a299d2711dec3cfa4573282e7854d9e39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeRecord</name>
      <anchorfile>classNodeRecord.html</anchorfile>
      <anchor>ac700353ae47f60972dcac5914a038ed2</anchor>
      <arglist>(const NodeRecord &amp;nodeRecord)</arglist>
    </member>
    <member kind="function">
      <type>NodeRecord &amp;</type>
      <name>operator=</name>
      <anchorfile>classNodeRecord.html</anchorfile>
      <anchor>af17652786bb15a7ad92bff8b4337834c</anchor>
      <arglist>(const NodeRecord &amp;nodeRecord)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classNodeRecord.html</anchorfile>
      <anchor>aa4721204ee98dc73b0b2d4a459a12bcb</anchor>
      <arglist>(const BaseLocation &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>debugOutput</name>
      <anchorfile>classNodeRecord.html</anchorfile>
      <anchor>a780570a8a846c031a35e0849b6232c53</anchor>
      <arglist>(int dim)</arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>getDim</name>
      <anchorfile>classNodeRecord.html</anchorfile>
      <anchor>a4cee93befcc994efe7748c2b21e095d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setDim</name>
      <anchorfile>classNodeRecord.html</anchorfile>
      <anchor>aa582a56fccdb70a988364cb3d3d8c102</anchor>
      <arglist>(uint8_t dimension)</arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>coords</name>
      <anchorfile>classNodeRecord.html</anchorfile>
      <anchor>a8a2c1bfee8b478558579c67899dae6fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static uint8_t</type>
      <name>dim</name>
      <anchorfile>classNodeRecord.html</anchorfile>
      <anchor>a55e9b323760b8077f37f1513ad7cb702</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NodeType</name>
    <filename>classNodeType.html</filename>
    <member kind="function">
      <type></type>
      <name>NodeType</name>
      <anchorfile>classNodeType.html</anchorfile>
      <anchor>af51d0a33ce73ddf93a946be118dcd2f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>typeID</name>
      <anchorfile>classNodeType.html</anchorfile>
      <anchor>ad6f207541b281c15db64c6d87ee43143</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>terminalType</name>
      <anchorfile>classNodeType.html</anchorfile>
      <anchor>a60aa8ee80380320728c200d5ea9edcea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>channelTypesRx</name>
      <anchorfile>classNodeType.html</anchorfile>
      <anchor>a89e2a5e6ac3b647f5dcb649f975b193a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>channelTypesTx</name>
      <anchorfile>classNodeType.html</anchorfile>
      <anchor>a4c4e8497d48ac644ed1dd3cb024a74f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cObject **</type>
      <name>context</name>
      <anchorfile>classNodeType.html</anchorfile>
      <anchor>a9490adb73cbd8c8283eba9afc7c61dc7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NotifyCall</name>
    <filename>classNotifyCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>NotifyCall</name>
      <anchorfile>classNotifyCall.html</anchorfile>
      <anchor>a69f2bd0f2021fe8e7e1a79042aa7700f</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NotifyCall</name>
      <anchorfile>classNotifyCall.html</anchorfile>
      <anchor>a1a4a0640fb42e55336bf41b4584c62e9</anchor>
      <arglist>(const NotifyCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NotifyCall</name>
      <anchorfile>classNotifyCall.html</anchorfile>
      <anchor>ac1d921098febf5dfa0480f10f4de503f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NotifyCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classNotifyCall.html</anchorfile>
      <anchor>a7ff1a0a08d448d35c349a1d86a2ceb27</anchor>
      <arglist>(const NotifyCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NotifyCall *</type>
      <name>dup</name>
      <anchorfile>classNotifyCall.html</anchorfile>
      <anchor>ae1fc133ad71f9424ce962eb86f8c513a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classNotifyCall.html</anchorfile>
      <anchor>a2848de60a8f651455c3a2ac4c996a611</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classNotifyCall.html</anchorfile>
      <anchor>ad7003c6e30ab8081e6666f6efabc2fc4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransportAddress &amp;</type>
      <name>getFailed</name>
      <anchorfile>classNotifyCall.html</anchorfile>
      <anchor>a4574dc784008e2e3cfdac2c3db404043</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TransportAddress &amp;</type>
      <name>getFailed</name>
      <anchorfile>classNotifyCall.html</anchorfile>
      <anchor>a34c26a2e8c74608075e9bad2833db93d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFailed</name>
      <anchorfile>classNotifyCall.html</anchorfile>
      <anchor>a85923df6bbdacc1b34e31d3ff6b02eb2</anchor>
      <arglist>(const TransportAddress &amp;failed)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classNotifyCall.html</anchorfile>
      <anchor>a3f913377cb77717b21205c686c809f01</anchor>
      <arglist>(const NotifyCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress</type>
      <name>failed_var</name>
      <anchorfile>classNotifyCall.html</anchorfile>
      <anchor>a5b81d613fa0e558766a126f002c90890</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classNotifyCall.html</anchorfile>
      <anchor>a619a90d7c777811846932bbe719979e4</anchor>
      <arglist>(const NotifyCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NotifyResponse</name>
    <filename>classNotifyResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>NotifyResponse</name>
      <anchorfile>classNotifyResponse.html</anchorfile>
      <anchor>a9245a3bb4a497b68ce94d4437a6d93e9</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NotifyResponse</name>
      <anchorfile>classNotifyResponse.html</anchorfile>
      <anchor>af522ada245c7b8e5d33b9b5224fcb875</anchor>
      <arglist>(const NotifyResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NotifyResponse</name>
      <anchorfile>classNotifyResponse.html</anchorfile>
      <anchor>aabc78f2717a0f5e97f31cbb4939792e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NotifyResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classNotifyResponse.html</anchorfile>
      <anchor>ac62930f2ec1fcf1071ca49d4d160ac71</anchor>
      <arglist>(const NotifyResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NotifyResponse *</type>
      <name>dup</name>
      <anchorfile>classNotifyResponse.html</anchorfile>
      <anchor>a49e01c9fb9e8f5aeaad782bac327b8fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classNotifyResponse.html</anchorfile>
      <anchor>a0ac757511a25d36510ddd11a833dfbcf</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classNotifyResponse.html</anchorfile>
      <anchor>a7ba54e3a7cb4d924c570e1704f054fff</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSucNum</name>
      <anchorfile>classNotifyResponse.html</anchorfile>
      <anchor>a42c0ebf034f60a13f8fd9b6e9d1806ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSucNum</name>
      <anchorfile>classNotifyResponse.html</anchorfile>
      <anchor>ad618bbc5558d82b58131379d70d1ae45</anchor>
      <arglist>(int sucNum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSucNodeArraySize</name>
      <anchorfile>classNotifyResponse.html</anchorfile>
      <anchor>a5c9ecf52273323807515bc29deee40ad</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSucNodeArraySize</name>
      <anchorfile>classNotifyResponse.html</anchorfile>
      <anchor>ae44c49088c78e46c2c377de787915256</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getSucNode</name>
      <anchorfile>classNotifyResponse.html</anchorfile>
      <anchor>a77e2046e1b3d72399ad30b0a4a9c84f6</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getSucNode</name>
      <anchorfile>classNotifyResponse.html</anchorfile>
      <anchor>aecde7e998544cf653b5b77ea71a3ee87</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSucNode</name>
      <anchorfile>classNotifyResponse.html</anchorfile>
      <anchor>a5d543292ad6bac80069aabe2188a24d1</anchor>
      <arglist>(unsigned int k, const NodeHandle &amp;sucNode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getPreNode</name>
      <anchorfile>classNotifyResponse.html</anchorfile>
      <anchor>a3812194362c6804d7bf8dc1b8ef6bf8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getPreNode</name>
      <anchorfile>classNotifyResponse.html</anchorfile>
      <anchor>abf3cfb83bfbb76c679d68ed96b441ecc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPreNode</name>
      <anchorfile>classNotifyResponse.html</anchorfile>
      <anchor>a30834b17297b94e3cada8b249b361ed6</anchor>
      <arglist>(const NodeHandle &amp;preNode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getPreNodeSet</name>
      <anchorfile>classNotifyResponse.html</anchorfile>
      <anchor>acb50db4aa532ea53800fd91bef2d5c99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPreNodeSet</name>
      <anchorfile>classNotifyResponse.html</anchorfile>
      <anchor>a89a0e5b90b6692870f7d12e81d81dd78</anchor>
      <arglist>(bool preNodeSet)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classNotifyResponse.html</anchorfile>
      <anchor>ae1f84943bbac65f2856f8a2068a0f430</anchor>
      <arglist>(const NotifyResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sucNum_var</name>
      <anchorfile>classNotifyResponse.html</anchorfile>
      <anchor>a813a931cc7d8160e27e58dcb43de3602</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle *</type>
      <name>sucNode_var</name>
      <anchorfile>classNotifyResponse.html</anchorfile>
      <anchor>a7a6f805954afb51edd728a4cbb60ce69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>sucNode_arraysize</name>
      <anchorfile>classNotifyResponse.html</anchorfile>
      <anchor>a3e3ec24e9cab30be741b30fc60ccb221</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>preNode_var</name>
      <anchorfile>classNotifyResponse.html</anchorfile>
      <anchor>a8e1317f530bd9f34950132a8f626a3ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>preNodeSet_var</name>
      <anchorfile>classNotifyResponse.html</anchorfile>
      <anchor>a09529936f0a127e402a20d0897a9bc8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classNotifyResponse.html</anchorfile>
      <anchor>abfec442970f5798dbbf3d6a5a05c651c</anchor>
      <arglist>(const NotifyResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Nps</name>
    <filename>classNps.html</filename>
    <base>RpcListener</base>
    <base>AbstractNcs</base>
    <member kind="function">
      <type></type>
      <name>Nps</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>a95dfb2a94f3554b7ed99d9f9bb3a0195</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>a3e6d73fa177dc950505a934a4e0c92c6</anchor>
      <arglist>(NeighborCache *neighborCache)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isReady</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>a6bbb788d1f9596d5992f7c1973848d9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>a2291e96c9b071a2110bcd2a36dec631e</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>handleRpcCall</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>af65b7ba515df95cfb26de4ab7bdaf07f</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>Prox</type>
      <name>getCoordinateBasedProx</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>a75d836ef63e2622f55fa5c7524113068</anchor>
      <arglist>(const AbstractNcsNodeInfo &amp;info) const </arglist>
    </member>
    <member kind="function">
      <type>AbstractNcsNodeInfo *</type>
      <name>getUnvalidNcsInfo</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>aaeec7877761f56e11a0523e8823c09b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AbstractNcsNodeInfo *</type>
      <name>createNcsInfo</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>a360b183482f2b832f20176879681d0d8</anchor>
      <arglist>(const Coords &amp;coords) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const AbstractNcsNodeInfo &amp;</type>
      <name>getOwnNcsInfo</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>acf6a58594d71c593f29f2b937d0340ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Coords &amp;</type>
      <name>getOwnCoordinates</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>af931cb6fe8e2a2b8101863b8ca924e5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getOwnCoordinates</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>a537a106ab588ceeb1188e8e467df9e25</anchor>
      <arglist>(uint8_t i) const </arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>getOwnLayer</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>a2adba20baee99d4a34eaae6231e2a9c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint8_t</type>
      <name>computeOwnLayer</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>abda1fdcdd3faf85a058e5df18bafec7b</anchor>
      <arglist>(const std::vector&lt; LandmarkDataEntry &gt; &amp;landmarks)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Coords</type>
      <name>computeOwnCoordinates</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>af268a47db02b1df3921e3d29b2e833fb</anchor>
      <arglist>(const std::vector&lt; LandmarkDataEntry &gt; &amp;landmarks)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setOwnLayer</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>af18fa643b698f2fabe02d7c0be7ecf4b</anchor>
      <arglist>(int8_t layer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setOwnCoordinates</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>a2d34ef397c8e138fe1feda31eae5f8ba</anchor>
      <arglist>(const Coords &amp;coords)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendCoordRequests</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>a83407d363a852ab9dfc70f2aa10e058d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendCoordRequests</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>ad62b1be7467dc7f6bf31dcbe021ebc1c</anchor>
      <arglist>(const std::vector&lt; TransportAddress &gt; &amp;landmarks)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendCoordsReqCall</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>ac3d69d35fad31b52f5fc039dcff01d6d</anchor>
      <arglist>(const TransportAddress &amp;dest, simtime_t timeout)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleRpcResponse</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>aa1dd1d909f093a487b2a6b67fe37ca28</anchor>
      <arglist>(BaseResponseMessage *msg, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleRpcTimeout</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>a2b19076c7801b2ca41b6b1e400571f9c</anchor>
      <arglist>(BaseCallMessage *msg, const TransportAddress &amp;dest, cPolymorphic *context, int rpcId, const OverlayKey &amp;destKey)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>coordsReqRpcResponse</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>a27eb36ff406f9fe0d2fdb5f41a479ab5</anchor>
      <arglist>(CoordsReqResponse *response, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>coordsReqRpc</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>ae2354ae4c693d9d4dc6e57de89c44790</anchor>
      <arglist>(CoordsReqCall *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; LandmarkDataEntry &gt;</type>
      <name>getLandmarkData</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>af27e095e68e6267c245bf308390e2bda</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; TransportAddress &gt;</type>
      <name>getLandmarks</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>a196455a5bbd7d13e32046d49491a4a1b</anchor>
      <arglist>(uint8_t howmany)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; TransportAddress &gt; &amp;</type>
      <name>getLandmarkSet</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>a844b41690ecd7c494b3f21f7e59c6edb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint16_t</type>
      <name>getLandmarkSetSize</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>a3f9826cfa483983300c7de618b9f98a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>setLandmarkSet</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>a9a402f06e7948d4c86dec35c529a08bc</anchor>
      <arglist>(uint8_t howManyLM, uint8_t maxLayer, std::vector&lt; TransportAddress &gt; *landmarkSet)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>enoughLandmarks</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>af641f9c68efaa852a7afe2389706c305</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNodeMeasurement</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>a3714d1d15661715ae6d7b75e74d0968e</anchor>
      <arglist>(const TransportAddress &amp;node, uint8_t pending=0, uint8_t sent=0, uint8_t passed=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deleteNodeMeasurement</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>a907d7e0eb33fdcadd97c141e47dc9bb2</anchor>
      <arglist>(const TransportAddress &amp;node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint16_t</type>
      <name>getReceivedCalls</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>abfc6be18674ec13546a90a587264f315</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; RttMeasurement &gt;</type>
      <name>nodeMeasurements</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>aafd08b151389f68f9e74c9131ba302f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NeighborCache *</type>
      <name>neighborCache</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>a2cd883a94c549eac0ba4dfd7d3939b8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BaseOverlay *</type>
      <name>overlay</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>a2fa1935935077a421a76979a613e4517</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GlobalNodeList *</type>
      <name>globalNodeList</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>ae7e18bfcae858bf1ac4808bbdffe8a78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CoordBasedRouting *</type>
      <name>coordBasedRouting</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>a2f2d88bdce6b96f3819bb1876dd3d785</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint8_t</type>
      <name>maxLayer</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>ae3c83ca224d7cf2ab4e71cafacecfa07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint8_t</type>
      <name>dimensions</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>ac4591caf72dd5aab3376131a9b341459</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>landmarkTimeout</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>a60317df69b6b5dc8d8095bae37891686</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GnpNpsCoordsInfo *</type>
      <name>ownCoords</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>a7ed2ce6106d9941ae86d47a26e08dad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int16_t</type>
      <name>pendingRequests</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>ac09a03018ddd419b62867c516974090a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint8_t</type>
      <name>coordCalcRuns</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>a42ccd3f2efe12d99bdf6a1cae8771f38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; TransportAddress &gt;</type>
      <name>landmarkSet</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>ac6f516e155f3fb4bed2ae7652100633a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint16_t</type>
      <name>receivedCalls</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>a2ac887be6d5f1333cefc902be95ddfa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>landmarkTimer</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>a69f19f64cd77c044e0f7b601d6ad6664</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>ready</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>a0ec98acec352f6bfb9ec909cda1c8a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Landmark</name>
      <anchorfile>classNps.html</anchorfile>
      <anchor>a4aa06e10717f2124a0b37ccc3f4dc573</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NTree</name>
    <filename>classNTree.html</filename>
    <base>BaseOverlay</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NTree</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>af4c3ba1929e03044a8f409768852843b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeOverlay</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>a563a4902066ebc3ec43d62dffc6ee83a</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finishOverlay</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>afd127335c6ff83e01ce7b93b24df2f29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUDPMessage</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>a419c6ad3063b42119ebd8afa64c2a14d</anchor>
      <arglist>(BaseOverlayMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>ab9a8563095fe0b7cbd95eb98a166d0b4</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAppMessage</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>aa40977b963b16f3c26043ccd193fcd43</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>handleRpcCall</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>afab904983c5e838f3c1993112456d904</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRpcResponse</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>a45a9ef8e451f451193fa58c3d55a9a12</anchor>
      <arglist>(BaseResponseMessage *msg, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRpcTimeout</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>a0c8624383f26bf380a33ca0db3bc953d</anchor>
      <arglist>(BaseCallMessage *msg, const TransportAddress &amp;dest, cPolymorphic *context, int rpcId, const OverlayKey &amp;destKey)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setBootstrapedIcon</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>ac58d1280a59c72c46e182e70d7346d1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMove</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>a328fb159dd4e5986df6797967a7e01b4</anchor>
      <arglist>(GameAPIPositionMessage *posMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMoveMessage</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>ad6e4730c994e5a50d6e4ee3000ede68c</anchor>
      <arglist>(NTreeMoveMessage *moveMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleJoinCall</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>ab1357ccccb3b19730656d07c24057c7f</anchor>
      <arglist>(NTreeJoinCall *joinCall)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleJoinResponse</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>a440cba3647cd293e27bb75748beaed24</anchor>
      <arglist>(NTreeJoinResponse *joinResp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleJoinCallTimeout</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>a3a34f900e9368b2fed5f579a6977edca</anchor>
      <arglist>(NTreeJoinCall *joinCall, const TransportAddress &amp;oldNode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handlePingCall</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>a1e4512d83b5aa11f2772ba2803594d5d</anchor>
      <arglist>(NTreePingCall *pingCall)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handlePingResponse</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>a926f95b00396cea01351a56291b23fef</anchor>
      <arglist>(NTreePingResponse *pingResp, NTreePingContext *context)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handlePingCallTimeout</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>a81a94103e0a86b5eca7e9e22f5c7a0ba</anchor>
      <arglist>(NTreePingCall *pingCall, const TransportAddress &amp;oldNode, NTreePingContext *context)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleDivideCall</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>ad6ce1ce06e0f80aec4dd1fbfaf1f8b57</anchor>
      <arglist>(NTreeDivideCall *divideCall)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleDivideResponse</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>aca06c9a1d0f65ec2c600345d421c41ce</anchor>
      <arglist>(NTreeDivideResponse *divideResp, NTreeGroupDivideContext *context)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleDivideCallTimeout</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>ac99ce2807f3329dd7f26491f185b4f1d</anchor>
      <arglist>(NTreeDivideCall *divideCall, const TransportAddress &amp;oldNode, NTreeGroupDivideContext *context)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleAddMessage</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>afd11bbeb64f1fe8a67e4f271fae1332c</anchor>
      <arglist>(NTreeGroupAddMessage *addMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleDeleteMessage</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>a69d251a5a8f5d631acaf2d7143048aa0</anchor>
      <arglist>(NTreeGroupDeleteMessage *deleteMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleLeaveMessage</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>aee2ae5399ed3496cc337e0775c447148</anchor>
      <arglist>(NTreeLeaveMessage *leaveMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleCollapseMessage</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>aaec0db408144067a78e2bdde717977ff</anchor>
      <arglist>(NTreeCollapseMessage *collapseMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleReplaceMessage</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>abef2dca9bfb4329bc8d9a457571ea114</anchor>
      <arglist>(NTreeReplaceNodeMessage *replaceMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleTakeOverMessage</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>a00d94425ef726e748f806cf633fad05d</anchor>
      <arglist>(NTreeTakeOverMessage *takeMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleNodeGracefulLeaveNotification</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>abb9c7820c6ca91e38cc686cb3aa51e58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>divideNode</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>a8144ddca854304bb21c31af09cbac6a8</anchor>
      <arglist>(NTreeGroupDivideContext *context)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>collapseTree</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>a44605b29655eb6167049f6f97ec92bf0</anchor>
      <arglist>(std::map&lt; NTreeScope, NTreeNode &gt;::iterator node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>joinGroup</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>ab4b84494578c721a26da4bbb5eefde6b</anchor>
      <arglist>(Vector2D position)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>leaveGroup</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>ad436b21004c209ceb44915dbacbcd8a8</anchor>
      <arglist>(Vector2D position, bool force=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>pingNodes</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>afdd8948ebfcc9effd60b92f23583ff90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkParentTimeout</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>a20f801c3c702c715fdeb9be9b84b10e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>routeViaNTree</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>abd8783c5f0fcc92cc600e8d34481f4aa</anchor>
      <arglist>(const Vector2D &amp;pos, cPacket *msg, bool forward=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendToGroup</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>acf8d3d65329f72b0634351a496b77283</anchor>
      <arglist>(const NTreeGroup &amp;grp, cPacket *msg, bool keepMsg=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendToGroup</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>acde7b902252e272ff2323316e88d7197</anchor>
      <arglist>(const std::set&lt; NodeHandle &gt; &amp;grp, cPacket *msg, bool keepMsg=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMessage</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>ad8afe52a993c199a72b1db93b4ab8798</anchor>
      <arglist>(const TransportAddress &amp;dest, cPacket *msg, bool forward=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>changeState</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>a6a09bf192a3c340e9d8f43c90d0b3169</anchor>
      <arglist>(int state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::list&lt; NTreeGroup &gt;::iterator</type>
      <name>findGroup</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>acb73a69af1f6fd5eba00bcebfd1949e0</anchor>
      <arglist>(const Vector2D &amp;pos)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::list&lt; NTreeGroup &gt;::iterator</type>
      <name>findGroup</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>a7ed8946b8363adf863f68be85f02cffb</anchor>
      <arglist>(const Vector2D &amp;pos, double size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::map&lt; NTreeScope, NTreeNode &gt;::iterator</type>
      <name>findNTreeNode</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>af7b0930b4ab5d2536fd2af2386e890b4</anchor>
      <arglist>(const Vector2D &amp;pos)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::map&lt; NTreeScope, NTreeNode &gt;::iterator</type>
      <name>findNTreeNode</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>af905e11df66e90e9e64a589877ab7209</anchor>
      <arglist>(const Vector2D &amp;pos, double size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeHandle</type>
      <name>getRandomNode</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>a4812f1429860a8d280ff4b90935e6667</anchor>
      <arglist>(std::set&lt; NodeHandle &gt; invalidNodes=std::set&lt; NodeHandle &gt;())</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>AOIWidth</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>a58564a7bbd7caaba33078388d34e89f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxChildren</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>a428051b8c6fd60c5f39db5fa552db8af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>areaDimension</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>ac5c9fa88d26b40bf670278a0e006f4d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D</type>
      <name>position</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>af054361942e02791f76643b3886a1c6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NTreeGroup *</type>
      <name>currentGroup</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>aa27f0728fa443cfe13042ab40c45144e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>pingInterval</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>a888ebb36f7aaddb1887f31de28677765</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>joinTimer</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>ae5b5dd01d0dd2c4ed1aa6938f2b5b553</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>pingTimer</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>a052e0c7016d6b7ac197cda112e3f26bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; NTreeGroup &gt;</type>
      <name>groups</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>a0b04f9e1fb204dc5b7c4123fb6041c98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; NTreeScope, NTreeNode &gt;</type>
      <name>ntreeNodes</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>ac9abbb19900b1e6999bea9657ab98a1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>joinsSend</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>a9d6f4c163375dc88ec52926708f87674</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>joinBytes</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>a3254edf37eb3771820f257155a62d771</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>joinTimeout</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>ac93cb62c57a09fda499e80996d2328a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>divideCount</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>a41bffa6f701ff383b666ff9edf903ad6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>collapseCount</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>a0bbe607c5d094d3b33026dfd948b7f22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>treeMaintenanceMessages</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>aa61dcc50338beb91b9b7f10f3c093015</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>treeMaintenanceBytes</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>afa451d4f41ac8cc7ab357d146d842cc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>movesSend</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>a5c50f4d4ce98b68b32f0a4de8ec88443</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>moveBytes</name>
      <anchorfile>classNTree.html</anchorfile>
      <anchor>ac4b0f8e2026da537e51672847a9ab590</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NTreeCollapseMessage</name>
    <filename>classNTreeCollapseMessage.html</filename>
    <base>BaseOverlayMessage</base>
    <member kind="function">
      <type></type>
      <name>NTreeCollapseMessage</name>
      <anchorfile>classNTreeCollapseMessage.html</anchorfile>
      <anchor>a25810f76048f5abc10ac782018bd7f7e</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NTreeCollapseMessage</name>
      <anchorfile>classNTreeCollapseMessage.html</anchorfile>
      <anchor>a6aca198960de5a3ee70241d4201ed571</anchor>
      <arglist>(const NTreeCollapseMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NTreeCollapseMessage</name>
      <anchorfile>classNTreeCollapseMessage.html</anchorfile>
      <anchor>a80770ecc723a55d5bf39bc04cb1f4424</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NTreeCollapseMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classNTreeCollapseMessage.html</anchorfile>
      <anchor>ad1d65c2e5f5ce3f0edead73af48c7434</anchor>
      <arglist>(const NTreeCollapseMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NTreeCollapseMessage *</type>
      <name>dup</name>
      <anchorfile>classNTreeCollapseMessage.html</anchorfile>
      <anchor>a349310262352370210cbab0313e98211</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classNTreeCollapseMessage.html</anchorfile>
      <anchor>a8c3c67d372238acf90c7d8e8a044fd78</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classNTreeCollapseMessage.html</anchorfile>
      <anchor>ae7819c5874fca5b162fe9179013c804a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector2D &amp;</type>
      <name>getOrigin</name>
      <anchorfile>classNTreeCollapseMessage.html</anchorfile>
      <anchor>a9e63260de84d3991d2aadb4afbc623a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Vector2D &amp;</type>
      <name>getOrigin</name>
      <anchorfile>classNTreeCollapseMessage.html</anchorfile>
      <anchor>a9896510c7dfee6c21d295e9ccc2d3938</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOrigin</name>
      <anchorfile>classNTreeCollapseMessage.html</anchorfile>
      <anchor>ac7a4749148bd9e2ab0b3d960f3f86561</anchor>
      <arglist>(const Vector2D &amp;origin)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSize</name>
      <anchorfile>classNTreeCollapseMessage.html</anchorfile>
      <anchor>afc090a2e2a05e92a0f27ccf9b73ced05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSize</name>
      <anchorfile>classNTreeCollapseMessage.html</anchorfile>
      <anchor>a2f339ba66e78b8c9144d066e88dc4819</anchor>
      <arglist>(double size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getPlayer</name>
      <anchorfile>classNTreeCollapseMessage.html</anchorfile>
      <anchor>ab0cff3e7c406705bdc1600249ef556bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getPlayer</name>
      <anchorfile>classNTreeCollapseMessage.html</anchorfile>
      <anchor>aad282dd20e39f25c1b31551c72a8f224</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPlayer</name>
      <anchorfile>classNTreeCollapseMessage.html</anchorfile>
      <anchor>ad9bd222ea866fe3bf4c5b9dc2327d1f1</anchor>
      <arglist>(const NodeHandle &amp;player)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classNTreeCollapseMessage.html</anchorfile>
      <anchor>a876c4a5a7df6df82de75402d37afdf9d</anchor>
      <arglist>(const NTreeCollapseMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D</type>
      <name>origin_var</name>
      <anchorfile>classNTreeCollapseMessage.html</anchorfile>
      <anchor>ab32a83ba17e1532b7f2b06e790bf6044</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>size_var</name>
      <anchorfile>classNTreeCollapseMessage.html</anchorfile>
      <anchor>a64bef195457478912a8116275c769519</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>player_var</name>
      <anchorfile>classNTreeCollapseMessage.html</anchorfile>
      <anchor>a9341396053554465ae0f808f0013c2ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classNTreeCollapseMessage.html</anchorfile>
      <anchor>aef9f406e9205ce167364bd05c3368c57</anchor>
      <arglist>(const NTreeCollapseMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NTreeDivideCall</name>
    <filename>classNTreeDivideCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>NTreeDivideCall</name>
      <anchorfile>classNTreeDivideCall.html</anchorfile>
      <anchor>a2ec7c5eb731cc04aac5fa4acd9c53917</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NTreeDivideCall</name>
      <anchorfile>classNTreeDivideCall.html</anchorfile>
      <anchor>a4065504a04f276cc42aeb6dffc3f4706</anchor>
      <arglist>(const NTreeDivideCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NTreeDivideCall</name>
      <anchorfile>classNTreeDivideCall.html</anchorfile>
      <anchor>a8e63ae2a273398f31a53e22b65c10851</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NTreeDivideCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classNTreeDivideCall.html</anchorfile>
      <anchor>afbd3eeae2669b40b140aef96c23fc764</anchor>
      <arglist>(const NTreeDivideCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NTreeDivideCall *</type>
      <name>dup</name>
      <anchorfile>classNTreeDivideCall.html</anchorfile>
      <anchor>a3cfce98fd5ad6c0e1dcfec3e3d089d32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classNTreeDivideCall.html</anchorfile>
      <anchor>a8b9e36c9c07acce3f9e01adcd170a9a9</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classNTreeDivideCall.html</anchorfile>
      <anchor>a548d1d8800ef991076337b2328906f30</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector2D &amp;</type>
      <name>getOrigin</name>
      <anchorfile>classNTreeDivideCall.html</anchorfile>
      <anchor>a61d312fe120533531f112ba51fa176f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Vector2D &amp;</type>
      <name>getOrigin</name>
      <anchorfile>classNTreeDivideCall.html</anchorfile>
      <anchor>a7566e22a1620a25b6b816dfc740f2bd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOrigin</name>
      <anchorfile>classNTreeDivideCall.html</anchorfile>
      <anchor>ad2ac114ae084e6585650d4df9bbaece4</anchor>
      <arglist>(const Vector2D &amp;origin)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSize</name>
      <anchorfile>classNTreeDivideCall.html</anchorfile>
      <anchor>a1537d41863d17cf64ecde223f666de28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSize</name>
      <anchorfile>classNTreeDivideCall.html</anchorfile>
      <anchor>a573f952fbe80a16997385ea0710d522a</anchor>
      <arglist>(double size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getQuadrant</name>
      <anchorfile>classNTreeDivideCall.html</anchorfile>
      <anchor>a312970e24d3686aa2879c37b3e7280b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setQuadrant</name>
      <anchorfile>classNTreeDivideCall.html</anchorfile>
      <anchor>a27000251e8867c7d57a0eb72ba006e32</anchor>
      <arglist>(int quadrant)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classNTreeDivideCall.html</anchorfile>
      <anchor>aca16f7eac8cc2787d051c051a40aae62</anchor>
      <arglist>(const NTreeDivideCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D</type>
      <name>origin_var</name>
      <anchorfile>classNTreeDivideCall.html</anchorfile>
      <anchor>ac25ece743baac9d2226e1cac5d16c84d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>size_var</name>
      <anchorfile>classNTreeDivideCall.html</anchorfile>
      <anchor>aef7828b6da779ec31f7535d97d15d750</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>quadrant_var</name>
      <anchorfile>classNTreeDivideCall.html</anchorfile>
      <anchor>a73cf6a14701e98a6dedd759a5df1f9b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classNTreeDivideCall.html</anchorfile>
      <anchor>a32ed436570bb57ffc07dc5a829a2a68f</anchor>
      <arglist>(const NTreeDivideCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NTreeDivideResponse</name>
    <filename>classNTreeDivideResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>NTreeDivideResponse</name>
      <anchorfile>classNTreeDivideResponse.html</anchorfile>
      <anchor>a74703941d58e295438b33624f644aae3</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NTreeDivideResponse</name>
      <anchorfile>classNTreeDivideResponse.html</anchorfile>
      <anchor>ab475d7603b1a90adf367d2001b9b522f</anchor>
      <arglist>(const NTreeDivideResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NTreeDivideResponse</name>
      <anchorfile>classNTreeDivideResponse.html</anchorfile>
      <anchor>a49c12bef610a13c37a5703bd8376b210</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NTreeDivideResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classNTreeDivideResponse.html</anchorfile>
      <anchor>a335a162a7745296b5361e66f4414e608</anchor>
      <arglist>(const NTreeDivideResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NTreeDivideResponse *</type>
      <name>dup</name>
      <anchorfile>classNTreeDivideResponse.html</anchorfile>
      <anchor>a3df5f87808a95f81d61fa86823ab4037</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classNTreeDivideResponse.html</anchorfile>
      <anchor>a346d7d9efd8695d349566f74da5168be</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classNTreeDivideResponse.html</anchorfile>
      <anchor>a0254435829a73b1874cf4a6fb51f399c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getQuadrant</name>
      <anchorfile>classNTreeDivideResponse.html</anchorfile>
      <anchor>a651bb2efb3305e36e6355ce341bb0649</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setQuadrant</name>
      <anchorfile>classNTreeDivideResponse.html</anchorfile>
      <anchor>a748fbcc627e551c1abefa9feb5c3b5e1</anchor>
      <arglist>(int quadrant)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classNTreeDivideResponse.html</anchorfile>
      <anchor>ab45db761d7df2e4fab9b37cba27a2628</anchor>
      <arglist>(const NTreeDivideResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>quadrant_var</name>
      <anchorfile>classNTreeDivideResponse.html</anchorfile>
      <anchor>acdcc92a7d51727edc80c6078215d7a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classNTreeDivideResponse.html</anchorfile>
      <anchor>a59b56464d47e176b683441396cd766f9</anchor>
      <arglist>(const NTreeDivideResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NTreeGroup</name>
    <filename>classNTreeGroup.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>isInScope</name>
      <anchorfile>classNTreeGroup.html</anchorfile>
      <anchor>a06b81ada0700bc8faca287da1bd437ec</anchor>
      <arglist>(const Vector2D &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NTreeGroup</name>
      <anchorfile>classNTreeGroup.html</anchorfile>
      <anchor>a7ab0fbb9aa420fe2244af33e74c7c094</anchor>
      <arglist>(const NTreeScope &amp;_scope)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NTreeGroup</name>
      <anchorfile>classNTreeGroup.html</anchorfile>
      <anchor>a6698583fac096bc3e63d48250654e6a0</anchor>
      <arglist>(const Vector2D &amp;_origin, double _size)</arglist>
    </member>
    <member kind="variable">
      <type>NodeHandle</type>
      <name>leader</name>
      <anchorfile>classNTreeGroup.html</anchorfile>
      <anchor>a64104ecd73ab3d6cb7deba940d32edf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; NodeHandle &gt;</type>
      <name>members</name>
      <anchorfile>classNTreeGroup.html</anchorfile>
      <anchor>a8504cdb0167bd77af831a55f0a6c6fe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NTreeScope</type>
      <name>scope</name>
      <anchorfile>classNTreeGroup.html</anchorfile>
      <anchor>a874afab14b9e4704bd3022565264e2e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>dividePending</name>
      <anchorfile>classNTreeGroup.html</anchorfile>
      <anchor>a2f6828a4f1096163792ae336e760e894</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classNTreeGroup.html</anchorfile>
      <anchor>a1d0ba2cedafdd7669db1d5990060eeac</anchor>
      <arglist>(const NTreeGroup &amp;a, const NTreeGroup &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classNTreeGroup.html</anchorfile>
      <anchor>a773fd36a5bda25e8b53bc8de4dec08c5</anchor>
      <arglist>(const NTreeGroup &amp;a, const NTreeGroup &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classNTreeGroup.html</anchorfile>
      <anchor>ab470167fa5a61ce51d7e0073290095ae</anchor>
      <arglist>(std::ostream &amp;Stream, const NTreeGroup &amp;group)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NTreeGroupAddMessage</name>
    <filename>classNTreeGroupAddMessage.html</filename>
    <base>BaseOverlayMessage</base>
    <member kind="function">
      <type></type>
      <name>NTreeGroupAddMessage</name>
      <anchorfile>classNTreeGroupAddMessage.html</anchorfile>
      <anchor>a0dc815b6d2a841ab5672d69c52104336</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NTreeGroupAddMessage</name>
      <anchorfile>classNTreeGroupAddMessage.html</anchorfile>
      <anchor>a0b4467428d0d91802e3308638cbbdf5c</anchor>
      <arglist>(const NTreeGroupAddMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NTreeGroupAddMessage</name>
      <anchorfile>classNTreeGroupAddMessage.html</anchorfile>
      <anchor>a52022d15dfeb6e0911e6aaa5e80bf00a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NTreeGroupAddMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classNTreeGroupAddMessage.html</anchorfile>
      <anchor>a847a75d935cc4628542ef676393dd225</anchor>
      <arglist>(const NTreeGroupAddMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NTreeGroupAddMessage *</type>
      <name>dup</name>
      <anchorfile>classNTreeGroupAddMessage.html</anchorfile>
      <anchor>acf1135d39c203cf18d641419fe651108</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classNTreeGroupAddMessage.html</anchorfile>
      <anchor>aaf873f8eb674160879e5c531ce7a080b</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classNTreeGroupAddMessage.html</anchorfile>
      <anchor>a9720384fe65185d139c4c2defcb57cad</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getPlayer</name>
      <anchorfile>classNTreeGroupAddMessage.html</anchorfile>
      <anchor>a5eadf9c93a2a6eaf7565c09143a187b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getPlayer</name>
      <anchorfile>classNTreeGroupAddMessage.html</anchorfile>
      <anchor>ab0ff3ec93cde97177dc740d1e1d60579</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPlayer</name>
      <anchorfile>classNTreeGroupAddMessage.html</anchorfile>
      <anchor>a76913e1fbc6e911803122f05d2674d26</anchor>
      <arglist>(const NodeHandle &amp;player)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector2D &amp;</type>
      <name>getOrigin</name>
      <anchorfile>classNTreeGroupAddMessage.html</anchorfile>
      <anchor>a1f9bf335690b64fbb1abccc62420b009</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Vector2D &amp;</type>
      <name>getOrigin</name>
      <anchorfile>classNTreeGroupAddMessage.html</anchorfile>
      <anchor>aa327a5ff14e2f9b88c22f4ca2547fafe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOrigin</name>
      <anchorfile>classNTreeGroupAddMessage.html</anchorfile>
      <anchor>a8226e34d595ef1c0e90c0a99620cd919</anchor>
      <arglist>(const Vector2D &amp;origin)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classNTreeGroupAddMessage.html</anchorfile>
      <anchor>a561b88ea564e886b0158d89dbfb9b626</anchor>
      <arglist>(const NTreeGroupAddMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>player_var</name>
      <anchorfile>classNTreeGroupAddMessage.html</anchorfile>
      <anchor>a1a55b07625770392a194bab1f20858f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D</type>
      <name>origin_var</name>
      <anchorfile>classNTreeGroupAddMessage.html</anchorfile>
      <anchor>ad03ff1bc06674e4b10f1cec7ac03190c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classNTreeGroupAddMessage.html</anchorfile>
      <anchor>a652996317455dcf7a6bba14e0ec8ae25</anchor>
      <arglist>(const NTreeGroupAddMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NTreeGroupDeleteMessage</name>
    <filename>classNTreeGroupDeleteMessage.html</filename>
    <base>BaseOverlayMessage</base>
    <member kind="function">
      <type></type>
      <name>NTreeGroupDeleteMessage</name>
      <anchorfile>classNTreeGroupDeleteMessage.html</anchorfile>
      <anchor>a24827d9877097f441fe253c50612eb45</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NTreeGroupDeleteMessage</name>
      <anchorfile>classNTreeGroupDeleteMessage.html</anchorfile>
      <anchor>aa4141bbad62b33740a8c6df43ecbea04</anchor>
      <arglist>(const NTreeGroupDeleteMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NTreeGroupDeleteMessage</name>
      <anchorfile>classNTreeGroupDeleteMessage.html</anchorfile>
      <anchor>a9513d4b7876863c31f815b357cdbcc76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NTreeGroupDeleteMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classNTreeGroupDeleteMessage.html</anchorfile>
      <anchor>ac5f635916ffa9fdc577fd6bd8d4f72c4</anchor>
      <arglist>(const NTreeGroupDeleteMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NTreeGroupDeleteMessage *</type>
      <name>dup</name>
      <anchorfile>classNTreeGroupDeleteMessage.html</anchorfile>
      <anchor>aa4c81799c6077bdd2e6593c4d65b0bce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classNTreeGroupDeleteMessage.html</anchorfile>
      <anchor>a6be19f0b4b2e555caeb27ec619cb3101</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classNTreeGroupDeleteMessage.html</anchorfile>
      <anchor>ae2c6d098d6f5b5d1e71d19dedd0ef9d9</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector2D &amp;</type>
      <name>getOrigin</name>
      <anchorfile>classNTreeGroupDeleteMessage.html</anchorfile>
      <anchor>ab6d5b1a4368dd0664e83628bf54e88d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Vector2D &amp;</type>
      <name>getOrigin</name>
      <anchorfile>classNTreeGroupDeleteMessage.html</anchorfile>
      <anchor>a8b5d11144fc925cd6ed8e4c1ded83937</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOrigin</name>
      <anchorfile>classNTreeGroupDeleteMessage.html</anchorfile>
      <anchor>a7acf10df30c6a0237c89904c11342393</anchor>
      <arglist>(const Vector2D &amp;origin)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSize</name>
      <anchorfile>classNTreeGroupDeleteMessage.html</anchorfile>
      <anchor>a877f4dc1ba60092ff3cfa601a92870d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSize</name>
      <anchorfile>classNTreeGroupDeleteMessage.html</anchorfile>
      <anchor>a1fac3b5b518649ba234dcb152ecdd19f</anchor>
      <arglist>(double size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNewChildArraySize</name>
      <anchorfile>classNTreeGroupDeleteMessage.html</anchorfile>
      <anchor>a9410aaff0a1ef9a3e6e3f51b67741b0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getNewChild</name>
      <anchorfile>classNTreeGroupDeleteMessage.html</anchorfile>
      <anchor>a1bc236622072aa9133661219a924ab5c</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getNewChild</name>
      <anchorfile>classNTreeGroupDeleteMessage.html</anchorfile>
      <anchor>adca74931a91fe9967514a9a6a529d0c6</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNewChild</name>
      <anchorfile>classNTreeGroupDeleteMessage.html</anchorfile>
      <anchor>a4d5f5d64c3010a06b2b4e30c37010070</anchor>
      <arglist>(unsigned int k, const NodeHandle &amp;newChild)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classNTreeGroupDeleteMessage.html</anchorfile>
      <anchor>af024994b13ed4e6f93301eb0ec0c9d0a</anchor>
      <arglist>(const NTreeGroupDeleteMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D</type>
      <name>origin_var</name>
      <anchorfile>classNTreeGroupDeleteMessage.html</anchorfile>
      <anchor>a47e46584124c9737b157059591de4d31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>size_var</name>
      <anchorfile>classNTreeGroupDeleteMessage.html</anchorfile>
      <anchor>a99e0d87c6e893f38f1fd046d18f3b0e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>newChild_var</name>
      <anchorfile>classNTreeGroupDeleteMessage.html</anchorfile>
      <anchor>a474cd760e8a403e39dc345192f863854</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classNTreeGroupDeleteMessage.html</anchorfile>
      <anchor>ac158f920251b1ee3f40633fd898c3934</anchor>
      <arglist>(const NTreeGroupDeleteMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NTreeGroupDivideContext</name>
    <filename>classNTreeGroupDivideContext.html</filename>
    <member kind="variable">
      <type>NodeHandle</type>
      <name>newChild</name>
      <anchorfile>classNTreeGroupDivideContext.html</anchorfile>
      <anchor>a954a02069a13d844e49d9c92c00ab61d</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>NTreeScope</type>
      <name>nodeScope</name>
      <anchorfile>classNTreeGroupDivideContext.html</anchorfile>
      <anchor>a52f9e9bc7d7edfe42b7e74e6a420477e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NTreeGroupDivideContextPtr</name>
    <filename>classNTreeGroupDivideContextPtr.html</filename>
    <member kind="variable">
      <type>NTreeGroupDivideContext *</type>
      <name>ptr</name>
      <anchorfile>classNTreeGroupDivideContextPtr.html</anchorfile>
      <anchor>ac8587c36e32ecb8198c93ac46233e399</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NTreeJoinCall</name>
    <filename>classNTreeJoinCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>NTreeJoinCall</name>
      <anchorfile>classNTreeJoinCall.html</anchorfile>
      <anchor>ab73d4083c9a80a5f1b4b6139242067fa</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NTreeJoinCall</name>
      <anchorfile>classNTreeJoinCall.html</anchorfile>
      <anchor>a65cbef2f71b9ef6d017ec2fc08aeb841</anchor>
      <arglist>(const NTreeJoinCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NTreeJoinCall</name>
      <anchorfile>classNTreeJoinCall.html</anchorfile>
      <anchor>adf83a321b8f2d00ba2c048a501741cca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NTreeJoinCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classNTreeJoinCall.html</anchorfile>
      <anchor>a8333a76c75a9903af8f42de850382cfc</anchor>
      <arglist>(const NTreeJoinCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NTreeJoinCall *</type>
      <name>dup</name>
      <anchorfile>classNTreeJoinCall.html</anchorfile>
      <anchor>a25419245012e66ed8d1240e8d1547c99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classNTreeJoinCall.html</anchorfile>
      <anchor>a6da6e7b0303904a95e4e8d1b723158ba</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classNTreeJoinCall.html</anchorfile>
      <anchor>aa691974e2cbd144266d0777eb92186bd</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector2D &amp;</type>
      <name>getPosition</name>
      <anchorfile>classNTreeJoinCall.html</anchorfile>
      <anchor>a6fc581736ec13e9c2ec053539e741948</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Vector2D &amp;</type>
      <name>getPosition</name>
      <anchorfile>classNTreeJoinCall.html</anchorfile>
      <anchor>a0a3fe3e7e7f8bbd48fa45cf4b5813d60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPosition</name>
      <anchorfile>classNTreeJoinCall.html</anchorfile>
      <anchor>a9cfa615d030b211ed66f130f6fccc488</anchor>
      <arglist>(const Vector2D &amp;position)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classNTreeJoinCall.html</anchorfile>
      <anchor>a06715db3a2c2588d12d9a8773fe567cd</anchor>
      <arglist>(const NTreeJoinCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D</type>
      <name>position_var</name>
      <anchorfile>classNTreeJoinCall.html</anchorfile>
      <anchor>a5ffa5cf95b81a71ccaf5bb90ba718480</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classNTreeJoinCall.html</anchorfile>
      <anchor>a3428655525b59970fb47f413388bd0c9</anchor>
      <arglist>(const NTreeJoinCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NTreeJoinResponse</name>
    <filename>classNTreeJoinResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>NTreeJoinResponse</name>
      <anchorfile>classNTreeJoinResponse.html</anchorfile>
      <anchor>abc2d8a69601f42a6514db4f8a5ef3b9c</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NTreeJoinResponse</name>
      <anchorfile>classNTreeJoinResponse.html</anchorfile>
      <anchor>a2fa1beb339465a6d4a0356f5c22209ba</anchor>
      <arglist>(const NTreeJoinResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NTreeJoinResponse</name>
      <anchorfile>classNTreeJoinResponse.html</anchorfile>
      <anchor>ae58b81b564ec22d4056b6166b0aa8aee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NTreeJoinResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classNTreeJoinResponse.html</anchorfile>
      <anchor>a0a5ed42a0c4fa37497ee278d1ae36417</anchor>
      <arglist>(const NTreeJoinResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NTreeJoinResponse *</type>
      <name>dup</name>
      <anchorfile>classNTreeJoinResponse.html</anchorfile>
      <anchor>aec61cb16cfaf51c0a5cf8ec4501a096e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classNTreeJoinResponse.html</anchorfile>
      <anchor>a2426858f31c12e9176c1758cfd4e7f68</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classNTreeJoinResponse.html</anchorfile>
      <anchor>a76c02efb77dc240701f5f1e4c6d12985</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector2D &amp;</type>
      <name>getOrigin</name>
      <anchorfile>classNTreeJoinResponse.html</anchorfile>
      <anchor>a0c744719ab8b981b8aa2e7f847b3ae19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Vector2D &amp;</type>
      <name>getOrigin</name>
      <anchorfile>classNTreeJoinResponse.html</anchorfile>
      <anchor>abf25ca2b631d3c8a91b045b7887e5bc5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOrigin</name>
      <anchorfile>classNTreeJoinResponse.html</anchorfile>
      <anchor>ae28beef557faa706b1dc354846f53189</anchor>
      <arglist>(const Vector2D &amp;origin)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSize</name>
      <anchorfile>classNTreeJoinResponse.html</anchorfile>
      <anchor>ae9ff2ee3eefce8a94b2a8cee5a15eac1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSize</name>
      <anchorfile>classNTreeJoinResponse.html</anchorfile>
      <anchor>a8813b78b71c4a4c4065b368e317d2f82</anchor>
      <arglist>(double size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMembersArraySize</name>
      <anchorfile>classNTreeJoinResponse.html</anchorfile>
      <anchor>a8daa4aae69c07060106a9e1e58a1519e</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getMembersArraySize</name>
      <anchorfile>classNTreeJoinResponse.html</anchorfile>
      <anchor>a6b8a2f0c3311cad4d30ab70e39c816e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getMembers</name>
      <anchorfile>classNTreeJoinResponse.html</anchorfile>
      <anchor>a83090f0a8aee9cf3e373543d1c69c60a</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getMembers</name>
      <anchorfile>classNTreeJoinResponse.html</anchorfile>
      <anchor>a164b91e6ca7e92ff71da1334017abd63</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMembers</name>
      <anchorfile>classNTreeJoinResponse.html</anchorfile>
      <anchor>a0ede18f7ec17f3c3f6eddbeaa135ab4c</anchor>
      <arglist>(unsigned int k, const NodeHandle &amp;members)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classNTreeJoinResponse.html</anchorfile>
      <anchor>a41a0f718ebff640c14e4722418efbfcb</anchor>
      <arglist>(const NTreeJoinResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D</type>
      <name>origin_var</name>
      <anchorfile>classNTreeJoinResponse.html</anchorfile>
      <anchor>aeca0f04acd8fe3ca02a04471c5f69e95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>size_var</name>
      <anchorfile>classNTreeJoinResponse.html</anchorfile>
      <anchor>a5f17792241110b501ed851dcc7ea9b1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle *</type>
      <name>members_var</name>
      <anchorfile>classNTreeJoinResponse.html</anchorfile>
      <anchor>a0eaf09c2ccc915cb6f30a50d6f7a501f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>members_arraysize</name>
      <anchorfile>classNTreeJoinResponse.html</anchorfile>
      <anchor>af9b57133920bee4a4f62be1a39862198</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classNTreeJoinResponse.html</anchorfile>
      <anchor>a7550cbab2cea4da0cebed3958227e035</anchor>
      <arglist>(const NTreeJoinResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NTreeLeaveMessage</name>
    <filename>classNTreeLeaveMessage.html</filename>
    <base>BaseOverlayMessage</base>
    <member kind="function">
      <type></type>
      <name>NTreeLeaveMessage</name>
      <anchorfile>classNTreeLeaveMessage.html</anchorfile>
      <anchor>a88f4206440223a6db80bce7b25554ea2</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NTreeLeaveMessage</name>
      <anchorfile>classNTreeLeaveMessage.html</anchorfile>
      <anchor>a02dbe38659e7db8bf396ae7e6d11d2dd</anchor>
      <arglist>(const NTreeLeaveMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NTreeLeaveMessage</name>
      <anchorfile>classNTreeLeaveMessage.html</anchorfile>
      <anchor>a96f405cedc4719724972c05b70321ccc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NTreeLeaveMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classNTreeLeaveMessage.html</anchorfile>
      <anchor>acfe3c096996454f40b19ce55868e1d43</anchor>
      <arglist>(const NTreeLeaveMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NTreeLeaveMessage *</type>
      <name>dup</name>
      <anchorfile>classNTreeLeaveMessage.html</anchorfile>
      <anchor>ad2cffb84c35a631b273a918bdc475509</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classNTreeLeaveMessage.html</anchorfile>
      <anchor>a239075bc5e2422048f18e9386c2a6109</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classNTreeLeaveMessage.html</anchorfile>
      <anchor>ad8a810516f7d007bb7d2f3b14890f447</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getPlayer</name>
      <anchorfile>classNTreeLeaveMessage.html</anchorfile>
      <anchor>ada634c8c3471d02e084de71349186759</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getPlayer</name>
      <anchorfile>classNTreeLeaveMessage.html</anchorfile>
      <anchor>a94452e724d542a768cebc9b57e68f9eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPlayer</name>
      <anchorfile>classNTreeLeaveMessage.html</anchorfile>
      <anchor>a68adc3af805f4b63db776d2df7535505</anchor>
      <arglist>(const NodeHandle &amp;player)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector2D &amp;</type>
      <name>getPosition</name>
      <anchorfile>classNTreeLeaveMessage.html</anchorfile>
      <anchor>a04c832413797fcf98427777d541e3174</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Vector2D &amp;</type>
      <name>getPosition</name>
      <anchorfile>classNTreeLeaveMessage.html</anchorfile>
      <anchor>a3e4c7479ccb9506b24b0a5cb49a0d95a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPosition</name>
      <anchorfile>classNTreeLeaveMessage.html</anchorfile>
      <anchor>a487bef67ad686c58a013eb1f77e13703</anchor>
      <arglist>(const Vector2D &amp;position)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classNTreeLeaveMessage.html</anchorfile>
      <anchor>abc729f447be6765b97d86525c86187fa</anchor>
      <arglist>(const NTreeLeaveMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>player_var</name>
      <anchorfile>classNTreeLeaveMessage.html</anchorfile>
      <anchor>aaa24511c1bb771819de914cb78c1b350</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D</type>
      <name>position_var</name>
      <anchorfile>classNTreeLeaveMessage.html</anchorfile>
      <anchor>a241a8032d4fcae1b2b2820e21646da34</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classNTreeLeaveMessage.html</anchorfile>
      <anchor>a6c26c0cce8bae4df3a405e964300cb14</anchor>
      <arglist>(const NTreeLeaveMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NTreeMoveMessage</name>
    <filename>classNTreeMoveMessage.html</filename>
    <base>BaseOverlayMessage</base>
    <member kind="function">
      <type></type>
      <name>NTreeMoveMessage</name>
      <anchorfile>classNTreeMoveMessage.html</anchorfile>
      <anchor>af7b179326630059049365390c7c30d0e</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NTreeMoveMessage</name>
      <anchorfile>classNTreeMoveMessage.html</anchorfile>
      <anchor>a37006a2aa3ba9f7f4a9416ed7223649d</anchor>
      <arglist>(const NTreeMoveMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NTreeMoveMessage</name>
      <anchorfile>classNTreeMoveMessage.html</anchorfile>
      <anchor>a9a9199c0a891b3b274772e27fce7f0ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NTreeMoveMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classNTreeMoveMessage.html</anchorfile>
      <anchor>a7a27819e17a5f5a5e2f8a07cc2c65136</anchor>
      <arglist>(const NTreeMoveMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NTreeMoveMessage *</type>
      <name>dup</name>
      <anchorfile>classNTreeMoveMessage.html</anchorfile>
      <anchor>a3dd77e816fb214de94eb0e71a2b3cfd0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classNTreeMoveMessage.html</anchorfile>
      <anchor>a455d5e2d6b0d826e49c65fc9ba8cf9e3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classNTreeMoveMessage.html</anchorfile>
      <anchor>a3cf313423c162352d8b4fd8df491f9d2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getPlayer</name>
      <anchorfile>classNTreeMoveMessage.html</anchorfile>
      <anchor>abd403ee717bfe57668daa9a997b3b585</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getPlayer</name>
      <anchorfile>classNTreeMoveMessage.html</anchorfile>
      <anchor>a99ea1e7c42a7a5fd5813d76482c4db41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPlayer</name>
      <anchorfile>classNTreeMoveMessage.html</anchorfile>
      <anchor>a7079ac3b1429cce4912896a55153de39</anchor>
      <arglist>(const NodeHandle &amp;player)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector2D &amp;</type>
      <name>getPosition</name>
      <anchorfile>classNTreeMoveMessage.html</anchorfile>
      <anchor>a9ac7dc6a3a765bd4d6503fee68c3a957</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Vector2D &amp;</type>
      <name>getPosition</name>
      <anchorfile>classNTreeMoveMessage.html</anchorfile>
      <anchor>acd05d905bafb6fd4e1b7e98c1966b2ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPosition</name>
      <anchorfile>classNTreeMoveMessage.html</anchorfile>
      <anchor>a7663e4628350b8cc8d3a165903350c93</anchor>
      <arglist>(const Vector2D &amp;position)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classNTreeMoveMessage.html</anchorfile>
      <anchor>ae705f25a960521d2f18eebb154978949</anchor>
      <arglist>(const NTreeMoveMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>player_var</name>
      <anchorfile>classNTreeMoveMessage.html</anchorfile>
      <anchor>a885345051c4cc509c7873a64e5cc3932</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D</type>
      <name>position_var</name>
      <anchorfile>classNTreeMoveMessage.html</anchorfile>
      <anchor>a0eec5da5bf31d8f3c86addfb9c2c8b18</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classNTreeMoveMessage.html</anchorfile>
      <anchor>a85eaad26222188387ea4343a59a1a93c</anchor>
      <arglist>(const NTreeMoveMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NTreeNode</name>
    <filename>classNTreeNode.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>isInScope</name>
      <anchorfile>classNTreeNode.html</anchorfile>
      <anchor>ac77e3172f1ae31d4c47d485203c54673</anchor>
      <arglist>(const Vector2D &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>const NodeHandle &amp;</type>
      <name>getChildForPos</name>
      <anchorfile>classNTreeNode.html</anchorfile>
      <anchor>a598d66ac7cfd6e6a355f2cd91c5ea3e5</anchor>
      <arglist>(const Vector2D &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NTreeNode</name>
      <anchorfile>classNTreeNode.html</anchorfile>
      <anchor>a58576e99bf558bcf683a3b52e1a3400d</anchor>
      <arglist>(const NTreeScope &amp;_scope)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NTreeNode</name>
      <anchorfile>classNTreeNode.html</anchorfile>
      <anchor>aeafd9aba16ee0d35eb170f5c14494aaa</anchor>
      <arglist>(const Vector2D &amp;_origin, double _size)</arglist>
    </member>
    <member kind="variable">
      <type>NTreeScope</type>
      <name>scope</name>
      <anchorfile>classNTreeNode.html</anchorfile>
      <anchor>aac96713b6d66f86205bdca7cf809db38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NodeHandle</type>
      <name>parent</name>
      <anchorfile>classNTreeNode.html</anchorfile>
      <anchor>ad922aac27441a12f67e3e89e639176d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NodeHandle</type>
      <name>children</name>
      <anchorfile>classNTreeNode.html</anchorfile>
      <anchor>aa95b7d983b9caa9795aec8e3992de72e</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>NTreeGroup *</type>
      <name>group</name>
      <anchorfile>classNTreeNode.html</anchorfile>
      <anchor>aca6174e76ff903c9551e7b53cab35091</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>aggChildCount</name>
      <anchorfile>classNTreeNode.html</anchorfile>
      <anchor>a83186d99c48f2e261a8ddb03ac7739fd</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>NodeHandle</type>
      <name>siblings</name>
      <anchorfile>classNTreeNode.html</anchorfile>
      <anchor>a2f1c09cd620149e3e80a05161ad51c65</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; NodeHandle &gt;</type>
      <name>childChildren</name>
      <anchorfile>classNTreeNode.html</anchorfile>
      <anchor>aa24092663820bbbc2efd0c4137fb3b2c</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>lastPing</name>
      <anchorfile>classNTreeNode.html</anchorfile>
      <anchor>af3c680bcc4dfa0c9275e0db41c8775e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>parentIsRoot</name>
      <anchorfile>classNTreeNode.html</anchorfile>
      <anchor>a0867bf259f0a876756cea5947a016c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classNTreeNode.html</anchorfile>
      <anchor>a1705552d32c966e4bffdb6c07e83fb52</anchor>
      <arglist>(const NTreeNode &amp;a, const NTreeNode &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classNTreeNode.html</anchorfile>
      <anchor>a5532f9ac59a844ce33fe7ed8cb39cd06</anchor>
      <arglist>(const NTreeNode &amp;a, const NTreeNode &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classNTreeNode.html</anchorfile>
      <anchor>aa7dcfd80bfada313666a3c651278192f</anchor>
      <arglist>(std::ostream &amp;Stream, const NTreeNode &amp;node)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NTreeNodePingCall</name>
    <filename>classNTreeNodePingCall.html</filename>
    <base>NTreePingCall</base>
    <member kind="function">
      <type></type>
      <name>NTreeNodePingCall</name>
      <anchorfile>classNTreeNodePingCall.html</anchorfile>
      <anchor>a88fba66c8053ab1ed07920c3fdce0c62</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NTreeNodePingCall</name>
      <anchorfile>classNTreeNodePingCall.html</anchorfile>
      <anchor>a48e6ea270332c650fb19a2e4babe5f6e</anchor>
      <arglist>(const NTreeNodePingCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NTreeNodePingCall</name>
      <anchorfile>classNTreeNodePingCall.html</anchorfile>
      <anchor>a3d541f26c55de94156069788384bd643</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NTreeNodePingCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classNTreeNodePingCall.html</anchorfile>
      <anchor>a768a9c4cc7c81a0e71f9882fd38c33e8</anchor>
      <arglist>(const NTreeNodePingCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NTreeNodePingCall *</type>
      <name>dup</name>
      <anchorfile>classNTreeNodePingCall.html</anchorfile>
      <anchor>a2eb7921a71acfb091c5b764bfcfc12c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classNTreeNodePingCall.html</anchorfile>
      <anchor>a2163a687e50c19bab9b5e09fd68e92fa</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classNTreeNodePingCall.html</anchorfile>
      <anchor>a9caf82cdb3449d1c78679cc3cbb01d58</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSiblingsArraySize</name>
      <anchorfile>classNTreeNodePingCall.html</anchorfile>
      <anchor>a23cef2ade59cb91ff7ee8402dd73e726</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getSiblings</name>
      <anchorfile>classNTreeNodePingCall.html</anchorfile>
      <anchor>abc37f767122aa9fec83924c8e7f7065a</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getSiblings</name>
      <anchorfile>classNTreeNodePingCall.html</anchorfile>
      <anchor>a0452176d6eecc386d834117f46b8f714</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSiblings</name>
      <anchorfile>classNTreeNodePingCall.html</anchorfile>
      <anchor>a5812dc7b05a535b84623016ea1b72c1f</anchor>
      <arglist>(unsigned int k, const NodeHandle &amp;siblings)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getQuadrant</name>
      <anchorfile>classNTreeNodePingCall.html</anchorfile>
      <anchor>aabb7433c27f29ce471ee9d489c05dcf2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setQuadrant</name>
      <anchorfile>classNTreeNodePingCall.html</anchorfile>
      <anchor>a21cd296310cde3208d6a0349b959eb3f</anchor>
      <arglist>(int quadrant)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classNTreeNodePingCall.html</anchorfile>
      <anchor>ab8c128288262ba996b9e118c31beee4a</anchor>
      <arglist>(const NTreeNodePingCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>siblings_var</name>
      <anchorfile>classNTreeNodePingCall.html</anchorfile>
      <anchor>a14f2d06902f3a4d65fd5d131135065c6</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>quadrant_var</name>
      <anchorfile>classNTreeNodePingCall.html</anchorfile>
      <anchor>ae578f7217c2d094f552835bf385424e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classNTreeNodePingCall.html</anchorfile>
      <anchor>a61087b65041eb2bf1e776bf76c5a836e</anchor>
      <arglist>(const NTreeNodePingCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NTreeNodePingResponse</name>
    <filename>classNTreeNodePingResponse.html</filename>
    <base>NTreePingResponse</base>
    <member kind="function">
      <type></type>
      <name>NTreeNodePingResponse</name>
      <anchorfile>classNTreeNodePingResponse.html</anchorfile>
      <anchor>a641ff1b6e267d83778e39a7e9430dda3</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NTreeNodePingResponse</name>
      <anchorfile>classNTreeNodePingResponse.html</anchorfile>
      <anchor>a18b84f52b390b18649040837cc964294</anchor>
      <arglist>(const NTreeNodePingResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NTreeNodePingResponse</name>
      <anchorfile>classNTreeNodePingResponse.html</anchorfile>
      <anchor>a2e16b15b1c560b674368bcf5286808c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NTreeNodePingResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classNTreeNodePingResponse.html</anchorfile>
      <anchor>a47ab26a6f55d6951b0c729d36a532fce</anchor>
      <arglist>(const NTreeNodePingResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NTreeNodePingResponse *</type>
      <name>dup</name>
      <anchorfile>classNTreeNodePingResponse.html</anchorfile>
      <anchor>a6548a8490b4f38e8bd985d76607b452f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classNTreeNodePingResponse.html</anchorfile>
      <anchor>a0a0908e6aa048b5fa9fc22ec34b535a6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classNTreeNodePingResponse.html</anchorfile>
      <anchor>aa9d38ca3a9f844436d8d559c1f4106be</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMembersArraySize</name>
      <anchorfile>classNTreeNodePingResponse.html</anchorfile>
      <anchor>abcde803c907c803230509142da29036e</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getMembersArraySize</name>
      <anchorfile>classNTreeNodePingResponse.html</anchorfile>
      <anchor>a73d81a941602bc40957a486caeb26503</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getMembers</name>
      <anchorfile>classNTreeNodePingResponse.html</anchorfile>
      <anchor>a1e455b9958a3fe428427482e50c63052</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getMembers</name>
      <anchorfile>classNTreeNodePingResponse.html</anchorfile>
      <anchor>a9d35087f31ec053c94f5ca7ee2f6a6b3</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMembers</name>
      <anchorfile>classNTreeNodePingResponse.html</anchorfile>
      <anchor>a5421f8da94292b63100331d6f2ad81c4</anchor>
      <arglist>(unsigned int k, const NodeHandle &amp;members)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getAggChildCount</name>
      <anchorfile>classNTreeNodePingResponse.html</anchorfile>
      <anchor>aa55b4a86b7854b11820f5061e08f0fbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAggChildCount</name>
      <anchorfile>classNTreeNodePingResponse.html</anchorfile>
      <anchor>a9fa9f5edc29141c919066de892ce95be</anchor>
      <arglist>(int aggChildCount)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classNTreeNodePingResponse.html</anchorfile>
      <anchor>a8700d4f64b7786239f2287819e780aac</anchor>
      <arglist>(const NTreeNodePingResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle *</type>
      <name>members_var</name>
      <anchorfile>classNTreeNodePingResponse.html</anchorfile>
      <anchor>acdad1672225ec53c4f2b6933de3ff769</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>members_arraysize</name>
      <anchorfile>classNTreeNodePingResponse.html</anchorfile>
      <anchor>a248333c91a4c738e144db98742a4a4aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>aggChildCount_var</name>
      <anchorfile>classNTreeNodePingResponse.html</anchorfile>
      <anchor>aeea999e225699bcdb546f79c6585b5de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classNTreeNodePingResponse.html</anchorfile>
      <anchor>a620ce295477204407cbce48f42ae9770</anchor>
      <arglist>(const NTreeNodePingResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NTreePingCall</name>
    <filename>classNTreePingCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>NTreePingCall</name>
      <anchorfile>classNTreePingCall.html</anchorfile>
      <anchor>a572be36551ce5dbd947aa84167c9ec3c</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NTreePingCall</name>
      <anchorfile>classNTreePingCall.html</anchorfile>
      <anchor>a20267e79548a0ee84c01cd668a9b3d39</anchor>
      <arglist>(const NTreePingCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NTreePingCall</name>
      <anchorfile>classNTreePingCall.html</anchorfile>
      <anchor>a2a89f4730d1d10e059b8b2e0c35f3c78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NTreePingCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classNTreePingCall.html</anchorfile>
      <anchor>ac694b00406a954ac394979929c81dac8</anchor>
      <arglist>(const NTreePingCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NTreePingCall *</type>
      <name>dup</name>
      <anchorfile>classNTreePingCall.html</anchorfile>
      <anchor>ae52e91d11118cfde362898177368e2eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classNTreePingCall.html</anchorfile>
      <anchor>ae723b9f4ee63b0f95fcd96059dc4db85</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classNTreePingCall.html</anchorfile>
      <anchor>abdbbcd0b5b8f388c3e2522ae77a3a545</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector2D &amp;</type>
      <name>getOrigin</name>
      <anchorfile>classNTreePingCall.html</anchorfile>
      <anchor>adb4e2eddcf36b68636bd48ac6219a7d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Vector2D &amp;</type>
      <name>getOrigin</name>
      <anchorfile>classNTreePingCall.html</anchorfile>
      <anchor>a6b7b1631bb1c46460e86a216320db64c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOrigin</name>
      <anchorfile>classNTreePingCall.html</anchorfile>
      <anchor>a6c6fe1dd97fc51353057ff1e03ed1e65</anchor>
      <arglist>(const Vector2D &amp;origin)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSize</name>
      <anchorfile>classNTreePingCall.html</anchorfile>
      <anchor>aed2ed9b76abdd52062d5b81ae556acb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSize</name>
      <anchorfile>classNTreePingCall.html</anchorfile>
      <anchor>a8586b060fdb16a77aeb8a18101ef9fc6</anchor>
      <arglist>(double size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getParent</name>
      <anchorfile>classNTreePingCall.html</anchorfile>
      <anchor>a7042568ebc1a9a1fc5fe0c404ed36fdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getParent</name>
      <anchorfile>classNTreePingCall.html</anchorfile>
      <anchor>a094344de8c43cd6ac0aa40e5a9d76108</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParent</name>
      <anchorfile>classNTreePingCall.html</anchorfile>
      <anchor>a1f86139ce3de91e4d902a18c2a6c5175</anchor>
      <arglist>(const NodeHandle &amp;parent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classNTreePingCall.html</anchorfile>
      <anchor>a6a0dadf1911cd603230c91ea3763d609</anchor>
      <arglist>(const NTreePingCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D</type>
      <name>origin_var</name>
      <anchorfile>classNTreePingCall.html</anchorfile>
      <anchor>af097be943e995ee131cf27dc4c4d4e84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>size_var</name>
      <anchorfile>classNTreePingCall.html</anchorfile>
      <anchor>aa5d98131234c5609cb4fde4c36e4c9fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>parent_var</name>
      <anchorfile>classNTreePingCall.html</anchorfile>
      <anchor>a192acdcc6f211752c5946d1f90e3009d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classNTreePingCall.html</anchorfile>
      <anchor>a29b46e66517c4feb13a658017b3ffbd6</anchor>
      <arglist>(const NTreePingCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NTreePingContext</name>
    <filename>classNTreePingContext.html</filename>
    <member kind="function">
      <type></type>
      <name>NTreePingContext</name>
      <anchorfile>classNTreePingContext.html</anchorfile>
      <anchor>a0bbc9cc6951f161b5463325deacf6d2d</anchor>
      <arglist>(const NTreeScope &amp;_scope, unsigned int _quadrant)</arglist>
    </member>
    <member kind="variable">
      <type>NTreeScope</type>
      <name>nodeScope</name>
      <anchorfile>classNTreePingContext.html</anchorfile>
      <anchor>aef2916d4be2f8f87ec3ce48acacb8b4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>quadrant</name>
      <anchorfile>classNTreePingContext.html</anchorfile>
      <anchor>aeec1d353fa3367f8574ac38caf1180d9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NTreePingResponse</name>
    <filename>classNTreePingResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>NTreePingResponse</name>
      <anchorfile>classNTreePingResponse.html</anchorfile>
      <anchor>a8673f41bfd0e9010428c03ffcaa463f1</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NTreePingResponse</name>
      <anchorfile>classNTreePingResponse.html</anchorfile>
      <anchor>a76207151d081dc121edda22da1b3f17a</anchor>
      <arglist>(const NTreePingResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NTreePingResponse</name>
      <anchorfile>classNTreePingResponse.html</anchorfile>
      <anchor>ab4ff70749832479912b240a8ac5c83f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NTreePingResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classNTreePingResponse.html</anchorfile>
      <anchor>aab8804c9f8c329c3f029fb03b2a690c6</anchor>
      <arglist>(const NTreePingResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NTreePingResponse *</type>
      <name>dup</name>
      <anchorfile>classNTreePingResponse.html</anchorfile>
      <anchor>ab742c51b8d7f9b7c9fd4bf1afdd5fe72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classNTreePingResponse.html</anchorfile>
      <anchor>a7ed7f8d0ef495de6ab99cfd015f565d7</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classNTreePingResponse.html</anchorfile>
      <anchor>a6dc49155343516306b9fad24e813de10</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classNTreePingResponse.html</anchorfile>
      <anchor>a791f8ffcea4306fa21176521dcd91a85</anchor>
      <arglist>(const NTreePingResponse &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classNTreePingResponse.html</anchorfile>
      <anchor>a80af73b7178e0146720dac3ce9b7f61d</anchor>
      <arglist>(const NTreePingResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NTreeReplaceNodeMessage</name>
    <filename>classNTreeReplaceNodeMessage.html</filename>
    <base>BaseOverlayMessage</base>
    <member kind="function">
      <type></type>
      <name>NTreeReplaceNodeMessage</name>
      <anchorfile>classNTreeReplaceNodeMessage.html</anchorfile>
      <anchor>a679de87ac88d0a6dae9a2b3034d9478c</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NTreeReplaceNodeMessage</name>
      <anchorfile>classNTreeReplaceNodeMessage.html</anchorfile>
      <anchor>aa9a6c51274d2028d08431775c44a850b</anchor>
      <arglist>(const NTreeReplaceNodeMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NTreeReplaceNodeMessage</name>
      <anchorfile>classNTreeReplaceNodeMessage.html</anchorfile>
      <anchor>ae071c7f126682e5c5ecc0a94b7fd0acd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NTreeReplaceNodeMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classNTreeReplaceNodeMessage.html</anchorfile>
      <anchor>a0050f7ee8e65f1b2cced564fbb23792e</anchor>
      <arglist>(const NTreeReplaceNodeMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NTreeReplaceNodeMessage *</type>
      <name>dup</name>
      <anchorfile>classNTreeReplaceNodeMessage.html</anchorfile>
      <anchor>aaa474a6fc66f9e03dbe3efdac1cb2c31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classNTreeReplaceNodeMessage.html</anchorfile>
      <anchor>a5ea6d528d25b12922c22a0f3ecd02b3e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classNTreeReplaceNodeMessage.html</anchorfile>
      <anchor>adfef81fd37198a6501ef095e1e8a2591</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector2D &amp;</type>
      <name>getOrigin</name>
      <anchorfile>classNTreeReplaceNodeMessage.html</anchorfile>
      <anchor>ae8e07624f0b58b71136aab3d93d63cc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Vector2D &amp;</type>
      <name>getOrigin</name>
      <anchorfile>classNTreeReplaceNodeMessage.html</anchorfile>
      <anchor>acd06446a2b858b42e94f33db0a677a5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOrigin</name>
      <anchorfile>classNTreeReplaceNodeMessage.html</anchorfile>
      <anchor>af977d45900282ba491453bdd774aaed9</anchor>
      <arglist>(const Vector2D &amp;origin)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSize</name>
      <anchorfile>classNTreeReplaceNodeMessage.html</anchorfile>
      <anchor>ac94d284124db0a31c06eb3e0cec1bb5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSize</name>
      <anchorfile>classNTreeReplaceNodeMessage.html</anchorfile>
      <anchor>aa0c5ac6818f77708e35c75747eca10e3</anchor>
      <arglist>(double size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getParent</name>
      <anchorfile>classNTreeReplaceNodeMessage.html</anchorfile>
      <anchor>aafde1525f58a367f5bb1b312375c224e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getParent</name>
      <anchorfile>classNTreeReplaceNodeMessage.html</anchorfile>
      <anchor>a862d5f6342f5be0e2acdce8504715f57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParent</name>
      <anchorfile>classNTreeReplaceNodeMessage.html</anchorfile>
      <anchor>a76755e23859f97952a88d3f8969f1577</anchor>
      <arglist>(const NodeHandle &amp;parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChildrenArraySize</name>
      <anchorfile>classNTreeReplaceNodeMessage.html</anchorfile>
      <anchor>aafad2da57f24946d4909e4c0ac1cb272</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getChildrenArraySize</name>
      <anchorfile>classNTreeReplaceNodeMessage.html</anchorfile>
      <anchor>ae18cdb7819f6615e07f8cbe770890e2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getChildren</name>
      <anchorfile>classNTreeReplaceNodeMessage.html</anchorfile>
      <anchor>abd0787cc60bf364e75fd974fa2f781d6</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getChildren</name>
      <anchorfile>classNTreeReplaceNodeMessage.html</anchorfile>
      <anchor>a256e6f2b18a42545a4b41a13f8cc0c18</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChildren</name>
      <anchorfile>classNTreeReplaceNodeMessage.html</anchorfile>
      <anchor>a92a12934f4e35d4be42f687acbaf6ad9</anchor>
      <arglist>(unsigned int k, const NodeHandle &amp;children)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransportAddress &amp;</type>
      <name>getOldNode</name>
      <anchorfile>classNTreeReplaceNodeMessage.html</anchorfile>
      <anchor>a1923d9e58b375f82705d13ce16be5d60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TransportAddress &amp;</type>
      <name>getOldNode</name>
      <anchorfile>classNTreeReplaceNodeMessage.html</anchorfile>
      <anchor>a84ab2cf6e520bf0e26ad9fbda6c3aefb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOldNode</name>
      <anchorfile>classNTreeReplaceNodeMessage.html</anchorfile>
      <anchor>a9a3665f3aaa005dec901a23baf176e21</anchor>
      <arglist>(const TransportAddress &amp;oldNode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getIsLeaf</name>
      <anchorfile>classNTreeReplaceNodeMessage.html</anchorfile>
      <anchor>acf64a04a001904eb5a8893b70dc3cfe6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsLeaf</name>
      <anchorfile>classNTreeReplaceNodeMessage.html</anchorfile>
      <anchor>a33b5baf77becd981daf1237947eff504</anchor>
      <arglist>(bool isLeaf)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classNTreeReplaceNodeMessage.html</anchorfile>
      <anchor>a64fa967968463d5e85e56baad937bcc7</anchor>
      <arglist>(const NTreeReplaceNodeMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D</type>
      <name>origin_var</name>
      <anchorfile>classNTreeReplaceNodeMessage.html</anchorfile>
      <anchor>a650d738d277e7211c6d243e71c8e4e15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>size_var</name>
      <anchorfile>classNTreeReplaceNodeMessage.html</anchorfile>
      <anchor>a3413401d4c6d313940fcd066763034d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>parent_var</name>
      <anchorfile>classNTreeReplaceNodeMessage.html</anchorfile>
      <anchor>a4bf5a190aebea4fb4a0f075ca8e555f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle *</type>
      <name>children_var</name>
      <anchorfile>classNTreeReplaceNodeMessage.html</anchorfile>
      <anchor>a081e6f3e4cfcdf29a4b313f389e1bbc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>children_arraysize</name>
      <anchorfile>classNTreeReplaceNodeMessage.html</anchorfile>
      <anchor>aae103f9586beccc048dbd4fbce039522</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress</type>
      <name>oldNode_var</name>
      <anchorfile>classNTreeReplaceNodeMessage.html</anchorfile>
      <anchor>a18f963e6a54b706f33969fcc934fc6bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isLeaf_var</name>
      <anchorfile>classNTreeReplaceNodeMessage.html</anchorfile>
      <anchor>ad14afbf079e04cf185f4881f39433de6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classNTreeReplaceNodeMessage.html</anchorfile>
      <anchor>a4b673416b26d9072cc02b91713589125</anchor>
      <arglist>(const NTreeReplaceNodeMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NTreeScope</name>
    <filename>classNTreeScope.html</filename>
    <member kind="function">
      <type></type>
      <name>NTreeScope</name>
      <anchorfile>classNTreeScope.html</anchorfile>
      <anchor>a73f5a4e2b79ac4f2073ed9e646eab941</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NTreeScope</name>
      <anchorfile>classNTreeScope.html</anchorfile>
      <anchor>a4529200c00b94246b4f19528d2642aeb</anchor>
      <arglist>(const Vector2D &amp;_origin, double _size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classNTreeScope.html</anchorfile>
      <anchor>a8bf3cabeb8379c2f9429d2a478e38abc</anchor>
      <arglist>(const Vector2D &amp;_origin, double _size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classNTreeScope.html</anchorfile>
      <anchor>aac57ba40a168b06623a63c0e20c7c56d</anchor>
      <arglist>(const Vector2D &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>NTreeScope</type>
      <name>getSubScope</name>
      <anchorfile>classNTreeScope.html</anchorfile>
      <anchor>aecb6a6e39493200fb0557bd5e26cc22b</anchor>
      <arglist>(unsigned int quadrant) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classNTreeScope.html</anchorfile>
      <anchor>ad5827a6d37670a00f03061058b1d3c6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Vector2D</type>
      <name>origin</name>
      <anchorfile>classNTreeScope.html</anchorfile>
      <anchor>a8c3432b5d17f08b586e20113bad02428</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>size</name>
      <anchorfile>classNTreeScope.html</anchorfile>
      <anchor>a3988c5bd6a66a74ffb1fcc5ea91fc653</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classNTreeScope.html</anchorfile>
      <anchor>a486fe4e820ed13e737c88f8811330667</anchor>
      <arglist>(const NTreeScope &amp;a, const NTreeScope &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classNTreeScope.html</anchorfile>
      <anchor>aa01bd63b0cb816e910feae98484af245</anchor>
      <arglist>(const NTreeScope &amp;a, const NTreeScope &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classNTreeScope.html</anchorfile>
      <anchor>a26a856600777f0c399e7aea607d446c1</anchor>
      <arglist>(std::ostream &amp;Stream, const NTreeScope &amp;scope)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NTreeTakeOverMessage</name>
    <filename>classNTreeTakeOverMessage.html</filename>
    <base>BaseOverlayMessage</base>
    <member kind="function">
      <type></type>
      <name>NTreeTakeOverMessage</name>
      <anchorfile>classNTreeTakeOverMessage.html</anchorfile>
      <anchor>aeaf521ab4d1d20d0e91a57994d45c504</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NTreeTakeOverMessage</name>
      <anchorfile>classNTreeTakeOverMessage.html</anchorfile>
      <anchor>a306f36f3a418770090689556512da234</anchor>
      <arglist>(const NTreeTakeOverMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NTreeTakeOverMessage</name>
      <anchorfile>classNTreeTakeOverMessage.html</anchorfile>
      <anchor>afe91aba0e4486e4fa9c18afe061808f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NTreeTakeOverMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classNTreeTakeOverMessage.html</anchorfile>
      <anchor>a49dc2f55969cd3b20fcbb3d2b4da65f5</anchor>
      <arglist>(const NTreeTakeOverMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NTreeTakeOverMessage *</type>
      <name>dup</name>
      <anchorfile>classNTreeTakeOverMessage.html</anchorfile>
      <anchor>a16ecb43126e99dfae1d00423ed838d77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classNTreeTakeOverMessage.html</anchorfile>
      <anchor>acde2c406787bf1ef16422103ce56b68c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classNTreeTakeOverMessage.html</anchorfile>
      <anchor>aac47be590e7429f79a8a133f89ec5415</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector2D &amp;</type>
      <name>getOrigin</name>
      <anchorfile>classNTreeTakeOverMessage.html</anchorfile>
      <anchor>a290a1f3b9b443e9e56cdc7e3b3643cf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Vector2D &amp;</type>
      <name>getOrigin</name>
      <anchorfile>classNTreeTakeOverMessage.html</anchorfile>
      <anchor>a3a48dc662af7c83d0ee3719ddc08e5c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOrigin</name>
      <anchorfile>classNTreeTakeOverMessage.html</anchorfile>
      <anchor>a9441f6e9338a7124f86f16c5bfe814fe</anchor>
      <arglist>(const Vector2D &amp;origin)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSize</name>
      <anchorfile>classNTreeTakeOverMessage.html</anchorfile>
      <anchor>a68538c416413d00eda2370afe7910f4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSize</name>
      <anchorfile>classNTreeTakeOverMessage.html</anchorfile>
      <anchor>af946adffe8cc743800643fb4191635e7</anchor>
      <arglist>(double size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getPlayer</name>
      <anchorfile>classNTreeTakeOverMessage.html</anchorfile>
      <anchor>aad4b17e14e9e4d0e772ae319ace3cfea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getPlayer</name>
      <anchorfile>classNTreeTakeOverMessage.html</anchorfile>
      <anchor>aaa29c8440601a695010f603e705d8183</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPlayer</name>
      <anchorfile>classNTreeTakeOverMessage.html</anchorfile>
      <anchor>a84210770652cfd71e9c17fa897170639</anchor>
      <arglist>(const NodeHandle &amp;player)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classNTreeTakeOverMessage.html</anchorfile>
      <anchor>a359a3aedbf2064465c19d8927cbebd97</anchor>
      <arglist>(const NTreeTakeOverMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D</type>
      <name>origin_var</name>
      <anchorfile>classNTreeTakeOverMessage.html</anchorfile>
      <anchor>ae2c524e37fa40630fa1165f081772fa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>size_var</name>
      <anchorfile>classNTreeTakeOverMessage.html</anchorfile>
      <anchor>a7b979cf1d1f6ef5e692db1887be54eab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>player_var</name>
      <anchorfile>classNTreeTakeOverMessage.html</anchorfile>
      <anchor>a305ebb5545e5d7cbe1f3b71b0b8ad2e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classNTreeTakeOverMessage.html</anchorfile>
      <anchor>a14e7e940a662cecfbdcfa80390387b76</anchor>
      <arglist>(const NTreeTakeOverMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OverlayAccess</name>
    <filename>classOverlayAccess.html</filename>
    <member kind="function">
      <type>BaseOverlay *</type>
      <name>get</name>
      <anchorfile>classOverlayAccess.html</anchorfile>
      <anchor>a121dd3e5c500294f55ed89dec818bccc</anchor>
      <arglist>(cModule *refMod)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OverlayCtrlInfo</name>
    <filename>classOverlayCtrlInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>OverlayCtrlInfo</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>ad3a59f484b0871ffd967a93b6865af42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OverlayCtrlInfo</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>a347700e47b524f80dc7de9cbb8733a79</anchor>
      <arglist>(const OverlayCtrlInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OverlayCtrlInfo</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>a4b1c7840f5b995f5b7d609c451648b7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OverlayCtrlInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>a0a23a44cbda47b5ac45c29741e3c78c4</anchor>
      <arglist>(const OverlayCtrlInfo &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayCtrlInfo *</type>
      <name>dup</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>a1b99032b237adcd9d9fc540aa672b63b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>a55df98b4af7a147ca244c94b79bee0a1</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>ad345112dad77a3162c4152ab58430f88</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransportAddress &amp;</type>
      <name>getLastHop</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>ad12b7ac74244fb7ab79ebf41e05fe79c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TransportAddress &amp;</type>
      <name>getLastHop</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>a4b3ea3a8caaaa5ef41ce4bd301acce02</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLastHop</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>a9d6567bfe6cfeed2323b975f8ad1422f</anchor>
      <arglist>(const TransportAddress &amp;lastHop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getSrcNode</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>af6e31869ed325ba04288a69346988343</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getSrcNode</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>ab18c45d32c6388f125d695b559cc37ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcNode</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>a033544e6c2005d7d468cab33547292b8</anchor>
      <arglist>(const NodeHandle &amp;srcNode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getSrcRoute</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>ad1a712f1757d7441e1a74ad98bfd71f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getSrcRoute</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>a7881b4bc888a89944ef450b75464d05b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcRoute</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>a5a7c2dbadb3b6878d0d34a8fe65590d1</anchor>
      <arglist>(const NodeHandle &amp;srcRoute)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getHopCount</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>a76fd4681ebb00eb023e35a88e4ba9042</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHopCount</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>ac038719715302b645e9f13fdb85db75b</anchor>
      <arglist>(int hopCount)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setVisitedHopsArraySize</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>abc4f5e4539b4858443cf29523727a995</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getVisitedHopsArraySize</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>a38e9356d609483149c5676dc9f306466</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransportAddress &amp;</type>
      <name>getVisitedHops</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>adae6a08b83220c3317cd0d42b761298e</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TransportAddress &amp;</type>
      <name>getVisitedHops</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>a1317d9b10041894bf629b9b934266435</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setVisitedHops</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>ad74efeab61d168e97bde39075847b127</anchor>
      <arglist>(unsigned int k, const TransportAddress &amp;visitedHops)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSrcComp</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>a79a35b8f98c2fecef8d6bc566c4a7437</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcComp</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>a7f814b40a36e2d8c30efab47d61ebfb3</anchor>
      <arglist>(int srcComp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDestComp</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>a082f26c9d0cac0aec9ca23da4d338134</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestComp</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>adcf0261f01c139a8604483cf240226f3</anchor>
      <arglist>(int destComp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTransportType</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>ad80a56dfc9e2b8c5bc12994fee6adda2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransportType</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>a36db08008216830aaa46b21ee16db58a</anchor>
      <arglist>(int transportType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRoutingType</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>a4b81411df66c4c813b664665731ee38c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRoutingType</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>a3a396692c3655f8277f57d8ca8bdb311</anchor>
      <arglist>(int routingType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>a7cebb1269e4c8043ec5ded9582ff6527</anchor>
      <arglist>(const OverlayCtrlInfo &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress</type>
      <name>lastHop_var</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>aea34dc3b2fa56f6ceb8cd8df320ff4a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>srcNode_var</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>a5072f3fe233c5046e075c3e08cd08549</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>srcRoute_var</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>a58b303ff3994b247a5f4954088ed5ccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>hopCount_var</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>a9aa3f5d0a64ed03357590ec751db4dc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress *</type>
      <name>visitedHops_var</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>abbe650cd867b4067214ac79ae22eb369</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>visitedHops_arraysize</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>abb9fb069ea685db03d5829e92b5743bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>srcComp_var</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>adffc1fd50a8aafaf0ac6e208f26e1de7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>destComp_var</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>a1897c09dca5cccba8343f60fc2e8f547</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>transportType_var</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>a8ad6aa1dbafea7d634cb90556e4ea151</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>routingType_var</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>a4747496497e69114482b93caab21c7c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classOverlayCtrlInfo.html</anchorfile>
      <anchor>ae2b5b62d35640add85a2063ef32ed5b3</anchor>
      <arglist>(const OverlayCtrlInfo &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OverlayDummy</name>
    <filename>classOverlayDummy.html</filename>
    <base>BaseOverlay</base>
  </compound>
  <compound kind="class">
    <name>OverlayKey</name>
    <filename>classOverlayKey.html</filename>
    <member kind="function">
      <type></type>
      <name>OverlayKey</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a73fe91f2acd48e5c5b6e2f63c0967d81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OverlayKey</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a4f2224bfdbbf5cc7a12b24a5ea2b23c2</anchor>
      <arglist>(uint32_t num)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OverlayKey</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a3bcf70f4c6d5291649ab4848abb2a1fc</anchor>
      <arglist>(const unsigned char *buffer, uint32_t size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OverlayKey</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>aca544e676e22418d4c6e2a0b7233152b</anchor>
      <arglist>(const std::string &amp;str, uint32_t base=16)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OverlayKey</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>ac8e43e3f86ea7eceaea9afd60301b2be</anchor>
      <arglist>(const OverlayKey &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OverlayKey</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a64f940f1232e25a5945f1007e20c1208</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>aabeb4fd284a630a82e982ba34ece4fd9</anchor>
      <arglist>(uint32_t base=16) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnspecified</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>abe357a4d1babcf7d30598a61cbc0f5c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>aef695d6de1968725dabb477bbb3d5ebd</anchor>
      <arglist>(const OverlayKey &amp;compKey) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>ab93c223d7040435654cf7034c0d3c84e</anchor>
      <arglist>(const OverlayKey &amp;compKey) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a7dcf5946ae44b88f1060eb3b6eee561a</anchor>
      <arglist>(const OverlayKey &amp;compKey) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a38ac146c5f19445ac9ffecfed2f68015</anchor>
      <arglist>(const OverlayKey &amp;compKey) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a9598893cdc8d99b045d0ead8badad426</anchor>
      <arglist>(const OverlayKey &amp;compKey) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a58a47ff01988eb9af5e2cf7dfc58eb06</anchor>
      <arglist>(const OverlayKey &amp;compKey) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareTo</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a9ddb96bce3b4355ab8262db7be885ae8</anchor>
      <arglist>(const OverlayKey &amp;compKey) const </arglist>
    </member>
    <member kind="function">
      <type>OverlayKey &amp;</type>
      <name>operator=</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a2cc3c3b50974326cbae3a4a307056acc</anchor>
      <arglist>(const OverlayKey &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>OverlayKey &amp;</type>
      <name>operator--</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a2f686ce6a41ee67b7e62b36032153dfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OverlayKey &amp;</type>
      <name>operator++</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a66a83e4a9d9b32ceaab04779e2492bff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OverlayKey &amp;</type>
      <name>operator+=</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a2590542074b39b84a3752d4ffd9137ae</anchor>
      <arglist>(const OverlayKey &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>OverlayKey &amp;</type>
      <name>operator-=</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a7911f9fb0c3f82d441a6bcd9785a2a9a</anchor>
      <arglist>(const OverlayKey &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>OverlayKey</type>
      <name>operator+</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a6a54924bf695eb4d8892b68249c383d8</anchor>
      <arglist>(const OverlayKey &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>OverlayKey</type>
      <name>operator-</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a1271bbe67df3b2c3c5fb5474ea97e721</anchor>
      <arglist>(const OverlayKey &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>OverlayKey</type>
      <name>operator--</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a79a53818dc88136bd0425e449a252f0b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>OverlayKey</type>
      <name>operator++</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a0282ae69e2af98b20e88a15d261871a2</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>OverlayKey</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>adf2b4f65896e3f82d9f4a0180e94acd5</anchor>
      <arglist>(uint32_t num) const </arglist>
    </member>
    <member kind="function">
      <type>OverlayKey</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a0eab17afc85ae7327edb3bcb63fdaaf4</anchor>
      <arglist>(uint32_t num) const </arglist>
    </member>
    <member kind="function">
      <type>OverlayKey</type>
      <name>operator&amp;</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>afbd31bc8ab5ff481aed57f87b4da6722</anchor>
      <arglist>(const OverlayKey &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>OverlayKey</type>
      <name>operator|</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a03465c1b6d6925769bcfebb0860443b6</anchor>
      <arglist>(const OverlayKey &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>OverlayKey</type>
      <name>operator^</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a8160586eebf95e0bfc299b94a1803412</anchor>
      <arglist>(const OverlayKey &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>OverlayKey</type>
      <name>operator~</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a1d9e5143d8d259776d3e3987ac235462</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OverlayKeyBit</type>
      <name>operator[]</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a13f18c4190b9c1e21d4131b0609e2d90</anchor>
      <arglist>(uint32_t n)</arglist>
    </member>
    <member kind="function">
      <type>OverlayKey &amp;</type>
      <name>setBit</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a557441f4e89a3f5b90832ca8c1bfc46f</anchor>
      <arglist>(uint32_t pos, bool value)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getBitRange</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a25b2a67642f29fe2035a0abf74de3dd1</anchor>
      <arglist>(uint32_t p, uint32_t n) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>toDouble</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>af20e74dc048e549ff6f8834b6f8ed567</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getBit</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>abf5c47662357fb4f01de9a7a93523308</anchor>
      <arglist>(uint32_t p) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>hash</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a466e53c3e7fb4fc84eb1e1dd74d8a605</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>log_2</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a17623efad9f966e1150560debf01f6d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OverlayKey</type>
      <name>randomSuffix</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>ab86948c33964414615c4a22713e963a5</anchor>
      <arglist>(uint32_t pos) const </arglist>
    </member>
    <member kind="function">
      <type>OverlayKey</type>
      <name>randomPrefix</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a4211d25ad38c7c8eb2dc116d1c52d599</anchor>
      <arglist>(uint32_t pos) const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>sharedPrefixLength</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a0a44da45d3d52ce2ad76dad4e06a2888</anchor>
      <arglist>(const OverlayKey &amp;compKey, uint32_t bitsPerDigit=1) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBetween</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a4fa622c1f48d20712fe558b17f1187a5</anchor>
      <arglist>(const OverlayKey &amp;keyA, const OverlayKey &amp;keyB) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBetweenR</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a645cffcac74842ae00e476cd6dba3635</anchor>
      <arglist>(const OverlayKey &amp;keyA, const OverlayKey &amp;keyB) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBetweenL</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a4709048a05f57ea96d5b058ba9b7090b</anchor>
      <arglist>(const OverlayKey &amp;keyA, const OverlayKey &amp;keyB) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBetweenLR</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>af35313562131a78724e31297889be822</anchor>
      <arglist>(const OverlayKey &amp;keyA, const OverlayKey &amp;keyB) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>netPack</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>ac292cd4f0cdaf6ebfdd1d1e4ce6ebcfd</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>netUnpack</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>ae47da8ac7b64c3d692967eed0e2061a0</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setKeyLength</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a4d1b67c81853679686ed8f9d52bade16</anchor>
      <arglist>(uint32_t length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>getLength</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>af855a4dfc0e5dc0d2afc6b87fa1d7426</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OverlayKey</type>
      <name>random</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a1983e1b47e32783f8ccd5e59fe725290</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OverlayKey</type>
      <name>getMax</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a6434b4360f6feec10578daa85001f6c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OverlayKey</type>
      <name>sha1</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>abbd73571f97d27468c417c9b3f91f175</anchor>
      <arglist>(const BinaryValue &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OverlayKey</type>
      <name>pow2</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a1a28cc46fc9289c94401cfa5f492eac9</anchor>
      <arglist>(uint32_t exponent)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>test</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a4db9a2a44507c68d0b10ddec621b8a02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const OverlayKey</type>
      <name>UNSPECIFIED_KEY</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>ac0d4135dff2985e3582fdbed2a37eb75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const OverlayKey</type>
      <name>ZERO</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a7fb11c90a3ce70d71025ffbbe195bf80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const OverlayKey</type>
      <name>ONE</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a51a63dbc089143b7742d7da846a16abd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>trim</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>aa593ff8e03f61a7279ed35a0b8971422</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a09c65afb3c4c11767c668037111a434d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isUnspec</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a4e4dc6e22410bb190396b644f097542f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>mp_limb_t</type>
      <name>key</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a5f7920efc661332d36d3fc661286ddcd</anchor>
      <arglist>[MAX_KEYLENGTH/(8 *sizeof(mp_limb_t))+(MAX_KEYLENGTH%(8 *sizeof(mp_limb_t))!=0?1:0)]</arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const uint32_t</type>
      <name>MAX_KEYLENGTH</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>a9cd30e33f57b67c8c43599de29641865</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static uint32_t</type>
      <name>keyLength</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>ab0966cf73fd160b35834116539500131</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static uint32_t</type>
      <name>aSize</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>ad34c1b920833090c9117c447a76f0454</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static mp_limb_t</type>
      <name>GMP_MSB_MASK</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>aceee76dd8b2e5539770be07f9d5a509d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classOverlayKey.html</anchorfile>
      <anchor>ab306aabd93db7233ea9d97a8ec506244</anchor>
      <arglist>(std::ostream &amp;os, const OverlayKey &amp;c)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OverlayKeyBit</name>
    <filename>classOverlayKeyBit.html</filename>
    <member kind="function">
      <type></type>
      <name>OverlayKeyBit</name>
      <anchorfile>classOverlayKeyBit.html</anchorfile>
      <anchor>aefae0af560e3a088ebdd055de1242092</anchor>
      <arglist>(bool value, uint32_t pos, OverlayKey *key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classOverlayKeyBit.html</anchorfile>
      <anchor>a91d4c6ba0b818156ed654779eaa237bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OverlayKeyBit &amp;</type>
      <name>operator=</name>
      <anchorfile>classOverlayKeyBit.html</anchorfile>
      <anchor>a8cfe26c4cc5020bdc33661cf5e0580f2</anchor>
      <arglist>(const OverlayKeyBit &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>OverlayKeyBit &amp;</type>
      <name>operator=</name>
      <anchorfile>classOverlayKeyBit.html</anchorfile>
      <anchor>a17b42408bbbe853c99573de2158e1c07</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>OverlayKeyBit &amp;</type>
      <name>operator^=</name>
      <anchorfile>classOverlayKeyBit.html</anchorfile>
      <anchor>a483ed41532bd50679a013b5f04b1e218</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>bit</name>
      <anchorfile>classOverlayKeyBit.html</anchorfile>
      <anchor>ad3d75f435b77a963731ed2588db54562</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>pos</name>
      <anchorfile>classOverlayKeyBit.html</anchorfile>
      <anchor>a177914b202123eef6cb957e87af4ba70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OverlayKey *</type>
      <name>key</name>
      <anchorfile>classOverlayKeyBit.html</anchorfile>
      <anchor>a8161ba653263effcf5adea98867742be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OverSimMessage</name>
    <filename>classOverSimMessage.html</filename>
    <base>OverSimMessage_Base</base>
    <member kind="function">
      <type></type>
      <name>OverSimMessage</name>
      <anchorfile>classOverSimMessage.html</anchorfile>
      <anchor>a66e885d4f36adf49f47dcf1c46567839</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OverSimMessage</name>
      <anchorfile>classOverSimMessage.html</anchorfile>
      <anchor>a906d18b38d7b8274e027a923e8d4913d</anchor>
      <arglist>(const OverSimMessage &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>OverSimMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classOverSimMessage.html</anchorfile>
      <anchor>a3fbb5709314010487da85ff8a810b876</anchor>
      <arglist>(const OverSimMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverSimMessage *</type>
      <name>dup</name>
      <anchorfile>classOverSimMessage.html</anchorfile>
      <anchor>a9991ca9217fadccb285e01da91634dcf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classOverSimMessage.html</anchorfile>
      <anchor>a2df6f0d737c821d61646d9a04d7907fb</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classOverSimMessage.html</anchorfile>
      <anchor>a2d163556d9bb4649093732620968deab</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OverSimMessage_Base</name>
    <filename>classOverSimMessage__Base.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OverSimMessage_Base</name>
      <anchorfile>classOverSimMessage__Base.html</anchorfile>
      <anchor>a08be94a0bac394532b0f37fc56077d96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverSimMessage_Base *</type>
      <name>dup</name>
      <anchorfile>classOverSimMessage__Base.html</anchorfile>
      <anchor>ad0ca36a2ad174c4e8efa1d100d724556</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classOverSimMessage__Base.html</anchorfile>
      <anchor>abcb1be23f51ae04ab7d492d87f235d49</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classOverSimMessage__Base.html</anchorfile>
      <anchor>aaad629a62209e7bff2f201cdfec843ec</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classOverSimMessage__Base.html</anchorfile>
      <anchor>aec9bf6af7ca8a78a11c1701943f6c489</anchor>
      <arglist>(const OverSimMessage_Base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>OverSimMessage_Base</name>
      <anchorfile>classOverSimMessage__Base.html</anchorfile>
      <anchor>a7f6dcd26464d2d2d3588ad24b47656bc</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>OverSimMessage_Base</name>
      <anchorfile>classOverSimMessage__Base.html</anchorfile>
      <anchor>a8c3e050a5e78103909869cfebe693f9e</anchor>
      <arglist>(const OverSimMessage_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>OverSimMessage_Base &amp;</type>
      <name>operator=</name>
      <anchorfile>classOverSimMessage__Base.html</anchorfile>
      <anchor>ac319bb253ccf265425ed54a7f56f4cc8</anchor>
      <arglist>(const OverSimMessage_Base &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classOverSimMessage__Base.html</anchorfile>
      <anchor>a668fefe4fd7bb655b91434c1810bacd2</anchor>
      <arglist>(const OverSimMessage_Base &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P2pns</name>
    <filename>classP2pns.html</filename>
    <base>BaseApp</base>
    <class kind="class">P2pns::OverlayKeyObject</class>
    <member kind="function">
      <type></type>
      <name>P2pns</name>
      <anchorfile>classP2pns.html</anchorfile>
      <anchor>aded7e5099688de2ab925f5c0e59a6529</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~P2pns</name>
      <anchorfile>classP2pns.html</anchorfile>
      <anchor>ab5ede910664056674f2c88d157519d63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tunnel</name>
      <anchorfile>classP2pns.html</anchorfile>
      <anchor>a7c80c9643bc1a0c79c0ea8d24c10b30d</anchor>
      <arglist>(const OverlayKey &amp;destKey, const BinaryValue &amp;payload)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerId</name>
      <anchorfile>classP2pns.html</anchorfile>
      <anchor>a723375787fcd5202859a1f88e47f0553</anchor>
      <arglist>(const std::string &amp;addr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleReadyMessage</name>
      <anchorfile>classP2pns.html</anchorfile>
      <anchor>a644ec7524da06d35b4366f8fe660fa74</anchor>
      <arglist>(CompReadyMessage *msg)</arglist>
    </member>
    <member kind="enumeration">
      <name>LookupRpcId</name>
      <anchorfile>classP2pns.html</anchorfile>
      <anchor>a714b455d93dafef3ee9731389c1e2398</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESOLVE_LOOKUP</name>
      <anchorfile>classP2pns.html</anchorfile>
      <anchor>a714b455d93dafef3ee9731389c1e2398a119ba3c5f8e7b1a3f8973e24be379b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TUNNEL_LOOKUP</name>
      <anchorfile>classP2pns.html</anchorfile>
      <anchor>a714b455d93dafef3ee9731389c1e2398a5f4a7bab6bf703ef0d6e6a9840e2aeb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REFRESH_LOOKUP</name>
      <anchorfile>classP2pns.html</anchorfile>
      <anchor>a714b455d93dafef3ee9731389c1e2398a778f51a4e8fd787ada8913a5c8e80b1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initializeApp</name>
      <anchorfile>classP2pns.html</anchorfile>
      <anchor>a2694979aaf8b7c30b068f66df40a22a8</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>finishApp</name>
      <anchorfile>classP2pns.html</anchorfile>
      <anchor>a91d5ba846c164e1b9ba8163f95061da1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classP2pns.html</anchorfile>
      <anchor>a0df65171d255c1ccc29b7f012e9898f2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deliver</name>
      <anchorfile>classP2pns.html</anchorfile>
      <anchor>ad87597d1ed51dbff009c276ae2c5a736</anchor>
      <arglist>(OverlayKey &amp;key, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>sendTunnelMessage</name>
      <anchorfile>classP2pns.html</anchorfile>
      <anchor>a86ed8cc1ec7c9a4d0220f47f0c3aac7e</anchor>
      <arglist>(const TransportAddress &amp;addr, const BinaryValue &amp;payload)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateIdCacheWithNewTransport</name>
      <anchorfile>classP2pns.html</anchorfile>
      <anchor>acabbd0fa061b0442402afd4086ed6c3a</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleTunnelLookupResponse</name>
      <anchorfile>classP2pns.html</anchorfile>
      <anchor>a47d4142f595d5d6008dc3ff765e3e9d5</anchor>
      <arglist>(LookupResponse *lookupResponse)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>handleRpcCall</name>
      <anchorfile>classP2pns.html</anchorfile>
      <anchor>af003aadc765265213568a560bc7a504d</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleRpcResponse</name>
      <anchorfile>classP2pns.html</anchorfile>
      <anchor>a29b7e2609cd1a3141bda0012e6f1d1e6</anchor>
      <arglist>(BaseResponseMessage *msg, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>pingRpcResponse</name>
      <anchorfile>classP2pns.html</anchorfile>
      <anchor>ad99741575de9f1681597bdda146f1744</anchor>
      <arglist>(PingResponse *response, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>pingTimeout</name>
      <anchorfile>classP2pns.html</anchorfile>
      <anchor>a4102f396c4053f34b4c5edd9fa915c12</anchor>
      <arglist>(PingCall *call, const TransportAddress &amp;dest, cPolymorphic *context, int rpcId)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>p2pnsRegisterRpc</name>
      <anchorfile>classP2pns.html</anchorfile>
      <anchor>a297f365b6c15b9ee82e50f52079fd67d</anchor>
      <arglist>(P2pnsRegisterCall *registerCall)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>p2pnsResolveRpc</name>
      <anchorfile>classP2pns.html</anchorfile>
      <anchor>a9a06b5a3cd69be0782a001a348048b08</anchor>
      <arglist>(P2pnsResolveCall *registerCall)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleDHTputCAPIResponse</name>
      <anchorfile>classP2pns.html</anchorfile>
      <anchor>acb0a36114e54c349a6d55f5251204c66</anchor>
      <arglist>(DHTputCAPIResponse *putResponse, P2pnsRegisterCall *registerCall)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleDHTgetCAPIResponse</name>
      <anchorfile>classP2pns.html</anchorfile>
      <anchor>a38b0fc5faeb8337536b749d985e2be14</anchor>
      <arglist>(DHTgetCAPIResponse *gettResponse, P2pnsResolveCall *resolveCall)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleLookupResponse</name>
      <anchorfile>classP2pns.html</anchorfile>
      <anchor>ac6169e8f09c6505c2ace9e4acd29031e</anchor>
      <arglist>(LookupResponse *lookupResponse, cObject *context, int rpcId)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>P2pnsCache *</type>
      <name>p2pnsCache</name>
      <anchorfile>classP2pns.html</anchorfile>
      <anchor>ab802747954a7a9a71871d5ab0a47e718</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>XmlRpcInterface *</type>
      <name>xmlRpcInterface</name>
      <anchorfile>classP2pns.html</anchorfile>
      <anchor>a37b805810a616968c058e5ba96732f35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>twoStageResolution</name>
      <anchorfile>classP2pns.html</anchorfile>
      <anchor>a1da3e8eba6fdd35862876536c141ab3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>keepaliveInterval</name>
      <anchorfile>classP2pns.html</anchorfile>
      <anchor>a7f9c34a27ae524ed3fe8f6acac36d0a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>idCacheLifetime</name>
      <anchorfile>classP2pns.html</anchorfile>
      <anchor>a11dbac35c2b0999d08de770cfb476e62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OverlayKey</type>
      <name>thisId</name>
      <anchorfile>classP2pns.html</anchorfile>
      <anchor>a53769bfb6bbd03974b5c14027ac8cb84</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P2pns::OverlayKeyObject</name>
    <filename>classP2pns_1_1OverlayKeyObject.html</filename>
    <base>OverlayKey</base>
    <member kind="function">
      <type></type>
      <name>OverlayKeyObject</name>
      <anchorfile>classP2pns_1_1OverlayKeyObject.html</anchorfile>
      <anchor>a67152f96fc91e1d65b6b6a15fcb1e615</anchor>
      <arglist>(const OverlayKey &amp;key)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P2pnsCache</name>
    <filename>classP2pnsCache.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classP2pnsCache.html</anchorfile>
      <anchor>aab37286ced92f638c6df664c69182b78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classP2pnsCache.html</anchorfile>
      <anchor>abff0e777ab778691bb54f7d4b1a78012</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classP2pnsCache.html</anchorfile>
      <anchor>a3252f0dd96f23b98f2dad833e0f717fc</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>getSize</name>
      <anchorfile>classP2pnsCache.html</anchorfile>
      <anchor>a02b02d1795f10de902abad6846e5bcd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classP2pnsCache.html</anchorfile>
      <anchor>a82aa4ddb3f2df3345107d4dd4bfa245c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEmpty</name>
      <anchorfile>classP2pnsCache.html</anchorfile>
      <anchor>a300d0031a524bb70d780422d5e20ea71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual P2pnsIdCacheEntry *</type>
      <name>getIdCacheEntry</name>
      <anchorfile>classP2pnsCache.html</anchorfile>
      <anchor>aa9cdc445c8cf1d85665f6d60efe2fc0d</anchor>
      <arglist>(const OverlayKey &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual P2pnsIdCacheEntry *</type>
      <name>addIdCacheEntry</name>
      <anchorfile>classP2pnsCache.html</anchorfile>
      <anchor>a2cfb11e6db76b3caee1f5e8467184b33</anchor>
      <arglist>(const OverlayKey &amp;key, const BinaryValue *payload=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeIdCacheEntry</name>
      <anchorfile>classP2pnsCache.html</anchorfile>
      <anchor>a8e835fe8385e0d6412045d0e401e1905</anchor>
      <arglist>(const OverlayKey &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const BinaryValue &amp;</type>
      <name>getData</name>
      <anchorfile>classP2pnsCache.html</anchorfile>
      <anchor>af1b893aaaa1d336f1e5a11ca5a1285c8</anchor>
      <arglist>(const BinaryValue &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>getTtlMessage</name>
      <anchorfile>classP2pnsCache.html</anchorfile>
      <anchor>a9d26692a2f95f344bb38cad775fab6f8</anchor>
      <arglist>(const BinaryValue &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const BinaryValue &amp;</type>
      <name>getDataAtPos</name>
      <anchorfile>classP2pnsCache.html</anchorfile>
      <anchor>ae91e3c513cdd8779d0a8f721a047828a</anchor>
      <arglist>(uint32_t pos=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addData</name>
      <anchorfile>classP2pnsCache.html</anchorfile>
      <anchor>a7f9e267a7050a16de64d623d22143224</anchor>
      <arglist>(BinaryValue name, BinaryValue value, cMessage *ttlMessage=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeData</name>
      <anchorfile>classP2pnsCache.html</anchorfile>
      <anchor>a6e9fa002a2eae3518bd76873cb623a9f</anchor>
      <arglist>(const BinaryValue &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>display</name>
      <anchorfile>classP2pnsCache.html</anchorfile>
      <anchor>a5b6ca38a6a474a094975c23ea83cfd09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateDisplayString</name>
      <anchorfile>classP2pnsCache.html</anchorfile>
      <anchor>a9440b69adb9751861570339ab6efb047</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateTooltip</name>
      <anchorfile>classP2pnsCache.html</anchorfile>
      <anchor>a652faf7fc6b6ffc22356918098bf6df5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; BinaryValue, P2pnsCacheEntry &gt;</type>
      <name>cache</name>
      <anchorfile>classP2pnsCache.html</anchorfile>
      <anchor>a9f36cbcd3176203da96a36e822691b83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P2pnsIdCache</type>
      <name>idCache</name>
      <anchorfile>classP2pnsCache.html</anchorfile>
      <anchor>a18a58c6a3ae13986c9824ca6b4aadef0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>P2pnsCacheEntry</name>
    <filename>structP2pnsCacheEntry.html</filename>
    <member kind="variable">
      <type>BinaryValue</type>
      <name>value</name>
      <anchorfile>structP2pnsCacheEntry.html</anchorfile>
      <anchor>a1f5c70c13d860555ba6f131ba35039b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>ttlMessage</name>
      <anchorfile>structP2pnsCacheEntry.html</anchorfile>
      <anchor>a7de727347053085047633214dcbd5109</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structP2pnsCacheEntry.html</anchorfile>
      <anchor>aa518ac71d7f3b58eca690b153decf781</anchor>
      <arglist>(std::ostream &amp;Stream, const P2pnsCacheEntry entry)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P2pnsIdCacheEntry</name>
    <filename>classP2pnsIdCacheEntry.html</filename>
    <member kind="function">
      <type></type>
      <name>P2pnsIdCacheEntry</name>
      <anchorfile>classP2pnsIdCacheEntry.html</anchorfile>
      <anchor>a31c9a5fad703e87999cc2d610ed78136</anchor>
      <arglist>(const OverlayKey &amp;key)</arglist>
    </member>
    <member kind="variable">
      <type>OverlayKey</type>
      <name>key</name>
      <anchorfile>classP2pnsIdCacheEntry.html</anchorfile>
      <anchor>ae56e94ebed579f913040f6948114e947</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TransportAddress</type>
      <name>addr</name>
      <anchorfile>classP2pnsIdCacheEntry.html</anchorfile>
      <anchor>a3666e9dcb642e8c8da095848e8f6417c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P2pnsConnectionStates</type>
      <name>state</name>
      <anchorfile>classP2pnsIdCacheEntry.html</anchorfile>
      <anchor>aae0d04d6168f716e4c4c0cf4601a5b8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>lastUsage</name>
      <anchorfile>classP2pnsIdCacheEntry.html</anchorfile>
      <anchor>a82ae01c4df2ffb5d198c18f60522d593</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::deque&lt; BinaryValue &gt;</type>
      <name>payloadQueue</name>
      <anchorfile>classP2pnsIdCacheEntry.html</anchorfile>
      <anchor>af7786bb5c54271247111befa732575d4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P2pnsKeepaliveTimer</name>
    <filename>classP2pnsKeepaliveTimer.html</filename>
    <member kind="function">
      <type></type>
      <name>P2pnsKeepaliveTimer</name>
      <anchorfile>classP2pnsKeepaliveTimer.html</anchorfile>
      <anchor>a41ca523d5ec92b7ef8b82824bcbf7ea6</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>P2pnsKeepaliveTimer</name>
      <anchorfile>classP2pnsKeepaliveTimer.html</anchorfile>
      <anchor>a92243a7a52f62abd8d19a0a8ada9588d</anchor>
      <arglist>(const P2pnsKeepaliveTimer &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~P2pnsKeepaliveTimer</name>
      <anchorfile>classP2pnsKeepaliveTimer.html</anchorfile>
      <anchor>a282142afe50cc2a1a3455190ca53ebf0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>P2pnsKeepaliveTimer &amp;</type>
      <name>operator=</name>
      <anchorfile>classP2pnsKeepaliveTimer.html</anchorfile>
      <anchor>a726000c7579d60726f576ba6027beec7</anchor>
      <arglist>(const P2pnsKeepaliveTimer &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual P2pnsKeepaliveTimer *</type>
      <name>dup</name>
      <anchorfile>classP2pnsKeepaliveTimer.html</anchorfile>
      <anchor>ac39eb927e741b160be8de8187417e841</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classP2pnsKeepaliveTimer.html</anchorfile>
      <anchor>a82ca47cb3f44101b5065bffa60710e9d</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classP2pnsKeepaliveTimer.html</anchorfile>
      <anchor>a304d3ddbe2679aec13e297badb5bba5c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getKey</name>
      <anchorfile>classP2pnsKeepaliveTimer.html</anchorfile>
      <anchor>a965231a57011b5bafab6cb90cf6afa61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getKey</name>
      <anchorfile>classP2pnsKeepaliveTimer.html</anchorfile>
      <anchor>a8195990c9a29a392094834bd3d1661bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKey</name>
      <anchorfile>classP2pnsKeepaliveTimer.html</anchorfile>
      <anchor>af638f3124f0d34a80eb2de16bbbe9fa9</anchor>
      <arglist>(const OverlayKey &amp;key)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classP2pnsKeepaliveTimer.html</anchorfile>
      <anchor>ae69914afbeff4f822140c3d8ac7b82a2</anchor>
      <arglist>(const P2pnsKeepaliveTimer &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>key_var</name>
      <anchorfile>classP2pnsKeepaliveTimer.html</anchorfile>
      <anchor>a11cf278aba126527c5dc0b1f4e9f5159</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classP2pnsKeepaliveTimer.html</anchorfile>
      <anchor>a505a206b9934224da2092c78d1d93a0e</anchor>
      <arglist>(const P2pnsKeepaliveTimer &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P2pnsRegister</name>
    <filename>classP2pnsRegister.html</filename>
    <base>XmlRpc::XmlRpcServerMethod</base>
    <member kind="function">
      <type></type>
      <name>P2pnsRegister</name>
      <anchorfile>classP2pnsRegister.html</anchorfile>
      <anchor>a769311bd2154aeff88a6d5a86049f095</anchor>
      <arglist>(XmlRpcServer *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>execute</name>
      <anchorfile>classP2pnsRegister.html</anchorfile>
      <anchor>aa7981fbc776811b3e91846f017e1786f</anchor>
      <arglist>(XmlRpcValue &amp;params, XmlRpcValue &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>help</name>
      <anchorfile>classP2pnsRegister.html</anchorfile>
      <anchor>ad418582cef607a4da0a385444ab12f28</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P2pnsRegisterCall</name>
    <filename>classP2pnsRegisterCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>P2pnsRegisterCall</name>
      <anchorfile>classP2pnsRegisterCall.html</anchorfile>
      <anchor>a24dce94446e93d10ba2d76ef1686b59f</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>P2pnsRegisterCall</name>
      <anchorfile>classP2pnsRegisterCall.html</anchorfile>
      <anchor>a55df0923a88019aba9b18aed4504dbdd</anchor>
      <arglist>(const P2pnsRegisterCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~P2pnsRegisterCall</name>
      <anchorfile>classP2pnsRegisterCall.html</anchorfile>
      <anchor>a258a8133b9d85134ef9ac65c8ae3eb34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>P2pnsRegisterCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classP2pnsRegisterCall.html</anchorfile>
      <anchor>a20398da59572f376822cf4ce36a0d7fa</anchor>
      <arglist>(const P2pnsRegisterCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual P2pnsRegisterCall *</type>
      <name>dup</name>
      <anchorfile>classP2pnsRegisterCall.html</anchorfile>
      <anchor>a19cc37216fecc684bfcfa542f9c30ca5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classP2pnsRegisterCall.html</anchorfile>
      <anchor>ae66002d6106e2f840babda0b02f64b78</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classP2pnsRegisterCall.html</anchorfile>
      <anchor>a946bb93c53b075c5f14771563db06916</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BinaryValue &amp;</type>
      <name>getP2pName</name>
      <anchorfile>classP2pnsRegisterCall.html</anchorfile>
      <anchor>a4a010b0d9bbaaa76314e0643c9ce8393</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const BinaryValue &amp;</type>
      <name>getP2pName</name>
      <anchorfile>classP2pnsRegisterCall.html</anchorfile>
      <anchor>a0cd359e5e9b43b6e0e3d677ac47ced74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP2pName</name>
      <anchorfile>classP2pnsRegisterCall.html</anchorfile>
      <anchor>a58d3e9c463a4f1128100fc7c59cda6ad</anchor>
      <arglist>(const BinaryValue &amp;p2pName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>getKind</name>
      <anchorfile>classP2pnsRegisterCall.html</anchorfile>
      <anchor>ad8cc26d321aef3a6e12d0257d3bb0d88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKind</name>
      <anchorfile>classP2pnsRegisterCall.html</anchorfile>
      <anchor>a4f661d5f2be57d265481f973139a497c</anchor>
      <arglist>(uint32_t kind)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>getId</name>
      <anchorfile>classP2pnsRegisterCall.html</anchorfile>
      <anchor>ad0515c0aeb8ccd41702c44d88d79ff2c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setId</name>
      <anchorfile>classP2pnsRegisterCall.html</anchorfile>
      <anchor>a034c3c692a05dec09030b4038ed8479c</anchor>
      <arglist>(uint32_t id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BinaryValue &amp;</type>
      <name>getAddress</name>
      <anchorfile>classP2pnsRegisterCall.html</anchorfile>
      <anchor>a7fbdcce08c6bc33a3adefd5db069fe1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const BinaryValue &amp;</type>
      <name>getAddress</name>
      <anchorfile>classP2pnsRegisterCall.html</anchorfile>
      <anchor>ab49b163b80b0d1507371ad97641acde8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddress</name>
      <anchorfile>classP2pnsRegisterCall.html</anchorfile>
      <anchor>aa88bb99ea84445abcae5e462e2a431e7</anchor>
      <arglist>(const BinaryValue &amp;address)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTtl</name>
      <anchorfile>classP2pnsRegisterCall.html</anchorfile>
      <anchor>a7c6e6e4f46bf2ab79a3550c3a07e3215</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTtl</name>
      <anchorfile>classP2pnsRegisterCall.html</anchorfile>
      <anchor>a9f57a3f80a226ee9d98b18306afeb133</anchor>
      <arglist>(int ttl)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classP2pnsRegisterCall.html</anchorfile>
      <anchor>a6928e97fc1be65efefc99cc8275f16ea</anchor>
      <arglist>(const P2pnsRegisterCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BinaryValue</type>
      <name>p2pName_var</name>
      <anchorfile>classP2pnsRegisterCall.html</anchorfile>
      <anchor>a6ace0cab8efe7088842e8d771739e4eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>kind_var</name>
      <anchorfile>classP2pnsRegisterCall.html</anchorfile>
      <anchor>a45c6319b008fc9d6b29b0cdb9f6db7c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>id_var</name>
      <anchorfile>classP2pnsRegisterCall.html</anchorfile>
      <anchor>afe05483d4ca7eef84b5efa6a5dd3eabc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BinaryValue</type>
      <name>address_var</name>
      <anchorfile>classP2pnsRegisterCall.html</anchorfile>
      <anchor>a25b947b9c5897398d90f9fb84d99073c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ttl_var</name>
      <anchorfile>classP2pnsRegisterCall.html</anchorfile>
      <anchor>ad93c2b7d2a829bd3edb51d79350528b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classP2pnsRegisterCall.html</anchorfile>
      <anchor>a5d5223cea8e2e434e6ff16f2dde91a76</anchor>
      <arglist>(const P2pnsRegisterCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P2pnsRegisterResponse</name>
    <filename>classP2pnsRegisterResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>P2pnsRegisterResponse</name>
      <anchorfile>classP2pnsRegisterResponse.html</anchorfile>
      <anchor>a1f0c689846f2d5242f7d2726a36c66b0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>P2pnsRegisterResponse</name>
      <anchorfile>classP2pnsRegisterResponse.html</anchorfile>
      <anchor>a7138bc50b2814016a05e99913a17307b</anchor>
      <arglist>(const P2pnsRegisterResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~P2pnsRegisterResponse</name>
      <anchorfile>classP2pnsRegisterResponse.html</anchorfile>
      <anchor>a1a209c13e527a19268195b79e19f0ff7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>P2pnsRegisterResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classP2pnsRegisterResponse.html</anchorfile>
      <anchor>a8cbce7a9fc598177527213a80c1fed66</anchor>
      <arglist>(const P2pnsRegisterResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual P2pnsRegisterResponse *</type>
      <name>dup</name>
      <anchorfile>classP2pnsRegisterResponse.html</anchorfile>
      <anchor>a00899e6af616b00ff9c2c2dae61ec30a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classP2pnsRegisterResponse.html</anchorfile>
      <anchor>a9edf86ce4be19c0760d980d9a2cee9b2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classP2pnsRegisterResponse.html</anchorfile>
      <anchor>a4c1bbd5bb2dfd6fd01019402edcfcf0e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BinaryValue &amp;</type>
      <name>getP2pName</name>
      <anchorfile>classP2pnsRegisterResponse.html</anchorfile>
      <anchor>a628d990437ac0864420637e329170499</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const BinaryValue &amp;</type>
      <name>getP2pName</name>
      <anchorfile>classP2pnsRegisterResponse.html</anchorfile>
      <anchor>a1edb892256436600af6f8cfeeeeb956a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP2pName</name>
      <anchorfile>classP2pnsRegisterResponse.html</anchorfile>
      <anchor>a050cd70271500388001428c3065b39ba</anchor>
      <arglist>(const BinaryValue &amp;p2pName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BinaryValue &amp;</type>
      <name>getAddress</name>
      <anchorfile>classP2pnsRegisterResponse.html</anchorfile>
      <anchor>a3e356e93014f14a4639594b358e37a06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const BinaryValue &amp;</type>
      <name>getAddress</name>
      <anchorfile>classP2pnsRegisterResponse.html</anchorfile>
      <anchor>ac02a8262e31785c1e9bf4e36e2a6beb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddress</name>
      <anchorfile>classP2pnsRegisterResponse.html</anchorfile>
      <anchor>a3a65ff1242fc028d2148a7bff7c39d6b</anchor>
      <arglist>(const BinaryValue &amp;address)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getIsSuccess</name>
      <anchorfile>classP2pnsRegisterResponse.html</anchorfile>
      <anchor>a36c85d6091aa73ddbbd0992ecbde497b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsSuccess</name>
      <anchorfile>classP2pnsRegisterResponse.html</anchorfile>
      <anchor>a62e3663cca7477660cc9b417fa4c7341</anchor>
      <arglist>(bool isSuccess)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classP2pnsRegisterResponse.html</anchorfile>
      <anchor>a9783638f3dc6cea1d5199f75eb8b24f9</anchor>
      <arglist>(const P2pnsRegisterResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BinaryValue</type>
      <name>p2pName_var</name>
      <anchorfile>classP2pnsRegisterResponse.html</anchorfile>
      <anchor>ac2ceecdbd890ddefb5317a6974cf4e50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BinaryValue</type>
      <name>address_var</name>
      <anchorfile>classP2pnsRegisterResponse.html</anchorfile>
      <anchor>a314b6762a9b8ea730205146f69487665</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isSuccess_var</name>
      <anchorfile>classP2pnsRegisterResponse.html</anchorfile>
      <anchor>aa754de8f0273ce475c41c3307e3dcc18</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classP2pnsRegisterResponse.html</anchorfile>
      <anchor>a05088eae5334edcd9d8671cd6426c67f</anchor>
      <arglist>(const P2pnsRegisterResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P2pnsResolve</name>
    <filename>classP2pnsResolve.html</filename>
    <base>XmlRpc::XmlRpcServerMethod</base>
    <member kind="function">
      <type></type>
      <name>P2pnsResolve</name>
      <anchorfile>classP2pnsResolve.html</anchorfile>
      <anchor>a053a9bf206b20da7b6f28de4148ce9a2</anchor>
      <arglist>(XmlRpcServer *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>execute</name>
      <anchorfile>classP2pnsResolve.html</anchorfile>
      <anchor>a90b9823b77f02e057533c6d0b5add84f</anchor>
      <arglist>(XmlRpcValue &amp;params, XmlRpcValue &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>help</name>
      <anchorfile>classP2pnsResolve.html</anchorfile>
      <anchor>a9f46a7b8f1c0d8a0b9ece5cb78ae9c85</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P2pnsResolveCall</name>
    <filename>classP2pnsResolveCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>P2pnsResolveCall</name>
      <anchorfile>classP2pnsResolveCall.html</anchorfile>
      <anchor>aa113f2e611b4c3bfb060772af75daf90</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>P2pnsResolveCall</name>
      <anchorfile>classP2pnsResolveCall.html</anchorfile>
      <anchor>aa6d2c2153d5da43adf041cfc5487984c</anchor>
      <arglist>(const P2pnsResolveCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~P2pnsResolveCall</name>
      <anchorfile>classP2pnsResolveCall.html</anchorfile>
      <anchor>ab57b04e72827437153ddf808eadeeb4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>P2pnsResolveCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classP2pnsResolveCall.html</anchorfile>
      <anchor>a90bf7cc2d217ed361995a1162779d592</anchor>
      <arglist>(const P2pnsResolveCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual P2pnsResolveCall *</type>
      <name>dup</name>
      <anchorfile>classP2pnsResolveCall.html</anchorfile>
      <anchor>a6e4091b65161b1dca890de452f76b797</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classP2pnsResolveCall.html</anchorfile>
      <anchor>af266aad67272e265d12c42f6fa82cc46</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classP2pnsResolveCall.html</anchorfile>
      <anchor>ab60b6364a9dc4e6dfe44a6a82e93ce6e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BinaryValue &amp;</type>
      <name>getP2pName</name>
      <anchorfile>classP2pnsResolveCall.html</anchorfile>
      <anchor>a5a7ce2712e7ac2e3a022062c35535a5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const BinaryValue &amp;</type>
      <name>getP2pName</name>
      <anchorfile>classP2pnsResolveCall.html</anchorfile>
      <anchor>a9a7e31a85002c9aee58720669fe91db8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP2pName</name>
      <anchorfile>classP2pnsResolveCall.html</anchorfile>
      <anchor>a9b58c6fd98d0a59d1d254c88c24a3f6d</anchor>
      <arglist>(const BinaryValue &amp;p2pName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>getKind</name>
      <anchorfile>classP2pnsResolveCall.html</anchorfile>
      <anchor>aaf198c66181e4c471d31773adbab822c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKind</name>
      <anchorfile>classP2pnsResolveCall.html</anchorfile>
      <anchor>ab1204a4023db94b9ac38184aab3e42ed</anchor>
      <arglist>(uint32_t kind)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>getId</name>
      <anchorfile>classP2pnsResolveCall.html</anchorfile>
      <anchor>a0dd2ab87500c3d9a0b8b5942ca46c577</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setId</name>
      <anchorfile>classP2pnsResolveCall.html</anchorfile>
      <anchor>a89d7e61da0005067af9bf4c5e4a6a79c</anchor>
      <arglist>(uint32_t id)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classP2pnsResolveCall.html</anchorfile>
      <anchor>ae83007ebe7661d84980ef7ee93f1c67e</anchor>
      <arglist>(const P2pnsResolveCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BinaryValue</type>
      <name>p2pName_var</name>
      <anchorfile>classP2pnsResolveCall.html</anchorfile>
      <anchor>a2d7877887bc7cd6b02b45763b61646c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>kind_var</name>
      <anchorfile>classP2pnsResolveCall.html</anchorfile>
      <anchor>ad7cd968b6baaf544704c4d417fae52bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>id_var</name>
      <anchorfile>classP2pnsResolveCall.html</anchorfile>
      <anchor>ae2874d06eaceca76865390032f3c6f15</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classP2pnsResolveCall.html</anchorfile>
      <anchor>a5b9c33c2746d341a13e7b82c35951f55</anchor>
      <arglist>(const P2pnsResolveCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P2pnsResolveResponse</name>
    <filename>classP2pnsResolveResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>P2pnsResolveResponse</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>a45d6b55c20dff1c325b18c1e97b4d802</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>P2pnsResolveResponse</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>a93043a918d8a4f3ab78124b0951e3b1b</anchor>
      <arglist>(const P2pnsResolveResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~P2pnsResolveResponse</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>a354cb5c1aba209e66b9261e50c23a72b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>P2pnsResolveResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>ac5e69f068d7a97ccd8a87f3b97c92c22</anchor>
      <arglist>(const P2pnsResolveResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual P2pnsResolveResponse *</type>
      <name>dup</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>ac1f6b1c3b67db722c6dba3ff171ab0a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>aa53b9438d7c592884caec5e790fb6211</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>a87bb7c37005b1137bfd787b1eb0a2399</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BinaryValue &amp;</type>
      <name>getP2pName</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>af41878dceba325382cd0d90c355f2ce2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const BinaryValue &amp;</type>
      <name>getP2pName</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>ab498a77a5d32aa158e006951c12bdc74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setP2pName</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>ae66c36b9b4b41eb064e9e414e13142aa</anchor>
      <arglist>(const BinaryValue &amp;p2pName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddressArraySize</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>abc7320d9b6eb15d1262fdb013684b5bb</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getAddressArraySize</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>a5100357319239fe0970b99fe6db963b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BinaryValue &amp;</type>
      <name>getAddress</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>ad5e60af5fc03b1e4cb448b946073c4cd</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const BinaryValue &amp;</type>
      <name>getAddress</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>a40c47dc7c4d259716d8ec522acf32652</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAddress</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>a3d3e1cf90e8cbe18b353502a88e33644</anchor>
      <arglist>(unsigned int k, const BinaryValue &amp;address)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKindArraySize</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>ac166fdc5e0a7c222c09b3fb224120700</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getKindArraySize</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>aff84766a6c7f6e5b7ba8ab85f3975027</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>getKind</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>a27c5e593de5e8cfd8571d6062bc8cc35</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKind</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>a48a500025aa20423bc649da7d537eb26</anchor>
      <arglist>(unsigned int k, uint32_t kind)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIdArraySize</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>a284270e3e2ac672e42b5780c019c7078</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getIdArraySize</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>a1323a4ba33a9f1fe8a8eff1d5fb056f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>getId</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>aba9f2e683385d07cfe8715edc919abf1</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setId</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>a9e14c78aba9532adf73be689042471e1</anchor>
      <arglist>(unsigned int k, uint32_t id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getIsSuccess</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>a5020bd31882f1eedfa7d50c427d2b065</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsSuccess</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>a94f6fec34ef4d922e0dd19ab1642ff4b</anchor>
      <arglist>(bool isSuccess)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>a594649dc889ead23af58f08b84258cdc</anchor>
      <arglist>(const P2pnsResolveResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BinaryValue</type>
      <name>p2pName_var</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>a092ebd52636a8b1e28a2dd619ae27fe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BinaryValue *</type>
      <name>address_var</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>a48879ca603cf9fc55853d060088d68fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>address_arraysize</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>a6f5c531aeeef6ee45764c280261c8d9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t *</type>
      <name>kind_var</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>a97d92f53ffc45a625f58280706249ff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>kind_arraysize</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>a6accd75ef37c7ddfedf6a8615ba66e3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t *</type>
      <name>id_var</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>a93285241bec1c7b6d9753d4c50bd30e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>id_arraysize</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>a96a149e573a314fbb5febe7d467fb74f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isSuccess_var</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>a49223d56910a57bee8d2dd0f882b6581</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classP2pnsResolveResponse.html</anchorfile>
      <anchor>afc88a96c04bbfb109131a519fab01d13</anchor>
      <arglist>(const P2pnsResolveResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P2pnsTunnelMessage</name>
    <filename>classP2pnsTunnelMessage.html</filename>
    <base>OverSimMessage</base>
    <member kind="function">
      <type></type>
      <name>P2pnsTunnelMessage</name>
      <anchorfile>classP2pnsTunnelMessage.html</anchorfile>
      <anchor>a920bd8765abb6c2441c0637ff5fa9941</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>P2pnsTunnelMessage</name>
      <anchorfile>classP2pnsTunnelMessage.html</anchorfile>
      <anchor>a082947cd4c42d73845541f9d4467353a</anchor>
      <arglist>(const P2pnsTunnelMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~P2pnsTunnelMessage</name>
      <anchorfile>classP2pnsTunnelMessage.html</anchorfile>
      <anchor>a54463f6859c42cda1c2a34468500cc93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>P2pnsTunnelMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classP2pnsTunnelMessage.html</anchorfile>
      <anchor>ab5a7fce6e1305b83d6a8bca61aa8eaee</anchor>
      <arglist>(const P2pnsTunnelMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual P2pnsTunnelMessage *</type>
      <name>dup</name>
      <anchorfile>classP2pnsTunnelMessage.html</anchorfile>
      <anchor>af4bcb9ae024e2f540b89498b10b3ce4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classP2pnsTunnelMessage.html</anchorfile>
      <anchor>a2974185eb8f0f396bcd853d214b1eff3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classP2pnsTunnelMessage.html</anchorfile>
      <anchor>a7e6186445be2e518bbcb437276fa80d4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getSrcId</name>
      <anchorfile>classP2pnsTunnelMessage.html</anchorfile>
      <anchor>ae2b0caad41bec85556d1e697733c0962</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getSrcId</name>
      <anchorfile>classP2pnsTunnelMessage.html</anchorfile>
      <anchor>abf4e3f78153d5a33863fd2a16617eed3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcId</name>
      <anchorfile>classP2pnsTunnelMessage.html</anchorfile>
      <anchor>afc97259c1fd90a0ce57a44e198ea41b7</anchor>
      <arglist>(const OverlayKey &amp;srcId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BinaryValue &amp;</type>
      <name>getPayload</name>
      <anchorfile>classP2pnsTunnelMessage.html</anchorfile>
      <anchor>aa8c83b0a42d4ca35cb6edbee04dc4b14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const BinaryValue &amp;</type>
      <name>getPayload</name>
      <anchorfile>classP2pnsTunnelMessage.html</anchorfile>
      <anchor>aafe346984a084b4f027c3ee5210bee85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPayload</name>
      <anchorfile>classP2pnsTunnelMessage.html</anchorfile>
      <anchor>ae99ee373e1f37b59de76206c8ab1cbdb</anchor>
      <arglist>(const BinaryValue &amp;payload)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classP2pnsTunnelMessage.html</anchorfile>
      <anchor>ac8acb71a256476c715f39fb4be4ae9ab</anchor>
      <arglist>(const P2pnsTunnelMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>srcId_var</name>
      <anchorfile>classP2pnsTunnelMessage.html</anchorfile>
      <anchor>a864782512c2834e9aa49a103b50757d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BinaryValue</type>
      <name>payload_var</name>
      <anchorfile>classP2pnsTunnelMessage.html</anchorfile>
      <anchor>a863d101d208b44e9ba23f4380594b28a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classP2pnsTunnelMessage.html</anchorfile>
      <anchor>a162c7c356033282a170b4925dcca1883</anchor>
      <arglist>(const P2pnsTunnelMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PacketBufferEntry</name>
    <filename>classPacketBufferEntry.html</filename>
    <member kind="enumeration">
      <name>fdCommand</name>
      <anchorfile>classPacketBufferEntry.html</anchorfile>
      <anchor>a031fc7af4d192867a6ccc3b266a65999</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PACKET_DATA</name>
      <anchorfile>classPacketBufferEntry.html</anchorfile>
      <anchor>a031fc7af4d192867a6ccc3b266a65999a59a989258b903244405d3c1c1e8d8818</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PACKET_FD_NEW</name>
      <anchorfile>classPacketBufferEntry.html</anchorfile>
      <anchor>a031fc7af4d192867a6ccc3b266a65999ab399f936984062191d2f8fe9c50e7158</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PACKET_FD_CLOSE</name>
      <anchorfile>classPacketBufferEntry.html</anchorfile>
      <anchor>a031fc7af4d192867a6ccc3b266a65999a336121b76489562e88596800098c1454</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PACKET_APPTUN_DATA</name>
      <anchorfile>classPacketBufferEntry.html</anchorfile>
      <anchor>a031fc7af4d192867a6ccc3b266a65999aaffbd093727fed412344a6c70fb8c553</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PacketBufferEntry</name>
      <anchorfile>classPacketBufferEntry.html</anchorfile>
      <anchor>a21515cfe1afd0de1c8d0c6122208ee48</anchor>
      <arglist>(char *buf, int32_t len)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PacketBufferEntry</name>
      <anchorfile>classPacketBufferEntry.html</anchorfile>
      <anchor>aa79cacc48e8d59c3b8abf91f0fb7dd3c</anchor>
      <arglist>(char *buf, int32_t len, sockaddr *ad, socklen_t al)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PacketBufferEntry</name>
      <anchorfile>classPacketBufferEntry.html</anchorfile>
      <anchor>aca84b8fe5fa3bfb67702c53155aeae2b</anchor>
      <arglist>(char *buf, int32_t len, fdCommand fc, int _fd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PacketBufferEntry</name>
      <anchorfile>classPacketBufferEntry.html</anchorfile>
      <anchor>aef60b293c246e1fe3770325476c68cb4</anchor>
      <arglist>(char *buf, int32_t len, sockaddr *ad, socklen_t al, fdCommand fc, int _fd)</arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>data</name>
      <anchorfile>classPacketBufferEntry.html</anchorfile>
      <anchor>ac981886eca3d57cf993286f3d4b5da0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>length</name>
      <anchorfile>classPacketBufferEntry.html</anchorfile>
      <anchor>a7d3e242495bf433cf01ca0d22cae02e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sockaddr *</type>
      <name>addr</name>
      <anchorfile>classPacketBufferEntry.html</anchorfile>
      <anchor>afec7e94a676e19551cea0f6f17d59ba0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>socklen_t</type>
      <name>addrlen</name>
      <anchorfile>classPacketBufferEntry.html</anchorfile>
      <anchor>ac072ce6dec80167b07f94c43a65cefa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum PacketBufferEntry::fdCommand</type>
      <name>func</name>
      <anchorfile>classPacketBufferEntry.html</anchorfile>
      <anchor>af8eb7a7466cba5d76d5eb62b0534d276</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SOCKET</type>
      <name>fd</name>
      <anchorfile>classPacketBufferEntry.html</anchorfile>
      <anchor>a42be0b10cf60a4b6ba28c7d08e46bb41</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PacketParser</name>
    <filename>classPacketParser.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classPacketParser.html</anchorfile>
      <anchor>a18489f28e993173c1b5e25e90fe077c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classPacketParser.html</anchorfile>
      <anchor>adf9cc56eafe9b33115d2cf068db9428f</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char *</type>
      <name>encapsulatePayload</name>
      <anchorfile>classPacketParser.html</anchorfile>
      <anchor>a0e0188c1944ac1dd7504a902977ab0cd</anchor>
      <arglist>(cPacket *msg, unsigned int *length)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cPacket *</type>
      <name>decapsulatePayload</name>
      <anchorfile>classPacketParser.html</anchorfile>
      <anchor>ad7ddf62bc20a400e19bcb4b90738be6a</anchor>
      <arglist>(char *buf, unsigned int length)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParentRequestCall</name>
    <filename>classParentRequestCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>ParentRequestCall</name>
      <anchorfile>classParentRequestCall.html</anchorfile>
      <anchor>ac37261b8902505e49ac7902f0143ba18</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParentRequestCall</name>
      <anchorfile>classParentRequestCall.html</anchorfile>
      <anchor>afd756a8dcf207f96cfec3af15dd2c3d8</anchor>
      <arglist>(const ParentRequestCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParentRequestCall</name>
      <anchorfile>classParentRequestCall.html</anchorfile>
      <anchor>a03a282b7c7d631a616fcf5cf1eb9f225</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ParentRequestCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classParentRequestCall.html</anchorfile>
      <anchor>a00a5ca3938a3ce69bc9a2b0d56ec264b</anchor>
      <arglist>(const ParentRequestCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParentRequestCall *</type>
      <name>dup</name>
      <anchorfile>classParentRequestCall.html</anchorfile>
      <anchor>a0271b4b4567b2e381cada765a8f77139</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classParentRequestCall.html</anchorfile>
      <anchor>acc69e5f91913f98079234392f57e01c2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classParentRequestCall.html</anchorfile>
      <anchor>a4b971c74911e583bf88ee022ef9f4962</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getDomainKey</name>
      <anchorfile>classParentRequestCall.html</anchorfile>
      <anchor>ac783e1b058a9e4f381e37d9156288507</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getDomainKey</name>
      <anchorfile>classParentRequestCall.html</anchorfile>
      <anchor>a69c235e0acb5b10415c4d5bc2281620c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDomainKey</name>
      <anchorfile>classParentRequestCall.html</anchorfile>
      <anchor>adc479293b5c52071459fa377c52c8bfa</anchor>
      <arglist>(const OverlayKey &amp;domainKey)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classParentRequestCall.html</anchorfile>
      <anchor>ac97d3d568e69a8ad5d6d9ff221aba0c9</anchor>
      <arglist>(const ParentRequestCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>domainKey_var</name>
      <anchorfile>classParentRequestCall.html</anchorfile>
      <anchor>aa19f29edcb4fb4097e1d45473c9b7b5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classParentRequestCall.html</anchorfile>
      <anchor>a9aeb6a84fe8a1374fe3c43b9a15de7f3</anchor>
      <arglist>(const ParentRequestCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParentRequestResponse</name>
    <filename>classParentRequestResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>ParentRequestResponse</name>
      <anchorfile>classParentRequestResponse.html</anchorfile>
      <anchor>a7ab4c7b7c3b84b4c5f86d1cf2de3635a</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParentRequestResponse</name>
      <anchorfile>classParentRequestResponse.html</anchorfile>
      <anchor>ae944582fffba6e44c5a90fa528c55b3b</anchor>
      <arglist>(const ParentRequestResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParentRequestResponse</name>
      <anchorfile>classParentRequestResponse.html</anchorfile>
      <anchor>aaff40fb9ea47c8c4c17c18ce20cb76df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ParentRequestResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classParentRequestResponse.html</anchorfile>
      <anchor>a7b2a95679fa6df76dd69772f553279ec</anchor>
      <arglist>(const ParentRequestResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParentRequestResponse *</type>
      <name>dup</name>
      <anchorfile>classParentRequestResponse.html</anchorfile>
      <anchor>a04876a0ca34ab443d50ee3fcad8ea0c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classParentRequestResponse.html</anchorfile>
      <anchor>abe6b1ec55ec699da025ccefcd1f900dd</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classParentRequestResponse.html</anchorfile>
      <anchor>aad3c413807fc51db5d785c94e61de1e5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classParentRequestResponse.html</anchorfile>
      <anchor>ad0fc32eccd3a577346c7c5329381c82e</anchor>
      <arglist>(const ParentRequestResponse &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classParentRequestResponse.html</anchorfile>
      <anchor>a495cb403a2baf6df508be109315205a5</anchor>
      <arglist>(const ParentRequestResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParetoChurn</name>
    <filename>classParetoChurn.html</filename>
    <base>ChurnGenerator</base>
    <class kind="struct">ParetoChurn::node_stat</class>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classParetoChurn.html</anchorfile>
      <anchor>a64d46ec67693e589ee564d742dc6d69d</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeChurn</name>
      <anchorfile>classParetoChurn.html</anchorfile>
      <anchor>ae92dbc3a057c1f7d299440d4ad091a8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParetoChurn</name>
      <anchorfile>classParetoChurn.html</anchorfile>
      <anchor>a9bbc43394953c8dc4284d83cda06e92f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ParetoChurn</name>
      <anchorfile>classParetoChurn.html</anchorfile>
      <anchor>a1929ffff7e2624d327202621cf1a50ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateDisplayString</name>
      <anchorfile>classParetoChurn.html</anchorfile>
      <anchor>a7c65a92db9ea3acafd1dab30be5fda74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createNode</name>
      <anchorfile>classParetoChurn.html</anchorfile>
      <anchor>a7d528627f419f7649dba3fecb8ed0997</anchor>
      <arglist>(double lifetime, double meanLifetime, double meanDeadtime, bool initialize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deleteNode</name>
      <anchorfile>classParetoChurn.html</anchorfile>
      <anchor>af72720bfb350300442c2d7d45314c699</anchor>
      <arglist>(TransportAddress &amp;addr, double meanLifetime, double meanDeadtime)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>shiftedPareto</name>
      <anchorfile>classParetoChurn.html</anchorfile>
      <anchor>a9c7a34bee43b1d3e6f0ef085269e4eee</anchor>
      <arglist>(double a, double b, int rng=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>betaByMean</name>
      <anchorfile>classParetoChurn.html</anchorfile>
      <anchor>a47874d7827729836faf120340908b0e7</anchor>
      <arglist>(double mean, double alpha=3)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>individualMeanTime</name>
      <anchorfile>classParetoChurn.html</anchorfile>
      <anchor>aa0271784e538a1b481ae257d657a081a</anchor>
      <arglist>(double mean)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>individualLifetime</name>
      <anchorfile>classParetoChurn.html</anchorfile>
      <anchor>a1edf2a716ed85b37b0c563e179eaa82b</anchor>
      <arglist>(double mean)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>residualLifetime</name>
      <anchorfile>classParetoChurn.html</anchorfile>
      <anchor>a518c730b41bdbaf785a737a0ad425aff</anchor>
      <arglist>(double mean)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>scheduleCreateNodeAt</name>
      <anchorfile>classParetoChurn.html</anchorfile>
      <anchor>a6995494f5d5540d7bb25a3490fa64425</anchor>
      <arglist>(double creationTime, double lifetime, double meanLifetime, double meanDeadtime)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GlobalStatistics *</type>
      <name>globalStatistics</name>
      <anchorfile>classParetoChurn.html</anchorfile>
      <anchor>a9997706834af1af632379034649be91a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>initialMean</name>
      <anchorfile>classParetoChurn.html</anchorfile>
      <anchor>a4dd4e8d2e338894e3b3f2acc80e32dbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>initialDeviation</name>
      <anchorfile>classParetoChurn.html</anchorfile>
      <anchor>a6ef019eca2e6e4d718cda242ff18cba3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>lifetimeMean</name>
      <anchorfile>classParetoChurn.html</anchorfile>
      <anchor>a2f30c0c67079114f5fdfa4ffadf0b685</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>deadtimeMean</name>
      <anchorfile>classParetoChurn.html</anchorfile>
      <anchor>a299671cf14c8fd4262f0dd867d17c5a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>lastCreatetime</name>
      <anchorfile>classParetoChurn.html</anchorfile>
      <anchor>a2941baf55e2bc19ec6202e718415090d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>lastDeletetime</name>
      <anchorfile>classParetoChurn.html</anchorfile>
      <anchor>a04073063ddc4a3eef98b7db23338de43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>initFinishedTimer</name>
      <anchorfile>classParetoChurn.html</anchorfile>
      <anchor>ad41fff4c7a5f23d3a94929b39f3f133e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ParetoChurn::node_stat</name>
    <filename>structParetoChurn_1_1node__stat.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>l</name>
      <anchorfile>structParetoChurn_1_1node__stat.html</anchorfile>
      <anchor>aebcd0c28ec6fd9c3b3c17d89983ba154</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>d</name>
      <anchorfile>structParetoChurn_1_1node__stat.html</anchorfile>
      <anchor>a6c50eba1548e216c06843164a2b5e59a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>alive</name>
      <anchorfile>structParetoChurn_1_1node__stat.html</anchorfile>
      <anchor>af4df89e7c5de2fe7e53dcc411a3e6c38</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParetoChurnMessage</name>
    <filename>classParetoChurnMessage.html</filename>
    <base>ChurnMessage</base>
    <member kind="function">
      <type></type>
      <name>ParetoChurnMessage</name>
      <anchorfile>classParetoChurnMessage.html</anchorfile>
      <anchor>a57b08d998dc099b3171542f153161a86</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParetoChurnMessage</name>
      <anchorfile>classParetoChurnMessage.html</anchorfile>
      <anchor>a0d4ac323677a68ecba737bd7e716af04</anchor>
      <arglist>(const ParetoChurnMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParetoChurnMessage</name>
      <anchorfile>classParetoChurnMessage.html</anchorfile>
      <anchor>a736fa076d5fe0e890cf43edcd4e20083</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ParetoChurnMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classParetoChurnMessage.html</anchorfile>
      <anchor>a3e8ff1d9a1cb9b276227a8dea7b9a073</anchor>
      <arglist>(const ParetoChurnMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParetoChurnMessage *</type>
      <name>dup</name>
      <anchorfile>classParetoChurnMessage.html</anchorfile>
      <anchor>a61557bfe4d259573357c9dca0669e190</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classParetoChurnMessage.html</anchorfile>
      <anchor>ad527109dd8d4da130bc362f18c2fc958</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classParetoChurnMessage.html</anchorfile>
      <anchor>a516a5213a3cfbbb1143b4d83b3aebd7b</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMeanLifetime</name>
      <anchorfile>classParetoChurnMessage.html</anchorfile>
      <anchor>a312887ab9cf10aaa73b70a8423133248</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMeanLifetime</name>
      <anchorfile>classParetoChurnMessage.html</anchorfile>
      <anchor>ace105be56f34505ba4124e40ba116a61</anchor>
      <arglist>(double meanLifetime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMeanDeadtime</name>
      <anchorfile>classParetoChurnMessage.html</anchorfile>
      <anchor>a75c46032e74e0fe7f85da594377df6fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMeanDeadtime</name>
      <anchorfile>classParetoChurnMessage.html</anchorfile>
      <anchor>a03fe1806ab561f2595e47de4591bde78</anchor>
      <arglist>(double meanDeadtime)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classParetoChurnMessage.html</anchorfile>
      <anchor>a46258b842f7f6dc08853342571a0b921</anchor>
      <arglist>(const ParetoChurnMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>meanLifetime_var</name>
      <anchorfile>classParetoChurnMessage.html</anchorfile>
      <anchor>abf9aa93eca49279c06e842fa27a1d409</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>meanDeadtime_var</name>
      <anchorfile>classParetoChurnMessage.html</anchorfile>
      <anchor>a834f65390ba494f4a29472903adb5fb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classParetoChurnMessage.html</anchorfile>
      <anchor>a84c7e18cb16af2017a439e2047bb2f4a</anchor>
      <arglist>(const ParetoChurnMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Pastry</name>
    <filename>classPastry.html</filename>
    <base>BasePastry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Pastry</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>ad850c987f39b8fe66f9d2da8e351ef7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeOverlay</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>afe58f82e796e3f1ad6cc736fed856e3c</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>aabc1a8eaab8eea9ec5e4830ee60499f8</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUDPMessage</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>a47fc606cfbb1977305f97c60c3c21481</anchor>
      <arglist>(BaseOverlayMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleStateMessage</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>a1dece33e7864cc0f823374daa28da6c9</anchor>
      <arglist>(PastryStateMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pingResponse</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>a5d3a97713d0a9653e64d252297d41c15</anchor>
      <arglist>(PingResponse *pingResponse, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>purgeVectors</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>a8899e17ebdaf922877b308b6e6408feb</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handleRpcCall</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>a14a0a29c8c62c586425b174b9a1504d8</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handlePastryJoinCall</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>a2781a35f40c1531a1df46fe7231ca7cc</anchor>
      <arglist>(PastryJoinCall *call)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleRequestStateCall</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>adf9cf5b5ca0fc054102179df5174c2ad</anchor>
      <arglist>(RequestStateCall *call)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleRequestRepairCall</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>a906a430e629f4aeb2bb5e38e767d4a78</anchor>
      <arglist>(RequestRepairCall *call)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleRpcResponse</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>ae51a0a4846c1e44f2b383bcc1bda5640</anchor>
      <arglist>(BaseResponseMessage *msg, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handlePastryJoinResponse</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>a2017b9e580134416db45159f9585c6bf</anchor>
      <arglist>(PastryJoinResponse *response)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleRequestStateResponse</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>acf0d306c315c3745fb5b63a2158db286</anchor>
      <arglist>(RequestStateResponse *response)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleRequestRepairResponse</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>a6ef8b8e0067f81f2579bfbb1d789fbe3</anchor>
      <arglist>(RequestRepairResponse *response)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleRequestLeafSetResponse</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>a11e13b36752da53944e090d845588075</anchor>
      <arglist>(RequestLeafSetResponse *response)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleRequestRoutingRowResponse</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>a3723e844ab5f2be793b4cd7bf6b03318</anchor>
      <arglist>(RequestRoutingRowResponse *response)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleRpcTimeout</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>aa8cb76965e9144823d6525b724668807</anchor>
      <arglist>(BaseCallMessage *call, const TransportAddress &amp;dest, cPolymorphic *context, int rpcId, const OverlayKey &amp;key)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>changeState</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>a2b363b914b911dcbc411da940efec08f</anchor>
      <arglist>(int toState)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>recursiveRoutingHook</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>ab467d712a7a56dece193bce66bd635d6</anchor>
      <arglist>(const TransportAddress &amp;dest, BaseRouteMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>iterativeJoinHook</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>ac202a93b3945381918d13b92060ff1da</anchor>
      <arglist>(BaseOverlayMessage *msg, bool incrHopCount)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; PastryStateMsgHandle &gt;</type>
      <name>stReceived</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>a124da5018df353375c1b1b3af057c646</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; PastryStateMsgHandle &gt;::iterator</type>
      <name>stReceivedPos</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>a39e21bad6ac44591dd04dd5cb69e0d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; TransportAddress &gt;</type>
      <name>notifyList</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>abaf6ee84a60273e509e713fabe4b25e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; PastrySendState * &gt;</type>
      <name>sendStateWait</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>acc3e51662f6d2c7c72636e2a904cd6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>clearVectors</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>ace3cd9ad6803c901a4de28d17f960d86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doSecondStage</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>a13e50eccbed545c79aed4d1f2d9ac9ae</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doRoutingTableMaintenance</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>a08e9157d1221cded34f870c3abc934f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>handleFailedNode</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>ad94a0f122fe78b1b0002735ce19fea84</anchor>
      <arglist>(const TransportAddress &amp;failed)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkProxCache</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>a851bb0830162f5db79ef515f32c78465</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>processState</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>a4724884f045c31a5a4a25259981cf7ff</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>mergeState</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>a38e3a1a5d04f570e8361b64ea59f1915</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>endProcessingState</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>a4a681c9a40631e27cdb8a174ce8e2618</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doJoinUpdate</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>aa8358704c2a16e2723f048c4bcbe2922</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>joinOverlay</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>a06fbfdc4446ac0cfe149eadbb6e59962</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>sendStateDelayed</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>a8bfd42826bb62ca0be9bcdd0ee2fc52d</anchor>
      <arglist>(const TransportAddress &amp;destination)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>secondStageInterval</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>a8bfec13ef53de9a9e938549f55d31355</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>routingTableMaintenanceInterval</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>a252d835018fef1273f54e1dba733daf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>discoveryTimeoutAmount</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>a533318cca6e80d30c0ef723282331e5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>partialJoinPath</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>a6531029cc05c41c94976078bf0abd93a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint16_t</type>
      <name>discoveryModeProbedNodes</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>a662c8e13ab30edeeb36c591bcffed4c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>depth</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>aed663ddfc74b4fa5dee232eacd9325fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>updateCounter</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>ab6abf133583dc4f91ae74fcb7ad2d188</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>minimalJoinState</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>af5d645f87337b64a2ce04e994d3436e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useDiscovery</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>a51ea6ebb7a60392699bf04a2f0b37309</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useSecondStage</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>a76def04af940e240a50c48e6040cee2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useRoutingTableMaintenance</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>ad2cab4f64253005e4cc67e1e116b8d77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>sendStateAtLeafsetRepair</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>a697f91ef2bdef3df33c45755f3973d0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>pingBeforeSecondStage</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>a5c93eb479cbc43a00cb0886c3eb5b452</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>overrideOldPastry</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>af80b068d6f88b70026caa7e5b2637b62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>overrideNewPastry</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>a5a7acb21ccf23165142efa88bae71e52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>secondStageWait</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>a6dfb09590ce5a63c21f6cbf7e2153e3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>ringCheck</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>aca67080bf2f219f3c1cd2eca39188aba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>discoveryTimeout</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>af876bfc5832efcc74946fc92f468ebe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>repairTaskTimeout</name>
      <anchorfile>classPastry.html</anchorfile>
      <anchor>a997e3c2755fb3dee24fe9142a4e5c08c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PastryExtendedNode</name>
    <filename>structPastryExtendedNode.html</filename>
    <member kind="function">
      <type></type>
      <name>PastryExtendedNode</name>
      <anchorfile>structPastryExtendedNode.html</anchorfile>
      <anchor>a31b64c0d6d4be339d49f6acd41ddf576</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PastryExtendedNode</name>
      <anchorfile>structPastryExtendedNode.html</anchorfile>
      <anchor>a65863d22d78096e32d507d2e64a6fc24</anchor>
      <arglist>(const NodeHandle &amp;node, simtime_t rtt, simtime_t timestamp=0)</arglist>
    </member>
    <member kind="variable">
      <type>NodeHandle</type>
      <name>node</name>
      <anchorfile>structPastryExtendedNode.html</anchorfile>
      <anchor>a4b5835436cdf9648b60e69e2c1fb2777</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>rtt</name>
      <anchorfile>structPastryExtendedNode.html</anchorfile>
      <anchor>a65664755f6f6dec98a9c489b6d38961f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>timestamp</name>
      <anchorfile>structPastryExtendedNode.html</anchorfile>
      <anchor>aeabf6b944fb3a7f3075ca2816defe8ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PastryFindNodeExtData</name>
    <filename>classPastryFindNodeExtData.html</filename>
    <member kind="function">
      <type></type>
      <name>PastryFindNodeExtData</name>
      <anchorfile>classPastryFindNodeExtData.html</anchorfile>
      <anchor>adb0e4caadeaa4180988101b2bf9821ce</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PastryFindNodeExtData</name>
      <anchorfile>classPastryFindNodeExtData.html</anchorfile>
      <anchor>abac4ddf270af0d01f9164daa28ecc226</anchor>
      <arglist>(const PastryFindNodeExtData &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PastryFindNodeExtData</name>
      <anchorfile>classPastryFindNodeExtData.html</anchorfile>
      <anchor>a7d1d178b136f04912ca9a178bcbf446e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PastryFindNodeExtData &amp;</type>
      <name>operator=</name>
      <anchorfile>classPastryFindNodeExtData.html</anchorfile>
      <anchor>a34d5f2469256a91dd44f8cb153711d02</anchor>
      <arglist>(const PastryFindNodeExtData &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PastryFindNodeExtData *</type>
      <name>dup</name>
      <anchorfile>classPastryFindNodeExtData.html</anchorfile>
      <anchor>a5b05f98262b9601603daeebfe06da44c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPastryFindNodeExtData.html</anchorfile>
      <anchor>aa9c42b30f1466f458263b8fa5f9ce49b</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPastryFindNodeExtData.html</anchorfile>
      <anchor>a5d22cf7fa85576ab9c6538324a526477</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransportAddress &amp;</type>
      <name>getSendStateTo</name>
      <anchorfile>classPastryFindNodeExtData.html</anchorfile>
      <anchor>aaf18e8721a60306f069d795e9ac56f85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TransportAddress &amp;</type>
      <name>getSendStateTo</name>
      <anchorfile>classPastryFindNodeExtData.html</anchorfile>
      <anchor>a03de98cffd003587c64c4dfef88a81ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSendStateTo</name>
      <anchorfile>classPastryFindNodeExtData.html</anchorfile>
      <anchor>a5b256a3224530b8ac57944cb56001b22</anchor>
      <arglist>(const TransportAddress &amp;sendStateTo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getJoinHopCount</name>
      <anchorfile>classPastryFindNodeExtData.html</anchorfile>
      <anchor>a5b743f86dd249729d371f1a5c5e890a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setJoinHopCount</name>
      <anchorfile>classPastryFindNodeExtData.html</anchorfile>
      <anchor>a713649f7db56877e1e726f6b7a1239f5</anchor>
      <arglist>(int joinHopCount)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPastryFindNodeExtData.html</anchorfile>
      <anchor>abe377f5ef3215c8e63dfa6239d1db073</anchor>
      <arglist>(const PastryFindNodeExtData &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress</type>
      <name>sendStateTo_var</name>
      <anchorfile>classPastryFindNodeExtData.html</anchorfile>
      <anchor>ade36a5ae1db84d8def4379c5a8696cb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>joinHopCount_var</name>
      <anchorfile>classPastryFindNodeExtData.html</anchorfile>
      <anchor>a4dce7b572f0653fb852fd63f1029279a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPastryFindNodeExtData.html</anchorfile>
      <anchor>ac116e49e98f6f0434be4abc7789f64ec</anchor>
      <arglist>(const PastryFindNodeExtData &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PastryJoinCall</name>
    <filename>classPastryJoinCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>PastryJoinCall</name>
      <anchorfile>classPastryJoinCall.html</anchorfile>
      <anchor>a75c709df226d448052ada7cdbb795440</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PastryJoinCall</name>
      <anchorfile>classPastryJoinCall.html</anchorfile>
      <anchor>a48ab60ad4f5c8628d709fb62f8ddfdc3</anchor>
      <arglist>(const PastryJoinCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PastryJoinCall</name>
      <anchorfile>classPastryJoinCall.html</anchorfile>
      <anchor>a23b2d25eb7264af1c96bc05b7e0ae0d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PastryJoinCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classPastryJoinCall.html</anchorfile>
      <anchor>aa4d20799c2bc603994da00dd4dd4382d</anchor>
      <arglist>(const PastryJoinCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PastryJoinCall *</type>
      <name>dup</name>
      <anchorfile>classPastryJoinCall.html</anchorfile>
      <anchor>ac613da02da4f562dd7eb24cd181c9283</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPastryJoinCall.html</anchorfile>
      <anchor>ae6fe00b5d670e33bac40d7e4211922bc</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPastryJoinCall.html</anchorfile>
      <anchor>aff82532841affbf31ecb1688b35061c0</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPastryJoinCall.html</anchorfile>
      <anchor>a524edd0f69bd6eef7563b0807c97bdd8</anchor>
      <arglist>(const PastryJoinCall &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPastryJoinCall.html</anchorfile>
      <anchor>a95ff78151a4ad777ac77ea7325da51dd</anchor>
      <arglist>(const PastryJoinCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PastryJoinResponse</name>
    <filename>classPastryJoinResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>PastryJoinResponse</name>
      <anchorfile>classPastryJoinResponse.html</anchorfile>
      <anchor>a2e91bed6276ea24007c746b6ffaf797a</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PastryJoinResponse</name>
      <anchorfile>classPastryJoinResponse.html</anchorfile>
      <anchor>a05df1ee6b803e8b739f5c0f06c01f8d2</anchor>
      <arglist>(const PastryJoinResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PastryJoinResponse</name>
      <anchorfile>classPastryJoinResponse.html</anchorfile>
      <anchor>a2b633834d482d8c76ed0555200f641ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PastryJoinResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classPastryJoinResponse.html</anchorfile>
      <anchor>ab6f8d390568d6a81bdc0b46e2abfe2b0</anchor>
      <arglist>(const PastryJoinResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PastryJoinResponse *</type>
      <name>dup</name>
      <anchorfile>classPastryJoinResponse.html</anchorfile>
      <anchor>a73e43d65dbc9042d558b924de8b86582</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPastryJoinResponse.html</anchorfile>
      <anchor>af6cd728c6db7a037fbcd16286e176211</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPastryJoinResponse.html</anchorfile>
      <anchor>a8eb30488b4ce1883d36b7a79dc4c7806</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPastryJoinResponse.html</anchorfile>
      <anchor>a41e56419af58304d4de0cb5e7c027824</anchor>
      <arglist>(const PastryJoinResponse &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPastryJoinResponse.html</anchorfile>
      <anchor>a1a7ed28c6fb1a220a37aabdc67212f3c</anchor>
      <arglist>(const PastryJoinResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PastryLeafSet</name>
    <filename>classPastryLeafSet.html</filename>
    <base>PastryStateObject</base>
    <member kind="function">
      <type>void</type>
      <name>initializeSet</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>aa2c78d769e86e656409342e553c9af0a</anchor>
      <arglist>(uint32_t numberOfLeaves, uint32_t bitsPerDigit, simtime_t repairTimeout, const NodeHandle &amp;owner, BasePastry *overlay)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getDestinationNode</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>a8d3bbe87fe682fc513a83df7a0d69f57</anchor>
      <arglist>(const OverlayKey &amp;destination)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>findCloserNode</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>ae42c594976b0f7dbc1a24269b3cc6c89</anchor>
      <arglist>(const OverlayKey &amp;destination, bool optimize=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findCloserNodes</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>a54cf1b5716243dc9ea4f840e3076c720</anchor>
      <arglist>(const OverlayKey &amp;destination, NodeVector *nodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TransportAddress &amp;</type>
      <name>failedNode</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>ad691bdd611ba773d5b7a0a90af491498</anchor>
      <arglist>(const TransportAddress &amp;failed)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TransportAddress &amp;</type>
      <name>repair</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>aee63679544eb8ea21dbbf4d5dc7ef330</anchor>
      <arglist>(const PastryStateMessage *msg, const PastryStateMsgProximity *prox)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isClosestNode</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>aa525adf4fc0334d812fbb70a50b78ca5</anchor>
      <arglist>(const OverlayKey &amp;destination) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dumpToStateMessage</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>a86d0046df97f4d54384d2a0b3936c53e</anchor>
      <arglist>(PastryStateMessage *msg) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TransportAddress &amp;</type>
      <name>getRandomNode</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>a76dca71b4a758f9aec046e1626b5a42e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mergeNode</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>a1e19ba86f8c54fdab06a8aed85a8c95f</anchor>
      <arglist>(const NodeHandle &amp;node, simtime_t prox)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>mergeState</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>a477c57b8227f5ec46a3d635b4590985a</anchor>
      <arglist>(const PastryStateMessage *msg, const PastryStateMsgProximity *prox)</arglist>
    </member>
    <member kind="function">
      <type>const NodeHandle &amp;</type>
      <name>getPredecessor</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>aa6b310e05c4fd88e015092740665e98f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const NodeHandle &amp;</type>
      <name>getSuccessor</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>ab613105c42c31ecf5b4353a213036b63</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>ae13d5a42c50606e3cc0fbcd830429322</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dumpToVector</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>a529939c1a02749c1b18300404172c6ad</anchor>
      <arglist>(std::vector&lt; TransportAddress &gt; &amp;affected) const </arglist>
    </member>
    <member kind="function">
      <type>NodeVector *</type>
      <name>createSiblingVector</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>a8e35d7891d1a32e48fce420555ff2b4d</anchor>
      <arglist>(const OverlayKey &amp;key, int numSiblings) const </arglist>
    </member>
    <member kind="function">
      <type>PastryNewLeafsMessage *</type>
      <name>getNewLeafsMessage</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>a3d51346450731df0d955386d19f45f72</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>OverlayKey</type>
      <name>estimateMeanDistance</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>ab1df380d8c6a16d7ce1cc889bc70abea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>earlyInit</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>a606dbf99943147de93fef16e9bc4bb1f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>const NodeHandle &amp;</type>
      <name>getBiggestNode</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>a5b83a6b8a5ef6ad328b88710ea1164b8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>const OverlayKey &amp;</type>
      <name>getBiggestKey</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>a9b1713cff5c488d9eb918107dd735514</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>const NodeHandle &amp;</type>
      <name>getSmallestNode</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>a95c6d44e09bd76f79a11f097bf05e727</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>const OverlayKey &amp;</type>
      <name>getSmallestKey</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>a7eae5839ee4ef18bf37984cbc99ce11e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>isLeft</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>aafdca32c4ad0049c6b260ae61cc5a8f5</anchor>
      <arglist>(const OverlayKey &amp;key) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>insertLeaf</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>ac563e858547e96db005896f8d822d84b</anchor>
      <arglist>(std::vector&lt; NodeHandle &gt;::iterator &amp;it, const NodeHandle &amp;node)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>balanceLeafSet</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>aec4b33e2ef0b6bcf7e9803102f5bd174</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>numberOfLeaves</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>a2b79dd7347229e4661b0b9d34f6909fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>repairTimeout</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>a314a62c6e53224ba6de785f5754fcc41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BasePastry *</type>
      <name>overlay</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>a81308a19594555ad39b7a35a26bf0e4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; NodeHandle &gt;</type>
      <name>leaves</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>afef9535e5da8a4151381d31df20e37a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; NodeHandle &gt;::iterator</type>
      <name>smaller</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>a1b2af0d1e896f6879a5977536499e123</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; NodeHandle &gt;::iterator</type>
      <name>bigger</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>ad7935e96df4a1e07256e1f456f8e57a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; TransportAddress, PLSRepairData &gt;</type>
      <name>awaitingRepair</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>ae5272dfe11057414c1651eb4d3eca5ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>newLeafs</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>a433ea4e50c2d5f458d5c91c16f6fc8da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isFull</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>a603a986ef0e87c7ad4e0f8e23d46adf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>wasFull</name>
      <anchorfile>classPastryLeafSet.html</anchorfile>
      <anchor>abb1d399d03a2768881b272ed93f786a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PastryNeighborhoodSet</name>
    <filename>classPastryNeighborhoodSet.html</filename>
    <base>PastryStateObject</base>
    <member kind="function">
      <type>void</type>
      <name>initializeSet</name>
      <anchorfile>classPastryNeighborhoodSet.html</anchorfile>
      <anchor>a12f548fd0c008660a2b05457b286dc13</anchor>
      <arglist>(uint32_t numberOfNeighbors, uint32_t bitsPerDigit, const NodeHandle &amp;owner)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dumpToStateMessage</name>
      <anchorfile>classPastryNeighborhoodSet.html</anchorfile>
      <anchor>a401ee530fc0a5b89cfc2ccda3a0a7250</anchor>
      <arglist>(PastryStateMessage *msg) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>findCloserNode</name>
      <anchorfile>classPastryNeighborhoodSet.html</anchorfile>
      <anchor>aa17a22a731c6aba55fda5ac962df1de3</anchor>
      <arglist>(const OverlayKey &amp;destination, bool optimize=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findCloserNodes</name>
      <anchorfile>classPastryNeighborhoodSet.html</anchorfile>
      <anchor>a1b15fe9598b91dbb26294ed6193235f2</anchor>
      <arglist>(const OverlayKey &amp;destination, NodeVector *nodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>mergeNode</name>
      <anchorfile>classPastryNeighborhoodSet.html</anchorfile>
      <anchor>a1aa8142a891251518109a700377d1458</anchor>
      <arglist>(const NodeHandle &amp;node, simtime_t prox)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dumpToVector</name>
      <anchorfile>classPastryNeighborhoodSet.html</anchorfile>
      <anchor>ac0741c4c45fb5176e207dadc67a20a03</anchor>
      <arglist>(std::vector&lt; TransportAddress &gt; &amp;affected) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TransportAddress &amp;</type>
      <name>failedNode</name>
      <anchorfile>classPastryNeighborhoodSet.html</anchorfile>
      <anchor>a86f227b707f881c8897ec334f2bd5a33</anchor>
      <arglist>(const TransportAddress &amp;failed)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>earlyInit</name>
      <anchorfile>classPastryNeighborhoodSet.html</anchorfile>
      <anchor>a6eaeba04cfc22f37c8d376b30adc0de9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>numberOfNeighbors</name>
      <anchorfile>classPastryNeighborhoodSet.html</anchorfile>
      <anchor>a1e2c345c766047cc3756e604e06feac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; PastryExtendedNode &gt;</type>
      <name>neighbors</name>
      <anchorfile>classPastryNeighborhoodSet.html</anchorfile>
      <anchor>a0516632729bdf6e7bb550e49aab61adb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PastryNewLeafsMessage</name>
    <filename>classPastryNewLeafsMessage.html</filename>
    <member kind="function">
      <type></type>
      <name>PastryNewLeafsMessage</name>
      <anchorfile>classPastryNewLeafsMessage.html</anchorfile>
      <anchor>a05ade81e3d0612a25e9ee0e96a57ea14</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PastryNewLeafsMessage</name>
      <anchorfile>classPastryNewLeafsMessage.html</anchorfile>
      <anchor>a7d687abb7ecf577fd9891d6e9fc06004</anchor>
      <arglist>(const PastryNewLeafsMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PastryNewLeafsMessage</name>
      <anchorfile>classPastryNewLeafsMessage.html</anchorfile>
      <anchor>aad5fabe42456a9d34f4bfa36a6352b5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PastryNewLeafsMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classPastryNewLeafsMessage.html</anchorfile>
      <anchor>aa057abe2f13c39cab55e61431cb176b8</anchor>
      <arglist>(const PastryNewLeafsMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PastryNewLeafsMessage *</type>
      <name>dup</name>
      <anchorfile>classPastryNewLeafsMessage.html</anchorfile>
      <anchor>a9ac09af87fe42b36f2c179b9058ac312</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPastryNewLeafsMessage.html</anchorfile>
      <anchor>a3b511c721bce406e261c58c6613d6965</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPastryNewLeafsMessage.html</anchorfile>
      <anchor>a437fe50dc56c8dc4e4a1743206ddf5d5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLeafsArraySize</name>
      <anchorfile>classPastryNewLeafsMessage.html</anchorfile>
      <anchor>ac7fb420b7b5be4e2b6d16a2ac58678c0</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getLeafsArraySize</name>
      <anchorfile>classPastryNewLeafsMessage.html</anchorfile>
      <anchor>afe8e9b0f84e14f3f47f0adc2c1d39aa3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getLeafs</name>
      <anchorfile>classPastryNewLeafsMessage.html</anchorfile>
      <anchor>afe579970985315667bbdfd6ee4bba2be</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getLeafs</name>
      <anchorfile>classPastryNewLeafsMessage.html</anchorfile>
      <anchor>a488c946c7f51a0e9f6aa90c2c6435914</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLeafs</name>
      <anchorfile>classPastryNewLeafsMessage.html</anchorfile>
      <anchor>aa55343ba7ecfc200aa57134d899ed4be</anchor>
      <arglist>(unsigned int k, const NodeHandle &amp;leafs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPastryNewLeafsMessage.html</anchorfile>
      <anchor>a0762ca747341d2c54dc4f9e9bd08ee84</anchor>
      <arglist>(const PastryNewLeafsMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle *</type>
      <name>leafs_var</name>
      <anchorfile>classPastryNewLeafsMessage.html</anchorfile>
      <anchor>a2d89a719db2d86d1b8046628b1620f60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>leafs_arraysize</name>
      <anchorfile>classPastryNewLeafsMessage.html</anchorfile>
      <anchor>ae1063445f4846ae1c7a13a4ed0494bed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPastryNewLeafsMessage.html</anchorfile>
      <anchor>ae97236f689c60af726ec412a10adbed6</anchor>
      <arglist>(const PastryNewLeafsMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PastryRoutingTable</name>
    <filename>classPastryRoutingTable.html</filename>
    <base>PastryStateObject</base>
    <member kind="function">
      <type>void</type>
      <name>initializeTable</name>
      <anchorfile>classPastryRoutingTable.html</anchorfile>
      <anchor>a3a4907994a66da808a72d17a77c93ee2</anchor>
      <arglist>(uint32_t bitsPerDigit, double repairTimeout, const NodeHandle &amp;owner)</arglist>
    </member>
    <member kind="function">
      <type>const NodeHandle &amp;</type>
      <name>lookupNextHop</name>
      <anchorfile>classPastryRoutingTable.html</anchorfile>
      <anchor>a0a3497ae41535458b14e31be32d5f6fc</anchor>
      <arglist>(const OverlayKey &amp;destination)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>findCloserNode</name>
      <anchorfile>classPastryRoutingTable.html</anchorfile>
      <anchor>a9f43c06e0a2d98f01c9b3809da0efae6</anchor>
      <arglist>(const OverlayKey &amp;destination, bool optimize=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findCloserNodes</name>
      <anchorfile>classPastryRoutingTable.html</anchorfile>
      <anchor>a0604bf72a6a6143d4cb8eb6a55e0b0f3</anchor>
      <arglist>(const OverlayKey &amp;destination, NodeVector *nodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TransportAddress &amp;</type>
      <name>failedNode</name>
      <anchorfile>classPastryRoutingTable.html</anchorfile>
      <anchor>ae440c8aa89543afc2147b8784be93c41</anchor>
      <arglist>(const TransportAddress &amp;failed)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TransportAddress &amp;</type>
      <name>repair</name>
      <anchorfile>classPastryRoutingTable.html</anchorfile>
      <anchor>a632d81ee59ded7bc2249b64555b3bb78</anchor>
      <arglist>(const PastryStateMessage *msg, const PastryStateMsgProximity *prox)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dumpToStateMessage</name>
      <anchorfile>classPastryRoutingTable.html</anchorfile>
      <anchor>a1d4e337dda181b732aa96cd5d5007a42</anchor>
      <arglist>(PastryStateMessage *msg) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dumpRowToMessage</name>
      <anchorfile>classPastryRoutingTable.html</anchorfile>
      <anchor>a3bf3d796d20167be722fdcff57f19944</anchor>
      <arglist>(PastryStateMessage *msg, int row) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLastRow</name>
      <anchorfile>classPastryRoutingTable.html</anchorfile>
      <anchor>a449b7e0abcd2be8a93816669201bfc4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; TransportAddress &gt; *</type>
      <name>getRow</name>
      <anchorfile>classPastryRoutingTable.html</anchorfile>
      <anchor>a092e213c15bf70d632dcae0f313bbe01</anchor>
      <arglist>(uint8_t row) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TransportAddress &amp;</type>
      <name>getRandomNode</name>
      <anchorfile>classPastryRoutingTable.html</anchorfile>
      <anchor>a37d02a2bda67fe9618b382f321a532d3</anchor>
      <arglist>(int row)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mergeNode</name>
      <anchorfile>classPastryRoutingTable.html</anchorfile>
      <anchor>a92eb6e9176f873cb0a7106ce6e97a53e</anchor>
      <arglist>(const NodeHandle &amp;node, simtime_t prox)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initStateFromHandleVector</name>
      <anchorfile>classPastryRoutingTable.html</anchorfile>
      <anchor>aa5222c6a0ecd848658dd51b8d93b7fc3</anchor>
      <arglist>(const std::vector&lt; PastryStateMsgHandle &gt; &amp;handles)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dumpToVector</name>
      <anchorfile>classPastryRoutingTable.html</anchorfile>
      <anchor>aed1ca355690a9e0354a420bf7c96e3a4</anchor>
      <arglist>(std::vector&lt; TransportAddress &gt; &amp;affected) const </arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>nodesPerRow</name>
      <anchorfile>classPastryRoutingTable.html</anchorfile>
      <anchor>a0b87befd6ebf85f6c6cdf3303d386b88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>earlyInit</name>
      <anchorfile>classPastryRoutingTable.html</anchorfile>
      <anchor>a1c3b854b710dba7cc56abc427980fbec</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>addRow</name>
      <anchorfile>classPastryRoutingTable.html</anchorfile>
      <anchor>a4a364fc06948408b322cd12d7988bccc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>uint32_t</type>
      <name>digitAt</name>
      <anchorfile>classPastryRoutingTable.html</anchorfile>
      <anchor>a4b84eeabf2d6da3509c9159b0c1c4beb</anchor>
      <arglist>(uint32_t n, const OverlayKey &amp;key) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>const PastryExtendedNode &amp;</type>
      <name>nodeAt</name>
      <anchorfile>classPastryRoutingTable.html</anchorfile>
      <anchor>a8ecdfb9dca39fcf3bb0e5418fec9d78c</anchor>
      <arglist>(uint32_t row, uint32_t col) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>findNextNodeToAsk</name>
      <anchorfile>classPastryRoutingTable.html</anchorfile>
      <anchor>a129c1c2b0591a8c6a6c1c7eae380131e</anchor>
      <arglist>(PRTTrackRepair &amp;track) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>repairTimeout</name>
      <anchorfile>classPastryRoutingTable.html</anchorfile>
      <anchor>aa22730d4147c929c205d86f4bda64c61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; PRTRow &gt;</type>
      <name>rows</name>
      <anchorfile>classPastryRoutingTable.html</anchorfile>
      <anchor>a9ad52acd8b712f0b841806b9e193fb4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; PRTTrackRepair &gt;</type>
      <name>awaitingRepair</name>
      <anchorfile>classPastryRoutingTable.html</anchorfile>
      <anchor>adcd9c4e275d1036afd0fe371b53d4d00</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PastrySendState</name>
    <filename>classPastrySendState.html</filename>
    <member kind="function">
      <type></type>
      <name>PastrySendState</name>
      <anchorfile>classPastrySendState.html</anchorfile>
      <anchor>a6e7086221fa198acd87eb9eac1871498</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PastrySendState</name>
      <anchorfile>classPastrySendState.html</anchorfile>
      <anchor>a66f01ca2fa993b4ac992ec354752c740</anchor>
      <arglist>(const PastrySendState &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PastrySendState</name>
      <anchorfile>classPastrySendState.html</anchorfile>
      <anchor>ac8c266bdc7c044bfac6f2657b67a58de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PastrySendState &amp;</type>
      <name>operator=</name>
      <anchorfile>classPastrySendState.html</anchorfile>
      <anchor>aa945f44d9f46da04289224b3b8a47237</anchor>
      <arglist>(const PastrySendState &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PastrySendState *</type>
      <name>dup</name>
      <anchorfile>classPastrySendState.html</anchorfile>
      <anchor>a2cc8c2a18bcc3de49812b503f196fb8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPastrySendState.html</anchorfile>
      <anchor>a63fd72afcaa5106307b8e7a71faf3483</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPastrySendState.html</anchorfile>
      <anchor>ac8a5af912488794b5e45001830d143d7</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransportAddress &amp;</type>
      <name>getDest</name>
      <anchorfile>classPastrySendState.html</anchorfile>
      <anchor>a75f7974a4daa6381d9b3670096de5c61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TransportAddress &amp;</type>
      <name>getDest</name>
      <anchorfile>classPastrySendState.html</anchorfile>
      <anchor>ad877b3e7bfab71c0a7f8150eb951195e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDest</name>
      <anchorfile>classPastrySendState.html</anchorfile>
      <anchor>a98bec67ca2f64b3a3825b267d2af85f4</anchor>
      <arglist>(const TransportAddress &amp;dest)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPastrySendState.html</anchorfile>
      <anchor>a162f9edaa1b74c6559d8912ea09b05fc</anchor>
      <arglist>(const PastrySendState &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress</type>
      <name>dest_var</name>
      <anchorfile>classPastrySendState.html</anchorfile>
      <anchor>a0ae5859aa7fb66d1ae920b19e9145893</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPastrySendState.html</anchorfile>
      <anchor>a36bcb1fefd362516c74905483d0bcb80</anchor>
      <arglist>(const PastrySendState &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PastryStateMessage</name>
    <filename>classPastryStateMessage.html</filename>
    <base>BaseOverlayMessage</base>
    <member kind="function">
      <type></type>
      <name>PastryStateMessage</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>a409b4d120e0029ab56f76e108743d872</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PastryStateMessage</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>a8a729abe9ba18a009423d07c54937321</anchor>
      <arglist>(const PastryStateMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PastryStateMessage</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>afd8d2016ee34ddece44c57e19c3a6198</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PastryStateMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>a36e41a212499792297746653547f11bb</anchor>
      <arglist>(const PastryStateMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PastryStateMessage *</type>
      <name>dup</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>a8de77791dbe5c55e8908077805c8d3a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>af4a89d61856cfa4429dbd3bf939b2959</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>a5601aff8d4381a99a2dd0bc611da5620</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPastryStateMsgType</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>a85ccf345e532cb9740d87e271209349c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPastryStateMsgType</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>a3c4c9cf0d7876229955357614bd6f313</anchor>
      <arglist>(int pastryStateMsgType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getSender</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>ab854faec5faca431685829ba8296ecfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getSender</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>a9ae076b8e71ef183f98a66754b98bb9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSender</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>ab1d258aa1c2b9ef008d9a05b15b4b68d</anchor>
      <arglist>(const NodeHandle &amp;sender)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRoutingTableArraySize</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>a1432ce9c20f9ef89f14fa3fb1384d3f3</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getRoutingTableArraySize</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>a2abf365a56348d30b99e9733c6905065</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getRoutingTable</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>a0e4a031d7e3a30bd94c3867d0862288e</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getRoutingTable</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>a6f0caf26b5dae642287327c3b2619ca5</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRoutingTable</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>a92f3cfd3a8a76a8271634cef30ae51b7</anchor>
      <arglist>(unsigned int k, const NodeHandle &amp;routingTable)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLeafSetArraySize</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>ac3f254bf54612f480dde0eef3a1204bf</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getLeafSetArraySize</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>ad792f9b41aee54969504dee46452252c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getLeafSet</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>a27c65fc289c9baa8121a8be1977839cd</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getLeafSet</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>a748b9055e184b16abcbc3cfe4bb3bde4</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLeafSet</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>a8d3948f9d7acca20fd5ca257ca7b45be</anchor>
      <arglist>(unsigned int k, const NodeHandle &amp;leafSet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNeighborhoodSetArraySize</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>a78bd1834c1a5aa9e80321f55fd3d3cf1</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNeighborhoodSetArraySize</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>a88929cf3d5340cda73e6305c25714788</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getNeighborhoodSet</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>a359b5a6fff11286993c16b9eec3da15a</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getNeighborhoodSet</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>ad6c04a967ae79561cc45c3258511a899</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNeighborhoodSet</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>a437af3633e4e13b1afa2df7dff2ba83d</anchor>
      <arglist>(unsigned int k, const NodeHandle &amp;neighborhoodSet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRow</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>abaeb686d69f39249dde7b2ce66964f9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRow</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>ad6da2b03675b497825a6b8d58b5ee9ff</anchor>
      <arglist>(int row)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getLastHop</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>a3bc2696f0c1e87ea38b8bd7e7e56dbe7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLastHop</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>a9c8c0baa2980d18b023410bb05b734a2</anchor>
      <arglist>(bool lastHop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getTimestamp</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>a64e104bf42d6785530fba51af52bc44c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimestamp</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>a15027011e04f8fe22404b4c97e1d4b42</anchor>
      <arglist>(simtime_t timestamp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>a2d38c13bc60cdfac2293119a85e03035</anchor>
      <arglist>(const PastryStateMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>pastryStateMsgType_var</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>ac807cf0cc510ca40d4298ef35246de5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>sender_var</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>ac84ea5bd050b3534085a7384cdebd999</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle *</type>
      <name>routingTable_var</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>a9418747e162f357369998d1dbc9e1904</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>routingTable_arraysize</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>a799ca7e16abd9eea7512fc621bb93575</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle *</type>
      <name>leafSet_var</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>a4f2759806b82f37d65687de38907510b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>leafSet_arraysize</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>a2625423a028d42793307924bdf6ccc67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle *</type>
      <name>neighborhoodSet_var</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>a017b387da50a7c908f284bacebe294a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>neighborhoodSet_arraysize</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>ae87d34057792790ad0b10761b7c96fd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>row_var</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>ac7c7c1cdfd33feac3f4103ded7e20a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>lastHop_var</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>a9e0ab319d50ade25e81c0435f1803a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>timestamp_var</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>a23d7f0feb7a5ecae2745510b0ae2dfb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPastryStateMessage.html</anchorfile>
      <anchor>a5cf23877a84833d3e49a78d5b0d55fdb</anchor>
      <arglist>(const PastryStateMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PastryStateMsgHandle</name>
    <filename>structPastryStateMsgHandle.html</filename>
    <member kind="function">
      <type></type>
      <name>PastryStateMsgHandle</name>
      <anchorfile>structPastryStateMsgHandle.html</anchorfile>
      <anchor>aeac0eac3c645e6eada06abe876502c9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PastryStateMsgHandle</name>
      <anchorfile>structPastryStateMsgHandle.html</anchorfile>
      <anchor>a18b940e11daa42586ec33fda24bd3134</anchor>
      <arglist>(PastryStateMessage *msg)</arglist>
    </member>
    <member kind="variable">
      <type>PastryStateMessage *</type>
      <name>msg</name>
      <anchorfile>structPastryStateMsgHandle.html</anchorfile>
      <anchor>aecab9143d3bcf4e2d70272abbb74f428</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PastryStateMsgProximity *</type>
      <name>prox</name>
      <anchorfile>structPastryStateMsgHandle.html</anchorfile>
      <anchor>a83106b985f989835e68654900708835b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>outdatedUpdate</name>
      <anchorfile>structPastryStateMsgHandle.html</anchorfile>
      <anchor>a0907d3b39de28e563bc6bf41c859c00e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>nonce</name>
      <anchorfile>structPastryStateMsgHandle.html</anchorfile>
      <anchor>af0e150b4085e24920cc0499b6a7c589f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PastryStateMsgProximity</name>
    <filename>structPastryStateMsgProximity.html</filename>
    <member kind="variable">
      <type>std::vector&lt; simtime_t &gt;</type>
      <name>pr_rt</name>
      <anchorfile>structPastryStateMsgProximity.html</anchorfile>
      <anchor>afc10e12f0e7f2806255ce8277ece0a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; simtime_t &gt;</type>
      <name>pr_ls</name>
      <anchorfile>structPastryStateMsgProximity.html</anchorfile>
      <anchor>adbadfcad7fd962f6b3a12c003f873dfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; simtime_t &gt;</type>
      <name>pr_ns</name>
      <anchorfile>structPastryStateMsgProximity.html</anchorfile>
      <anchor>a564d4bd5da4adead22fc4ef02d9c1c91</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PastryStateObject</name>
    <filename>classPastryStateObject.html</filename>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classPastryStateObject.html</anchorfile>
      <anchor>abb6493e3c98f1e6e693137c121cf1767</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numInitStages</name>
      <anchorfile>classPastryStateObject.html</anchorfile>
      <anchor>ab32d468bd497367a3f993fd90de46982</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classPastryStateObject.html</anchorfile>
      <anchor>adf826ec538628fcb93496441c873be4d</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getDestinationNode</name>
      <anchorfile>classPastryStateObject.html</anchorfile>
      <anchor>a6837869040021974c136f43630a563b2</anchor>
      <arglist>(const OverlayKey &amp;destination)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const NodeHandle &amp;</type>
      <name>findCloserNode</name>
      <anchorfile>classPastryStateObject.html</anchorfile>
      <anchor>a5bc159769dfdcd95ceaaf6055798b743</anchor>
      <arglist>(const OverlayKey &amp;destination, bool optimize=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>findCloserNodes</name>
      <anchorfile>classPastryStateObject.html</anchorfile>
      <anchor>a5255b15a989fb6f61403760383618375</anchor>
      <arglist>(const OverlayKey &amp;destination, NodeVector *nodes)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const TransportAddress &amp;</type>
      <name>failedNode</name>
      <anchorfile>classPastryStateObject.html</anchorfile>
      <anchor>aac3ee89c4129465def00861424f232e3</anchor>
      <arglist>(const TransportAddress &amp;failed)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TransportAddress &amp;</type>
      <name>repair</name>
      <anchorfile>classPastryStateObject.html</anchorfile>
      <anchor>a70220d25c9d51c068189884d973f45dc</anchor>
      <arglist>(const PastryStateMessage *msg, const PastryStateMsgProximity &amp;prox)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dumpToStateMessage</name>
      <anchorfile>classPastryStateObject.html</anchorfile>
      <anchor>a6df4273e063990435c7766cae4f1b83a</anchor>
      <arglist>(PastryStateMessage *msg) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>mergeState</name>
      <anchorfile>classPastryStateObject.html</anchorfile>
      <anchor>a36f82233ec05837bf3761057f2437c86</anchor>
      <arglist>(const PastryStateMessage *msg, const PastryStateMsgProximity *prox)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dumpToVector</name>
      <anchorfile>classPastryStateObject.html</anchorfile>
      <anchor>ac677c6c0df6213694165eb3ee912c85e</anchor>
      <arglist>(std::vector&lt; TransportAddress &gt; &amp;affected) const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCloser</name>
      <anchorfile>classPastryStateObject.html</anchorfile>
      <anchor>ace8eed35caedb59412a49132c4538917</anchor>
      <arglist>(const NodeHandle &amp;test, const OverlayKey &amp;destination, const NodeHandle &amp;reference=NodeHandle::UNSPECIFIED_NODE) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>specialCloserCondition</name>
      <anchorfile>classPastryStateObject.html</anchorfile>
      <anchor>a13a6c5fdcbe191dc45619aeaa29f1993</anchor>
      <arglist>(const NodeHandle &amp;test, const OverlayKey &amp;destination, const NodeHandle &amp;reference=NodeHandle::UNSPECIFIED_NODE) const </arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const PastryExtendedNode &amp;</type>
      <name>unspecNode</name>
      <anchorfile>classPastryStateObject.html</anchorfile>
      <anchor>a957e9ac8870e9f03df83f85ff4d8cf7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>owner</name>
      <anchorfile>classPastryStateObject.html</anchorfile>
      <anchor>a946cabf3c3e981122e05bb37bf1c95dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>bitsPerDigit</name>
      <anchorfile>classPastryStateObject.html</anchorfile>
      <anchor>a755bc90b0fb6bd61c42207d17855b743</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private" virtualness="pure">
      <type>virtual void</type>
      <name>earlyInit</name>
      <anchorfile>classPastryStateObject.html</anchorfile>
      <anchor>a711a095dc7d08c3ee45c4f8bdaf27fce</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" protection="private" virtualness="pure">
      <type>virtual bool</type>
      <name>mergeNode</name>
      <anchorfile>classPastryStateObject.html</anchorfile>
      <anchor>aa5029ce2c80ae1a744ea92efc02dc8a7</anchor>
      <arglist>(const NodeHandle &amp;node, simtime_t prox)=0</arglist>
    </member>
    <member kind="function" protection="private">
      <type>const OverlayKey *</type>
      <name>keyDist</name>
      <anchorfile>classPastryStateObject.html</anchorfile>
      <anchor>a182dd91bf8a093548c63b3a48caf558e</anchor>
      <arglist>(const OverlayKey &amp;a, const OverlayKey &amp;b) const </arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const PastryExtendedNode *</type>
      <name>_unspecNode</name>
      <anchorfile>classPastryStateObject.html</anchorfile>
      <anchor>a828ca53b6489299c05fcc898cdd185c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PeerInfo</name>
    <filename>classPeerInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>PeerInfo</name>
      <anchorfile>classPeerInfo.html</anchorfile>
      <anchor>a70b54b711ee78728b178d1a8125ac6ad</anchor>
      <arglist>(uint32_t type, int moduleId, cObject **context)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PeerInfo</name>
      <anchorfile>classPeerInfo.html</anchorfile>
      <anchor>ae8c6f8e4a2cee9164d6152ee4949eac4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getModuleID</name>
      <anchorfile>classPeerInfo.html</anchorfile>
      <anchor>ac0471825f4f2621579969f3746c5ce0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int8_t</type>
      <name>getNpsLayer</name>
      <anchorfile>classPeerInfo.html</anchorfile>
      <anchor>a5081c729d9f242ad2c0e8fba6f74b809</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNpsLayer</name>
      <anchorfile>classPeerInfo.html</anchorfile>
      <anchor>a9ddada01c7e69d45a14337aaf3c64692</anchor>
      <arglist>(int8_t layer)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getTypeID</name>
      <anchorfile>classPeerInfo.html</anchorfile>
      <anchor>a7b01dcdd9a7828c03feef39d5135ab1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPreKilled</name>
      <anchorfile>classPeerInfo.html</anchorfile>
      <anchor>a0185949eb66e8b86d9a2054806b351fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPreKilled</name>
      <anchorfile>classPeerInfo.html</anchorfile>
      <anchor>a5e5025cedd5d4583d3a2f0b3831d3b06</anchor>
      <arglist>(bool killed=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMalicious</name>
      <anchorfile>classPeerInfo.html</anchorfile>
      <anchor>ab3b47faa3d22a2d6163b794b6120cdf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cObject **</type>
      <name>getContext</name>
      <anchorfile>classPeerInfo.html</anchorfile>
      <anchor>aa1024f019594dd407420ac743c2fa23b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>dummy</name>
      <anchorfile>classPeerInfo.html</anchorfile>
      <anchor>ac2d810609c2a89e6bf52447c2e3832e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setMalicious</name>
      <anchorfile>classPeerInfo.html</anchorfile>
      <anchor>a75aaf2a9028378b1f6a472efa651230e</anchor>
      <arglist>(bool malic=true)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>malicious</name>
      <anchorfile>classPeerInfo.html</anchorfile>
      <anchor>a8193f45048efbfb4215479434f091a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>preKilled</name>
      <anchorfile>classPeerInfo.html</anchorfile>
      <anchor>a0a0229724b8e98c1c61a56d8d2a59c55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>moduleId</name>
      <anchorfile>classPeerInfo.html</anchorfile>
      <anchor>acc99f4edb1bbf9f2dc9212c1595e7a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>type</name>
      <anchorfile>classPeerInfo.html</anchorfile>
      <anchor>acd0d24ec52c5812e063632adfbaaed8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int8_t</type>
      <name>npsLayer</name>
      <anchorfile>classPeerInfo.html</anchorfile>
      <anchor>ae20377195b6e36b97f71c89f176dbe33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cObject **</type>
      <name>context</name>
      <anchorfile>classPeerInfo.html</anchorfile>
      <anchor>a6818fecfef98783d15afaf141007f5b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PeerStorage</name>
      <anchorfile>classPeerInfo.html</anchorfile>
      <anchor>a1c045b4619e2c9b325df62c2fff93ed4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classPeerInfo.html</anchorfile>
      <anchor>ace06fe786b1f81e9a0e788bc76d3db48</anchor>
      <arglist>(std::ostream &amp;os, const PeerInfo info)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PeerStorage</name>
    <filename>classPeerStorage.html</filename>
    <member kind="function">
      <type></type>
      <name>~PeerStorage</name>
      <anchorfile>classPeerStorage.html</anchorfile>
      <anchor>a3113e747030b722228e3654bfa01888b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classPeerStorage.html</anchorfile>
      <anchor>acebc332c8d4ec85af1f962fe6b7c8160</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PeerHashMap::iterator</type>
      <name>find</name>
      <anchorfile>classPeerStorage.html</anchorfile>
      <anchor>a8152e8a712310c3adcc662edc386b6eb</anchor>
      <arglist>(const IPvXAddress &amp;ip)</arglist>
    </member>
    <member kind="function">
      <type>const PeerHashMap::iterator</type>
      <name>begin</name>
      <anchorfile>classPeerStorage.html</anchorfile>
      <anchor>a048722b90e28fb970e85c6a9653af31d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PeerHashMap::iterator</type>
      <name>end</name>
      <anchorfile>classPeerStorage.html</anchorfile>
      <anchor>adfc52623206a2c51df441df2902e2b5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; const PeerHashMap::iterator, bool &gt;</type>
      <name>insert</name>
      <anchorfile>classPeerStorage.html</anchorfile>
      <anchor>adde5e3f466c1c6b1902e3d9d528ce1af</anchor>
      <arglist>(const std::pair&lt; IPvXAddress, BootstrapEntry &gt; &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classPeerStorage.html</anchorfile>
      <anchor>ac13286c277874029bf43a0fc7462ef5a</anchor>
      <arglist>(const PeerHashMap::iterator it)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerOverlay</name>
      <anchorfile>classPeerStorage.html</anchorfile>
      <anchor>acd36b221e069b7a161b1e52c0e4b665f</anchor>
      <arglist>(const PeerHashMap::iterator it, const NodeHandle &amp;peer, int32_t overlayId)</arglist>
    </member>
    <member kind="function">
      <type>const PeerHashMap::iterator</type>
      <name>getRandomNode</name>
      <anchorfile>classPeerStorage.html</anchorfile>
      <anchor>aea5a4c319201e491d5518ccdf6dc6d71</anchor>
      <arglist>(int32_t overlayId, int32_t nodeType, bool bootstrappedNeeded, bool inoffensiveNeeded)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMalicious</name>
      <anchorfile>classPeerStorage.html</anchorfile>
      <anchor>ac74608af214b6f30cf311b18a7fc7ab2</anchor>
      <arglist>(const PeerHashMap::iterator it, bool malicious)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBootstrapped</name>
      <anchorfile>classPeerStorage.html</anchorfile>
      <anchor>add512be6c09f8f7cd87926bae7b00477</anchor>
      <arglist>(const PeerHashMap::iterator it, int32_t overlayId, bool bootstrapped)</arglist>
    </member>
    <member kind="function">
      <type>const PeerHashMap &amp;</type>
      <name>getPeerHashMap</name>
      <anchorfile>classPeerStorage.html</anchorfile>
      <anchor>a4dbd5e3087e6735d6205475cc741e0fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; std::vector&lt; PeerHashMap::iterator &gt; &gt;</type>
      <name>PeerVector</name>
      <anchorfile>classPeerStorage.html</anchorfile>
      <anchor>a45e525f06a217cc5d791cb1c307b7a0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>insertMapIteratorIntoVector</name>
      <anchorfile>classPeerStorage.html</anchorfile>
      <anchor>a5f94198eb4d2c534659632ba9d88e2ee</anchor>
      <arglist>(PeerVector &amp;peerVector, PeerHashMap::iterator it)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>removeMapIteratorFromVector</name>
      <anchorfile>classPeerStorage.html</anchorfile>
      <anchor>a6542a4173857f771aaaa7d9beeeac88f</anchor>
      <arglist>(PeerVector &amp;peerVector, PeerHashMap::iterator it)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>size_t</type>
      <name>offsetSize</name>
      <anchorfile>classPeerStorage.html</anchorfile>
      <anchor>aefa9507810108473ae280ac1f6c763fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>uint8_t</type>
      <name>calcOffset</name>
      <anchorfile>classPeerStorage.html</anchorfile>
      <anchor>a2e2b5efe4347866c41765dafcc059c3b</anchor>
      <arglist>(bool bootstrapped, bool malicious)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PeerHashMap</type>
      <name>peerHashMap</name>
      <anchorfile>classPeerStorage.html</anchorfile>
      <anchor>aaed9873f2a557e5612e4b498c6d5ab36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PeerVector</type>
      <name>globalPeerVector</name>
      <anchorfile>classPeerStorage.html</anchorfile>
      <anchor>a52f8be668ed1db2a692d9f823685a40b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; int32_t, PeerVector &gt;</type>
      <name>overlayPeerVectorMap</name>
      <anchorfile>classPeerStorage.html</anchorfile>
      <anchor>a16b09ff3efd16917a6ea3dfb92ee25ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::vector&lt; uint32_t &gt; &gt;</type>
      <name>freeVector</name>
      <anchorfile>classPeerStorage.html</anchorfile>
      <anchor>ad05dcb8f3a1c81ef4b24f436f045d6ae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PingCall</name>
    <filename>classPingCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>PingCall</name>
      <anchorfile>classPingCall.html</anchorfile>
      <anchor>a0b29692a084da1cceae207d4235a55b7</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PingCall</name>
      <anchorfile>classPingCall.html</anchorfile>
      <anchor>ac75e84a2a87ac1a33ed48bd470adbfdc</anchor>
      <arglist>(const PingCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PingCall</name>
      <anchorfile>classPingCall.html</anchorfile>
      <anchor>a9f569e0c23444a735c51f65e26835b90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PingCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classPingCall.html</anchorfile>
      <anchor>adcd21281fd2076c06a2e3cd53f19f364</anchor>
      <arglist>(const PingCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PingCall *</type>
      <name>dup</name>
      <anchorfile>classPingCall.html</anchorfile>
      <anchor>a7a457c2489ea91b39e35569ce0101000</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPingCall.html</anchorfile>
      <anchor>acf581c12ed01459dc639b157d3c51fe0</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPingCall.html</anchorfile>
      <anchor>a6868eeb622ca71f2c780decbd775c7db</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPingCall.html</anchorfile>
      <anchor>a7cd3b738232373ee44079ea5bf95d19d</anchor>
      <arglist>(const PingCall &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPingCall.html</anchorfile>
      <anchor>a21037a1c8908fb947a5191cb683010a1</anchor>
      <arglist>(const PingCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PingResponse</name>
    <filename>classPingResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>PingResponse</name>
      <anchorfile>classPingResponse.html</anchorfile>
      <anchor>a9dc7550f532beaa3d4ae522e59c7ead1</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PingResponse</name>
      <anchorfile>classPingResponse.html</anchorfile>
      <anchor>aa18d7eb29a72cd7c0f344535994ea076</anchor>
      <arglist>(const PingResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PingResponse</name>
      <anchorfile>classPingResponse.html</anchorfile>
      <anchor>ab9f9b68fabc24a74dfe9e3cff867a8c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PingResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classPingResponse.html</anchorfile>
      <anchor>abdea918e856fc534f6d8c42068c594a5</anchor>
      <arglist>(const PingResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PingResponse *</type>
      <name>dup</name>
      <anchorfile>classPingResponse.html</anchorfile>
      <anchor>a8adcea852f44634f8275ad041ff9254f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPingResponse.html</anchorfile>
      <anchor>a7e334330fed16790c68b618d564b55c3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPingResponse.html</anchorfile>
      <anchor>ae0000942e75d28111e896ba7ee1ebe50</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPingResponse.html</anchorfile>
      <anchor>a4f7fada9c0ceb6035a8a66221d18c2ad</anchor>
      <arglist>(const PingResponse &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPingResponse.html</anchorfile>
      <anchor>a21d448d7f0c7ea8da6108f5b6f996620</anchor>
      <arglist>(const PingResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PLSRepairData</name>
    <filename>structPLSRepairData.html</filename>
    <member kind="function">
      <type></type>
      <name>PLSRepairData</name>
      <anchorfile>structPLSRepairData.html</anchorfile>
      <anchor>a4f49472de21d4bfa81ec61ca42ff10aa</anchor>
      <arglist>(simtime_t ts=0, bool left=true)</arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>ts</name>
      <anchorfile>structPLSRepairData.html</anchorfile>
      <anchor>ac02143bef8d0da29729cc6776c1b31ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>left</name>
      <anchorfile>structPLSRepairData.html</anchorfile>
      <anchor>af4c40d14756238b320fb37151adf27ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Prox</name>
    <filename>structProx.html</filename>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>structProx.html</anchorfile>
      <anchor>aa9dd32a95e3953f42890ea15b3af9168</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator simtime_t</name>
      <anchorfile>structProx.html</anchorfile>
      <anchor>a97806cb56f2bc51183bc473756078551</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Prox</name>
      <anchorfile>structProx.html</anchorfile>
      <anchor>a211f429a367382e293b29884d16c6d1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Prox</name>
      <anchorfile>structProx.html</anchorfile>
      <anchor>a1f6de464c35ad01fc0bfe05692f035eb</anchor>
      <arglist>(simtime_t prox)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Prox</name>
      <anchorfile>structProx.html</anchorfile>
      <anchor>abc56b95d20cddc3e53cabde6ecb0a041</anchor>
      <arglist>(simtime_t prox, double acc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Prox</name>
      <anchorfile>structProx.html</anchorfile>
      <anchor>adb27bba706685ac84b525d5e727a9451</anchor>
      <arglist>(double prox, double acc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structProx.html</anchorfile>
      <anchor>a5f07918d38c363632c0c18440d042ca6</anchor>
      <arglist>(Prox p) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structProx.html</anchorfile>
      <anchor>ad3ab1ea8926d3ce143f168869e4bf78e</anchor>
      <arglist>(Prox p) const </arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>proximity</name>
      <anchorfile>structProx.html</anchorfile>
      <anchor>aeb8eca3cac2c681c5e7f1060fcbd7b6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>accuracy</name>
      <anchorfile>structProx.html</anchorfile>
      <anchor>a74cc898fbab0f32238e92c530c27183c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Prox</type>
      <name>PROX_SELF</name>
      <anchorfile>structProx.html</anchorfile>
      <anchor>ae33fb924891e14e0161708bfadf8f033</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Prox</type>
      <name>PROX_UNKNOWN</name>
      <anchorfile>structProx.html</anchorfile>
      <anchor>aa7ac832a04fe61863222d8631526647b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Prox</type>
      <name>PROX_TIMEOUT</name>
      <anchorfile>structProx.html</anchorfile>
      <anchor>a5ded765f6344797ea0e9c35c85cd61af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Prox</type>
      <name>PROX_WAITING</name>
      <anchorfile>structProx.html</anchorfile>
      <anchor>abf2f5f92914e5e617c5ef157ea5ffc86</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structProx.html</anchorfile>
      <anchor>add431695399cdf49d3f6481c55e66130</anchor>
      <arglist>(std::ostream &amp;os, const Prox &amp;prox)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ProxExtractor</name>
    <filename>structProxExtractor.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static Prox</type>
      <name>prox</name>
      <anchorfile>structProxExtractor.html</anchorfile>
      <anchor>a8b2ee0c442a53f479a857a1225d2ad0c</anchor>
      <arglist>(const T &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ProxExtractor&lt; KademliaBucketEntry &gt;</name>
    <filename>structProxExtractor_3_01KademliaBucketEntry_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static Prox</type>
      <name>prox</name>
      <anchorfile>structProxExtractor_3_01KademliaBucketEntry_01_4.html</anchorfile>
      <anchor>a549028de030b1f9dce7d794e18274806</anchor>
      <arglist>(const KademliaBucketEntry &amp;entry)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ProxExtractor&lt; ProxNodeHandle &gt;</name>
    <filename>structProxExtractor_3_01ProxNodeHandle_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static Prox</type>
      <name>prox</name>
      <anchorfile>structProxExtractor_3_01ProxNodeHandle_01_4.html</anchorfile>
      <anchor>afe4e0fc8192132969b14a9d5b0c11416</anchor>
      <arglist>(const ProxNodeHandle &amp;node)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ProxExtractor&lt; ProxTransportAddress &gt;</name>
    <filename>structProxExtractor_3_01ProxTransportAddress_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static Prox</type>
      <name>prox</name>
      <anchorfile>structProxExtractor_3_01ProxTransportAddress_01_4.html</anchorfile>
      <anchor>a0eba00bb61a29862612808c0eaf9db60</anchor>
      <arglist>(const ProxTransportAddress &amp;address)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ProxFindNodeCall</name>
    <filename>classProxFindNodeCall.html</filename>
    <base>FindNodeCall</base>
    <member kind="function">
      <type></type>
      <name>ProxFindNodeCall</name>
      <anchorfile>classProxFindNodeCall.html</anchorfile>
      <anchor>a59ba139c1fd6c160bfdb41bc18ee7b43</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProxFindNodeCall</name>
      <anchorfile>classProxFindNodeCall.html</anchorfile>
      <anchor>a6102936e4c2e87ca5bb27b457f40f545</anchor>
      <arglist>(const ProxFindNodeCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ProxFindNodeCall</name>
      <anchorfile>classProxFindNodeCall.html</anchorfile>
      <anchor>ab043a4cf7b1e19af9277f9d8c533e4cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ProxFindNodeCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classProxFindNodeCall.html</anchorfile>
      <anchor>ab31d3e477d4f36a3b32ba1e7f23d83ef</anchor>
      <arglist>(const ProxFindNodeCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ProxFindNodeCall *</type>
      <name>dup</name>
      <anchorfile>classProxFindNodeCall.html</anchorfile>
      <anchor>afe7b414d534478d06f4727c81bb42248</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classProxFindNodeCall.html</anchorfile>
      <anchor>ae46677a49c28b6ac6992a25808105c38</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classProxFindNodeCall.html</anchorfile>
      <anchor>a54b382d49be245af8e8d6d864a7c6ff3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classProxFindNodeCall.html</anchorfile>
      <anchor>a703a966e963188c1a3dd2983d5eaa3e1</anchor>
      <arglist>(const ProxFindNodeCall &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classProxFindNodeCall.html</anchorfile>
      <anchor>a861a2a86ebcecee1ebf8566261c7a224</anchor>
      <arglist>(const ProxFindNodeCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ProxFindNodeResponse</name>
    <filename>classProxFindNodeResponse.html</filename>
    <base>FindNodeResponse</base>
    <member kind="function">
      <type></type>
      <name>ProxFindNodeResponse</name>
      <anchorfile>classProxFindNodeResponse.html</anchorfile>
      <anchor>ae9687aa79e01d17a70bcc80675afb618</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProxFindNodeResponse</name>
      <anchorfile>classProxFindNodeResponse.html</anchorfile>
      <anchor>af120af271e9a3e002c09c9c13a76ce7a</anchor>
      <arglist>(const ProxFindNodeResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ProxFindNodeResponse</name>
      <anchorfile>classProxFindNodeResponse.html</anchorfile>
      <anchor>a9958e3696cd2d63fcce12915a24917f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ProxFindNodeResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classProxFindNodeResponse.html</anchorfile>
      <anchor>af34e3d6dd50ad9a2f4f0b9b8f3ae1c7f</anchor>
      <arglist>(const ProxFindNodeResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ProxFindNodeResponse *</type>
      <name>dup</name>
      <anchorfile>classProxFindNodeResponse.html</anchorfile>
      <anchor>a6c28774c18dd87d8caf9c316239c228b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classProxFindNodeResponse.html</anchorfile>
      <anchor>a1e565632b418d42fbaca84b177de73af</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classProxFindNodeResponse.html</anchorfile>
      <anchor>a4a6519dadb83c79e99428e7a3979a44c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNextHopNcsInfosArraySize</name>
      <anchorfile>classProxFindNodeResponse.html</anchorfile>
      <anchor>a6532d99dce0f47d35474ec9f8bef4909</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNextHopNcsInfosArraySize</name>
      <anchorfile>classProxFindNodeResponse.html</anchorfile>
      <anchor>a4d32f457f2e10b782ba0068379d69883</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getNextHopNcsInfos</name>
      <anchorfile>classProxFindNodeResponse.html</anchorfile>
      <anchor>a6596d91ec300e29c488cb148b9422970</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNextHopNcsInfos</name>
      <anchorfile>classProxFindNodeResponse.html</anchorfile>
      <anchor>abee24be165c67a646a02bbd97922e2c0</anchor>
      <arglist>(unsigned int k, double nextHopNcsInfos)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classProxFindNodeResponse.html</anchorfile>
      <anchor>a7e70d3cbc641b356d94c9e16e71d6537</anchor>
      <arglist>(const ProxFindNodeResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>nextHopNcsInfos_var</name>
      <anchorfile>classProxFindNodeResponse.html</anchorfile>
      <anchor>aae64e0d590f358b86bdcf7098db2fde0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>nextHopNcsInfos_arraysize</name>
      <anchorfile>classProxFindNodeResponse.html</anchorfile>
      <anchor>a9c8cb60fc464e2f2c618368c5f74a474</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classProxFindNodeResponse.html</anchorfile>
      <anchor>a32ece9637acf49481efa1331f34cfe6d</anchor>
      <arglist>(const ProxFindNodeResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ProxKey</name>
    <filename>structProxKey.html</filename>
    <member kind="function">
      <type></type>
      <name>ProxKey</name>
      <anchorfile>structProxKey.html</anchorfile>
      <anchor>afe81265d75d692ce12d2f8337997a635</anchor>
      <arglist>(const Prox &amp;prox, const OverlayKey &amp;key)</arglist>
    </member>
    <member kind="variable">
      <type>Prox</type>
      <name>prox</name>
      <anchorfile>structProxKey.html</anchorfile>
      <anchor>a06900dc03395a4eacdb8b1db5066f44d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OverlayKey</type>
      <name>key</name>
      <anchorfile>structProxKey.html</anchorfile>
      <anchor>a430332c7423fc32582b51c795ca4cee4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ProxKeyComparator</name>
    <filename>classProxKeyComparator.html</filename>
    <templarg>Metric</templarg>
    <templarg>ProxComp</templarg>
    <base>AbstractProxKeyComparator</base>
    <member kind="function">
      <type></type>
      <name>ProxKeyComparator</name>
      <anchorfile>classProxKeyComparator.html</anchorfile>
      <anchor>aa38ac334e9f020095587992c6bab9e90</anchor>
      <arglist>(const OverlayKey &amp;relativeKey)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Metric</type>
      <name>m</name>
      <anchorfile>classProxKeyComparator.html</anchorfile>
      <anchor>ab7834c12ace2f246e984752a3f789cc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ProxComp</type>
      <name>pc</name>
      <anchorfile>classProxKeyComparator.html</anchorfile>
      <anchor>ab1c651d8578c702f0e7b3bf6526e7d07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>key</name>
      <anchorfile>classProxKeyComparator.html</anchorfile>
      <anchor>a5e7faccc9de89c3bec8fa2b0ab2b600b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ProxKeyComparator&lt; KeyPrefixMetric &gt;</name>
    <filename>classProxKeyComparator_3_01KeyPrefixMetric_01_4.html</filename>
    <base>AbstractProxKeyComparator</base>
    <member kind="function">
      <type></type>
      <name>ProxKeyComparator</name>
      <anchorfile>classProxKeyComparator_3_01KeyPrefixMetric_01_4.html</anchorfile>
      <anchor>a63e3810761bb1d87fca148c810a0c450</anchor>
      <arglist>(const OverlayKey &amp;relativeKey, uint32_t bitsPerDigit=1)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KeyPrefixMetric</type>
      <name>m</name>
      <anchorfile>classProxKeyComparator_3_01KeyPrefixMetric_01_4.html</anchorfile>
      <anchor>a22973ffe452f69cc6820145bb86e4ac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StdProxComparator</type>
      <name>pc</name>
      <anchorfile>classProxKeyComparator_3_01KeyPrefixMetric_01_4.html</anchorfile>
      <anchor>a841fb16a249d02a3a419ad1a06b6b272</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>key</name>
      <anchorfile>classProxKeyComparator_3_01KeyPrefixMetric_01_4.html</anchorfile>
      <anchor>ad86369cdd3c4618a46501b06782b31c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ProxListener</name>
    <filename>classProxListener.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>proxCallback</name>
      <anchorfile>classProxListener.html</anchorfile>
      <anchor>a9bf3b6acf121217a24a44cc2accfeeb3</anchor>
      <arglist>(const TransportAddress &amp;node, int rpcId, cPolymorphic *contextPointer, Prox prox)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ProxNodeHandle</name>
    <filename>classProxNodeHandle.html</filename>
    <base>NodeHandle</base>
    <member kind="function">
      <type></type>
      <name>ProxNodeHandle</name>
      <anchorfile>classProxNodeHandle.html</anchorfile>
      <anchor>a92ad4f4bb85345c38bec1fed2a94d761</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProxNodeHandle</name>
      <anchorfile>classProxNodeHandle.html</anchorfile>
      <anchor>a86b9b741f4bfb92818e97e0e30b99580</anchor>
      <arglist>(const NodeHandle &amp;nodeHandle)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProxNodeHandle</name>
      <anchorfile>classProxNodeHandle.html</anchorfile>
      <anchor>a0f5ef607f356446eed12b252814f2b3a</anchor>
      <arglist>(const NodeHandle &amp;nodeHandle, const Prox &amp;prox)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ProxNodeHandle</name>
      <anchorfile>classProxNodeHandle.html</anchorfile>
      <anchor>a3267b484a974fdaea680a28c976b8057</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProx</name>
      <anchorfile>classProxNodeHandle.html</anchorfile>
      <anchor>a2f3e23f427dfbf4c36fef805d7fa8bc2</anchor>
      <arglist>(Prox prox)</arglist>
    </member>
    <member kind="function">
      <type>Prox</type>
      <name>getProx</name>
      <anchorfile>classProxNodeHandle.html</anchorfile>
      <anchor>a98f9354f8b28218eee5b30febb485b43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ProxNodeHandle</type>
      <name>UNSPECIFIED_NODE</name>
      <anchorfile>classProxNodeHandle.html</anchorfile>
      <anchor>a730d9565efb21a8e5cf0146c4dee49d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Prox</type>
      <name>prox</name>
      <anchorfile>classProxNodeHandle.html</anchorfile>
      <anchor>afb415403a79fbf685c63deffc771d436</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ProxTransportAddress</name>
    <filename>classProxTransportAddress.html</filename>
    <base>TransportAddress</base>
    <member kind="function">
      <type></type>
      <name>ProxTransportAddress</name>
      <anchorfile>classProxTransportAddress.html</anchorfile>
      <anchor>ab386d97003cb188444bef3b013fe32c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProxTransportAddress</name>
      <anchorfile>classProxTransportAddress.html</anchorfile>
      <anchor>a5e224393511248aabc895e9a84734343</anchor>
      <arglist>(const TransportAddress &amp;transportAddress)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProxTransportAddress</name>
      <anchorfile>classProxTransportAddress.html</anchorfile>
      <anchor>a64a61696d022fed34e5b87b9699fed87</anchor>
      <arglist>(const TransportAddress &amp;transportAddress, const Prox &amp;prox)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ProxTransportAddress</name>
      <anchorfile>classProxTransportAddress.html</anchorfile>
      <anchor>aaa5e88815834e63e6c32ff3f86d521b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProx</name>
      <anchorfile>classProxTransportAddress.html</anchorfile>
      <anchor>adc8023952e96b4037b07590e1f814d7f</anchor>
      <arglist>(Prox prox)</arglist>
    </member>
    <member kind="function">
      <type>Prox</type>
      <name>getProx</name>
      <anchorfile>classProxTransportAddress.html</anchorfile>
      <anchor>ae96ab2ff0d732c0b763eb9d52bc9fda8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ProxTransportAddress</type>
      <name>UNSPECIFIED_ADDRESS</name>
      <anchorfile>classProxTransportAddress.html</anchorfile>
      <anchor>a48e7776687ced95df9a546dc1695fe11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Prox</type>
      <name>prox</name>
      <anchorfile>classProxTransportAddress.html</anchorfile>
      <anchor>aed98dbd1bf0ac97be9f9e60639034007</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PRTTrackRepair</name>
    <filename>structPRTTrackRepair.html</filename>
    <member kind="variable">
      <type>TransportAddress</type>
      <name>node</name>
      <anchorfile>structPRTTrackRepair.html</anchorfile>
      <anchor>afe07e90cb15c3738b8b55474f3d9ffe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>timestamp</name>
      <anchorfile>structPRTTrackRepair.html</anchorfile>
      <anchor>a69f96a0571527c092f7890a185f39520</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>failedRow</name>
      <anchorfile>structPRTTrackRepair.html</anchorfile>
      <anchor>aad132b6672452a53d916e7d938aca33e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>failedCol</name>
      <anchorfile>structPRTTrackRepair.html</anchorfile>
      <anchor>af1311e8d338fb3aa0a43dfc065261205</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>askedRow</name>
      <anchorfile>structPRTTrackRepair.html</anchorfile>
      <anchor>ae506213872b99c5a76bd110ee92c8c6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>askedCol</name>
      <anchorfile>structPRTTrackRepair.html</anchorfile>
      <anchor>a0651ed7119b31614efcc8d59d383c6ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubAdoptChildCall</name>
    <filename>classPubSubAdoptChildCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>PubSubAdoptChildCall</name>
      <anchorfile>classPubSubAdoptChildCall.html</anchorfile>
      <anchor>a350393044bf763852a141c8e09c457ca</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PubSubAdoptChildCall</name>
      <anchorfile>classPubSubAdoptChildCall.html</anchorfile>
      <anchor>aedae2a938f33cc12c929c103a165cc32</anchor>
      <arglist>(const PubSubAdoptChildCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PubSubAdoptChildCall</name>
      <anchorfile>classPubSubAdoptChildCall.html</anchorfile>
      <anchor>acc7bdd83fe768cfb9633ca7bc924dc28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PubSubAdoptChildCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classPubSubAdoptChildCall.html</anchorfile>
      <anchor>a71205ae50632ce2c42c0ad07a9a0aec9</anchor>
      <arglist>(const PubSubAdoptChildCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PubSubAdoptChildCall *</type>
      <name>dup</name>
      <anchorfile>classPubSubAdoptChildCall.html</anchorfile>
      <anchor>ac267fef7db2f346d53fd82a6c47b52ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPubSubAdoptChildCall.html</anchorfile>
      <anchor>a5f575dac9f4ca2d8e82b2256ab19301d</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPubSubAdoptChildCall.html</anchorfile>
      <anchor>a2be9fd5103a68b84321412d51be12ebc</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSubspaceId</name>
      <anchorfile>classPubSubAdoptChildCall.html</anchorfile>
      <anchor>a55f2fabdda4d8e593f62af92f6320efb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubspaceId</name>
      <anchorfile>classPubSubAdoptChildCall.html</anchorfile>
      <anchor>ad057dff5f1db054f15839a20adb17f8b</anchor>
      <arglist>(int subspaceId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getChild</name>
      <anchorfile>classPubSubAdoptChildCall.html</anchorfile>
      <anchor>a47f61a8c6ac788a183fafe93ada0e149</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getChild</name>
      <anchorfile>classPubSubAdoptChildCall.html</anchorfile>
      <anchor>aee232717c014be3b7f7b29e82f7e1156</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChild</name>
      <anchorfile>classPubSubAdoptChildCall.html</anchorfile>
      <anchor>a33b972c420b165433c98e9096f08ed79</anchor>
      <arglist>(const NodeHandle &amp;child)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPubSubAdoptChildCall.html</anchorfile>
      <anchor>a7120cca23ae7fe71348840c6a8be83b0</anchor>
      <arglist>(const PubSubAdoptChildCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>subspaceId_var</name>
      <anchorfile>classPubSubAdoptChildCall.html</anchorfile>
      <anchor>ab4a6cffe7e65f9a926f659f0c12491db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>child_var</name>
      <anchorfile>classPubSubAdoptChildCall.html</anchorfile>
      <anchor>a8632ef7f9aab4086e0f93ca2a3b56a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPubSubAdoptChildCall.html</anchorfile>
      <anchor>ac57c88cb85a045ccea5e1647b2907986</anchor>
      <arglist>(const PubSubAdoptChildCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubAdoptChildResponse</name>
    <filename>classPubSubAdoptChildResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>PubSubAdoptChildResponse</name>
      <anchorfile>classPubSubAdoptChildResponse.html</anchorfile>
      <anchor>ac4c0a43fbc4d016a362a0e8a56c32a3f</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PubSubAdoptChildResponse</name>
      <anchorfile>classPubSubAdoptChildResponse.html</anchorfile>
      <anchor>adda239bcef09011f5587b81e2a49ed9f</anchor>
      <arglist>(const PubSubAdoptChildResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PubSubAdoptChildResponse</name>
      <anchorfile>classPubSubAdoptChildResponse.html</anchorfile>
      <anchor>acac45c8b5b3aa235c7807e8a69b3ac30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PubSubAdoptChildResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classPubSubAdoptChildResponse.html</anchorfile>
      <anchor>a39c3c5ba81d7146210b7d6175da66b45</anchor>
      <arglist>(const PubSubAdoptChildResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PubSubAdoptChildResponse *</type>
      <name>dup</name>
      <anchorfile>classPubSubAdoptChildResponse.html</anchorfile>
      <anchor>aa2c620f168bbe9ba84c94dc699dc4135</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPubSubAdoptChildResponse.html</anchorfile>
      <anchor>adbf604485f5a59946d0b3eeae39fc904</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPubSubAdoptChildResponse.html</anchorfile>
      <anchor>a45282773a7396b0a183a9ffdb5a4aa55</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSubspaceId</name>
      <anchorfile>classPubSubAdoptChildResponse.html</anchorfile>
      <anchor>ac06febb4c2fd644ad5c31b844e6356de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubspaceId</name>
      <anchorfile>classPubSubAdoptChildResponse.html</anchorfile>
      <anchor>a85d626fb2653f5b8d6dc5bef8492a91e</anchor>
      <arglist>(int subspaceId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getChild</name>
      <anchorfile>classPubSubAdoptChildResponse.html</anchorfile>
      <anchor>a2ec09ab70ab5e0f4603c3b856acfde80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getChild</name>
      <anchorfile>classPubSubAdoptChildResponse.html</anchorfile>
      <anchor>ad9926511295a9bfc81efcd0a635f4613</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChild</name>
      <anchorfile>classPubSubAdoptChildResponse.html</anchorfile>
      <anchor>addeb9ae58d5d325e300472ed97838eec</anchor>
      <arglist>(const NodeHandle &amp;child)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPubSubAdoptChildResponse.html</anchorfile>
      <anchor>a451391fb2b3bab96adbde7d3a8f8d84f</anchor>
      <arglist>(const PubSubAdoptChildResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>subspaceId_var</name>
      <anchorfile>classPubSubAdoptChildResponse.html</anchorfile>
      <anchor>a0671d272abde82fa7522e9a4a63ee765</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>child_var</name>
      <anchorfile>classPubSubAdoptChildResponse.html</anchorfile>
      <anchor>a1c2386de735a20f5b09c3589224d0737</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPubSubAdoptChildResponse.html</anchorfile>
      <anchor>ad2ee3dab41c101f1e89d1edcbe5b7f7c</anchor>
      <arglist>(const PubSubAdoptChildResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubBackupCall</name>
    <filename>classPubSubBackupCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>PubSubBackupCall</name>
      <anchorfile>classPubSubBackupCall.html</anchorfile>
      <anchor>af3cd8e56bf160c19ce725bbd5f1244d1</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PubSubBackupCall</name>
      <anchorfile>classPubSubBackupCall.html</anchorfile>
      <anchor>a1c9fdf3eb8c62a0c79f82d483636b0c5</anchor>
      <arglist>(const PubSubBackupCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PubSubBackupCall</name>
      <anchorfile>classPubSubBackupCall.html</anchorfile>
      <anchor>a6bf58c79b145cc7abf9a1b88704d78a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PubSubBackupCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classPubSubBackupCall.html</anchorfile>
      <anchor>a5c515c7747ce33899ccf7b3fadc4e5aa</anchor>
      <arglist>(const PubSubBackupCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PubSubBackupCall *</type>
      <name>dup</name>
      <anchorfile>classPubSubBackupCall.html</anchorfile>
      <anchor>a2208d668414e0e4d432d8a76eb0b981e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPubSubBackupCall.html</anchorfile>
      <anchor>a032f2109e4d3e18adaa8635235c7123f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPubSubBackupCall.html</anchorfile>
      <anchor>a046a38db72c905fd1926c52a1cb32121</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSubspaceId</name>
      <anchorfile>classPubSubBackupCall.html</anchorfile>
      <anchor>a78774c6987e65617ae00b8f896f2963b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubspaceId</name>
      <anchorfile>classPubSubBackupCall.html</anchorfile>
      <anchor>a192bdef5825614d40c092c911dc2151f</anchor>
      <arglist>(int subspaceId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIntermediatesArraySize</name>
      <anchorfile>classPubSubBackupCall.html</anchorfile>
      <anchor>a35e138c413c33667d8c1be7a8f8e84fa</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getIntermediatesArraySize</name>
      <anchorfile>classPubSubBackupCall.html</anchorfile>
      <anchor>a2212ccff087366a67e9a2d1fa78f561c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getIntermediates</name>
      <anchorfile>classPubSubBackupCall.html</anchorfile>
      <anchor>a613d13441964c55384fd9aff6c260c65</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getIntermediates</name>
      <anchorfile>classPubSubBackupCall.html</anchorfile>
      <anchor>a4d0cb39a487a515707174fd3702160ba</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIntermediates</name>
      <anchorfile>classPubSubBackupCall.html</anchorfile>
      <anchor>a7e2fb307662983ccaed02c29220116ea</anchor>
      <arglist>(unsigned int k, const NodeHandle &amp;intermediates)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChildrenArraySize</name>
      <anchorfile>classPubSubBackupCall.html</anchorfile>
      <anchor>a6a950c9a840ca3ab3bddfa5d61f87fa7</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getChildrenArraySize</name>
      <anchorfile>classPubSubBackupCall.html</anchorfile>
      <anchor>a25900d74688009c610a11996861cd2cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getChildren</name>
      <anchorfile>classPubSubBackupCall.html</anchorfile>
      <anchor>a3038e30f56f73cb460d72bbee8b2f13d</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getChildren</name>
      <anchorfile>classPubSubBackupCall.html</anchorfile>
      <anchor>ae0ccf70d1aaf2d36af6fd3f6188fc1ac</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChildren</name>
      <anchorfile>classPubSubBackupCall.html</anchorfile>
      <anchor>a575dc4670196df3a46b2474bc9817a5c</anchor>
      <arglist>(unsigned int k, const NodeHandle &amp;children)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChildrenPosArraySize</name>
      <anchorfile>classPubSubBackupCall.html</anchorfile>
      <anchor>ac5761ad291a99fda13ebb23d5adc8f62</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getChildrenPosArraySize</name>
      <anchorfile>classPubSubBackupCall.html</anchorfile>
      <anchor>a06762480392f6b9695f9220ace065d8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getChildrenPos</name>
      <anchorfile>classPubSubBackupCall.html</anchorfile>
      <anchor>ae6261425fc1f1b5eb1febe963b14e386</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChildrenPos</name>
      <anchorfile>classPubSubBackupCall.html</anchorfile>
      <anchor>aad92edd6081f8a66956d8181f2edf002</anchor>
      <arglist>(unsigned int k, int childrenPos)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPubSubBackupCall.html</anchorfile>
      <anchor>ac7113fc49bda1b0d40b7ace8a934d5f8</anchor>
      <arglist>(const PubSubBackupCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>subspaceId_var</name>
      <anchorfile>classPubSubBackupCall.html</anchorfile>
      <anchor>a164ddad7d4f34a53c2af4313deac8037</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle *</type>
      <name>intermediates_var</name>
      <anchorfile>classPubSubBackupCall.html</anchorfile>
      <anchor>a3025d41d43a16e7066773f378cff9a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>intermediates_arraysize</name>
      <anchorfile>classPubSubBackupCall.html</anchorfile>
      <anchor>a02fdb0b879d877cb673b500281ee4ddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle *</type>
      <name>children_var</name>
      <anchorfile>classPubSubBackupCall.html</anchorfile>
      <anchor>a182daa18094009f148e5d6b265c307bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>children_arraysize</name>
      <anchorfile>classPubSubBackupCall.html</anchorfile>
      <anchor>a87229dd11d8fbccf209f09ad11026c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>childrenPos_var</name>
      <anchorfile>classPubSubBackupCall.html</anchorfile>
      <anchor>a68060e216012362d4297e6f72faf2cd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>childrenPos_arraysize</name>
      <anchorfile>classPubSubBackupCall.html</anchorfile>
      <anchor>afa53c4db973a5fc3540c1ef756903dbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPubSubBackupCall.html</anchorfile>
      <anchor>ac38b9a4577c681330917fe92a21fb2fe</anchor>
      <arglist>(const PubSubBackupCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubBackupIntermediateMessage</name>
    <filename>classPubSubBackupIntermediateMessage.html</filename>
    <base>BaseOverlayMessage</base>
    <member kind="function">
      <type></type>
      <name>PubSubBackupIntermediateMessage</name>
      <anchorfile>classPubSubBackupIntermediateMessage.html</anchorfile>
      <anchor>a480a4f1d47cf3ef00b9c07b0a597c821</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PubSubBackupIntermediateMessage</name>
      <anchorfile>classPubSubBackupIntermediateMessage.html</anchorfile>
      <anchor>a6a64b863b93e5e995f7ec3c7573b0f02</anchor>
      <arglist>(const PubSubBackupIntermediateMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PubSubBackupIntermediateMessage</name>
      <anchorfile>classPubSubBackupIntermediateMessage.html</anchorfile>
      <anchor>a70f80da0eb791aeb1bde50503be78f6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PubSubBackupIntermediateMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classPubSubBackupIntermediateMessage.html</anchorfile>
      <anchor>a7b21122f70a009276e7adfa50e7b782e</anchor>
      <arglist>(const PubSubBackupIntermediateMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PubSubBackupIntermediateMessage *</type>
      <name>dup</name>
      <anchorfile>classPubSubBackupIntermediateMessage.html</anchorfile>
      <anchor>a69abb6cae0e08aa08f468ccd56599e1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPubSubBackupIntermediateMessage.html</anchorfile>
      <anchor>a2a51bd397e998fd41def030536d39245</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPubSubBackupIntermediateMessage.html</anchorfile>
      <anchor>a5e84d9e05c52bc34689aa11eabe79a44</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSubspaceId</name>
      <anchorfile>classPubSubBackupIntermediateMessage.html</anchorfile>
      <anchor>a29368618e2b7954ae2080f6d3f53cada</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubspaceId</name>
      <anchorfile>classPubSubBackupIntermediateMessage.html</anchorfile>
      <anchor>a0619ec8887f931a6167c41624524bdf2</anchor>
      <arglist>(int subspaceId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getNode</name>
      <anchorfile>classPubSubBackupIntermediateMessage.html</anchorfile>
      <anchor>ae375666139531eea47c20adc4d95437c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getNode</name>
      <anchorfile>classPubSubBackupIntermediateMessage.html</anchorfile>
      <anchor>add2d79842b715dd19f017127495900fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNode</name>
      <anchorfile>classPubSubBackupIntermediateMessage.html</anchorfile>
      <anchor>a3c235e6bf5ac5b52ea93bb8ac612a22a</anchor>
      <arglist>(const NodeHandle &amp;node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPos</name>
      <anchorfile>classPubSubBackupIntermediateMessage.html</anchorfile>
      <anchor>ab6e4a0ccaf47b2adde4de6629eee7cd2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPos</name>
      <anchorfile>classPubSubBackupIntermediateMessage.html</anchorfile>
      <anchor>a2b50b84aae0d5fb21f800f7060719cdc</anchor>
      <arglist>(int pos)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPubSubBackupIntermediateMessage.html</anchorfile>
      <anchor>a1cb2dcaf687fd749728bee2dfd3a3267</anchor>
      <arglist>(const PubSubBackupIntermediateMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>subspaceId_var</name>
      <anchorfile>classPubSubBackupIntermediateMessage.html</anchorfile>
      <anchor>ac65860345efcb5b514bd1431efafef8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>node_var</name>
      <anchorfile>classPubSubBackupIntermediateMessage.html</anchorfile>
      <anchor>a7427ec21cc243061c566cf030e4a1ddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>pos_var</name>
      <anchorfile>classPubSubBackupIntermediateMessage.html</anchorfile>
      <anchor>a42d23f72dfa1b00af1379f9a78d48116</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPubSubBackupIntermediateMessage.html</anchorfile>
      <anchor>ac32676a5fef85f2d4e9d628dc1842d7a</anchor>
      <arglist>(const PubSubBackupIntermediateMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubBackupResponse</name>
    <filename>classPubSubBackupResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>PubSubBackupResponse</name>
      <anchorfile>classPubSubBackupResponse.html</anchorfile>
      <anchor>aa9c63e34de88a5773d1551c258b937d8</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PubSubBackupResponse</name>
      <anchorfile>classPubSubBackupResponse.html</anchorfile>
      <anchor>a15d9406014d4ee3be5d21bdc8d59c8b1</anchor>
      <arglist>(const PubSubBackupResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PubSubBackupResponse</name>
      <anchorfile>classPubSubBackupResponse.html</anchorfile>
      <anchor>a86ca11b8861e8502ffc2eec7cb7a14b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PubSubBackupResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classPubSubBackupResponse.html</anchorfile>
      <anchor>a156bbe70e51f427dfe4e57eb760624b1</anchor>
      <arglist>(const PubSubBackupResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PubSubBackupResponse *</type>
      <name>dup</name>
      <anchorfile>classPubSubBackupResponse.html</anchorfile>
      <anchor>a33340e1ef4015a583884b96e9be487ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPubSubBackupResponse.html</anchorfile>
      <anchor>a837d4c045d59055a6f76730a993a05d4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPubSubBackupResponse.html</anchorfile>
      <anchor>a8dd4457d2deed83d7e1173d0ff283c28</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSubspaceId</name>
      <anchorfile>classPubSubBackupResponse.html</anchorfile>
      <anchor>aa79723ffd10573d5f3a423083a63a2b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubspaceId</name>
      <anchorfile>classPubSubBackupResponse.html</anchorfile>
      <anchor>a0c582d92fb30f36845f104ac42995d0a</anchor>
      <arglist>(int subspaceId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPubSubBackupResponse.html</anchorfile>
      <anchor>a8e281f69599a49fed2aca61cedaa263c</anchor>
      <arglist>(const PubSubBackupResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>subspaceId_var</name>
      <anchorfile>classPubSubBackupResponse.html</anchorfile>
      <anchor>ac5977e18b93cf2c934acbb5875eb3057</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPubSubBackupResponse.html</anchorfile>
      <anchor>adafdb9430d9139a7754a77509817cf9e</anchor>
      <arglist>(const PubSubBackupResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubBackupSubscriptionMessage</name>
    <filename>classPubSubBackupSubscriptionMessage.html</filename>
    <base>BaseOverlayMessage</base>
    <member kind="function">
      <type></type>
      <name>PubSubBackupSubscriptionMessage</name>
      <anchorfile>classPubSubBackupSubscriptionMessage.html</anchorfile>
      <anchor>a34a0fa0d68ac6abf210219d3fdf4c4dc</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PubSubBackupSubscriptionMessage</name>
      <anchorfile>classPubSubBackupSubscriptionMessage.html</anchorfile>
      <anchor>a07ab1bf64ee4296b9550c18137749f29</anchor>
      <arglist>(const PubSubBackupSubscriptionMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PubSubBackupSubscriptionMessage</name>
      <anchorfile>classPubSubBackupSubscriptionMessage.html</anchorfile>
      <anchor>acbe18cc2b9d2bbc9c87ea2aecf42826e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PubSubBackupSubscriptionMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classPubSubBackupSubscriptionMessage.html</anchorfile>
      <anchor>af3944932e2fd28e696306b717bb0495b</anchor>
      <arglist>(const PubSubBackupSubscriptionMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PubSubBackupSubscriptionMessage *</type>
      <name>dup</name>
      <anchorfile>classPubSubBackupSubscriptionMessage.html</anchorfile>
      <anchor>a3afecac25a26fdf2d1c011a954802467</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPubSubBackupSubscriptionMessage.html</anchorfile>
      <anchor>a799c5f04d49f2828d573ff22141a6ae8</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPubSubBackupSubscriptionMessage.html</anchorfile>
      <anchor>a1e18076135079b99e49c706e957b0268</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSubspaceId</name>
      <anchorfile>classPubSubBackupSubscriptionMessage.html</anchorfile>
      <anchor>a86c045717d5a7327f8e9484b399167d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubspaceId</name>
      <anchorfile>classPubSubBackupSubscriptionMessage.html</anchorfile>
      <anchor>ac8a8edd3c1669fa810598e7d16b4141f</anchor>
      <arglist>(int subspaceId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getChild</name>
      <anchorfile>classPubSubBackupSubscriptionMessage.html</anchorfile>
      <anchor>a457980ddd7bf8f15c5392ab43b0d090e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getChild</name>
      <anchorfile>classPubSubBackupSubscriptionMessage.html</anchorfile>
      <anchor>abfefb8260377cf1779766cb177ee78ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChild</name>
      <anchorfile>classPubSubBackupSubscriptionMessage.html</anchorfile>
      <anchor>af638885c4794f5652c318f21521c5668</anchor>
      <arglist>(const NodeHandle &amp;child)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getParent</name>
      <anchorfile>classPubSubBackupSubscriptionMessage.html</anchorfile>
      <anchor>aaca1114e8cbfe010357b2088dbb5696a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getParent</name>
      <anchorfile>classPubSubBackupSubscriptionMessage.html</anchorfile>
      <anchor>aa9798b4fe011c506290f98e2d7909dea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParent</name>
      <anchorfile>classPubSubBackupSubscriptionMessage.html</anchorfile>
      <anchor>aaf5be2dc4b0de3c0e59c607794788261</anchor>
      <arglist>(const NodeHandle &amp;parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getOldParent</name>
      <anchorfile>classPubSubBackupSubscriptionMessage.html</anchorfile>
      <anchor>a9f318b50e53b2c75f8cac7ab2629a614</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getOldParent</name>
      <anchorfile>classPubSubBackupSubscriptionMessage.html</anchorfile>
      <anchor>a3d3cac7e50668c3145e2104cde005bbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOldParent</name>
      <anchorfile>classPubSubBackupSubscriptionMessage.html</anchorfile>
      <anchor>a52fe84752aa0929392cc6c6e7a5d059f</anchor>
      <arglist>(const NodeHandle &amp;oldParent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPubSubBackupSubscriptionMessage.html</anchorfile>
      <anchor>ace0a185c1e707152a363038cadda8910</anchor>
      <arglist>(const PubSubBackupSubscriptionMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>subspaceId_var</name>
      <anchorfile>classPubSubBackupSubscriptionMessage.html</anchorfile>
      <anchor>a7bbc447fb14ea1b027635c1e6e04137e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>child_var</name>
      <anchorfile>classPubSubBackupSubscriptionMessage.html</anchorfile>
      <anchor>ae08ed24fa4b2300bdfdc4c8249301de0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>parent_var</name>
      <anchorfile>classPubSubBackupSubscriptionMessage.html</anchorfile>
      <anchor>a93cb206c4da2bd6b6e91ea3094f072ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>oldParent_var</name>
      <anchorfile>classPubSubBackupSubscriptionMessage.html</anchorfile>
      <anchor>a9fe495110921ef68619474a3423f3cf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPubSubBackupSubscriptionMessage.html</anchorfile>
      <anchor>aa6b29ea23c0176ffe030ab145140c8de</anchor>
      <arglist>(const PubSubBackupSubscriptionMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubBackupUnsubscribeMessage</name>
    <filename>classPubSubBackupUnsubscribeMessage.html</filename>
    <base>BaseOverlayMessage</base>
    <member kind="function">
      <type></type>
      <name>PubSubBackupUnsubscribeMessage</name>
      <anchorfile>classPubSubBackupUnsubscribeMessage.html</anchorfile>
      <anchor>a846aaca4aef9b6dbac61a81b53134438</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PubSubBackupUnsubscribeMessage</name>
      <anchorfile>classPubSubBackupUnsubscribeMessage.html</anchorfile>
      <anchor>ad11e694c548ba82458ee1ccd313672d2</anchor>
      <arglist>(const PubSubBackupUnsubscribeMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PubSubBackupUnsubscribeMessage</name>
      <anchorfile>classPubSubBackupUnsubscribeMessage.html</anchorfile>
      <anchor>a9d57039501ce23db7f253a026a945259</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PubSubBackupUnsubscribeMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classPubSubBackupUnsubscribeMessage.html</anchorfile>
      <anchor>aa7e93cb4f7040108fc5c1a689c7900ad</anchor>
      <arglist>(const PubSubBackupUnsubscribeMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PubSubBackupUnsubscribeMessage *</type>
      <name>dup</name>
      <anchorfile>classPubSubBackupUnsubscribeMessage.html</anchorfile>
      <anchor>af4556011cb49d687096928154d031757</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPubSubBackupUnsubscribeMessage.html</anchorfile>
      <anchor>aee1b4c8fe67583276b5c86285ee4c830</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPubSubBackupUnsubscribeMessage.html</anchorfile>
      <anchor>abfc545fb079ce873c33d9b2a58580ae3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSubspaceId</name>
      <anchorfile>classPubSubBackupUnsubscribeMessage.html</anchorfile>
      <anchor>abd6c02f362cbe028c6734790c58c0f7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubspaceId</name>
      <anchorfile>classPubSubBackupUnsubscribeMessage.html</anchorfile>
      <anchor>a6e8d85eceb4fedfd35ef4696375c47dc</anchor>
      <arglist>(int subspaceId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getChild</name>
      <anchorfile>classPubSubBackupUnsubscribeMessage.html</anchorfile>
      <anchor>a67e1e3ffdb3722403645fbfdf007ae57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getChild</name>
      <anchorfile>classPubSubBackupUnsubscribeMessage.html</anchorfile>
      <anchor>aa428a2ab2dd21bf70747a78ef6fb4849</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChild</name>
      <anchorfile>classPubSubBackupUnsubscribeMessage.html</anchorfile>
      <anchor>a89e811a65443c958acbdb0968bedf2f9</anchor>
      <arglist>(const NodeHandle &amp;child)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getIntermediate</name>
      <anchorfile>classPubSubBackupUnsubscribeMessage.html</anchorfile>
      <anchor>a35249f2b557ff54817a03fcaa927f148</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getIntermediate</name>
      <anchorfile>classPubSubBackupUnsubscribeMessage.html</anchorfile>
      <anchor>a077f178e3713a26ca3a93f2be42df6c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIntermediate</name>
      <anchorfile>classPubSubBackupUnsubscribeMessage.html</anchorfile>
      <anchor>a616993c19f85b1e1b4ce46f74d76f160</anchor>
      <arglist>(const NodeHandle &amp;intermediate)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPubSubBackupUnsubscribeMessage.html</anchorfile>
      <anchor>ac52c5f3d920c0ef436faacfd6db15022</anchor>
      <arglist>(const PubSubBackupUnsubscribeMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>subspaceId_var</name>
      <anchorfile>classPubSubBackupUnsubscribeMessage.html</anchorfile>
      <anchor>a6a284a06386570f5e4e23ab4842053c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>child_var</name>
      <anchorfile>classPubSubBackupUnsubscribeMessage.html</anchorfile>
      <anchor>ac4e2d5591c2de7d98dd84fac1f8f99fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>intermediate_var</name>
      <anchorfile>classPubSubBackupUnsubscribeMessage.html</anchorfile>
      <anchor>a131a62d06173c27efa5dccb2e82e460c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPubSubBackupUnsubscribeMessage.html</anchorfile>
      <anchor>a643741221409c174a548d9735a42c33c</anchor>
      <arglist>(const PubSubBackupUnsubscribeMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubFailedNodeMessage</name>
    <filename>classPubSubFailedNodeMessage.html</filename>
    <base>BaseOverlayMessage</base>
    <member kind="function">
      <type></type>
      <name>PubSubFailedNodeMessage</name>
      <anchorfile>classPubSubFailedNodeMessage.html</anchorfile>
      <anchor>a93f400481e4579d2060633f04373cee8</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PubSubFailedNodeMessage</name>
      <anchorfile>classPubSubFailedNodeMessage.html</anchorfile>
      <anchor>a4acad8e93dbd24c9d5d116259c6081e6</anchor>
      <arglist>(const PubSubFailedNodeMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PubSubFailedNodeMessage</name>
      <anchorfile>classPubSubFailedNodeMessage.html</anchorfile>
      <anchor>a6d7856f919e0e52f7105fa3606fe2a58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PubSubFailedNodeMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classPubSubFailedNodeMessage.html</anchorfile>
      <anchor>affc76369366096af1fb1009ba4c65e5e</anchor>
      <arglist>(const PubSubFailedNodeMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PubSubFailedNodeMessage *</type>
      <name>dup</name>
      <anchorfile>classPubSubFailedNodeMessage.html</anchorfile>
      <anchor>acb65b2b8603972da28877fae0169e8fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPubSubFailedNodeMessage.html</anchorfile>
      <anchor>a68b9d8e0460d0cf0f86d125571fe1e02</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPubSubFailedNodeMessage.html</anchorfile>
      <anchor>ac75daacaea9adac58d0d24791cdda1ab</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransportAddress &amp;</type>
      <name>getFailedNode</name>
      <anchorfile>classPubSubFailedNodeMessage.html</anchorfile>
      <anchor>acb4d956add87bb4e8016d70c9b2a6e61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TransportAddress &amp;</type>
      <name>getFailedNode</name>
      <anchorfile>classPubSubFailedNodeMessage.html</anchorfile>
      <anchor>aa7425aaab0cafef43d270e2220935724</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFailedNode</name>
      <anchorfile>classPubSubFailedNodeMessage.html</anchorfile>
      <anchor>a69484c6b7387a623c18edb86a0aca7d3</anchor>
      <arglist>(const TransportAddress &amp;failedNode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPubSubFailedNodeMessage.html</anchorfile>
      <anchor>adee400aa60c776337ad214dfeeba612f</anchor>
      <arglist>(const PubSubFailedNodeMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress</type>
      <name>failedNode_var</name>
      <anchorfile>classPubSubFailedNodeMessage.html</anchorfile>
      <anchor>a385ef320733e56c7245ed9658df35c07</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPubSubFailedNodeMessage.html</anchorfile>
      <anchor>ab23702ce6e361c48ff3cfa1d401c4ece</anchor>
      <arglist>(const PubSubFailedNodeMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubHelpCall</name>
    <filename>classPubSubHelpCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>PubSubHelpCall</name>
      <anchorfile>classPubSubHelpCall.html</anchorfile>
      <anchor>a5ad8d630cc526abcf7277587f2ade4c1</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PubSubHelpCall</name>
      <anchorfile>classPubSubHelpCall.html</anchorfile>
      <anchor>af49dbccd5d6cd3dc94c2794700e1d6b7</anchor>
      <arglist>(const PubSubHelpCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PubSubHelpCall</name>
      <anchorfile>classPubSubHelpCall.html</anchorfile>
      <anchor>a728fcb7ab3726114eb7bf6036c912790</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PubSubHelpCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classPubSubHelpCall.html</anchorfile>
      <anchor>af721b24ac929b73284cff35f32096fa8</anchor>
      <arglist>(const PubSubHelpCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PubSubHelpCall *</type>
      <name>dup</name>
      <anchorfile>classPubSubHelpCall.html</anchorfile>
      <anchor>ae33825a5347a1b7ff046adb341b96897</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPubSubHelpCall.html</anchorfile>
      <anchor>a6ad34a5295d7151ae8bd53ed3aa746f1</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPubSubHelpCall.html</anchorfile>
      <anchor>a7893005fedb4d6ca150bc6950c9fdcb8</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSubspaceId</name>
      <anchorfile>classPubSubHelpCall.html</anchorfile>
      <anchor>a355bda3c231e82b82b31b9ac1a667745</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubspaceId</name>
      <anchorfile>classPubSubHelpCall.html</anchorfile>
      <anchor>a5e3fd97479f76170ffbfcea6385dcd16</anchor>
      <arglist>(int subspaceId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getHelpType</name>
      <anchorfile>classPubSubHelpCall.html</anchorfile>
      <anchor>a0932e05108f01dae426028453373165f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHelpType</name>
      <anchorfile>classPubSubHelpCall.html</anchorfile>
      <anchor>a15d480c842e84416cea15f69225be7f9</anchor>
      <arglist>(int helpType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPubSubHelpCall.html</anchorfile>
      <anchor>a4ceb851a841b89f5aeedbf56fb55c134</anchor>
      <arglist>(const PubSubHelpCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>subspaceId_var</name>
      <anchorfile>classPubSubHelpCall.html</anchorfile>
      <anchor>a1bd767fadd393ab4242a1b5fce713a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>helpType_var</name>
      <anchorfile>classPubSubHelpCall.html</anchorfile>
      <anchor>ac2fb065c185373a38aa84065a4266837</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPubSubHelpCall.html</anchorfile>
      <anchor>adcc15b52426b6501da96c1f2dd7e40f1</anchor>
      <arglist>(const PubSubHelpCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubHelpReleaseMessage</name>
    <filename>classPubSubHelpReleaseMessage.html</filename>
    <base>BaseOverlayMessage</base>
    <member kind="function">
      <type></type>
      <name>PubSubHelpReleaseMessage</name>
      <anchorfile>classPubSubHelpReleaseMessage.html</anchorfile>
      <anchor>ab699d2d71b5ee878749ef63bda638646</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PubSubHelpReleaseMessage</name>
      <anchorfile>classPubSubHelpReleaseMessage.html</anchorfile>
      <anchor>a16c76ca257e830179f9ff84f04ab9224</anchor>
      <arglist>(const PubSubHelpReleaseMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PubSubHelpReleaseMessage</name>
      <anchorfile>classPubSubHelpReleaseMessage.html</anchorfile>
      <anchor>af58305682777be2e79141b27f6ef8f29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PubSubHelpReleaseMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classPubSubHelpReleaseMessage.html</anchorfile>
      <anchor>ab92d4d07208c3cc04b94fec118f5bd74</anchor>
      <arglist>(const PubSubHelpReleaseMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PubSubHelpReleaseMessage *</type>
      <name>dup</name>
      <anchorfile>classPubSubHelpReleaseMessage.html</anchorfile>
      <anchor>a2de45431775203a1ff7b0df390f55901</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPubSubHelpReleaseMessage.html</anchorfile>
      <anchor>a1111859714327a54dce4ee471c4414be</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPubSubHelpReleaseMessage.html</anchorfile>
      <anchor>a1d92307e1648798c2a5d17dd300a2aa6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSubspaceId</name>
      <anchorfile>classPubSubHelpReleaseMessage.html</anchorfile>
      <anchor>a2f8ef353aa9e7d9a8842c95386d57751</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubspaceId</name>
      <anchorfile>classPubSubHelpReleaseMessage.html</anchorfile>
      <anchor>af11806852c62d44f511e96f5189c734a</anchor>
      <arglist>(int subspaceId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getNode</name>
      <anchorfile>classPubSubHelpReleaseMessage.html</anchorfile>
      <anchor>a181dab074ca0dbaa3bc70f45602228ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getNode</name>
      <anchorfile>classPubSubHelpReleaseMessage.html</anchorfile>
      <anchor>aa59d72d29eb660e6e0521be621a05d8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNode</name>
      <anchorfile>classPubSubHelpReleaseMessage.html</anchorfile>
      <anchor>acd007733b0b6d9f9bd6cc13dbe15564b</anchor>
      <arglist>(const NodeHandle &amp;node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPubSubHelpReleaseMessage.html</anchorfile>
      <anchor>a94026227c3383051e8d4e549d181f0cb</anchor>
      <arglist>(const PubSubHelpReleaseMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>subspaceId_var</name>
      <anchorfile>classPubSubHelpReleaseMessage.html</anchorfile>
      <anchor>a68cd8aaf4f6f8f9398238bfc4a8f673e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>node_var</name>
      <anchorfile>classPubSubHelpReleaseMessage.html</anchorfile>
      <anchor>a918d3dff2f25282f1811369bdf0c31e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPubSubHelpReleaseMessage.html</anchorfile>
      <anchor>a32c0f5180c9547a2d751ea0b53a2bc4f</anchor>
      <arglist>(const PubSubHelpReleaseMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubHelpResponse</name>
    <filename>classPubSubHelpResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>PubSubHelpResponse</name>
      <anchorfile>classPubSubHelpResponse.html</anchorfile>
      <anchor>a0205c691716d05508a0efcce956aafbc</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PubSubHelpResponse</name>
      <anchorfile>classPubSubHelpResponse.html</anchorfile>
      <anchor>a0e1d8eee9063bcf665b5593622c8bc28</anchor>
      <arglist>(const PubSubHelpResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PubSubHelpResponse</name>
      <anchorfile>classPubSubHelpResponse.html</anchorfile>
      <anchor>aecf07b6b4e8f244e03c4520c99ff4dd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PubSubHelpResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classPubSubHelpResponse.html</anchorfile>
      <anchor>af14ea1b616093e96fbc09a37a8b0d98f</anchor>
      <arglist>(const PubSubHelpResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PubSubHelpResponse *</type>
      <name>dup</name>
      <anchorfile>classPubSubHelpResponse.html</anchorfile>
      <anchor>a2ff08f47b21f891fa181dcb467330df6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPubSubHelpResponse.html</anchorfile>
      <anchor>ae484487ad8f2e116a4989e4d2229d426</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPubSubHelpResponse.html</anchorfile>
      <anchor>a78a3b8accf64ea1d4a69111af94309f1</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSubspaceId</name>
      <anchorfile>classPubSubHelpResponse.html</anchorfile>
      <anchor>a3dfeaa012bc872e1ebdfe89e57af4e38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubspaceId</name>
      <anchorfile>classPubSubHelpResponse.html</anchorfile>
      <anchor>ab6164cb107390d0542050dce9c3a6f65</anchor>
      <arglist>(int subspaceId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getHelpType</name>
      <anchorfile>classPubSubHelpResponse.html</anchorfile>
      <anchor>a22f7d6407dbc34eed5cab79a3a0d27bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHelpType</name>
      <anchorfile>classPubSubHelpResponse.html</anchorfile>
      <anchor>a9ff2fc96b26cecc54004dbf8bf255e98</anchor>
      <arglist>(int helpType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getNode</name>
      <anchorfile>classPubSubHelpResponse.html</anchorfile>
      <anchor>a380c4de936be194d72ff943761e2f6dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getNode</name>
      <anchorfile>classPubSubHelpResponse.html</anchorfile>
      <anchor>aecab1c9fbd2ec845aa20eae54c98fc63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNode</name>
      <anchorfile>classPubSubHelpResponse.html</anchorfile>
      <anchor>a5e4c8db6bda0417a50e88f8a9abede3b</anchor>
      <arglist>(const NodeHandle &amp;node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPubSubHelpResponse.html</anchorfile>
      <anchor>a9e74bb2daed57b5f1a4df03bb0ed1513</anchor>
      <arglist>(const PubSubHelpResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>subspaceId_var</name>
      <anchorfile>classPubSubHelpResponse.html</anchorfile>
      <anchor>ae93f3879ed19d535702aea47ed9db7a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>helpType_var</name>
      <anchorfile>classPubSubHelpResponse.html</anchorfile>
      <anchor>a1c7f4b895dc58b4eceb7ae2df6808ffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>node_var</name>
      <anchorfile>classPubSubHelpResponse.html</anchorfile>
      <anchor>a0f8c339a63840c49feb043922e3b354f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPubSubHelpResponse.html</anchorfile>
      <anchor>a33b5de0bccbcc64b1cbe6a9d30f33914</anchor>
      <arglist>(const PubSubHelpResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubIntermediateCall</name>
    <filename>classPubSubIntermediateCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>PubSubIntermediateCall</name>
      <anchorfile>classPubSubIntermediateCall.html</anchorfile>
      <anchor>a9de4520e2070b1e335ee6f676c689c45</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PubSubIntermediateCall</name>
      <anchorfile>classPubSubIntermediateCall.html</anchorfile>
      <anchor>a6ba21b90ac2af25ed566595076ed928b</anchor>
      <arglist>(const PubSubIntermediateCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PubSubIntermediateCall</name>
      <anchorfile>classPubSubIntermediateCall.html</anchorfile>
      <anchor>a580574837cab817d0cd7121a541a4ae1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PubSubIntermediateCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classPubSubIntermediateCall.html</anchorfile>
      <anchor>add1c116dae548a9e69316ddd2509fdc9</anchor>
      <arglist>(const PubSubIntermediateCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PubSubIntermediateCall *</type>
      <name>dup</name>
      <anchorfile>classPubSubIntermediateCall.html</anchorfile>
      <anchor>ab488596c304a60d2daa7a82bfefc3d74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPubSubIntermediateCall.html</anchorfile>
      <anchor>a004e2eb67524abdeabde4ce81ce31bd9</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPubSubIntermediateCall.html</anchorfile>
      <anchor>a12219e50c446e39aad70e39e0cb7dbbe</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSubspaceId</name>
      <anchorfile>classPubSubIntermediateCall.html</anchorfile>
      <anchor>aae48f9b0cfa46ea154a2ff0ed6edfb73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubspaceId</name>
      <anchorfile>classPubSubIntermediateCall.html</anchorfile>
      <anchor>ad119a608187e8a5bff2a940caf3b546f</anchor>
      <arglist>(int subspaceId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPubSubIntermediateCall.html</anchorfile>
      <anchor>a6e6c9509593a68500292f2529d73b5db</anchor>
      <arglist>(const PubSubIntermediateCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>subspaceId_var</name>
      <anchorfile>classPubSubIntermediateCall.html</anchorfile>
      <anchor>ace3f959face465b20140714b1c64f83e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPubSubIntermediateCall.html</anchorfile>
      <anchor>af124ac6d90caee23561333de8c8dafb7</anchor>
      <arglist>(const PubSubIntermediateCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubIntermediateResponse</name>
    <filename>classPubSubIntermediateResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>PubSubIntermediateResponse</name>
      <anchorfile>classPubSubIntermediateResponse.html</anchorfile>
      <anchor>afb3608ff1a4f5373b38b864119962c30</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PubSubIntermediateResponse</name>
      <anchorfile>classPubSubIntermediateResponse.html</anchorfile>
      <anchor>a210494eadfc5bb6d660e499f1b1503b8</anchor>
      <arglist>(const PubSubIntermediateResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PubSubIntermediateResponse</name>
      <anchorfile>classPubSubIntermediateResponse.html</anchorfile>
      <anchor>a53c5c68e6bc0fa7d96e6c10d397008a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PubSubIntermediateResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classPubSubIntermediateResponse.html</anchorfile>
      <anchor>a5c4fd17d02bfd872b6b8c253a87fac6f</anchor>
      <arglist>(const PubSubIntermediateResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PubSubIntermediateResponse *</type>
      <name>dup</name>
      <anchorfile>classPubSubIntermediateResponse.html</anchorfile>
      <anchor>ae2db8f0109d9c5b6c33712392ca93e6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPubSubIntermediateResponse.html</anchorfile>
      <anchor>a0a8ed6d2a33746f3bbed1049ecfdb927</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPubSubIntermediateResponse.html</anchorfile>
      <anchor>abe46ddae44295330f174496fe4df3906</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSubspaceId</name>
      <anchorfile>classPubSubIntermediateResponse.html</anchorfile>
      <anchor>a10274ee87eb24712c45b63ac3456d835</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubspaceId</name>
      <anchorfile>classPubSubIntermediateResponse.html</anchorfile>
      <anchor>a37897f58114b66c35ef8b21e99798155</anchor>
      <arglist>(int subspaceId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPubSubIntermediateResponse.html</anchorfile>
      <anchor>a9b402ec507a4f036d0abab8ad3e5c05c</anchor>
      <arglist>(const PubSubIntermediateResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>subspaceId_var</name>
      <anchorfile>classPubSubIntermediateResponse.html</anchorfile>
      <anchor>ac934909699ff4b3f0236957644ff4b57</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPubSubIntermediateResponse.html</anchorfile>
      <anchor>afb800bf1def3c4b0ecce2117b4fb9267</anchor>
      <arglist>(const PubSubIntermediateResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubJoinCall</name>
    <filename>classPubSubJoinCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>PubSubJoinCall</name>
      <anchorfile>classPubSubJoinCall.html</anchorfile>
      <anchor>a1f931152cdb733bc77bd085baa3b4117</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PubSubJoinCall</name>
      <anchorfile>classPubSubJoinCall.html</anchorfile>
      <anchor>a8cb200de9f457b7b91a12a2372208086</anchor>
      <arglist>(const PubSubJoinCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PubSubJoinCall</name>
      <anchorfile>classPubSubJoinCall.html</anchorfile>
      <anchor>a9edd65edb3cc355a0df686890f670014</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PubSubJoinCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classPubSubJoinCall.html</anchorfile>
      <anchor>af3eada51126ab845dd8c33a03d649e2f</anchor>
      <arglist>(const PubSubJoinCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PubSubJoinCall *</type>
      <name>dup</name>
      <anchorfile>classPubSubJoinCall.html</anchorfile>
      <anchor>a1f0e2854374c403e5130e3b5010340f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPubSubJoinCall.html</anchorfile>
      <anchor>a911a10ce12941bf2e133520c37f3c77e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPubSubJoinCall.html</anchorfile>
      <anchor>a9c305870a3981bd3fcc30eae87ce7780</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector2D &amp;</type>
      <name>getPosition</name>
      <anchorfile>classPubSubJoinCall.html</anchorfile>
      <anchor>ab168f5cfcd6d2e8472c76ac946e20f92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Vector2D &amp;</type>
      <name>getPosition</name>
      <anchorfile>classPubSubJoinCall.html</anchorfile>
      <anchor>ad2bd1af03f0b41c230e3ae8e350c6998</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPosition</name>
      <anchorfile>classPubSubJoinCall.html</anchorfile>
      <anchor>af8d53001fd45a3b3369a5bb5bbb13e37</anchor>
      <arglist>(const Vector2D &amp;position)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRessources</name>
      <anchorfile>classPubSubJoinCall.html</anchorfile>
      <anchor>af6961e433a8374b44ac3e90b5cc87646</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRessources</name>
      <anchorfile>classPubSubJoinCall.html</anchorfile>
      <anchor>ad2881d91f16fc96e9cb365af9140cef5</anchor>
      <arglist>(int ressources)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPubSubJoinCall.html</anchorfile>
      <anchor>aa5a08731384355582cc8081fa1e895ad</anchor>
      <arglist>(const PubSubJoinCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D</type>
      <name>position_var</name>
      <anchorfile>classPubSubJoinCall.html</anchorfile>
      <anchor>afa04c1aaaa03862d1185b48441aedadc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ressources_var</name>
      <anchorfile>classPubSubJoinCall.html</anchorfile>
      <anchor>a43169574b3ac81b85a9dac3154872293</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPubSubJoinCall.html</anchorfile>
      <anchor>adbf38d69f37cc930c749e39758cece07</anchor>
      <arglist>(const PubSubJoinCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubJoinResponse</name>
    <filename>classPubSubJoinResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>PubSubJoinResponse</name>
      <anchorfile>classPubSubJoinResponse.html</anchorfile>
      <anchor>a2203185c223505454457d2b2e87b677b</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PubSubJoinResponse</name>
      <anchorfile>classPubSubJoinResponse.html</anchorfile>
      <anchor>aa9b6a438312181aa27754a45c49bdd31</anchor>
      <arglist>(const PubSubJoinResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PubSubJoinResponse</name>
      <anchorfile>classPubSubJoinResponse.html</anchorfile>
      <anchor>a0525b0b423fbf8a504147cf6e588793f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PubSubJoinResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classPubSubJoinResponse.html</anchorfile>
      <anchor>acf4e551dda6b7a047e24b8f10e979d1c</anchor>
      <arglist>(const PubSubJoinResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PubSubJoinResponse *</type>
      <name>dup</name>
      <anchorfile>classPubSubJoinResponse.html</anchorfile>
      <anchor>aa661e0535c7817f9ba163539c35c8883</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPubSubJoinResponse.html</anchorfile>
      <anchor>a780d350b7f005208923d2d88866d0fed</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPubSubJoinResponse.html</anchorfile>
      <anchor>a5b4c7551c701d317eb604d0d6acb61a7</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getResponsibleNode</name>
      <anchorfile>classPubSubJoinResponse.html</anchorfile>
      <anchor>af6b6ef0423fb75458fdde7f977ad8623</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getResponsibleNode</name>
      <anchorfile>classPubSubJoinResponse.html</anchorfile>
      <anchor>a883a570409d49d5d12aaa0ab46f2d03c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setResponsibleNode</name>
      <anchorfile>classPubSubJoinResponse.html</anchorfile>
      <anchor>a295205e1a976c0fe809f7efe6a6b3e8c</anchor>
      <arglist>(const NodeHandle &amp;responsibleNode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPubSubJoinResponse.html</anchorfile>
      <anchor>a906d6e218857a3b59ccbf0d81d849897</anchor>
      <arglist>(const PubSubJoinResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>responsibleNode_var</name>
      <anchorfile>classPubSubJoinResponse.html</anchorfile>
      <anchor>a699d08e1d40f15dce68722fad6d6a029</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPubSubJoinResponse.html</anchorfile>
      <anchor>a1c941f06b21f0d4a6d0d586ff3b9b052</anchor>
      <arglist>(const PubSubJoinResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubLobby</name>
    <filename>classPubSubLobby.html</filename>
    <base>BaseOverlay</base>
    <class kind="class">PubSubLobby::ChildEntry</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PubSubLobby</name>
      <anchorfile>classPubSubLobby.html</anchorfile>
      <anchor>a67576d993fe7e9df85ed6712b8831a1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeOverlay</name>
      <anchorfile>classPubSubLobby.html</anchorfile>
      <anchor>a22c24c5e2c839123f68d3b567eebf16e</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finishOverlay</name>
      <anchorfile>classPubSubLobby.html</anchorfile>
      <anchor>a75b9ef6a08fd634c142d6cbd7d6f0f68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUDPMessage</name>
      <anchorfile>classPubSubLobby.html</anchorfile>
      <anchor>ae6e5337366950b5812ea523a7feffc2c</anchor>
      <arglist>(BaseOverlayMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classPubSubLobby.html</anchorfile>
      <anchor>a1e372f6bf585a978a0f5cdc2d9f95fde</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>handleRpcCall</name>
      <anchorfile>classPubSubLobby.html</anchorfile>
      <anchor>a51b8bc62e387b0a7c6bda5dbaa0127b3</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRpcResponse</name>
      <anchorfile>classPubSubLobby.html</anchorfile>
      <anchor>a83a084e5bbb57faffc4f77c2e7ef9835</anchor>
      <arglist>(BaseResponseMessage *msg, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRpcTimeout</name>
      <anchorfile>classPubSubLobby.html</anchorfile>
      <anchor>a91d9df92cffdedecad2d9e442cfad7c0</anchor>
      <arglist>(BaseCallMessage *msg, const TransportAddress &amp;dest, cPolymorphic *context, int rpcId, const OverlayKey &amp;destKey)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; TransportAddress, ChildEntry &gt;</type>
      <name>PlayerMap</name>
      <anchorfile>classPubSubLobby.html</anchorfile>
      <anchor>a4bbae3eea2faaf9cf26e8c948bfc79da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::multimap&lt; int, ChildEntry *, std::greater&lt; int &gt; &gt;</type>
      <name>PlayerRessourceMap</name>
      <anchorfile>classPubSubLobby.html</anchorfile>
      <anchor>a25fcdd57095ec6adf049f74c62e8ae35</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleJoin</name>
      <anchorfile>classPubSubLobby.html</anchorfile>
      <anchor>a24f71522cce60cb94a4826f80e3ffc09</anchor>
      <arglist>(PubSubJoinCall *joinMsg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleHelpCall</name>
      <anchorfile>classPubSubLobby.html</anchorfile>
      <anchor>a2bc7fb47f186e3b449c3352ca96a382b</anchor>
      <arglist>(PubSubHelpCall *helpMsg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRespCall</name>
      <anchorfile>classPubSubLobby.html</anchorfile>
      <anchor>a117ee7104c6edb0ab6213ba8e9cbdbbd</anchor>
      <arglist>(PubSubResponsibleNodeCall *respCall)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTakeOverResponse</name>
      <anchorfile>classPubSubLobby.html</anchorfile>
      <anchor>a6a7519bd3f516d3d0c5667c437c6b5b4</anchor>
      <arglist>(PubSubTakeOverSubspaceResponse *takeOverResp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTakeOverTimeout</name>
      <anchorfile>classPubSubLobby.html</anchorfile>
      <anchor>aac64ab2e9e6bd4d8e78e56d1872267dc</anchor>
      <arglist>(PubSubTakeOverSubspaceCall *takeOverCall, const TransportAddress &amp;oldNode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleHelpReleaseMessage</name>
      <anchorfile>classPubSubLobby.html</anchorfile>
      <anchor>ae3a56fb68d5829b09a9d9b50bb9a4f6c</anchor>
      <arglist>(PubSubHelpReleaseMessage *helpRMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>replaceResponsibleNode</name>
      <anchorfile>classPubSubLobby.html</anchorfile>
      <anchor>af2002fd1c1b0c158e34f98433d148b69</anchor>
      <arglist>(int subspaceId, NodeHandle respNode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>replaceResponsibleNode</name>
      <anchorfile>classPubSubLobby.html</anchorfile>
      <anchor>af2ba331a078883dc6182d6db6eeb8153</anchor>
      <arglist>(PubSubSubspaceId subspaceId, NodeHandle respNode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>failedNode</name>
      <anchorfile>classPubSubLobby.html</anchorfile>
      <anchor>ac30e0ce9761b523e995d638b78fd7129</anchor>
      <arglist>(const TransportAddress &amp;node)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>subspaceSize</name>
      <anchorfile>classPubSubLobby.html</anchorfile>
      <anchor>a5379836b0bca001ade60571fc330c7ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numSubspaces</name>
      <anchorfile>classPubSubLobby.html</anchorfile>
      <anchor>a24a89046b61fd6ee93ca4da1cbf2869c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; PubSubSubspaceLobby &gt; &gt;</type>
      <name>subspaces</name>
      <anchorfile>classPubSubLobby.html</anchorfile>
      <anchor>ab2f87aabe4bd9986751cda300556c547</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; PubSubHelpCall * &gt;</type>
      <name>waitingForHelp</name>
      <anchorfile>classPubSubLobby.html</anchorfile>
      <anchor>aad3f4f6a35c2a161d444115ed0bbf69c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PlayerMap</type>
      <name>playerMap</name>
      <anchorfile>classPubSubLobby.html</anchorfile>
      <anchor>a09d7cf8803e638b57ecb2f42639c43f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PlayerRessourceMap</type>
      <name>playerRessourceMap</name>
      <anchorfile>classPubSubLobby.html</anchorfile>
      <anchor>ad2677c6bbc0fa6d3ee5f9d5e1052623d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numPubSubSignalingMessages</name>
      <anchorfile>classPubSubLobby.html</anchorfile>
      <anchor>a70506df7e812aab27fe5c4aca469befd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>pubSubSignalingMessagesSize</name>
      <anchorfile>classPubSubLobby.html</anchorfile>
      <anchor>a6791b356638b40a2a06fc0b9c21fe08f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classPubSubLobby.html</anchorfile>
      <anchor>a887fdcd4f32e4dd84921e6ffa82a5857</anchor>
      <arglist>(std::ostream &amp;o, const ChildEntry &amp;entry)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubLobby::ChildEntry</name>
    <filename>classPubSubLobby_1_1ChildEntry.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classPubSubLobby_1_1ChildEntry.html</anchorfile>
      <anchor>a18ec445c3a13328f4599572939c1e214</anchor>
      <arglist>(const ChildEntry c) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPubSubLobby_1_1ChildEntry.html</anchorfile>
      <anchor>add16ed6b78cc31001700385152dd03ac</anchor>
      <arglist>(const ChildEntry c) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPubSubLobby_1_1ChildEntry.html</anchorfile>
      <anchor>a1eaa5188c5e28d7f8db01b85bc986f05</anchor>
      <arglist>(const NodeHandle n) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPubSubLobby_1_1ChildEntry.html</anchorfile>
      <anchor>a5e3febcfbd116e8329b07cacdee90ce0</anchor>
      <arglist>(const TransportAddress n) const </arglist>
    </member>
    <member kind="variable">
      <type>NodeHandle</type>
      <name>handle</name>
      <anchorfile>classPubSubLobby_1_1ChildEntry.html</anchorfile>
      <anchor>afae4307f1e2937881a12ee98453aef98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ressources</name>
      <anchorfile>classPubSubLobby_1_1ChildEntry.html</anchorfile>
      <anchor>a5ce55eeb47887a0ab4345419c253c294</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; int &gt;</type>
      <name>dutySet</name>
      <anchorfile>classPubSubLobby_1_1ChildEntry.html</anchorfile>
      <anchor>a39360e1940a554f01bd947554208c1f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubMMOG</name>
    <filename>classPubSubMMOG.html</filename>
    <base>BaseOverlay</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PubSubMMOG</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>ad55240696d31dd1a7003a7269aca4743</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeOverlay</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a42a189f235425d0cc5706857f3122283</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finishOverlay</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>ab097bce7563e87ecf690559095908207</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUDPMessage</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a4af2596c5cc972a1c4dacfde82c989ee</anchor>
      <arglist>(BaseOverlayMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a3df1116194918ab1768c1afbdef4fb00</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAppMessage</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>aa755315cd277b3c3cad5522cb7acb9dc</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>ac789c61936dbd0e4787822022f0ecfba</anchor>
      <arglist>(int category, const cPolymorphic *details)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>handleRpcCall</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a4f2a87f7e95bbb17819f04261585236d</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRpcResponse</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a8cd2dcabf97fae56f6af40cda177fdf7</anchor>
      <arglist>(BaseResponseMessage *msg, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRpcTimeout</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a9838eb23acd2464c8500cdff66caf8a8</anchor>
      <arglist>(BaseCallMessage *msg, const TransportAddress &amp;dest, cPolymorphic *context, int rpcId, const OverlayKey &amp;destKey)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setBootstrapedIcon</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a3e573d9ce39091daea435016a587b239</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMove</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a271c0f8b14c7c023c26a1a3f19e156a4</anchor>
      <arglist>(GameAPIPositionMessage *posMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMoveMessage</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>aa5f5b3bb6f7a4a26ab45dfdb6248f21b</anchor>
      <arglist>(PubSubMoveMessage *moveMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMoveListMessage</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a9d46909d81ca32d3ec2020a7184c3f50</anchor>
      <arglist>(PubSubMoveListMessage *moveMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleJoinResponse</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a90f7b9fa68b400b80892d642f4c439b4</anchor>
      <arglist>(PubSubJoinResponse *joinResp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleSubscriptionCall</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a3d1fd761fc46a4b56f1c7e852bf41207</anchor>
      <arglist>(PubSubSubscriptionCall *subCall)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleSubscriptionResponse</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a7d6b63042aee9dfbe3d11d2062a43a05</anchor>
      <arglist>(PubSubSubscriptionResponse *subResp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleResponsibleNodeResponse</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a7e351287bef39afa54408e4fce0fdf26</anchor>
      <arglist>(PubSubResponsibleNodeResponse *subResp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleTakeOver</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>af504bf4e0b52404912395baefed9f5c5</anchor>
      <arglist>(PubSubTakeOverSubspaceCall *toCall)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleHelpResponse</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a7d28b4484518dcf34fbc2cb462bf620b</anchor>
      <arglist>(PubSubHelpResponse *helpResp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleBackupCall</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>ac7e55bce3aa2a48f4367977e081eb9e1</anchor>
      <arglist>(PubSubBackupCall *backupCall)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleBackupResponse</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a401659ffbdca793a6f7d97e9737a70d0</anchor>
      <arglist>(PubSubBackupResponse *backupResp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleIntermediateCall</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a77d17c923e8b43f0bf38222dd58d3969</anchor>
      <arglist>(PubSubIntermediateCall *intermediateCall)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleIntermediateResponse</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>ac41702ca41ffae439637504939856f4f</anchor>
      <arglist>(PubSubIntermediateResponse *intermediateResp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleAdoptChildCall</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a301bb30f1b9239fa5ea744400be48a1b</anchor>
      <arglist>(PubSubAdoptChildCall *adoptCall)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleAdoptChildResponse</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a9f396c585cfb16b476047c35fbbe05fa</anchor>
      <arglist>(PubSubAdoptChildResponse *adoptResp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handlePingCall</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a7179d8d2355f09e50e5172a8bc4e60b1</anchor>
      <arglist>(PubSubPingCall *hearbeatCall)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handlePingResponse</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a6ade874ae0f4871c157cbf3e4334724c</anchor>
      <arglist>(PubSubPingResponse *pingResp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>takeOverNewSubspace</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a0fe097eb8ff809023d0a119b2dc17d61</anchor>
      <arglist>(PubSubSubspaceId subspaceId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>takeOverSubspace</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a60f9145524471fe4aa44641f1d0e6a17</anchor>
      <arglist>(PubSubSubspaceResponsible &amp;subspaceId, bool isNew)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendHearbeatToChildren</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a237b78a3abc9b6cbb95021e25306e2e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendPingToChildren</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>abd00be445c110f527365d00553713334</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleParentTimeout</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a01a6bc8e4b0e38e57d2e3108088f67f3</anchor>
      <arglist>(PubSubTimer *timer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleBackupCallTimeout</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a217e815ddc5ba02f8afe33a73389184f</anchor>
      <arglist>(PubSubBackupCall *backupCall, const TransportAddress &amp;oldNode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handlePingCallTimeout</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a0ca3bd97cac131ba5c2ff02235cc6a2f</anchor>
      <arglist>(PubSubPingCall *pingCall, const TransportAddress &amp;oldNode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleSubscriptionCallTimeout</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a1e97ea82ff0848af1f5437b1c8da7c99</anchor>
      <arglist>(PubSubSubscriptionCall *subscriptionCall, const TransportAddress &amp;oldNode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleUnsubscriptionMessage</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a1e837eb023ac96a24c564e8c42da7c87</anchor>
      <arglist>(PubSubUnsubscriptionMessage *unsMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleNodeLeftMessage</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a73afcba7483897f08cfb5d258e569683</anchor>
      <arglist>(PubSubNodeLeftMessage *leftMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleReplacementMessage</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>abd3f25e6c1521cc5d6959fc1929a2ac6</anchor>
      <arglist>(PubSubReplacementMessage *replaceMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleReleaseIntermediate</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>af1197b5fab38765c9e510cb6e755f62a</anchor>
      <arglist>(PubSubReleaseIntermediateMessage *releaseMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleIntermediateBackup</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a77b144f6034216ef0184589cf5b4da8d</anchor>
      <arglist>(PubSubBackupIntermediateMessage *backupMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleSubscriptionBackup</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a354f1a0173cb3cc5a00bc7d16d17f73a</anchor>
      <arglist>(PubSubBackupSubscriptionMessage *backupMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleUnsubscribeBackup</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a74e961ef109ba657e32f82519721eeaf</anchor>
      <arglist>(PubSubBackupUnsubscribeMessage *backupMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unsubscribeChild</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a104570a1f3f3f4951bf67e9b8e09b0e8</anchor>
      <arglist>(const NodeHandle &amp;node, PubSubSubspaceResponsible &amp;subspace)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMessageToChildren</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>aedde86c47759c2ab5b61744c7065377c</anchor>
      <arglist>(PubSubSubspaceResponsible &amp;subspace, BaseOverlayMessage *toIntermediates, BaseOverlayMessage *toBackup, BaseOverlayMessage *toPlayers)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>publishEvents</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a3c4d846c243253afb0f72592e44590ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>startTimer</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a7544c76d3fceee2a56dee1bdf63c4db1</anchor>
      <arglist>(PubSubTimer *timer)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; PubSubSubspace &gt;</type>
      <name>subscribedSubspaces</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a0535f1d205515626aaa20d25f8da3cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; PubSubSubspaceId, PubSubSubspaceResponsible &gt;</type>
      <name>responsibleSubspaces</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a4b4d32adfbffbd585d8a174d47b24db9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; PubSubSubspaceId, PubSubSubspaceResponsible &gt;</type>
      <name>backupSubspaces</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a9cb86fc744b2f9b087a66e0af879f1fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; PubSubSubspaceId, PubSubSubspaceIntermediate &gt;</type>
      <name>intermediateSubspaces</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>ac2ff9ed8d82f2fd97f69343cd8ee78ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>subspaceSize</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a45ee110f2b164e1902266585eaa1fb2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>AOIWidth</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>ae02428124f2ac8a32da65ce4bcc7a927</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numSubspaces</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a4051d53d8d09521b830246ca19b0004b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>parentTimeout</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a98fd6baf72474a184c902133581273fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>maxChildren</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a7d310afbff3e729b6a33f8e6614de07e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>allowOldMoveMessages</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>aced8c7945b0f77560359167cc5f398f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>currentRegionX</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a6adc937050de85cfcffa4561b6daee84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>currentRegionY</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>aa43137704c5ad5a9fecbff8a01ce38bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>movementRate</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a228fe6f61d1fe510d1336296c4bf254c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>maxMoveDelay</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a219753e4fc3eae95cd21f70bc40017e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PubSubTimer *</type>
      <name>heartbeatTimer</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>aebf88e5c0a0f294c706c3281b1aae373</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PubSubTimer *</type>
      <name>childPingTimer</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a2540cd40427d53404d3adbca173cfd6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PubSubTimer *</type>
      <name>eventDeliveryTimer</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a5c7d73c47298f65748e65abc506b9611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>joinTimer</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a04199b677abdfd25b29f9a5f79c19426</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress</type>
      <name>lobbyServer</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a1e1ba5fd3c791f3aa2172e6b055f68bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numEventsWrongTimeslot</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>aa809123a9ef7f64ea622400ed60a2d4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numEventsCorrectTimeslot</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a0adb17b77190fd14c0979fe39a5889cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numPubSubSignalingMessages</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>aed031b28dd4fd6b2db5f68247ff742d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>pubSubSignalingMessagesSize</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a16f1ec7076f68484acd789057428a3cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numMoveMessages</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a11ca86e89977d8bb4d1512a5e64ce8d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>moveMessagesSize</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a122b6f4eacfc82a453cdabace026a0d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numMoveListMessages</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>ae81f55efe5b21342597e408ff3474eee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>moveListMessagesSize</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a5a665dd74681081d669ea57efd5d83b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>respMoveListMessagesSize</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a4561eb4e380c7aea874ea622b9145603</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lostMovementLists</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a1450e36b5a7103fe4581f271fac13340</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>receivedMovementLists</name>
      <anchorfile>classPubSubMMOG.html</anchorfile>
      <anchor>a8415fe6a47b3b961fd54f9e3b5f8d3f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubMoveListMessage</name>
    <filename>classPubSubMoveListMessage.html</filename>
    <base>BaseOverlayMessage</base>
    <member kind="function">
      <type></type>
      <name>PubSubMoveListMessage</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>a00a60fc3a5f54e7ecced215de8b7882f</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PubSubMoveListMessage</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>a430bcce5be7ee92889902e35f2da822a</anchor>
      <arglist>(const PubSubMoveListMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PubSubMoveListMessage</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>ae2dafda872e5ccb7b8928d962c499691</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PubSubMoveListMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>af23a513ff282b4d08085f9436d675a79</anchor>
      <arglist>(const PubSubMoveListMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PubSubMoveListMessage *</type>
      <name>dup</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>a5d61d0f12b29063f944e6fd5775d3da7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>afd64ba1ba51101da36a49ca9b07bb949</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>ab70900f60062bde380a16574ccc3ae5c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSubspaceId</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>ac3f12e1ebacfa47cfcdfb5d032be6a55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubspaceId</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>a1295c70bfc4ff914b1fa0ef2d85f3952</anchor>
      <arglist>(int subspaceId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getTimestamp</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>a3d67a3591e45877525dbd887bd3406d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimestamp</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>a29a663e3ab95721f0eeeb2740331fd7e</anchor>
      <arglist>(simtime_t timestamp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPlayerArraySize</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>a7cfc3016cda8ffe6a48efb921b17d454</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getPlayerArraySize</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>aa41dbdd97c91926ec1b86116a9750802</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getPlayer</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>a6c8be50200570e0c4c45dd809c3b5dbe</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getPlayer</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>a14285aff8ceb0161faba7151ff33a009</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPlayer</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>a2b40bae9aa526d91741eec67f0f3b6e2</anchor>
      <arglist>(unsigned int k, const NodeHandle &amp;player)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPositionArraySize</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>ac471ea4143307ab400a66a5d570a3579</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getPositionArraySize</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>a2f87ee7e50d5d28b31f86dd2cc219d63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector2D &amp;</type>
      <name>getPosition</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>a59cce8e96288c2874df9d3fe72096fa8</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Vector2D &amp;</type>
      <name>getPosition</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>ae8920c3492c835eb9fdd70f06ac2c9a3</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPosition</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>a82f4f379dbdb32a4d4f0db2b1d6ad2a0</anchor>
      <arglist>(unsigned int k, const Vector2D &amp;position)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPositionAgeArraySize</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>a5d28566e440f12fcc2adc5c13063def8</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getPositionAgeArraySize</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>a5611c76369788b5b92967349b3a5fae7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getPositionAge</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>a75c129b174b7e91b314cb13c475f3021</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPositionAge</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>ad60d1703ea48593d5c8e27f810b17a98</anchor>
      <arglist>(unsigned int k, simtime_t positionAge)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>a490afba5653881ea835c26ee9f554315</anchor>
      <arglist>(const PubSubMoveListMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>subspaceId_var</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>a4c0bc0953d58bf59eda7da28080496bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>timestamp_var</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>aeb888c7ecb633a3eeaaf158bddf71c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle *</type>
      <name>player_var</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>aa3fa1a13d38ab1fec1b8319880ea23b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>player_arraysize</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>a531f66799ba089a5e95ff6364f610571</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D *</type>
      <name>position_var</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>a397b2f728fdf7cfaf0214289d1c6e5c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>position_arraysize</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>a2762bc92377569078f7483045ae9a666</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t *</type>
      <name>positionAge_var</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>a4ce2b2194d82c0f1c4e1bbdd3dbd040f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>positionAge_arraysize</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>a8ae694eb67ad083cee4e26cc74c825c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPubSubMoveListMessage.html</anchorfile>
      <anchor>a5fcbc12e014c497aab943d63974cc757</anchor>
      <arglist>(const PubSubMoveListMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubMoveMessage</name>
    <filename>classPubSubMoveMessage.html</filename>
    <base>BaseOverlayMessage</base>
    <member kind="function">
      <type></type>
      <name>PubSubMoveMessage</name>
      <anchorfile>classPubSubMoveMessage.html</anchorfile>
      <anchor>a2fce6da310fbecb607c65183ec898566</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PubSubMoveMessage</name>
      <anchorfile>classPubSubMoveMessage.html</anchorfile>
      <anchor>a909396766dbdebed4dbb806346bb1b6c</anchor>
      <arglist>(const PubSubMoveMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PubSubMoveMessage</name>
      <anchorfile>classPubSubMoveMessage.html</anchorfile>
      <anchor>a7a73160eb259d178809cc9c622b7ddb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PubSubMoveMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classPubSubMoveMessage.html</anchorfile>
      <anchor>ab0e7d516986ba0ef03078aa2c7f25347</anchor>
      <arglist>(const PubSubMoveMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PubSubMoveMessage *</type>
      <name>dup</name>
      <anchorfile>classPubSubMoveMessage.html</anchorfile>
      <anchor>a931a9d82f2bdf9795bdf59a768e23c93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPubSubMoveMessage.html</anchorfile>
      <anchor>aa00c4151564f5df289aa080d61984614</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPubSubMoveMessage.html</anchorfile>
      <anchor>a466e24743999bfa607683276e6d6f929</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSubspaceId</name>
      <anchorfile>classPubSubMoveMessage.html</anchorfile>
      <anchor>ac5824dff148c7bface7054d5c257e14d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubspaceId</name>
      <anchorfile>classPubSubMoveMessage.html</anchorfile>
      <anchor>a383f68c7b8594fa08b87b85b5ca6fa48</anchor>
      <arglist>(int subspaceId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getTimestamp</name>
      <anchorfile>classPubSubMoveMessage.html</anchorfile>
      <anchor>a6cbaea29f897c198f6de3afa14226055</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimestamp</name>
      <anchorfile>classPubSubMoveMessage.html</anchorfile>
      <anchor>a670813b9282cf62aa089d6784f3dfd78</anchor>
      <arglist>(simtime_t timestamp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getPlayer</name>
      <anchorfile>classPubSubMoveMessage.html</anchorfile>
      <anchor>a41cbb7fc6ab39fdb91f33fd9329f6a75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getPlayer</name>
      <anchorfile>classPubSubMoveMessage.html</anchorfile>
      <anchor>abacec180f27747ef36d7b9def2128b57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPlayer</name>
      <anchorfile>classPubSubMoveMessage.html</anchorfile>
      <anchor>a96b0721fb30bf0a20b34215e90a2780b</anchor>
      <arglist>(const NodeHandle &amp;player)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector2D &amp;</type>
      <name>getPosition</name>
      <anchorfile>classPubSubMoveMessage.html</anchorfile>
      <anchor>afb1186b74aad41f6efda872a67ad8da4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Vector2D &amp;</type>
      <name>getPosition</name>
      <anchorfile>classPubSubMoveMessage.html</anchorfile>
      <anchor>acc94db1161371a0eaf6404d880341ba1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPosition</name>
      <anchorfile>classPubSubMoveMessage.html</anchorfile>
      <anchor>ac1d2aa4cbadc7c386c8a22f455c015cc</anchor>
      <arglist>(const Vector2D &amp;position)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPubSubMoveMessage.html</anchorfile>
      <anchor>a7cd273aad7309f2ea6ea1bb71e588e4c</anchor>
      <arglist>(const PubSubMoveMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>subspaceId_var</name>
      <anchorfile>classPubSubMoveMessage.html</anchorfile>
      <anchor>a9592632b30b00314544a33d706b31bca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>timestamp_var</name>
      <anchorfile>classPubSubMoveMessage.html</anchorfile>
      <anchor>ac739441faa25648ad97500bb492fd340</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>player_var</name>
      <anchorfile>classPubSubMoveMessage.html</anchorfile>
      <anchor>a8cf15d15d6ea12fc1fc5cd6f1950c1fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D</type>
      <name>position_var</name>
      <anchorfile>classPubSubMoveMessage.html</anchorfile>
      <anchor>aedc13088ef715b7c2b0fd8549753be14</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPubSubMoveMessage.html</anchorfile>
      <anchor>a871549303535e118161535eef29179f9</anchor>
      <arglist>(const PubSubMoveMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubNodeLeftMessage</name>
    <filename>classPubSubNodeLeftMessage.html</filename>
    <base>BaseOverlayMessage</base>
    <member kind="function">
      <type></type>
      <name>PubSubNodeLeftMessage</name>
      <anchorfile>classPubSubNodeLeftMessage.html</anchorfile>
      <anchor>a6c7ec9e1323c4fc312596589429e7af4</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PubSubNodeLeftMessage</name>
      <anchorfile>classPubSubNodeLeftMessage.html</anchorfile>
      <anchor>ac68f04b6a0cec754097a8f319174d36d</anchor>
      <arglist>(const PubSubNodeLeftMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PubSubNodeLeftMessage</name>
      <anchorfile>classPubSubNodeLeftMessage.html</anchorfile>
      <anchor>a76587a25cc62e66a4d804f6ba7a228a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PubSubNodeLeftMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classPubSubNodeLeftMessage.html</anchorfile>
      <anchor>a05bf803d53acb6127bacfb13180493a8</anchor>
      <arglist>(const PubSubNodeLeftMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PubSubNodeLeftMessage *</type>
      <name>dup</name>
      <anchorfile>classPubSubNodeLeftMessage.html</anchorfile>
      <anchor>a556d8d8b5b685f308dfa5173666b555f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPubSubNodeLeftMessage.html</anchorfile>
      <anchor>a5ac600d0019426b0411af5007bc1f7fb</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPubSubNodeLeftMessage.html</anchorfile>
      <anchor>adc7de12d60bd943b4280cf8e0c61f518</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSubspaceId</name>
      <anchorfile>classPubSubNodeLeftMessage.html</anchorfile>
      <anchor>a5bdc2448771e8e102f2a1742669e3ff4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubspaceId</name>
      <anchorfile>classPubSubNodeLeftMessage.html</anchorfile>
      <anchor>a74ae8a4726d74370cc59cae590a72ddb</anchor>
      <arglist>(int subspaceId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getNode</name>
      <anchorfile>classPubSubNodeLeftMessage.html</anchorfile>
      <anchor>a3ade8236d7ce506a1805f3e1f7aa87d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getNode</name>
      <anchorfile>classPubSubNodeLeftMessage.html</anchorfile>
      <anchor>a43011e673b1601cf40cc94d5ae40e593</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNode</name>
      <anchorfile>classPubSubNodeLeftMessage.html</anchorfile>
      <anchor>a4604631be10c1b8f9aa6db29aaa76386</anchor>
      <arglist>(const NodeHandle &amp;node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPubSubNodeLeftMessage.html</anchorfile>
      <anchor>af454033e710807b89896ebf23f823eec</anchor>
      <arglist>(const PubSubNodeLeftMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>subspaceId_var</name>
      <anchorfile>classPubSubNodeLeftMessage.html</anchorfile>
      <anchor>a3f893f50fb3af1215cafa0b593ed4e91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>node_var</name>
      <anchorfile>classPubSubNodeLeftMessage.html</anchorfile>
      <anchor>af08aee727a2cf6db4dab99c4628506da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPubSubNodeLeftMessage.html</anchorfile>
      <anchor>a059589b663e67d277e3422aa3ed6ba81</anchor>
      <arglist>(const PubSubNodeLeftMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubPingCall</name>
    <filename>classPubSubPingCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>PubSubPingCall</name>
      <anchorfile>classPubSubPingCall.html</anchorfile>
      <anchor>afbc479fd6861a27756e7491b3955d1c4</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PubSubPingCall</name>
      <anchorfile>classPubSubPingCall.html</anchorfile>
      <anchor>a056810b1c76e8a03f093192a7e6077bd</anchor>
      <arglist>(const PubSubPingCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PubSubPingCall</name>
      <anchorfile>classPubSubPingCall.html</anchorfile>
      <anchor>abff657a379666890075538b8d91b9f02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PubSubPingCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classPubSubPingCall.html</anchorfile>
      <anchor>acd3246e9e5393562402f3187ccea8d76</anchor>
      <arglist>(const PubSubPingCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PubSubPingCall *</type>
      <name>dup</name>
      <anchorfile>classPubSubPingCall.html</anchorfile>
      <anchor>ae8e91ba51f29bd59cad7564cb2375d38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPubSubPingCall.html</anchorfile>
      <anchor>a64a44ca097306856ed5db03ea648184e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPubSubPingCall.html</anchorfile>
      <anchor>abc916902611ce5ecf2e5b9259a8ae816</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSubspaceId</name>
      <anchorfile>classPubSubPingCall.html</anchorfile>
      <anchor>a6c09797ec1a7e667e85b3daba1dc5a60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubspaceId</name>
      <anchorfile>classPubSubPingCall.html</anchorfile>
      <anchor>a9a24a971b4ffec664ceda5cc1b0ed8f6</anchor>
      <arglist>(int subspaceId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPingType</name>
      <anchorfile>classPubSubPingCall.html</anchorfile>
      <anchor>ad2d88a7b8ff45cf95aabfcb792490d1d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPingType</name>
      <anchorfile>classPubSubPingCall.html</anchorfile>
      <anchor>a1e17478f614c712ac5fa0d51cd750cb1</anchor>
      <arglist>(int pingType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPubSubPingCall.html</anchorfile>
      <anchor>a3d16c82a907f36240ab36ef72d92970e</anchor>
      <arglist>(const PubSubPingCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>subspaceId_var</name>
      <anchorfile>classPubSubPingCall.html</anchorfile>
      <anchor>a983e2d9a59e83801311976a52a6fc7ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>pingType_var</name>
      <anchorfile>classPubSubPingCall.html</anchorfile>
      <anchor>ac4351fe20a6638ff576dca4ea35c5cfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPubSubPingCall.html</anchorfile>
      <anchor>af7bc3fdeb2f6baf6a0e4fd8b6e349968</anchor>
      <arglist>(const PubSubPingCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubPingResponse</name>
    <filename>classPubSubPingResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>PubSubPingResponse</name>
      <anchorfile>classPubSubPingResponse.html</anchorfile>
      <anchor>a3e227c428cd88aa5aecade10daefe7e4</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PubSubPingResponse</name>
      <anchorfile>classPubSubPingResponse.html</anchorfile>
      <anchor>a9adf060293fd17c82c9ddcb9d81c186f</anchor>
      <arglist>(const PubSubPingResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PubSubPingResponse</name>
      <anchorfile>classPubSubPingResponse.html</anchorfile>
      <anchor>a04231d02a91208ef2789d6724ac9a6c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PubSubPingResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classPubSubPingResponse.html</anchorfile>
      <anchor>a3c92edb07cd54ec538f2fa00777b4a74</anchor>
      <arglist>(const PubSubPingResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PubSubPingResponse *</type>
      <name>dup</name>
      <anchorfile>classPubSubPingResponse.html</anchorfile>
      <anchor>a2728afc23be60e00d3e40c911a708a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPubSubPingResponse.html</anchorfile>
      <anchor>ad50b0c1f6e50ae5f749c411a55728234</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPubSubPingResponse.html</anchorfile>
      <anchor>a4b0835ceafe0b77bbea48af749456cf2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSubspaceId</name>
      <anchorfile>classPubSubPingResponse.html</anchorfile>
      <anchor>ab449be06f1cc6e4634563b9186dedce5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubspaceId</name>
      <anchorfile>classPubSubPingResponse.html</anchorfile>
      <anchor>a57e8722a1871166499e54fd1ecb4e30f</anchor>
      <arglist>(int subspaceId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPubSubPingResponse.html</anchorfile>
      <anchor>aee5232484ad87fdabbcb3eef092af8a5</anchor>
      <arglist>(const PubSubPingResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>subspaceId_var</name>
      <anchorfile>classPubSubPingResponse.html</anchorfile>
      <anchor>acceedffcc0836afc21e820ed02ea059c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPubSubPingResponse.html</anchorfile>
      <anchor>a524bbbca92b88267f3b5b2006ad031af</anchor>
      <arglist>(const PubSubPingResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubReleaseIntermediateMessage</name>
    <filename>classPubSubReleaseIntermediateMessage.html</filename>
    <base>BaseOverlayMessage</base>
    <member kind="function">
      <type></type>
      <name>PubSubReleaseIntermediateMessage</name>
      <anchorfile>classPubSubReleaseIntermediateMessage.html</anchorfile>
      <anchor>a9169db1370f2ae75394c51df01bba7b9</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PubSubReleaseIntermediateMessage</name>
      <anchorfile>classPubSubReleaseIntermediateMessage.html</anchorfile>
      <anchor>a850a25f45a399f55aef12b642891614b</anchor>
      <arglist>(const PubSubReleaseIntermediateMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PubSubReleaseIntermediateMessage</name>
      <anchorfile>classPubSubReleaseIntermediateMessage.html</anchorfile>
      <anchor>aeb5e1182fa015ce32c1a59b24559f4bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PubSubReleaseIntermediateMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classPubSubReleaseIntermediateMessage.html</anchorfile>
      <anchor>ab10a6da360df4481e9f46f6372f18b40</anchor>
      <arglist>(const PubSubReleaseIntermediateMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PubSubReleaseIntermediateMessage *</type>
      <name>dup</name>
      <anchorfile>classPubSubReleaseIntermediateMessage.html</anchorfile>
      <anchor>af152ac09a535c395e46da8d5560e6171</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPubSubReleaseIntermediateMessage.html</anchorfile>
      <anchor>a516dbf0a5e2369407392497311c1595f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPubSubReleaseIntermediateMessage.html</anchorfile>
      <anchor>ac86d9b20ca029413a92badd2b49b11a5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSubspaceId</name>
      <anchorfile>classPubSubReleaseIntermediateMessage.html</anchorfile>
      <anchor>a18c562845e99ef0ef4d72faba29aded5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubspaceId</name>
      <anchorfile>classPubSubReleaseIntermediateMessage.html</anchorfile>
      <anchor>a61d94e5f316f7726b548986e922d7528</anchor>
      <arglist>(int subspaceId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPubSubReleaseIntermediateMessage.html</anchorfile>
      <anchor>a29fd828697ba602b0a23d994db01804d</anchor>
      <arglist>(const PubSubReleaseIntermediateMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>subspaceId_var</name>
      <anchorfile>classPubSubReleaseIntermediateMessage.html</anchorfile>
      <anchor>ae3a6b25c8901fc87545da7b6e100be75</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPubSubReleaseIntermediateMessage.html</anchorfile>
      <anchor>a381f75418f927c321bf7c1b2e7c3892f</anchor>
      <arglist>(const PubSubReleaseIntermediateMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubReplacementMessage</name>
    <filename>classPubSubReplacementMessage.html</filename>
    <base>BaseOverlayMessage</base>
    <member kind="function">
      <type></type>
      <name>PubSubReplacementMessage</name>
      <anchorfile>classPubSubReplacementMessage.html</anchorfile>
      <anchor>a460d884cc32f182208798ad3e58bc748</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PubSubReplacementMessage</name>
      <anchorfile>classPubSubReplacementMessage.html</anchorfile>
      <anchor>a7e989a5fc687708154f8833df53b7064</anchor>
      <arglist>(const PubSubReplacementMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PubSubReplacementMessage</name>
      <anchorfile>classPubSubReplacementMessage.html</anchorfile>
      <anchor>a0ea18974ea15ac27a346ec357123e434</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PubSubReplacementMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classPubSubReplacementMessage.html</anchorfile>
      <anchor>a1e665fd4988650c4ac641f4c20f69cb3</anchor>
      <arglist>(const PubSubReplacementMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PubSubReplacementMessage *</type>
      <name>dup</name>
      <anchorfile>classPubSubReplacementMessage.html</anchorfile>
      <anchor>ad5105769d8a68feb167fcc4871a25b56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPubSubReplacementMessage.html</anchorfile>
      <anchor>a7e8fe2795329f7257c314d4806e32d6f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPubSubReplacementMessage.html</anchorfile>
      <anchor>a9e665e1de4d141e9bb72556296c380f7</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSubspaceId</name>
      <anchorfile>classPubSubReplacementMessage.html</anchorfile>
      <anchor>ab1379bead1302a2e9278039991db882f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubspaceId</name>
      <anchorfile>classPubSubReplacementMessage.html</anchorfile>
      <anchor>aeb45a9fb0e38c4d3e5c33d4131a98655</anchor>
      <arglist>(int subspaceId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getNewResponsibleNode</name>
      <anchorfile>classPubSubReplacementMessage.html</anchorfile>
      <anchor>ad86ff24aed5d6c098aa882032966cb79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getNewResponsibleNode</name>
      <anchorfile>classPubSubReplacementMessage.html</anchorfile>
      <anchor>a6052f47b65410829d704c60da641d92e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNewResponsibleNode</name>
      <anchorfile>classPubSubReplacementMessage.html</anchorfile>
      <anchor>ae8ce96ec8b68ba24f15dca2d7cf8a9d4</anchor>
      <arglist>(const NodeHandle &amp;newResponsibleNode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPubSubReplacementMessage.html</anchorfile>
      <anchor>a148d93514f80a787cb075c11fbf7959c</anchor>
      <arglist>(const PubSubReplacementMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>subspaceId_var</name>
      <anchorfile>classPubSubReplacementMessage.html</anchorfile>
      <anchor>a9e6cd71bfc7a3ff66203a44072db9be1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>newResponsibleNode_var</name>
      <anchorfile>classPubSubReplacementMessage.html</anchorfile>
      <anchor>a6d05cfc50b097b46f0fcf93dd71d1455</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPubSubReplacementMessage.html</anchorfile>
      <anchor>a4f8792faede45df21707f91db6a76cbf</anchor>
      <arglist>(const PubSubReplacementMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubResponsibleNodeCall</name>
    <filename>classPubSubResponsibleNodeCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>PubSubResponsibleNodeCall</name>
      <anchorfile>classPubSubResponsibleNodeCall.html</anchorfile>
      <anchor>a1406c7f37d5d6ce8e6032a563064c0a9</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PubSubResponsibleNodeCall</name>
      <anchorfile>classPubSubResponsibleNodeCall.html</anchorfile>
      <anchor>a75f5b47f8c130e7f05a760b4ce5abc5b</anchor>
      <arglist>(const PubSubResponsibleNodeCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PubSubResponsibleNodeCall</name>
      <anchorfile>classPubSubResponsibleNodeCall.html</anchorfile>
      <anchor>ac351d8d078b55ecd7266439b5d295c59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PubSubResponsibleNodeCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classPubSubResponsibleNodeCall.html</anchorfile>
      <anchor>a6a0fcf8905d51f35c849855994127431</anchor>
      <arglist>(const PubSubResponsibleNodeCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PubSubResponsibleNodeCall *</type>
      <name>dup</name>
      <anchorfile>classPubSubResponsibleNodeCall.html</anchorfile>
      <anchor>a0779ffa6795e1a580c9960387b53d4dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPubSubResponsibleNodeCall.html</anchorfile>
      <anchor>a9464f2379e5094f3c275046c07425b8c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPubSubResponsibleNodeCall.html</anchorfile>
      <anchor>a60f5ae4f6f7d0eb463ae7373004e8110</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector2D &amp;</type>
      <name>getSubspacePos</name>
      <anchorfile>classPubSubResponsibleNodeCall.html</anchorfile>
      <anchor>aa6f4d981e7c540d77c40337bbf4e34a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Vector2D &amp;</type>
      <name>getSubspacePos</name>
      <anchorfile>classPubSubResponsibleNodeCall.html</anchorfile>
      <anchor>a477451d88ce564fb3c7355d30b902d71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubspacePos</name>
      <anchorfile>classPubSubResponsibleNodeCall.html</anchorfile>
      <anchor>a2bf680eb93832016647c1dfbdc6618ca</anchor>
      <arglist>(const Vector2D &amp;subspacePos)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPubSubResponsibleNodeCall.html</anchorfile>
      <anchor>af427a9bdd001a457736e567539781263</anchor>
      <arglist>(const PubSubResponsibleNodeCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D</type>
      <name>subspacePos_var</name>
      <anchorfile>classPubSubResponsibleNodeCall.html</anchorfile>
      <anchor>aad7a96964bde1624a8449f36ec823a8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPubSubResponsibleNodeCall.html</anchorfile>
      <anchor>a1af959206245d2d594c41419a1492bff</anchor>
      <arglist>(const PubSubResponsibleNodeCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubResponsibleNodeResponse</name>
    <filename>classPubSubResponsibleNodeResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>PubSubResponsibleNodeResponse</name>
      <anchorfile>classPubSubResponsibleNodeResponse.html</anchorfile>
      <anchor>a3235ee57684d9e71de363f73d71186e4</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PubSubResponsibleNodeResponse</name>
      <anchorfile>classPubSubResponsibleNodeResponse.html</anchorfile>
      <anchor>ab79832c65742d0ade5c396c996ef9b4b</anchor>
      <arglist>(const PubSubResponsibleNodeResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PubSubResponsibleNodeResponse</name>
      <anchorfile>classPubSubResponsibleNodeResponse.html</anchorfile>
      <anchor>a45ffe0c6204388cbb560af532a9f24fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PubSubResponsibleNodeResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classPubSubResponsibleNodeResponse.html</anchorfile>
      <anchor>a7a755ca50c1bf372933a0fd010e9e2e3</anchor>
      <arglist>(const PubSubResponsibleNodeResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PubSubResponsibleNodeResponse *</type>
      <name>dup</name>
      <anchorfile>classPubSubResponsibleNodeResponse.html</anchorfile>
      <anchor>a08b127d7966a5f5c5a63f1be154155d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPubSubResponsibleNodeResponse.html</anchorfile>
      <anchor>a2f9e9b80d2a777d3f63b05f592a7ae33</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPubSubResponsibleNodeResponse.html</anchorfile>
      <anchor>abd71cc3b3ca5524bc0b56cda65ae3534</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSubspaceId</name>
      <anchorfile>classPubSubResponsibleNodeResponse.html</anchorfile>
      <anchor>a90f846a8230ff1c298116eae9320fc5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubspaceId</name>
      <anchorfile>classPubSubResponsibleNodeResponse.html</anchorfile>
      <anchor>aea11d5628f87767cbfb71ec716aa936b</anchor>
      <arglist>(int subspaceId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getResponsibleNode</name>
      <anchorfile>classPubSubResponsibleNodeResponse.html</anchorfile>
      <anchor>a9c9dcf7c0e9e43a34b80baba9761481d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getResponsibleNode</name>
      <anchorfile>classPubSubResponsibleNodeResponse.html</anchorfile>
      <anchor>a6f1e31681b4dc23d69a9198cf8167250</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setResponsibleNode</name>
      <anchorfile>classPubSubResponsibleNodeResponse.html</anchorfile>
      <anchor>aa37b418fb4ef80c7777400764d8f2242</anchor>
      <arglist>(const NodeHandle &amp;responsibleNode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPubSubResponsibleNodeResponse.html</anchorfile>
      <anchor>a24b49cca5335b54dae16a5d1ba75f4e3</anchor>
      <arglist>(const PubSubResponsibleNodeResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>subspaceId_var</name>
      <anchorfile>classPubSubResponsibleNodeResponse.html</anchorfile>
      <anchor>a77296e8e69266779377d9c366aa2a962</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>responsibleNode_var</name>
      <anchorfile>classPubSubResponsibleNodeResponse.html</anchorfile>
      <anchor>a98e78156a42a95f43d0f39c4aa6be413</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPubSubResponsibleNodeResponse.html</anchorfile>
      <anchor>a125fa0cee579a34360cc5f19f79debac</anchor>
      <arglist>(const PubSubResponsibleNodeResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubSubscriptionCall</name>
    <filename>classPubSubSubscriptionCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>PubSubSubscriptionCall</name>
      <anchorfile>classPubSubSubscriptionCall.html</anchorfile>
      <anchor>a2dd0c6e37a3d4c18ab9462ea8d9e38d5</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PubSubSubscriptionCall</name>
      <anchorfile>classPubSubSubscriptionCall.html</anchorfile>
      <anchor>ab5aa3a395c6fdad6220a57aacf20bd9c</anchor>
      <arglist>(const PubSubSubscriptionCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PubSubSubscriptionCall</name>
      <anchorfile>classPubSubSubscriptionCall.html</anchorfile>
      <anchor>a8271a46a5274a02af9f462a55292fd7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PubSubSubscriptionCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classPubSubSubscriptionCall.html</anchorfile>
      <anchor>a5f3c0979bc60ad041cf8850b2c51b18e</anchor>
      <arglist>(const PubSubSubscriptionCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PubSubSubscriptionCall *</type>
      <name>dup</name>
      <anchorfile>classPubSubSubscriptionCall.html</anchorfile>
      <anchor>afcbab6dee358f1c5206c46217fa5fc20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPubSubSubscriptionCall.html</anchorfile>
      <anchor>ad872367b799b30ca19f756ab0fec1f05</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPubSubSubscriptionCall.html</anchorfile>
      <anchor>afb712168d70581da5a7b87669ac8892f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSubspaceId</name>
      <anchorfile>classPubSubSubscriptionCall.html</anchorfile>
      <anchor>a6cba83861e6c98de7a2721a596d2ff14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubspaceId</name>
      <anchorfile>classPubSubSubscriptionCall.html</anchorfile>
      <anchor>a8b0793692afe779cf03bd1081fa60a6f</anchor>
      <arglist>(int subspaceId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPubSubSubscriptionCall.html</anchorfile>
      <anchor>ac766fb5202df8f65d7be3bc796752311</anchor>
      <arglist>(const PubSubSubscriptionCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>subspaceId_var</name>
      <anchorfile>classPubSubSubscriptionCall.html</anchorfile>
      <anchor>affad57625dc5c4eb7ab5287af67b5adf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPubSubSubscriptionCall.html</anchorfile>
      <anchor>abc468325f88b1b7be11f0fc6e89acf51</anchor>
      <arglist>(const PubSubSubscriptionCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubSubscriptionResponse</name>
    <filename>classPubSubSubscriptionResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>PubSubSubscriptionResponse</name>
      <anchorfile>classPubSubSubscriptionResponse.html</anchorfile>
      <anchor>aaafc6b86f25e0f7ddc1152c43e4e11f7</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PubSubSubscriptionResponse</name>
      <anchorfile>classPubSubSubscriptionResponse.html</anchorfile>
      <anchor>a5dfc71ed9218e913bdc94596e9026b2f</anchor>
      <arglist>(const PubSubSubscriptionResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PubSubSubscriptionResponse</name>
      <anchorfile>classPubSubSubscriptionResponse.html</anchorfile>
      <anchor>a92848c95ef774c18fe0b65c68322933d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PubSubSubscriptionResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classPubSubSubscriptionResponse.html</anchorfile>
      <anchor>a5c47b2022a1c62e35fbc41c9575fa32f</anchor>
      <arglist>(const PubSubSubscriptionResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PubSubSubscriptionResponse *</type>
      <name>dup</name>
      <anchorfile>classPubSubSubscriptionResponse.html</anchorfile>
      <anchor>a95ae41420d84f25002c030397d3c9f3d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPubSubSubscriptionResponse.html</anchorfile>
      <anchor>a2e3778d893a6108268f845cc79763cea</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPubSubSubscriptionResponse.html</anchorfile>
      <anchor>a25bc5bba012d25b0a58566d1e2c7731d</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getFailed</name>
      <anchorfile>classPubSubSubscriptionResponse.html</anchorfile>
      <anchor>a8b39219b33424e4eeac34caa2b835156</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFailed</name>
      <anchorfile>classPubSubSubscriptionResponse.html</anchorfile>
      <anchor>aa43c934894540c35c33e5f611243fc0b</anchor>
      <arglist>(bool failed)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPubSubSubscriptionResponse.html</anchorfile>
      <anchor>a1ee34b7afe28eac44989eac410d39c3c</anchor>
      <arglist>(const PubSubSubscriptionResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>failed_var</name>
      <anchorfile>classPubSubSubscriptionResponse.html</anchorfile>
      <anchor>a25de56fa6441fcad26cfc2df211bf7f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPubSubSubscriptionResponse.html</anchorfile>
      <anchor>a1ea8e5d968ad67e1db2b70416f5e64a8</anchor>
      <arglist>(const PubSubSubscriptionResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubSubspace</name>
    <filename>classPubSubSubspace.html</filename>
    <member kind="function">
      <type></type>
      <name>PubSubSubspace</name>
      <anchorfile>classPubSubSubspace.html</anchorfile>
      <anchor>a59a8ae432c87e3c38ee60b0781486aa5</anchor>
      <arglist>(PubSubSubspaceId id)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PubSubSubspace</name>
      <anchorfile>classPubSubSubspace.html</anchorfile>
      <anchor>a564477402bfd34e78973773e21425826</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PubSubSubspaceId &amp;</type>
      <name>getId</name>
      <anchorfile>classPubSubSubspace.html</anchorfile>
      <anchor>a68c0be6c59e362d291533d74a65aa187</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setResponsibleNode</name>
      <anchorfile>classPubSubSubspace.html</anchorfile>
      <anchor>addf352c69955906dd9bda7e0a0c09dbb</anchor>
      <arglist>(NodeHandle node)</arglist>
    </member>
    <member kind="function">
      <type>NodeHandle</type>
      <name>getResponsibleNode</name>
      <anchorfile>classPubSubSubspace.html</anchorfile>
      <anchor>a996b0242f4c47164d5ee2141755d8fb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimestamp</name>
      <anchorfile>classPubSubSubspace.html</anchorfile>
      <anchor>a1015e70aeef03ea3226aeb4dc373895c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimestamp</name>
      <anchorfile>classPubSubSubspace.html</anchorfile>
      <anchor>a32c833976799b73104449c8d21e55945</anchor>
      <arglist>(simtime_t stamp)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getLastTimestamp</name>
      <anchorfile>classPubSubSubspace.html</anchorfile>
      <anchor>ae5e5359aca550804f770ce2d380b783d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getTimeSinceLastTimestamp</name>
      <anchorfile>classPubSubSubspace.html</anchorfile>
      <anchor>a1d3c006c164e36b23e96a3bff1597dce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PubSubSubspaceId</type>
      <name>spaceId</name>
      <anchorfile>classPubSubSubspace.html</anchorfile>
      <anchor>a64afb10f4570b98dc92111f3b2fd5373</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>responsibleNode</name>
      <anchorfile>classPubSubSubspace.html</anchorfile>
      <anchor>a217725281eb6d1a7b40e09da499ced12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lastTimestamp</name>
      <anchorfile>classPubSubSubspace.html</anchorfile>
      <anchor>abc30e2906183f4e393756029b42a7dd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classPubSubSubspace.html</anchorfile>
      <anchor>af5ef30522c1381a3e7038c69b1a8211f</anchor>
      <arglist>(std::ostream &amp;o, const PubSubSubspace &amp;subspace)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubSubspaceId</name>
    <filename>classPubSubSubspaceId.html</filename>
    <member kind="function">
      <type></type>
      <name>PubSubSubspaceId</name>
      <anchorfile>classPubSubSubspaceId.html</anchorfile>
      <anchor>a0ab96a93fcedc7fedf840c4a1b041542</anchor>
      <arglist>(int id, int _maxY)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PubSubSubspaceId</name>
      <anchorfile>classPubSubSubspaceId.html</anchorfile>
      <anchor>aee2f67c76aa5ea4b2dc7fb5292e7237c</anchor>
      <arglist>(int x, int y, int _maxY)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PubSubSubspaceId</name>
      <anchorfile>classPubSubSubspaceId.html</anchorfile>
      <anchor>a6e23b74b080e7a0f6cd4d31a6140d459</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getId</name>
      <anchorfile>classPubSubSubspaceId.html</anchorfile>
      <anchor>afb4d71a54d5337d65bb89c27e4d4938c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getX</name>
      <anchorfile>classPubSubSubspaceId.html</anchorfile>
      <anchor>a9d018cb0151f348f084616532d2f2a18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getY</name>
      <anchorfile>classPubSubSubspaceId.html</anchorfile>
      <anchor>a4c09a6757d000dd8c064ab09ba9dc8ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classPubSubSubspaceId.html</anchorfile>
      <anchor>a9ccf144ca39170b08d9ca81d26b21b1b</anchor>
      <arglist>(const PubSubSubspaceId x) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPubSubSubspaceId.html</anchorfile>
      <anchor>a55b08f116495b545cfbe4a6ca2934774</anchor>
      <arglist>(const PubSubSubspaceId x) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>spaceId</name>
      <anchorfile>classPubSubSubspaceId.html</anchorfile>
      <anchor>af087d704b36637872361c89773b95a4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>maxY</name>
      <anchorfile>classPubSubSubspaceId.html</anchorfile>
      <anchor>a75bca2b4ecf59f80c36f3aedf504bb08</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classPubSubSubspaceId.html</anchorfile>
      <anchor>a60d33d49b1ebf1b8c5bc771c52ee24a3</anchor>
      <arglist>(std::ostream &amp;, const PubSubSubspaceId &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubSubspaceIntermediate</name>
    <filename>classPubSubSubspaceIntermediate.html</filename>
    <base>PubSubSubspace</base>
    <member kind="function">
      <type></type>
      <name>PubSubSubspaceIntermediate</name>
      <anchorfile>classPubSubSubspaceIntermediate.html</anchorfile>
      <anchor>afaf0d6aba769e9f6010480f755efae85</anchor>
      <arglist>(PubSubSubspaceId id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PubSubSubspaceIntermediate</name>
      <anchorfile>classPubSubSubspaceIntermediate.html</anchorfile>
      <anchor>a2b0701ad64e775d7107b02f84da828e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addChild</name>
      <anchorfile>classPubSubSubspaceIntermediate.html</anchorfile>
      <anchor>a0161688e552d8aa6f7f7f782cbcf2d85</anchor>
      <arglist>(NodeHandle node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeChild</name>
      <anchorfile>classPubSubSubspaceIntermediate.html</anchorfile>
      <anchor>ada0034be890586e3cc0305bfa089e031</anchor>
      <arglist>(NodeHandle node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumChildren</name>
      <anchorfile>classPubSubSubspaceIntermediate.html</anchorfile>
      <anchor>a17ae7d975c0ae11c5b8e25c970e2fdb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; NodeHandle &gt;</type>
      <name>children</name>
      <anchorfile>classPubSubSubspaceIntermediate.html</anchorfile>
      <anchor>aef3a0468a7eb4cbd84f774e2de574b16</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classPubSubSubspaceIntermediate.html</anchorfile>
      <anchor>a61271c80517d94c80f91247c801bc659</anchor>
      <arglist>(std::ostream &amp;o, const PubSubSubspaceIntermediate &amp;subspace)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubSubspaceLobby</name>
    <filename>classPubSubSubspaceLobby.html</filename>
    <base>PubSubSubspace</base>
    <member kind="function">
      <type></type>
      <name>PubSubSubspaceLobby</name>
      <anchorfile>classPubSubSubspaceLobby.html</anchorfile>
      <anchor>ad9090cfd2d92069da3c6d986d0d93e96</anchor>
      <arglist>(PubSubSubspaceId id)</arglist>
    </member>
    <member kind="variable">
      <type>std::list&lt; PubSubResponsibleNodeCall * &gt;</type>
      <name>waitingNodes</name>
      <anchorfile>classPubSubSubspaceLobby.html</anchorfile>
      <anchor>a11e3db4ea089dcb43883107a47aef396</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>waitingForRespNode</name>
      <anchorfile>classPubSubSubspaceLobby.html</anchorfile>
      <anchor>a74eb3b7110def6855302731c29323f79</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubSubspaceResponsible</name>
    <filename>classPubSubSubspaceResponsible.html</filename>
    <base>PubSubSubspaceIntermediate</base>
    <class kind="class">PubSubSubspaceResponsible::IntermediateNode</class>
    <member kind="function">
      <type></type>
      <name>PubSubSubspaceResponsible</name>
      <anchorfile>classPubSubSubspaceResponsible.html</anchorfile>
      <anchor>a843baf0793be766d1a840932f9b008e4</anchor>
      <arglist>(PubSubSubspaceId id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackupNode</name>
      <anchorfile>classPubSubSubspaceResponsible.html</anchorfile>
      <anchor>a462a25a436aa25d8cc38310119a5d671</anchor>
      <arglist>(NodeHandle b)</arglist>
    </member>
    <member kind="function">
      <type>const NodeHandle &amp;</type>
      <name>getBackupNode</name>
      <anchorfile>classPubSubSubspaceResponsible.html</anchorfile>
      <anchor>a0c585a0f9e8162d0bd55a9698b5bff34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeartbeatTimer</name>
      <anchorfile>classPubSubSubspaceResponsible.html</anchorfile>
      <anchor>a807b58c353071f116890aa5fbe6c47b2</anchor>
      <arglist>(PubSubTimer *t)</arglist>
    </member>
    <member kind="function">
      <type>PubSubTimer *</type>
      <name>getHeartbeatTimer</name>
      <anchorfile>classPubSubSubspaceResponsible.html</anchorfile>
      <anchor>aac9b84db74f0592b7b42b2bdbe668690</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHeartbeatFailCount</name>
      <anchorfile>classPubSubSubspaceResponsible.html</anchorfile>
      <anchor>a595c72d7a2ab91bdcd39d6e5c46cdf04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incHeartbeatFailCount</name>
      <anchorfile>classPubSubSubspaceResponsible.html</anchorfile>
      <anchor>a692b7ba9e6aebed9d400c5347af8b87c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetHeartbeatFailCount</name>
      <anchorfile>classPubSubSubspaceResponsible.html</anchorfile>
      <anchor>a4b0a65f79ed81d8c79e2ddf018737163</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalChildrenCount</name>
      <anchorfile>classPubSubSubspaceResponsible.html</anchorfile>
      <anchor>a41dc142fbdac4eebcadd7b62ee0a822e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fixTotalChildrenCount</name>
      <anchorfile>classPubSubSubspaceResponsible.html</anchorfile>
      <anchor>ab2792e92420b16f1e971e9ff83ebce70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumIntermediates</name>
      <anchorfile>classPubSubSubspaceResponsible.html</anchorfile>
      <anchor>a0037dfdbb81b9918713cba46ad994cb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IntermediateNode *</type>
      <name>getNextFreeIntermediate</name>
      <anchorfile>classPubSubSubspaceResponsible.html</anchorfile>
      <anchor>a2a6d3bc5ff302065df572a07f604a3de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addChild</name>
      <anchorfile>classPubSubSubspaceResponsible.html</anchorfile>
      <anchor>ae254ce652d4827abfb7981b4f067c89a</anchor>
      <arglist>(NodeHandle node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IntermediateNode *</type>
      <name>removeAnyChild</name>
      <anchorfile>classPubSubSubspaceResponsible.html</anchorfile>
      <anchor>a5380c2d29951d510f7dfc7808ebedf3b</anchor>
      <arglist>(NodeHandle node)</arglist>
    </member>
    <member kind="variable">
      <type>std::deque&lt; IntermediateNode &gt;</type>
      <name>intermediateNodes</name>
      <anchorfile>classPubSubSubspaceResponsible.html</anchorfile>
      <anchor>ac0c251df1da2b4752784b9c77a697059</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; NodeHandle, bool &gt;</type>
      <name>cachedChildren</name>
      <anchorfile>classPubSubSubspaceResponsible.html</anchorfile>
      <anchor>a0dad92f50458f0daf1f719c842661a7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::deque&lt; PubSubMoveMessage * &gt;</type>
      <name>waitingMoveMessages</name>
      <anchorfile>classPubSubSubspaceResponsible.html</anchorfile>
      <anchor>a3f199ce5648d14d4faf8672db1b9e8c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static unsigned int</type>
      <name>maxChildren</name>
      <anchorfile>classPubSubSubspaceResponsible.html</anchorfile>
      <anchor>a5dfd7f5d997726d5c8f158a371cee621</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>totalChildrenCount</name>
      <anchorfile>classPubSubSubspaceResponsible.html</anchorfile>
      <anchor>ae0d0ace6f13325909c604cd5c32fcca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>backupNode</name>
      <anchorfile>classPubSubSubspaceResponsible.html</anchorfile>
      <anchor>adb0ef1b3f7e7b91da43cea53abdbdebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PubSubTimer *</type>
      <name>heartbeatTimer</name>
      <anchorfile>classPubSubSubspaceResponsible.html</anchorfile>
      <anchor>a66598de72d8a87a5cd4c1408c4996bed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>heartbeatFailCount</name>
      <anchorfile>classPubSubSubspaceResponsible.html</anchorfile>
      <anchor>a1f8c19ae872e141dc3f6243846e2f844</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classPubSubSubspaceResponsible.html</anchorfile>
      <anchor>a3e942879ecbd0964c26d68519a38ef8a</anchor>
      <arglist>(std::ostream &amp;o, const PubSubSubspaceResponsible &amp;subspace)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubSubspaceResponsible::IntermediateNode</name>
    <filename>classPubSubSubspaceResponsible_1_1IntermediateNode.html</filename>
    <member kind="function">
      <type></type>
      <name>IntermediateNode</name>
      <anchorfile>classPubSubSubspaceResponsible_1_1IntermediateNode.html</anchorfile>
      <anchor>a30ffe364a6056e34aefeca12de8d713f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>NodeHandle</type>
      <name>node</name>
      <anchorfile>classPubSubSubspaceResponsible_1_1IntermediateNode.html</anchorfile>
      <anchor>a597257efca218f9499aa4e113d99e139</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; NodeHandle &gt;</type>
      <name>children</name>
      <anchorfile>classPubSubSubspaceResponsible_1_1IntermediateNode.html</anchorfile>
      <anchor>a2ddae3a07ad454ef312681659588b92a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>waitingChildren</name>
      <anchorfile>classPubSubSubspaceResponsible_1_1IntermediateNode.html</anchorfile>
      <anchor>adc4e60645148ad5003649a9dd77587a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubTakeOverSubspaceCall</name>
    <filename>classPubSubTakeOverSubspaceCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>PubSubTakeOverSubspaceCall</name>
      <anchorfile>classPubSubTakeOverSubspaceCall.html</anchorfile>
      <anchor>a3221693fe4b194dae080dca4cef98940</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PubSubTakeOverSubspaceCall</name>
      <anchorfile>classPubSubTakeOverSubspaceCall.html</anchorfile>
      <anchor>a3ee3ec77c349039a52781cf68be69837</anchor>
      <arglist>(const PubSubTakeOverSubspaceCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PubSubTakeOverSubspaceCall</name>
      <anchorfile>classPubSubTakeOverSubspaceCall.html</anchorfile>
      <anchor>acc27a44a434d38855efa2963d57930c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PubSubTakeOverSubspaceCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classPubSubTakeOverSubspaceCall.html</anchorfile>
      <anchor>abc158b122bc011227f4a5c6b4575f1ff</anchor>
      <arglist>(const PubSubTakeOverSubspaceCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PubSubTakeOverSubspaceCall *</type>
      <name>dup</name>
      <anchorfile>classPubSubTakeOverSubspaceCall.html</anchorfile>
      <anchor>adf8d55cea1a568ab8303733c56f9f2a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPubSubTakeOverSubspaceCall.html</anchorfile>
      <anchor>acae7d8ed786fd0384eeb7ad005e58309</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPubSubTakeOverSubspaceCall.html</anchorfile>
      <anchor>a29d6560c7d3cd019d879f753bf80564f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector2D &amp;</type>
      <name>getSubspacePos</name>
      <anchorfile>classPubSubTakeOverSubspaceCall.html</anchorfile>
      <anchor>afed679f34e29e2f4265a16e6e59e38ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Vector2D &amp;</type>
      <name>getSubspacePos</name>
      <anchorfile>classPubSubTakeOverSubspaceCall.html</anchorfile>
      <anchor>aa90bba8fe34ac2a1efbbeb560c18f0d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubspacePos</name>
      <anchorfile>classPubSubTakeOverSubspaceCall.html</anchorfile>
      <anchor>a16578758f67036012786e9653cf9e60a</anchor>
      <arglist>(const Vector2D &amp;subspacePos)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPubSubTakeOverSubspaceCall.html</anchorfile>
      <anchor>a6a5bfc0d89eda7272c19c91706a03d5c</anchor>
      <arglist>(const PubSubTakeOverSubspaceCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D</type>
      <name>subspacePos_var</name>
      <anchorfile>classPubSubTakeOverSubspaceCall.html</anchorfile>
      <anchor>a85d5b517501b13b78ae9a77c1b0082a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPubSubTakeOverSubspaceCall.html</anchorfile>
      <anchor>a7289d27b4c90ad30f14c6d8d932f9bab</anchor>
      <arglist>(const PubSubTakeOverSubspaceCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubTakeOverSubspaceResponse</name>
    <filename>classPubSubTakeOverSubspaceResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>PubSubTakeOverSubspaceResponse</name>
      <anchorfile>classPubSubTakeOverSubspaceResponse.html</anchorfile>
      <anchor>a7efd729f1a220acd72a5d61317c98bc1</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PubSubTakeOverSubspaceResponse</name>
      <anchorfile>classPubSubTakeOverSubspaceResponse.html</anchorfile>
      <anchor>a3d19b73531f741a220a0e4756be663f2</anchor>
      <arglist>(const PubSubTakeOverSubspaceResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PubSubTakeOverSubspaceResponse</name>
      <anchorfile>classPubSubTakeOverSubspaceResponse.html</anchorfile>
      <anchor>aa9b1acb146f3fdea5aae66658c54add7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PubSubTakeOverSubspaceResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classPubSubTakeOverSubspaceResponse.html</anchorfile>
      <anchor>aa2d2ebf445019d568d2da88a11fb9a3a</anchor>
      <arglist>(const PubSubTakeOverSubspaceResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PubSubTakeOverSubspaceResponse *</type>
      <name>dup</name>
      <anchorfile>classPubSubTakeOverSubspaceResponse.html</anchorfile>
      <anchor>a0b2826e8f72b32063952f033f435e8e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPubSubTakeOverSubspaceResponse.html</anchorfile>
      <anchor>aab1350328b715bdd0120b98d9fa8e655</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPubSubTakeOverSubspaceResponse.html</anchorfile>
      <anchor>afbad10f4ffc2d303bafa149fe174ee79</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector2D &amp;</type>
      <name>getSubspacePos</name>
      <anchorfile>classPubSubTakeOverSubspaceResponse.html</anchorfile>
      <anchor>ac0646cc53ac3507130474996ffd417e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Vector2D &amp;</type>
      <name>getSubspacePos</name>
      <anchorfile>classPubSubTakeOverSubspaceResponse.html</anchorfile>
      <anchor>ac0ff4b9a15940793e7ec466863c63e63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubspacePos</name>
      <anchorfile>classPubSubTakeOverSubspaceResponse.html</anchorfile>
      <anchor>a77c8b14b4454432282db30082b5fe5f0</anchor>
      <arglist>(const Vector2D &amp;subspacePos)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPubSubTakeOverSubspaceResponse.html</anchorfile>
      <anchor>a0f4d429e5fbc4c2931ef80dd7bcd31c3</anchor>
      <arglist>(const PubSubTakeOverSubspaceResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D</type>
      <name>subspacePos_var</name>
      <anchorfile>classPubSubTakeOverSubspaceResponse.html</anchorfile>
      <anchor>a08bce368fdab2c037dd0fdab00e88a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPubSubTakeOverSubspaceResponse.html</anchorfile>
      <anchor>a230006d812b89d901b375adb562ca5f7</anchor>
      <arglist>(const PubSubTakeOverSubspaceResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubTimer</name>
    <filename>classPubSubTimer.html</filename>
    <member kind="function">
      <type></type>
      <name>PubSubTimer</name>
      <anchorfile>classPubSubTimer.html</anchorfile>
      <anchor>a759f834c90545c19ef6ad5785713af3e</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PubSubTimer</name>
      <anchorfile>classPubSubTimer.html</anchorfile>
      <anchor>a237926cde7bb1d6721a937e81f9f0af3</anchor>
      <arglist>(const PubSubTimer &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PubSubTimer</name>
      <anchorfile>classPubSubTimer.html</anchorfile>
      <anchor>a738250b6a4a457e1da52532f224e70fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PubSubTimer &amp;</type>
      <name>operator=</name>
      <anchorfile>classPubSubTimer.html</anchorfile>
      <anchor>a32b38a91f2d69e75fd78f81d8bb27196</anchor>
      <arglist>(const PubSubTimer &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PubSubTimer *</type>
      <name>dup</name>
      <anchorfile>classPubSubTimer.html</anchorfile>
      <anchor>aa96b4692682363fddd632ef001ebaeeb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPubSubTimer.html</anchorfile>
      <anchor>ab6684fd269d25aa77f1aab5596fb8f83</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPubSubTimer.html</anchorfile>
      <anchor>ad07883193eefda90401c0c26f05ace83</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getType</name>
      <anchorfile>classPubSubTimer.html</anchorfile>
      <anchor>a4f1885dff2e7dc391d899e5b6b3cc92f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchorfile>classPubSubTimer.html</anchorfile>
      <anchor>a041b4f4cc94f506b4b94877957509834</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSubspaceId</name>
      <anchorfile>classPubSubTimer.html</anchorfile>
      <anchor>a5d7727faa7e6264688af6211880bbff8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubspaceId</name>
      <anchorfile>classPubSubTimer.html</anchorfile>
      <anchor>ac30a1d05ecd5da48e689ddb8136a89bc</anchor>
      <arglist>(int subspaceId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPubSubTimer.html</anchorfile>
      <anchor>aaa8951210b7e072cc19a1b725fd97d3f</anchor>
      <arglist>(const PubSubTimer &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>type_var</name>
      <anchorfile>classPubSubTimer.html</anchorfile>
      <anchor>ac76f57bb80347ee4a3a8058cfe01e9f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>subspaceId_var</name>
      <anchorfile>classPubSubTimer.html</anchorfile>
      <anchor>a71f10b554e10598b5a7c752e93a557e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPubSubTimer.html</anchorfile>
      <anchor>a7c6512216c3d41bf326612218ff1ea65</anchor>
      <arglist>(const PubSubTimer &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PubSubUnsubscriptionMessage</name>
    <filename>classPubSubUnsubscriptionMessage.html</filename>
    <base>BaseOverlayMessage</base>
    <member kind="function">
      <type></type>
      <name>PubSubUnsubscriptionMessage</name>
      <anchorfile>classPubSubUnsubscriptionMessage.html</anchorfile>
      <anchor>ae201f678d390bdbaafbc4fd286578365</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PubSubUnsubscriptionMessage</name>
      <anchorfile>classPubSubUnsubscriptionMessage.html</anchorfile>
      <anchor>a0db543e6a3069b53d6467ce659ab5906</anchor>
      <arglist>(const PubSubUnsubscriptionMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PubSubUnsubscriptionMessage</name>
      <anchorfile>classPubSubUnsubscriptionMessage.html</anchorfile>
      <anchor>a171b332fef03deda286fe371758eaf1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PubSubUnsubscriptionMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classPubSubUnsubscriptionMessage.html</anchorfile>
      <anchor>a03ef8b12521444a7df89d34c66960ae3</anchor>
      <arglist>(const PubSubUnsubscriptionMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PubSubUnsubscriptionMessage *</type>
      <name>dup</name>
      <anchorfile>classPubSubUnsubscriptionMessage.html</anchorfile>
      <anchor>a8313a7a28aa3cdfdb1623ca2eb307fd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classPubSubUnsubscriptionMessage.html</anchorfile>
      <anchor>abf4f8b55008f0a76f77ec1ce9891c7f0</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classPubSubUnsubscriptionMessage.html</anchorfile>
      <anchor>a2cf1bf1401cb275fdd5d550ec5d1fbcf</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSubspaceId</name>
      <anchorfile>classPubSubUnsubscriptionMessage.html</anchorfile>
      <anchor>aefd5581bbccb1322572d4623a9b7098c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubspaceId</name>
      <anchorfile>classPubSubUnsubscriptionMessage.html</anchorfile>
      <anchor>a2f04866a86a8d5df84d88bd17a06516e</anchor>
      <arglist>(int subspaceId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getSrc</name>
      <anchorfile>classPubSubUnsubscriptionMessage.html</anchorfile>
      <anchor>a4c20f9918ebc12a6567fb6600abbca19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getSrc</name>
      <anchorfile>classPubSubUnsubscriptionMessage.html</anchorfile>
      <anchor>a2b0cd77d815fa2913fedddd26084ad79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrc</name>
      <anchorfile>classPubSubUnsubscriptionMessage.html</anchorfile>
      <anchor>acd1f9c51a3483ee3b8e5fcfdc4e0ebb5</anchor>
      <arglist>(const NodeHandle &amp;src)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classPubSubUnsubscriptionMessage.html</anchorfile>
      <anchor>aa65f84d148becf9333eabd8c4d441dc5</anchor>
      <arglist>(const PubSubUnsubscriptionMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>subspaceId_var</name>
      <anchorfile>classPubSubUnsubscriptionMessage.html</anchorfile>
      <anchor>a500caf1bb5ace9e27f9f3fc9188232f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>src_var</name>
      <anchorfile>classPubSubUnsubscriptionMessage.html</anchorfile>
      <anchor>af6d2300b3c4d06f6b97db2aa2b5db72a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classPubSubUnsubscriptionMessage.html</anchorfile>
      <anchor>a44a38491de37ee6994c08e883980b783</anchor>
      <arglist>(const PubSubUnsubscriptionMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Put</name>
    <filename>classPut.html</filename>
    <base>XmlRpc::XmlRpcServerMethod</base>
    <member kind="function">
      <type></type>
      <name>Put</name>
      <anchorfile>classPut.html</anchorfile>
      <anchor>ae8d6e73d0dc75ead678b996d16eca376</anchor>
      <arglist>(XmlRpcServer *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>execute</name>
      <anchorfile>classPut.html</anchorfile>
      <anchor>a8b4a8ac2286e4ab51427675041038e66</anchor>
      <arglist>(XmlRpcValue &amp;params, XmlRpcValue &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>help</name>
      <anchorfile>classPut.html</anchorfile>
      <anchor>a51bf5ad830b2070d847ca4ff8101ed94</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Quon</name>
    <filename>classQuon.html</filename>
    <base>BaseOverlay</base>
    <member kind="function">
      <type></type>
      <name>~Quon</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>ac9209e027a6b6722ce4480ecaa9974b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeOverlay</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>ae17dfb6ef0492454b6b1b4e455e0f403</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finishOverlay</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a2e3fd357706467ba1238bdd8382f5be8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleUDPMessage</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a298fcf2d2e493783099f6d0b07cf04d1</anchor>
      <arglist>(BaseOverlayMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a77a76cd536634a9d90b208cb3f662bd4</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleAppMessage</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>ae1e1b8da4dc8347f67905eff7b01b458</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleNodeGracefulLeaveNotification</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a54937c5eea5f1a673ddce36e3f34c9ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>QState</type>
      <name>getState</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a68e3080e90a657d328c4234f3d75fac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAOI</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a6140fcfc5f22d7a1b0a214e8d2035eeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector2D</type>
      <name>getPosition</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a2ee6ae30cf512cc9ebb2d76b603ffe61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAreaDimension</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>af3c814c9a87a9557e8190fdbd92c7aa9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OverlayKey</type>
      <name>getKey</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a68a2c09dba9d923a88c972acc8710956</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getSoftNeighborCount</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a08f13af619a1b819315742449471e677</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>QuonSiteMap</type>
      <name>Sites</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a2538460ed4a813703ab98d2b3901c5d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>sendToApp</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>adfd1a6c88f3487ae4b57aadd4f0ac9e1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>sendMessage</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a804dcb69b3560421c1c9ae17a5ada43e</anchor>
      <arglist>(QuonMessage *quonMsg, NodeHandle destination)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setBootstrapedIcon</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a21e2a16a7d0c8eb408c6f936fecf9df4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>changeState</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>aeaf445313feedba17bc0a724e86e7a22</anchor>
      <arglist>(QState qstate)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>processJoinTimer</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>ac29ea34a956954a1fa1386eaf8cb02be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>processSecTimer</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a5d098a9b74d485d8e68f7a8d5325ddd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>processDeleteTimer</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a430d10cb5e1b77a630ed4657e34f1695</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>processAliveTimer</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a86dbfd8cb030da488a06f4322a0d9f54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>processBackupTimer</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>af1ff297b237f314e3dd96f8999e0ccb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleJoin</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>ae55f17acbfe8963c1016aa4b8b52e43f</anchor>
      <arglist>(GameAPIPositionMessage *gameMsg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleMove</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>ac605f9c70749dc1ff7a4c45450ccfc60</anchor>
      <arglist>(GameAPIPositionMessage *gameMsg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleEvent</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>ac923ab87b84f63ac532cb148a90d3c30</anchor>
      <arglist>(GameAPIMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleJoinRequest</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>ad08218dae9b27080131790ebaf6f4b54</anchor>
      <arglist>(QuonMessage *quonMsg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleJoinAcknowledge</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a3e899c593816aa1d9b0b37bc710c87f2</anchor>
      <arglist>(QuonListMessage *quonListMsg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleNodeMove</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>adee71dee47991a9f5fffafc9b75b037a</anchor>
      <arglist>(QuonMoveMessage *quonMoveMsg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleNewNeighbors</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a74d83ab66d75e28a11a0356510a6eccb</anchor>
      <arglist>(QuonListMessage *quonListMsg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleNodeLeave</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>ae4a338b42bb5ff3afdb34c2c8548c1a7</anchor>
      <arglist>(QuonListMessage *quonListMsg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleInvalidNode</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>aacf333436374e811e7b2d74b5e9f7e9f</anchor>
      <arglist>(QuonListMessage *quonListMsg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>synchronizeAppNeighbors</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a4d364e805fecf9a14eb60b1280bc7a17</anchor>
      <arglist>(QPurgeType purgeSoftSites=QKEEPSOFT)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deleteAppNeighbor</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a1e7c49275495ea83e41988fe3748788c</anchor>
      <arglist>(NodeHandle node)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>addSite</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a75404768e34b6b3bab8fd3ff5e211322</anchor>
      <arglist>(Vector2D p, NodeHandle node, double AOI, bool isSoft=false, QUpdateType update=QFOREIGN)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateThisSite</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>aff5a4bfcea27a7ebfa42f38c3497a744</anchor>
      <arglist>(Vector2D p)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>classifySites</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a12ba4a2250699c84c776014c9b856b9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>deleteSite</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>acd349191dbc70d9e4e6801e16a6d3724</anchor>
      <arglist>(NodeHandle node)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>purgeSites</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a3e94920f59c3f66959cfca7118f5706a</anchor>
      <arglist>(QPurgeType purgeSoftSites=QKEEPSOFT)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>adaptAoI</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a2c4fc441250953f22bba4e4398901154</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>joinTimeout</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a8f89d751256d37ac702a2820130755ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>deleteTimeout</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a29afd14267371b2fdccb31e8d5bcebee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>aliveTimeout</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a6657a1bdcf332a5a383a5e380cbc16c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>AOIWidth</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>aa08a19de1f063d2e75effc3cde6eeee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>minAOI</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a5321c54300684011b310874cb504cc3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>maxAOI</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a4031fe13e201230e6822a0b6d312b9c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>connectionLimit</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>aed45985bf8ae12aa4a05e3c74f0a03ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>areaDimension</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>ac0c61c44ee942bcb8f71ffa069a681fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>backupIntervall</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a45b886170e957fd9326a4c34abe4839b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useDynamicAOI</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a82f95ed825de6241bcf407bcb6732686</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useSquareMetric</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>ad1c9991e5c1094281e552c88ea4f0612</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>linearAdaption</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a369f0916dfd5f306a4a31a9bac648be6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>adaptionSensitivity</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>ae44950a7619cd0e9bcb65071f9871302</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>gossipSensitivity</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>acfff4768dab96f6a068f05385c806da9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>nnOnlyBinding</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>aa9793f8df0a8a1e1e448f2ff28233457</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>join_timer</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a50bdccb83a076a567533790cef1a7c84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>sec_timer</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a90247744dc8738653a4830170ac600e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>alive_timer</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a77a68e7de92d342999c42495e23691c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>backup_timer</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a41c411546eafb1dd79c0640a3937090e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>joinRequestBytesSend</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>acd2d26c06a998552d4d57d7d54a9203c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>joinAcknowledgeBytesSend</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a877edb5c60f4374580611db5e87f9b03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>nodeMoveBytesSend</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>ac662039da04c611b551ca0b5b0989242</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>newNeighborsBytesSend</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a60b6442582b349621a5b916b5f63bfdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>nodeLeaveBytesSend</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>ac2d00865bf9e11a6f768434266fc6634</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>maxBytesPerSecondSend</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a479502f99f21bf405210eb0c7c00a9b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>averageBytesPerSecondSend</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>ab43ea338aa35a082c379716a3fcd02c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>bytesPerSecond</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>ac371d756bd985b8a8dd4227f48c2e9fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long</type>
      <name>softConnections</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>ad842d00209159d0d47c0abe7aec573c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long</type>
      <name>softNeighborCount</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a5450bc23ca2b380316b38903536cad1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long</type>
      <name>bindingNeighborCount</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>ac8e1a28cfc559f56cfa51ee757a5b44d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long</type>
      <name>directNeighborCount</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a98466c67a6d900869219e4c8acf1dd7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>secTimerCount</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>acdba7ca61befddc0377f74b502f24a1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long</type>
      <name>rejoinCount</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>acbe0e10f8dc812606f89e799b21f0c5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned long</type>
      <name>avgAOI</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a2412db36457ab9bae180b8dd1c3cec47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>joinTime</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a288de6387349541943a75fe3d4894491</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QuonSite *</type>
      <name>thisSite</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a5a21971a54b787e60309efd58b93636b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QDeleteMap</type>
      <name>deletedSites</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a8101efc814ad37db2f2c15c8863634ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeHandle(*</type>
      <name>bindingBackup</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a560b63c7e1d4ad9c34bc4ac9f70311e9</anchor>
      <arglist>)[4]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numBackups</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>ac8eb2eb8fff5eb75bdd6448882d046b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QState</type>
      <name>qstate</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a50b8cb447b1d179dd9977161ca5724fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>aloneInOverlay</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a58914d072978b36b252a96a7df1fadae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LoginCache *</type>
      <name>loginCache</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>a7affc6a652f7df6a00a9fa9616989cba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>cacheInterval</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>aa29f3d95a21cf376d2116afd879bcd51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>timeSinceCache</name>
      <anchorfile>classQuon.html</anchorfile>
      <anchor>af3a8c48d58d3ae799f8e84491cc590d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QuonAOI</name>
    <filename>classQuonAOI.html</filename>
    <member kind="function">
      <type></type>
      <name>QuonAOI</name>
      <anchorfile>classQuonAOI.html</anchorfile>
      <anchor>ab454f3cd4e30beea2a0cf9a1abb01715</anchor>
      <arglist>(bool useSquareMetric=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuonAOI</name>
      <anchorfile>classQuonAOI.html</anchorfile>
      <anchor>ae60988c7bf1b3ca17adaf4d9a3025c6e</anchor>
      <arglist>(Vector2D center, double radius, bool useSquareMetric=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classQuonAOI.html</anchorfile>
      <anchor>ac1e91ec1054b310b51cfd20d31491ff6</anchor>
      <arglist>(double radius)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>collide</name>
      <anchorfile>classQuonAOI.html</anchorfile>
      <anchor>aa99c43ea8785e696457221fcfc6a88db</anchor>
      <arglist>(const Vector2D p) const </arglist>
    </member>
    <member kind="variable">
      <type>Vector2D</type>
      <name>center</name>
      <anchorfile>classQuonAOI.html</anchorfile>
      <anchor>a76c13c77dedbc007b488e775bbc46d10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>radius</name>
      <anchorfile>classQuonAOI.html</anchorfile>
      <anchor>a176f7980ebe5d63cedcea3ccba7b1645</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>useSquareMetric</name>
      <anchorfile>classQuonAOI.html</anchorfile>
      <anchor>a9ebd70d474dfd584c8962e97c3658877</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classQuonAOI.html</anchorfile>
      <anchor>a3d0abf90dbe1707ae124df89d6ddfc5b</anchor>
      <arglist>(std::ostream &amp;Stream, const QuonAOI &amp;aoi)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QuonEventMessage</name>
    <filename>classQuonEventMessage.html</filename>
    <base>QuonMessage</base>
    <member kind="function">
      <type></type>
      <name>QuonEventMessage</name>
      <anchorfile>classQuonEventMessage.html</anchorfile>
      <anchor>af81db31296d6ebc540ee23743a48c613</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuonEventMessage</name>
      <anchorfile>classQuonEventMessage.html</anchorfile>
      <anchor>a60c2794c519418f3e0ae9a46f56684a9</anchor>
      <arglist>(const QuonEventMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~QuonEventMessage</name>
      <anchorfile>classQuonEventMessage.html</anchorfile>
      <anchor>a75e83c868f9ec20c8995b6adbd7e9051</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>QuonEventMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classQuonEventMessage.html</anchorfile>
      <anchor>a70ef3880c289867c8b3cd6246efd9098</anchor>
      <arglist>(const QuonEventMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual QuonEventMessage *</type>
      <name>dup</name>
      <anchorfile>classQuonEventMessage.html</anchorfile>
      <anchor>ad1c77f018f083e42c992f9dc6f5958b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classQuonEventMessage.html</anchorfile>
      <anchor>afa0337ab6d081448b188219f588e7cf0</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classQuonEventMessage.html</anchorfile>
      <anchor>a070a5def5228729a4fa4365a4896ffa1</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classQuonEventMessage.html</anchorfile>
      <anchor>afcdc1c5863132d8c6aacff0d1818a745</anchor>
      <arglist>(const QuonEventMessage &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classQuonEventMessage.html</anchorfile>
      <anchor>a22be467c41f7484a932c52b2af025444</anchor>
      <arglist>(const QuonEventMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QuonListMessage</name>
    <filename>classQuonListMessage.html</filename>
    <base>QuonMessage</base>
    <member kind="function">
      <type></type>
      <name>QuonListMessage</name>
      <anchorfile>classQuonListMessage.html</anchorfile>
      <anchor>ac7e362fb68571fb8cbaaed03df1e9627</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuonListMessage</name>
      <anchorfile>classQuonListMessage.html</anchorfile>
      <anchor>a4fc0c624f3ae81e67f747cd039ed3a5a</anchor>
      <arglist>(const QuonListMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~QuonListMessage</name>
      <anchorfile>classQuonListMessage.html</anchorfile>
      <anchor>a71157e2a049a3a47570d4256eb60b32a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>QuonListMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classQuonListMessage.html</anchorfile>
      <anchor>a9127c48c70be981e2c234072e027b9f9</anchor>
      <arglist>(const QuonListMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual QuonListMessage *</type>
      <name>dup</name>
      <anchorfile>classQuonListMessage.html</anchorfile>
      <anchor>a53874100fc28115b6a2e597a74e8c357</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classQuonListMessage.html</anchorfile>
      <anchor>a69c5a029dc8fc0f293ad6418e537ab1e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classQuonListMessage.html</anchorfile>
      <anchor>a3ded24d2a2fb470bcd2e8052592ef3f9</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNeighborHandleArraySize</name>
      <anchorfile>classQuonListMessage.html</anchorfile>
      <anchor>ac15bd0c23408399a6416c0fb97a98424</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNeighborHandleArraySize</name>
      <anchorfile>classQuonListMessage.html</anchorfile>
      <anchor>aede022556c3ccd0fe1b36691ac25a3c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getNeighborHandle</name>
      <anchorfile>classQuonListMessage.html</anchorfile>
      <anchor>abc67afb0f579372dc26e5c1b482f188f</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getNeighborHandle</name>
      <anchorfile>classQuonListMessage.html</anchorfile>
      <anchor>a32ab57661c71d911a7fd4993f830d1d0</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNeighborHandle</name>
      <anchorfile>classQuonListMessage.html</anchorfile>
      <anchor>af1e642a74712a5b4c90c396ea8fcc752</anchor>
      <arglist>(unsigned int k, const NodeHandle &amp;neighborHandle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNeighborPositionArraySize</name>
      <anchorfile>classQuonListMessage.html</anchorfile>
      <anchor>ae7545f2d6ee308d89c783d1d799495fd</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNeighborPositionArraySize</name>
      <anchorfile>classQuonListMessage.html</anchorfile>
      <anchor>ad02bc56f30f20c1e693298d1ef9085dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector2D &amp;</type>
      <name>getNeighborPosition</name>
      <anchorfile>classQuonListMessage.html</anchorfile>
      <anchor>aaaf7776b06eeff20e3fc768ca5d77e53</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Vector2D &amp;</type>
      <name>getNeighborPosition</name>
      <anchorfile>classQuonListMessage.html</anchorfile>
      <anchor>a3e9b99cb05877d2342e14fb9e882aac0</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNeighborPosition</name>
      <anchorfile>classQuonListMessage.html</anchorfile>
      <anchor>a078d985df098bdf63b1e9052655da1ec</anchor>
      <arglist>(unsigned int k, const Vector2D &amp;neighborPosition)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classQuonListMessage.html</anchorfile>
      <anchor>ae17e987724eddb859b718e5f49fabde7</anchor>
      <arglist>(const QuonListMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle *</type>
      <name>neighborHandle_var</name>
      <anchorfile>classQuonListMessage.html</anchorfile>
      <anchor>a72402a2e806a9fdbcc3b76a535264a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>neighborHandle_arraysize</name>
      <anchorfile>classQuonListMessage.html</anchorfile>
      <anchor>a6f20693ef1cf950121e6442309d9122d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D *</type>
      <name>neighborPosition_var</name>
      <anchorfile>classQuonListMessage.html</anchorfile>
      <anchor>a97ca5a47cb946edb73b766f21c9cbc99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>neighborPosition_arraysize</name>
      <anchorfile>classQuonListMessage.html</anchorfile>
      <anchor>a86669d30f867c446e4c74fce284350cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classQuonListMessage.html</anchorfile>
      <anchor>a3cc9f5d50d0d6ad4b5c9f118feebd7fe</anchor>
      <arglist>(const QuonListMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QuonMessage</name>
    <filename>classQuonMessage.html</filename>
    <base>BaseOverlayMessage</base>
    <member kind="function">
      <type></type>
      <name>QuonMessage</name>
      <anchorfile>classQuonMessage.html</anchorfile>
      <anchor>a54b24589ebc14b0ffd5c84322fed0e16</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuonMessage</name>
      <anchorfile>classQuonMessage.html</anchorfile>
      <anchor>a50a3274a42b8a1f8636b8d0b89f1276b</anchor>
      <arglist>(const QuonMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~QuonMessage</name>
      <anchorfile>classQuonMessage.html</anchorfile>
      <anchor>af5e66749ebd8960dd2159ba60b22b611</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>QuonMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classQuonMessage.html</anchorfile>
      <anchor>a564fa36b06b49849981e2da0213cb761</anchor>
      <arglist>(const QuonMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual QuonMessage *</type>
      <name>dup</name>
      <anchorfile>classQuonMessage.html</anchorfile>
      <anchor>a654990691ab3557f8fa0cf486800a2f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classQuonMessage.html</anchorfile>
      <anchor>a08cac9592f25e6346abdc11634b7c5c5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classQuonMessage.html</anchorfile>
      <anchor>ad07227af0a0bfaac270890b23726854d</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCommand</name>
      <anchorfile>classQuonMessage.html</anchorfile>
      <anchor>a006f8426093f22f07de8b82d8cf0c5be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommand</name>
      <anchorfile>classQuonMessage.html</anchorfile>
      <anchor>a48ad691d0d0ef3db5fd0501acf41d88a</anchor>
      <arglist>(int command)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getSender</name>
      <anchorfile>classQuonMessage.html</anchorfile>
      <anchor>ab4d2d2ad254bb5816219b93df827aece</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getSender</name>
      <anchorfile>classQuonMessage.html</anchorfile>
      <anchor>a657504f2548cbcd32cf7ce0b1c86d585</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSender</name>
      <anchorfile>classQuonMessage.html</anchorfile>
      <anchor>a3df1b81ad46ea65434b21048d21e3771</anchor>
      <arglist>(const NodeHandle &amp;sender)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector2D &amp;</type>
      <name>getPosition</name>
      <anchorfile>classQuonMessage.html</anchorfile>
      <anchor>af41132dfec6ec4055a13e9bcb7293cdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Vector2D &amp;</type>
      <name>getPosition</name>
      <anchorfile>classQuonMessage.html</anchorfile>
      <anchor>a7bbfda993fed6dd3c9ae19e4dc7a5160</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPosition</name>
      <anchorfile>classQuonMessage.html</anchorfile>
      <anchor>ad6a95f356caac3db9b0c21d29e806a32</anchor>
      <arglist>(const Vector2D &amp;position)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getAOIsize</name>
      <anchorfile>classQuonMessage.html</anchorfile>
      <anchor>a721236d0ec1f7d87635dc9009b566599</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAOIsize</name>
      <anchorfile>classQuonMessage.html</anchorfile>
      <anchor>a9443f09c9d10e2d19ef33be37f84845a</anchor>
      <arglist>(double AOIsize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classQuonMessage.html</anchorfile>
      <anchor>a49ad90ec4314c51530ddfeecaa08f57c</anchor>
      <arglist>(const QuonMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>command_var</name>
      <anchorfile>classQuonMessage.html</anchorfile>
      <anchor>a92e04d77f734bdb8982ae45f8876fed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>sender_var</name>
      <anchorfile>classQuonMessage.html</anchorfile>
      <anchor>a0615b34912d6ea637f12a5b37b961bde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D</type>
      <name>position_var</name>
      <anchorfile>classQuonMessage.html</anchorfile>
      <anchor>a6aefbf110866f2b91d05fc825409c195</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>AOIsize_var</name>
      <anchorfile>classQuonMessage.html</anchorfile>
      <anchor>a6713c98cc289473d7cc3c62ed7039992</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classQuonMessage.html</anchorfile>
      <anchor>a1c057b0147b564385d5f1e90239a418f</anchor>
      <arglist>(const QuonMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QuonMoveMessage</name>
    <filename>classQuonMoveMessage.html</filename>
    <base>QuonListMessage</base>
    <member kind="function">
      <type></type>
      <name>QuonMoveMessage</name>
      <anchorfile>classQuonMoveMessage.html</anchorfile>
      <anchor>a35efbe35179875b697543f88af638b78</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuonMoveMessage</name>
      <anchorfile>classQuonMoveMessage.html</anchorfile>
      <anchor>a10484fcd2328e409188b901ff6dfc916</anchor>
      <arglist>(const QuonMoveMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~QuonMoveMessage</name>
      <anchorfile>classQuonMoveMessage.html</anchorfile>
      <anchor>ae351e6e44e6c16ad1294392375bbcb49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>QuonMoveMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classQuonMoveMessage.html</anchorfile>
      <anchor>a13133a0a26b70626db258a212549ada6</anchor>
      <arglist>(const QuonMoveMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual QuonMoveMessage *</type>
      <name>dup</name>
      <anchorfile>classQuonMoveMessage.html</anchorfile>
      <anchor>a9fb5b2107de1fd0bfd5f481e3b54ff49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classQuonMoveMessage.html</anchorfile>
      <anchor>a883465ef2004186b009dc97a890519f3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classQuonMoveMessage.html</anchorfile>
      <anchor>a1066b0148cefb62857fded4572b4f17a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector2D &amp;</type>
      <name>getNewPosition</name>
      <anchorfile>classQuonMoveMessage.html</anchorfile>
      <anchor>af2e7107f8b4dc5cfb757358acd206279</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Vector2D &amp;</type>
      <name>getNewPosition</name>
      <anchorfile>classQuonMoveMessage.html</anchorfile>
      <anchor>a266e670ed6cfd6d8c5f877e1a5150bf0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNewPosition</name>
      <anchorfile>classQuonMoveMessage.html</anchorfile>
      <anchor>a68ac99a9b315c94afe4c6ef5d4746a89</anchor>
      <arglist>(const Vector2D &amp;newPosition)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getIsBinding</name>
      <anchorfile>classQuonMoveMessage.html</anchorfile>
      <anchor>a044fc1a90a3ca7a9575fb9ef8b03bfec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsBinding</name>
      <anchorfile>classQuonMoveMessage.html</anchorfile>
      <anchor>aee87a709a701208e4855c94829326d17</anchor>
      <arglist>(bool isBinding)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classQuonMoveMessage.html</anchorfile>
      <anchor>a91f3625e8c2c06379825986ce1dd37e6</anchor>
      <arglist>(const QuonMoveMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D</type>
      <name>newPosition_var</name>
      <anchorfile>classQuonMoveMessage.html</anchorfile>
      <anchor>a81b13a74ca184a8b46202e4fb1a83df9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isBinding_var</name>
      <anchorfile>classQuonMoveMessage.html</anchorfile>
      <anchor>ae05daa60f56f56999e5c2c17460b1bde</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classQuonMoveMessage.html</anchorfile>
      <anchor>a9707fd3f07ddd73132ea609b9710ef97</anchor>
      <arglist>(const QuonMoveMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QuonSelfMessage</name>
    <filename>classQuonSelfMessage.html</filename>
    <member kind="function">
      <type></type>
      <name>QuonSelfMessage</name>
      <anchorfile>classQuonSelfMessage.html</anchorfile>
      <anchor>a1adaf26e3948b79f1456dc49cbeb7329</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuonSelfMessage</name>
      <anchorfile>classQuonSelfMessage.html</anchorfile>
      <anchor>a5c3331fadfa1f91286517cab221ba18d</anchor>
      <arglist>(const QuonSelfMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~QuonSelfMessage</name>
      <anchorfile>classQuonSelfMessage.html</anchorfile>
      <anchor>aafaad62f707a4426991fd62e70ad9e66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>QuonSelfMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classQuonSelfMessage.html</anchorfile>
      <anchor>adae5a5f0e524754a7269c14a595fcae5</anchor>
      <arglist>(const QuonSelfMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual QuonSelfMessage *</type>
      <name>dup</name>
      <anchorfile>classQuonSelfMessage.html</anchorfile>
      <anchor>ad9a8a4bbdf280981469c987526cbb3a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classQuonSelfMessage.html</anchorfile>
      <anchor>a6cb5380c24da7cc3eb171558c73beb5e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classQuonSelfMessage.html</anchorfile>
      <anchor>aff3aa65a818cc7a6d009ba08c73275d5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getKey</name>
      <anchorfile>classQuonSelfMessage.html</anchorfile>
      <anchor>ab4e908561238298802392ac070bb71b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getKey</name>
      <anchorfile>classQuonSelfMessage.html</anchorfile>
      <anchor>a660a46eee64ca714cdaac6fc673fe23e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKey</name>
      <anchorfile>classQuonSelfMessage.html</anchorfile>
      <anchor>afdc2037f43329f285eac3742a55ef235</anchor>
      <arglist>(const OverlayKey &amp;key)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classQuonSelfMessage.html</anchorfile>
      <anchor>abf4fc9687faa073589202b4228104e95</anchor>
      <arglist>(const QuonSelfMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>key_var</name>
      <anchorfile>classQuonSelfMessage.html</anchorfile>
      <anchor>a14ba79ed3d395231738e710140c116a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classQuonSelfMessage.html</anchorfile>
      <anchor>aa09d2180eff59c60fd83d97808ccb70a</anchor>
      <arglist>(const QuonSelfMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QuonSite</name>
    <filename>classQuonSite.html</filename>
    <member kind="function">
      <type></type>
      <name>QuonSite</name>
      <anchorfile>classQuonSite.html</anchorfile>
      <anchor>a01f24f26195753eef998c5c45fa182dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Vector2D</type>
      <name>position</name>
      <anchorfile>classQuonSite.html</anchorfile>
      <anchor>ab53cc9364d2f89e2c792f77383866c6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>QNeighborType</type>
      <name>type</name>
      <anchorfile>classQuonSite.html</anchorfile>
      <anchor>afa6fe24c5adadabe18529bb5736d321b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NodeHandle</type>
      <name>address</name>
      <anchorfile>classQuonSite.html</anchorfile>
      <anchor>aa317c162070862f2278a9d532d6d2215</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>AOIwidth</name>
      <anchorfile>classQuonSite.html</anchorfile>
      <anchor>a0ae6ea9f18f72f1f493828186fecdee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>dirty</name>
      <anchorfile>classQuonSite.html</anchorfile>
      <anchor>a5ec803b5181547c3e859fc2200e10f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>alive</name>
      <anchorfile>classQuonSite.html</anchorfile>
      <anchor>a8b29306a2543f303a7551d621cec34b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>softNeighbor</name>
      <anchorfile>classQuonSite.html</anchorfile>
      <anchor>a30d03e7411aaec2499d2319934899772</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classQuonSite.html</anchorfile>
      <anchor>a19c6fafdeac29b478e7f95126fa2e985</anchor>
      <arglist>(std::ostream &amp;Stream, const QuonSite &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QuonTopologyNode</name>
    <filename>classQuonTopologyNode.html</filename>
    <member kind="function">
      <type></type>
      <name>QuonTopologyNode</name>
      <anchorfile>classQuonTopologyNode.html</anchorfile>
      <anchor>abbc75bdb62f99efa3d5517f5d8ee3f2e</anchor>
      <arglist>(int moduleID)</arglist>
    </member>
    <member kind="function">
      <type>Quon *</type>
      <name>getModule</name>
      <anchorfile>classQuonTopologyNode.html</anchorfile>
      <anchor>a0fededddd216a0e198f8dc2019782624</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>visited</name>
      <anchorfile>classQuonTopologyNode.html</anchorfile>
      <anchor>ad4911ac77eb4a93373d8cdb85c0efc54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>moduleID</name>
      <anchorfile>classQuonTopologyNode.html</anchorfile>
      <anchor>a0bec66f8e17cb676020cc3186f00043a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RandomChurn</name>
    <filename>classRandomChurn.html</filename>
    <base>ChurnGenerator</base>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classRandomChurn.html</anchorfile>
      <anchor>a3c6e48004d3123177917eae84d48049e</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeChurn</name>
      <anchorfile>classRandomChurn.html</anchorfile>
      <anchor>ad3c3adb5a8fbe8406b261124908bb8be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RandomChurn</name>
      <anchorfile>classRandomChurn.html</anchorfile>
      <anchor>af17de7d1c243c2b6873fc1921a44aa6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateDisplayString</name>
      <anchorfile>classRandomChurn.html</anchorfile>
      <anchor>adc42c8b99f67bdc0dd8d5b2d54a078d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>creationProbability</name>
      <anchorfile>classRandomChurn.html</anchorfile>
      <anchor>a65c283a025d7508b78c261b7bf264482</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>migrationProbability</name>
      <anchorfile>classRandomChurn.html</anchorfile>
      <anchor>a2667db5a0881b940d286e0a908d07c16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>removalProbability</name>
      <anchorfile>classRandomChurn.html</anchorfile>
      <anchor>aa8e8373f50ca9cd25435c0891aa7a593</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>initialMean</name>
      <anchorfile>classRandomChurn.html</anchorfile>
      <anchor>ad8288108c4a77b829c5876839a5513e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>initialDeviation</name>
      <anchorfile>classRandomChurn.html</anchorfile>
      <anchor>a2871ebbd7286cb2e85f5d22a86d5a241</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>targetMean</name>
      <anchorfile>classRandomChurn.html</anchorfile>
      <anchor>abc5ccfb3e0b1077ed6226da8231f476f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>targetOverlayTerminalNum</name>
      <anchorfile>classRandomChurn.html</anchorfile>
      <anchor>a91fc2902c79758f7474a52907c016f4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>churnTimer</name>
      <anchorfile>classRandomChurn.html</anchorfile>
      <anchor>abd27e416f0da4438538d55707d5e24ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>mobilityTimer</name>
      <anchorfile>classRandomChurn.html</anchorfile>
      <anchor>a8c94c285c49b230f3d366001d7312c77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>churnIntervalChanged</name>
      <anchorfile>classRandomChurn.html</anchorfile>
      <anchor>a6234a1d9e612093c67ddfff2cf28c947</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>churnChangeInterval</name>
      <anchorfile>classRandomChurn.html</anchorfile>
      <anchor>a8bb2e8596342fc4208342a50d10db614</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>initAddMoreTerminals</name>
      <anchorfile>classRandomChurn.html</anchorfile>
      <anchor>aa4688d3f0b3e24023c86459ac506476e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GlobalStatistics *</type>
      <name>globalStatistics</name>
      <anchorfile>classRandomChurn.html</anchorfile>
      <anchor>a896e430499bef17480370b1f09b6c73b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>randomRoaming</name>
    <filename>classrandomRoaming.html</filename>
    <base>MovementGenerator</base>
    <member kind="function">
      <type></type>
      <name>randomRoaming</name>
      <anchorfile>classrandomRoaming.html</anchorfile>
      <anchor>a42467a9f5a01e5a379bd3ad75ac19be0</anchor>
      <arglist>(double areaDimension, double speed, NeighborMap *Neighbors, GlobalCoordinator *coordinator, CollisionList *CollisionRect)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~randomRoaming</name>
      <anchorfile>classrandomRoaming.html</anchorfile>
      <anchor>ac76811a8a0d3a796fdd2e0bc7b271cdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>classrandomRoaming.html</anchorfile>
      <anchor>a3d79603e9dac8f598c0b7b66a8e93c94</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RankingParameters</name>
    <filename>structRankingParameters.html</filename>
    <member kind="variable">
      <type>long long</type>
      <name>rtt</name>
      <anchorfile>structRankingParameters.html</anchorfile>
      <anchor>a09b054a971ff2d949ee545e058f4c2ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>capacity</name>
      <anchorfile>structRankingParameters.html</anchorfile>
      <anchor>a942076c86f38f9d515020424c6d4ac80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>rescueCapacity</name>
      <anchorfile>structRankingParameters.html</anchorfile>
      <anchor>a1eb9cba8a2e21db0b179cc110a933dbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>bandwidth</name>
      <anchorfile>structRankingParameters.html</anchorfile>
      <anchor>ac7a55b2e9660fb396ddc07e04903bbe0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RealtimeScheduler</name>
    <filename>classRealtimeScheduler.html</filename>
    <class kind="class">RealtimeScheduler::SocketContext</class>
    <member kind="function">
      <type></type>
      <name>RealtimeScheduler</name>
      <anchorfile>classRealtimeScheduler.html</anchorfile>
      <anchor>a032d95f76e08a2215bb4a35d446df064</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RealtimeScheduler</name>
      <anchorfile>classRealtimeScheduler.html</anchorfile>
      <anchor>aebac72bc5e04afe5bf3768c9075b6699</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classRealtimeScheduler.html</anchorfile>
      <anchor>ad17465d8885c0b5f8b00375e3adeb680</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classRealtimeScheduler.html</anchorfile>
      <anchor>aea9607e881dcf820eb841d0438b4654d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>executionResumed</name>
      <anchorfile>classRealtimeScheduler.html</anchorfile>
      <anchor>afa5c09e863f251b1280eeec36ef9a6db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInterfaceModule</name>
      <anchorfile>classRealtimeScheduler.html</anchorfile>
      <anchor>a8a23b63956df2045a4b86c9e5cbc2dd0</anchor>
      <arglist>(cModule *module, cMessage *notificationMsg, PacketBuffer *buffer, int mtu, bool isApp=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerSocket</name>
      <anchorfile>classRealtimeScheduler.html</anchorfile>
      <anchor>a10a8f603d5baff5cd5b5b6d4bbdc8250</anchor>
      <arglist>(SOCKET fd, cModule *mod, cMessage *notifMsg, PacketBuffer *buffer, int mtu)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>getNextEvent</name>
      <anchorfile>classRealtimeScheduler.html</anchorfile>
      <anchor>a5185bc3129ea4ab72c06382cf4c6c40c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendNotificationMsg</name>
      <anchorfile>classRealtimeScheduler.html</anchorfile>
      <anchor>a93b772a5520c804c7a208de45e1a1e16</anchor>
      <arglist>(cMessage *msg, cModule *mod)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ssize_t</type>
      <name>sendBytes</name>
      <anchorfile>classRealtimeScheduler.html</anchorfile>
      <anchor>adb359f57379d33cfa8300cdd5beb2487</anchor>
      <arglist>(const char *buf, size_t numBytes, sockaddr *addr=0, socklen_t addrlen=0, bool isApp=false, SOCKET fd=INVALID_SOCKET)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeAppSocket</name>
      <anchorfile>classRealtimeScheduler.html</anchorfile>
      <anchor>abcd19c1a27de8c11660f61de68e6a8f5</anchor>
      <arglist>(SOCKET fd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SOCKET</type>
      <name>getAppTunFd</name>
      <anchorfile>classRealtimeScheduler.html</anchorfile>
      <anchor>a36df2061f71395a6236e3ad4d2d67d5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>initializeNetwork</name>
      <anchorfile>classRealtimeScheduler.html</anchorfile>
      <anchor>aeebd34c4cfa2c9b1b1d1224117b7be3b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>additionalFD</name>
      <anchorfile>classRealtimeScheduler.html</anchorfile>
      <anchor>ad941843b104a83ee36c4700bb6de9da7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>receiveWithTimeout</name>
      <anchorfile>classRealtimeScheduler.html</anchorfile>
      <anchor>acc4bd120e7c1cf7ccdf6e7cafc5cc825</anchor>
      <arglist>(long usec)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>receiveUntil</name>
      <anchorfile>classRealtimeScheduler.html</anchorfile>
      <anchor>a62d97e7885e2a1c4e1f6d7cd899df92c</anchor>
      <arglist>(const timeval &amp;targetTime)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; SOCKET, SocketContext &gt;</type>
      <name>socketContextMap</name>
      <anchorfile>classRealtimeScheduler.html</anchorfile>
      <anchor>a6dd7e8222bfd2cc9dc4787040f78f132</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>fd_set</type>
      <name>all_fds</name>
      <anchorfile>classRealtimeScheduler.html</anchorfile>
      <anchor>a7468f001f080f62bf567b6a56a3b18d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SOCKET</type>
      <name>maxfd</name>
      <anchorfile>classRealtimeScheduler.html</anchorfile>
      <anchor>a1b483610d98af8787a4fcb36903c7796</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SOCKET</type>
      <name>netw_fd</name>
      <anchorfile>classRealtimeScheduler.html</anchorfile>
      <anchor>aee2766bfefbbe385593bd0e7f194eba5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SOCKET</type>
      <name>apptun_fd</name>
      <anchorfile>classRealtimeScheduler.html</anchorfile>
      <anchor>a4a9e4639b06fe4f53b9f6002b23333a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classRealtimeScheduler.html</anchorfile>
      <anchor>ae22161ac4912efe6f5742157181c8060</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>notificationMsg</name>
      <anchorfile>classRealtimeScheduler.html</anchorfile>
      <anchor>a0ef68f82d35f9463e9288f22c628eba4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PacketBuffer *</type>
      <name>packetBuffer</name>
      <anchorfile>classRealtimeScheduler.html</anchorfile>
      <anchor>afc75606ba879c035fe4be9b939012f03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>buffersize</name>
      <anchorfile>classRealtimeScheduler.html</anchorfile>
      <anchor>a499bb2a7b02849be46347533a5ed6761</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cModule *</type>
      <name>appModule</name>
      <anchorfile>classRealtimeScheduler.html</anchorfile>
      <anchor>af8eaff4ca345f94aaef1fe26c5be508e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>appNotificationMsg</name>
      <anchorfile>classRealtimeScheduler.html</anchorfile>
      <anchor>ab4eced162d7a38aeccc4c4cd5381f276</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PacketBuffer *</type>
      <name>appPacketBuffer</name>
      <anchorfile>classRealtimeScheduler.html</anchorfile>
      <anchor>a9cf297ceaba1fbb4a66d847b348dae3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>appBuffersize</name>
      <anchorfile>classRealtimeScheduler.html</anchorfile>
      <anchor>a56ae7cce0fa02720803fbca60f1dee71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>appConnectionLimit</name>
      <anchorfile>classRealtimeScheduler.html</anchorfile>
      <anchor>ae9fa7c77861365573b4d5b8deaa942c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SOCKET</type>
      <name>additional_fd</name>
      <anchorfile>classRealtimeScheduler.html</anchorfile>
      <anchor>adaa65c6934b915a6129a284f952d18ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>timeval</type>
      <name>baseTime</name>
      <anchorfile>classRealtimeScheduler.html</anchorfile>
      <anchor>aee4c436fdd6140549dc04f1de5fb4666</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RealtimeScheduler::SocketContext</name>
    <filename>classRealtimeScheduler_1_1SocketContext.html</filename>
    <member kind="function">
      <type></type>
      <name>SocketContext</name>
      <anchorfile>classRealtimeScheduler_1_1SocketContext.html</anchorfile>
      <anchor>a3f4cdaa6286a49ee903b60a0cc77aff8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SocketContext</name>
      <anchorfile>classRealtimeScheduler_1_1SocketContext.html</anchorfile>
      <anchor>a834da76ec3eee8d8977c00956e0132a8</anchor>
      <arglist>(cModule *mod, cMessage *notifMsg, PacketBuffer *buffer, size_t mtu)</arglist>
    </member>
    <member kind="variable">
      <type>cModule *</type>
      <name>mod</name>
      <anchorfile>classRealtimeScheduler_1_1SocketContext.html</anchorfile>
      <anchor>a9dba9b31489b8550d04274b60b9c0f78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cMessage *</type>
      <name>notifMsg</name>
      <anchorfile>classRealtimeScheduler_1_1SocketContext.html</anchorfile>
      <anchor>ac5c595d338b3040d902031bf59f65fb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PacketBuffer *</type>
      <name>buffer</name>
      <anchorfile>classRealtimeScheduler_1_1SocketContext.html</anchorfile>
      <anchor>acd3c561a752b30d3e701a65747b7c612</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>mtu</name>
      <anchorfile>classRealtimeScheduler_1_1SocketContext.html</anchorfile>
      <anchor>a7984f42a615d2a778af70fd71d20bff0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RealworldApp</name>
    <filename>classRealworldApp.html</filename>
    <base>RealworldConnector</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual char *</type>
      <name>encapsulate</name>
      <anchorfile>classRealworldApp.html</anchorfile>
      <anchor>ad60661c60a6d935d9fb50dd26655134f</anchor>
      <arglist>(cPacket *msg, unsigned int *length, sockaddr **addr, socklen_t *addrlen)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>decapsulate</name>
      <anchorfile>classRealworldApp.html</anchorfile>
      <anchor>ad1b95b933ae0df8d4a8c0c5413f663b7</anchor>
      <arglist>(char *buf, uint32_t length, sockaddr *addr, socklen_t addrlen)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isApp</name>
      <anchorfile>classRealworldApp.html</anchorfile>
      <anchor>a4542f452b101ae70783581703c743743</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RealworldConnector</name>
    <filename>classRealworldConnector.html</filename>
    <member kind="function">
      <type></type>
      <name>RealworldConnector</name>
      <anchorfile>classRealworldConnector.html</anchorfile>
      <anchor>a435793fcfa8552293b80be10d86ddc6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RealworldConnector</name>
      <anchorfile>classRealworldConnector.html</anchorfile>
      <anchor>a3a5dd7f848af0fa08b429b4102fbeaac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classRealworldConnector.html</anchorfile>
      <anchor>ae03a51174f393a9ccd47bf90d2a85e86</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classRealworldConnector.html</anchorfile>
      <anchor>a8ae71b5f98d3e76ea58d35d100f3889f</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classRealworldConnector.html</anchorfile>
      <anchor>a981a9ef8964c35ff2411d5ccf0681b8d</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>transmitToNetwork</name>
      <anchorfile>classRealworldConnector.html</anchorfile>
      <anchor>a78110b6c57760c3461574f8cfcf8bfcd</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateDisplayString</name>
      <anchorfile>classRealworldConnector.html</anchorfile>
      <anchor>ab995d0d2e846b38d47c6ef3f9cb75965</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual char *</type>
      <name>encapsulate</name>
      <anchorfile>classRealworldConnector.html</anchorfile>
      <anchor>a8c529455882869f365d8a9b4ca0cf65f</anchor>
      <arglist>(cPacket *msg, unsigned int *length, sockaddr **addr, socklen_t *addrlen)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual cPacket *</type>
      <name>decapsulate</name>
      <anchorfile>classRealworldConnector.html</anchorfile>
      <anchor>aa27e2d58fd2eeb59de36c19a5a9a7639</anchor>
      <arglist>(char *buf, uint32_t length, sockaddr *addr, socklen_t addrlen)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isApp</name>
      <anchorfile>classRealworldConnector.html</anchorfile>
      <anchor>a4f1d028a9e750136fb2aef4b295c71ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>gateIndexNetwOut</name>
      <anchorfile>classRealworldConnector.html</anchorfile>
      <anchor>a193f2c2b39b677dc0348f7ee597e6155</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>mtu</name>
      <anchorfile>classRealworldConnector.html</anchorfile>
      <anchor>aa67f5955639cf237d577356894109f5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numSent</name>
      <anchorfile>classRealworldConnector.html</anchorfile>
      <anchor>a233e0d66e43bf48fe2aef93aff893f49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numSendError</name>
      <anchorfile>classRealworldConnector.html</anchorfile>
      <anchor>a1d74f8325e558fafd8bdb1c8726c42e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numRcvdOK</name>
      <anchorfile>classRealworldConnector.html</anchorfile>
      <anchor>a5438f8300a73773b4ecd38418ce00eed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numRcvError</name>
      <anchorfile>classRealworldConnector.html</anchorfile>
      <anchor>a5d8847413642c3c62e9e130b87a6dec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>packetNotification</name>
      <anchorfile>classRealworldConnector.html</anchorfile>
      <anchor>ae90a2b1ddc6e813a4c92b0482598603d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PacketBuffer</type>
      <name>packetBuffer</name>
      <anchorfile>classRealworldConnector.html</anchorfile>
      <anchor>a1f9f638beff026e605125d3113c2e9aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealtimeScheduler *</type>
      <name>scheduler</name>
      <anchorfile>classRealworldConnector.html</anchorfile>
      <anchor>adb5275ec57ed1b78b308a89157d5e992</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PacketParser *</type>
      <name>parser</name>
      <anchorfile>classRealworldConnector.html</anchorfile>
      <anchor>a52e3b2339e0d29e33e2a062047a5d5a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RealworldDevice</name>
    <filename>classRealworldDevice.html</filename>
    <base>RealworldConnector</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classRealworldDevice.html</anchorfile>
      <anchor>a90dd2e7097d7860349c5c1c4044265a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classRealworldDevice.html</anchorfile>
      <anchor>ab4adea55e0b4f38d824906967bda6781</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>InterfaceEntry *</type>
      <name>registerInterface</name>
      <anchorfile>classRealworldDevice.html</anchorfile>
      <anchor>a1f9d8c40811bd963903b816eb9c08f80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InterfaceEntry *</type>
      <name>interfaceEntry</name>
      <anchorfile>classRealworldDevice.html</anchorfile>
      <anchor>ad79399afd9f9a809dc397a2463241ead</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>realWorldRoaming</name>
    <filename>classrealWorldRoaming.html</filename>
    <base>MovementGenerator</base>
    <member kind="function">
      <type></type>
      <name>realWorldRoaming</name>
      <anchorfile>classrealWorldRoaming.html</anchorfile>
      <anchor>a53d0d89ef14bf6962ddb2bbf7deaa482</anchor>
      <arglist>(double areaDimension, double speed, NeighborMap *Neighbors, GlobalCoordinator *coordinator, CollisionList *CollisionRect)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~realWorldRoaming</name>
      <anchorfile>classrealWorldRoaming.html</anchorfile>
      <anchor>a4019d33ad06d524af154213a647d25fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>classrealWorldRoaming.html</anchorfile>
      <anchor>a6d18d5a028730b2f3b0b1cf20efe1fef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classrealWorldRoaming.html</anchorfile>
      <anchor>a64f7266bc4491bf18d7900a06fcce964</anchor>
      <arglist>(Vector2D position)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RealWorldTestApp</name>
    <filename>classRealWorldTestApp.html</filename>
    <base>BaseApp</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initializeApp</name>
      <anchorfile>classRealWorldTestApp.html</anchorfile>
      <anchor>a713b213d9772fb81b9a27e2eae134338</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finishApp</name>
      <anchorfile>classRealWorldTestApp.html</anchorfile>
      <anchor>a2cd43a5a555d785466543169e0ab96cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deliver</name>
      <anchorfile>classRealWorldTestApp.html</anchorfile>
      <anchor>a6ea758cec1d43d0905d58b33399a5265</anchor>
      <arglist>(OverlayKey &amp;key, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleUpperMessage</name>
      <anchorfile>classRealWorldTestApp.html</anchorfile>
      <anchor>aa8c25b31293fba681faaceb3b39316d2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classRealWorldTestApp.html</anchorfile>
      <anchor>ad04fadea31c527057c1e81ceb40bd0b8</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>displayMsg</name>
      <anchorfile>classRealWorldTestApp.html</anchorfile>
      <anchor>a4d11cf26a707573f8ce0bc1bb24c45c3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RealWorldTestMessage</name>
    <filename>classRealWorldTestMessage.html</filename>
    <member kind="function">
      <type></type>
      <name>RealWorldTestMessage</name>
      <anchorfile>classRealWorldTestMessage.html</anchorfile>
      <anchor>adf4fff1358edbf292ccb2b8edfe11204</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealWorldTestMessage</name>
      <anchorfile>classRealWorldTestMessage.html</anchorfile>
      <anchor>a45e65979abeab97e1889711833f18c64</anchor>
      <arglist>(const RealWorldTestMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RealWorldTestMessage</name>
      <anchorfile>classRealWorldTestMessage.html</anchorfile>
      <anchor>a43063cc1e8e80cf032d9f1f8b1aa8156</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealWorldTestMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classRealWorldTestMessage.html</anchorfile>
      <anchor>a185ab192c6a646f41b41d0abbe771a35</anchor>
      <arglist>(const RealWorldTestMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealWorldTestMessage *</type>
      <name>dup</name>
      <anchorfile>classRealWorldTestMessage.html</anchorfile>
      <anchor>a50ead0e05265e4fa6ffd95daa633e3e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classRealWorldTestMessage.html</anchorfile>
      <anchor>a57c35237bb163c7e523cb037ce29b0d2</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classRealWorldTestMessage.html</anchorfile>
      <anchor>ac686291a8de42dcd90ec1d25ec388e54</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getMsg</name>
      <anchorfile>classRealWorldTestMessage.html</anchorfile>
      <anchor>acea24290c384f6d18119cd221a6ac76e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMsg</name>
      <anchorfile>classRealWorldTestMessage.html</anchorfile>
      <anchor>ae8e136d095a0aab64278d2fe5ac36f4b</anchor>
      <arglist>(const char *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classRealWorldTestMessage.html</anchorfile>
      <anchor>aba5cb4c3b9fa1814114a9cc45d06658e</anchor>
      <arglist>(const RealWorldTestMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opp_string</type>
      <name>msg_var</name>
      <anchorfile>classRealWorldTestMessage.html</anchorfile>
      <anchor>ae1948ed5f2e818d7ef7ec2aaedf19666</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classRealWorldTestMessage.html</anchorfile>
      <anchor>a41151b308dd36348b744d164b33dee67</anchor>
      <arglist>(const RealWorldTestMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RealWorldTestPacketParser</name>
    <filename>classRealWorldTestPacketParser.html</filename>
    <base>PacketParser</base>
    <member kind="function">
      <type>char *</type>
      <name>encapsulatePayload</name>
      <anchorfile>classRealWorldTestPacketParser.html</anchorfile>
      <anchor>a77d0743e4417c02d644df700bf506edb</anchor>
      <arglist>(cPacket *msg, unsigned int *length)</arglist>
    </member>
    <member kind="function">
      <type>cPacket *</type>
      <name>decapsulatePayload</name>
      <anchorfile>classRealWorldTestPacketParser.html</anchorfile>
      <anchor>af0966446b8ef8fec637165e18a7fbf9f</anchor>
      <arglist>(char *buf, unsigned int length)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReaSEInfo</name>
    <filename>classReaSEInfo.html</filename>
    <base>PeerInfo</base>
    <member kind="function">
      <type></type>
      <name>ReaSEInfo</name>
      <anchorfile>classReaSEInfo.html</anchorfile>
      <anchor>a9b5bddbb0fc7fba0327a657250db0e8e</anchor>
      <arglist>(uint32_t type, int moduleId, cObject **context)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodeID</name>
      <anchorfile>classReaSEInfo.html</anchorfile>
      <anchor>a585857d51975a8f1b283980654081022</anchor>
      <arglist>(int nodeID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNodeID</name>
      <anchorfile>classReaSEInfo.html</anchorfile>
      <anchor>a7ab674cc990be7f7842610b48b5675f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dummy</name>
      <anchorfile>classReaSEInfo.html</anchorfile>
      <anchor>a0cb80ee15235a6bd11d137c41b56421b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nodeID</name>
      <anchorfile>classReaSEInfo.html</anchorfile>
      <anchor>af9d81069d1eb9f16fb104e8b37f427f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReaSEUnderlayConfigurator</name>
    <filename>classReaSEUnderlayConfigurator.html</filename>
    <base>UnderlayConfigurator</base>
    <member kind="function">
      <type>TransportAddress *</type>
      <name>createNode</name>
      <anchorfile>classReaSEUnderlayConfigurator.html</anchorfile>
      <anchor>a88741bd7afa603fc9b7585e811b68271</anchor>
      <arglist>(NodeType type, bool initialize=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preKillNode</name>
      <anchorfile>classReaSEUnderlayConfigurator.html</anchorfile>
      <anchor>a70b3d4d1ee562d8fcfdd2693d6e84b55</anchor>
      <arglist>(NodeType type, TransportAddress *addr=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>migrateNode</name>
      <anchorfile>classReaSEUnderlayConfigurator.html</anchorfile>
      <anchor>a469f012d180fa689b780863adaf254e0</anchor>
      <arglist>(NodeType type, TransportAddress *addr=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initializeUnderlay</name>
      <anchorfile>classReaSEUnderlayConfigurator.html</anchorfile>
      <anchor>ae734049a2260853860d07299ddccc0ed</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classReaSEUnderlayConfigurator.html</anchorfile>
      <anchor>ab81be31f48d4357d5770cd58e088a428</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finishUnderlay</name>
      <anchorfile>classReaSEUnderlayConfigurator.html</anchorfile>
      <anchor>a4a0166a8892e7846347b8b26b535c022</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setDisplayString</name>
      <anchorfile>classReaSEUnderlayConfigurator.html</anchorfile>
      <anchor>aba750036973d4d6c21c3fd8434fa800b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; cModule * &gt;</type>
      <name>accessNode</name>
      <anchorfile>classReaSEUnderlayConfigurator.html</anchorfile>
      <anchor>a73795c2e932fbd53c58c8ff3b56bc3c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::deque&lt; IPvXAddress &gt;</type>
      <name>killList</name>
      <anchorfile>classReaSEUnderlayConfigurator.html</anchorfile>
      <anchor>a18296075f994c306f1c22c6fb2a35d73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; int &gt;</type>
      <name>scheduledID</name>
      <anchorfile>classReaSEUnderlayConfigurator.html</anchorfile>
      <anchor>a74f6621e1d7a242aa5937567605e012b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numCreated</name>
      <anchorfile>classReaSEUnderlayConfigurator.html</anchorfile>
      <anchor>a9dbcb12eee9fcdbefe868897b27566f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numKilled</name>
      <anchorfile>classReaSEUnderlayConfigurator.html</anchorfile>
      <anchor>a04e850d457d2ee0e140d00ef39666c9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>accessRouterNum</name>
      <anchorfile>classReaSEUnderlayConfigurator.html</anchorfile>
      <anchor>a88b94d3ad7793dfd3130fdf006f1fe39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>overlayAccessRouterNum</name>
      <anchorfile>classReaSEUnderlayConfigurator.html</anchorfile>
      <anchor>ab2547aa56f9ff4e6bc33045513bca237</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>overlayTerminalNum</name>
      <anchorfile>classReaSEUnderlayConfigurator.html</anchorfile>
      <anchor>a9898250c51ab40b053811a9058e7338f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConnectReaSE *</type>
      <name>TerminalConnector</name>
      <anchorfile>classReaSEUnderlayConfigurator.html</anchorfile>
      <anchor>abc9b8a3a702777716b60b335d76c2c43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RecursiveLookup</name>
    <filename>classRecursiveLookup.html</filename>
    <base>RpcListener</base>
    <base>AbstractLookup</base>
    <member kind="function">
      <type></type>
      <name>RecursiveLookup</name>
      <anchorfile>classRecursiveLookup.html</anchorfile>
      <anchor>a398fd86f2e25c1ea0f3cdf2d14fb7cfb</anchor>
      <arglist>(BaseOverlay *overlay, RoutingType routingType, const RecursiveLookupConfiguration &amp;config, bool appLookup)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RecursiveLookup</name>
      <anchorfile>classRecursiveLookup.html</anchorfile>
      <anchor>afaecabf0d0a7269d0faf13569a7d047d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lookup</name>
      <anchorfile>classRecursiveLookup.html</anchorfile>
      <anchor>a4c28320da865aa78b77e2caab90529c3</anchor>
      <arglist>(const OverlayKey &amp;key, int numSiblings=1, int hopCountMax=0, int retries=0, LookupListener *listener=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeVector &amp;</type>
      <name>getResult</name>
      <anchorfile>classRecursiveLookup.html</anchorfile>
      <anchor>aca8620aac56f40adfaa3f911ca75fd98</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isValid</name>
      <anchorfile>classRecursiveLookup.html</anchorfile>
      <anchor>a01dcc40f853a3bf3c446a6e0a0ec4887</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>abortLookup</name>
      <anchorfile>classRecursiveLookup.html</anchorfile>
      <anchor>a25a5b0430182ba29b83d55dc68323a4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>getAccumulatedHops</name>
      <anchorfile>classRecursiveLookup.html</anchorfile>
      <anchor>a199d4cffc4137a3f040cd1c66ec8a497</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleRpcTimeout</name>
      <anchorfile>classRecursiveLookup.html</anchorfile>
      <anchor>af8e05172e227a42ae6bb1ea00cf8f428</anchor>
      <arglist>(BaseCallMessage *msg, const TransportAddress &amp;dest, cPolymorphic *context, int rpcId, const OverlayKey &amp;destKey)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleRpcResponse</name>
      <anchorfile>classRecursiveLookup.html</anchorfile>
      <anchor>a5a511a20d82b70e7903b2315e5244d3e</anchor>
      <arglist>(BaseResponseMessage *msg, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BaseOverlay *</type>
      <name>overlay</name>
      <anchorfile>classRecursiveLookup.html</anchorfile>
      <anchor>a51778976a39f1e6bfffbac69adbe1c6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LookupListener *</type>
      <name>listener</name>
      <anchorfile>classRecursiveLookup.html</anchorfile>
      <anchor>a8e2d093305290eb78caa1999ecb48986</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>nonce</name>
      <anchorfile>classRecursiveLookup.html</anchorfile>
      <anchor>ad53e1fa974784754fb56f8962033d9ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classRecursiveLookup.html</anchorfile>
      <anchor>adcdd9e325c9032aa5279f366017474b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeVector</type>
      <name>siblings</name>
      <anchorfile>classRecursiveLookup.html</anchorfile>
      <anchor>a626e9d8bba976213d902b42ec85e70fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RoutingType</type>
      <name>routingType</name>
      <anchorfile>classRecursiveLookup.html</anchorfile>
      <anchor>a7f13cc546895964ad79ad4e75e9c81f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>redundantNodes</name>
      <anchorfile>classRecursiveLookup.html</anchorfile>
      <anchor>a8c67a4a0d22c73668463c9aff688f11f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numRetries</name>
      <anchorfile>classRecursiveLookup.html</anchorfile>
      <anchor>a6d045ed7a2a0661b3ac98d952316c1af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>appLookup</name>
      <anchorfile>classRecursiveLookup.html</anchorfile>
      <anchor>a4615a990a641af7a8bedd48a1424e6b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RecursiveLookupConfiguration</name>
    <filename>classRecursiveLookupConfiguration.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>redundantNodes</name>
      <anchorfile>classRecursiveLookupConfiguration.html</anchorfile>
      <anchor>a344319f090e4d972a5514ef0e800836f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numRetries</name>
      <anchorfile>classRecursiveLookupConfiguration.html</anchorfile>
      <anchor>acfc1d3d17ad0db3aa9654f399a1a93c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>failedNodeRpcs</name>
      <anchorfile>classRecursiveLookupConfiguration.html</anchorfile>
      <anchor>a8c2c1ebfb3d324a7c769189ce288853e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RegionDataContainer</name>
    <filename>classRegionDataContainer.html</filename>
    <member kind="function">
      <type></type>
      <name>RegionDataContainer</name>
      <anchorfile>classRegionDataContainer.html</anchorfile>
      <anchor>af5fe59175469cf545baa67071f7a5d81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RegionDataContainer</name>
      <anchorfile>classRegionDataContainer.html</anchorfile>
      <anchor>a7b0d1bbcec7f414a37175a7461160446</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBitLength</name>
      <anchorfile>classRegionDataContainer.html</anchorfile>
      <anchor>a4f640a355abe45fe1767902abab821c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>regionCountMap</type>
      <name>regionData</name>
      <anchorfile>classRegionDataContainer.html</anchorfile>
      <anchor>aeecd42e3855d4dfca30867de7c497a12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RegionsStrategyCall</name>
    <filename>classRegionsStrategyCall.html</filename>
    <base>GlobalViewBuilderCall</base>
    <member kind="function">
      <type></type>
      <name>RegionsStrategyCall</name>
      <anchorfile>classRegionsStrategyCall.html</anchorfile>
      <anchor>a2e57a11923734dd77114b8debd2eaa78</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegionsStrategyCall</name>
      <anchorfile>classRegionsStrategyCall.html</anchorfile>
      <anchor>ae3fa00558d33e915feae33c0c4bab3fa</anchor>
      <arglist>(const RegionsStrategyCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RegionsStrategyCall</name>
      <anchorfile>classRegionsStrategyCall.html</anchorfile>
      <anchor>ade5f7ddd96deb549deee929ca2212086</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RegionsStrategyCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classRegionsStrategyCall.html</anchorfile>
      <anchor>a7749fd3c3acfd7930e6129cd0c7dda37</anchor>
      <arglist>(const RegionsStrategyCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RegionsStrategyCall *</type>
      <name>dup</name>
      <anchorfile>classRegionsStrategyCall.html</anchorfile>
      <anchor>a01138ddf99d617bacce9950d4ff9bcc1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classRegionsStrategyCall.html</anchorfile>
      <anchor>ac4543a7c80d96b154bc8031b9452467e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classRegionsStrategyCall.html</anchorfile>
      <anchor>a7a7ff5076ea9c1512b9579714c54f8aa</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RegionDataContainer &amp;</type>
      <name>getRegionData</name>
      <anchorfile>classRegionsStrategyCall.html</anchorfile>
      <anchor>a79039e62155c2b27e95f67d85a784a03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const RegionDataContainer &amp;</type>
      <name>getRegionData</name>
      <anchorfile>classRegionsStrategyCall.html</anchorfile>
      <anchor>a35e53c070f613c47ebf6f3a25a32095a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRegionData</name>
      <anchorfile>classRegionsStrategyCall.html</anchorfile>
      <anchor>a814ee09e6bc96f5aa2e276c912038383</anchor>
      <arglist>(const RegionDataContainer &amp;regionData)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classRegionsStrategyCall.html</anchorfile>
      <anchor>a4ea7889b6e53680aee61d21f219c31eb</anchor>
      <arglist>(const RegionsStrategyCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RegionDataContainer</type>
      <name>regionData_var</name>
      <anchorfile>classRegionsStrategyCall.html</anchorfile>
      <anchor>a56d7b512022b8a7ea1b3b973d24ccf67</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classRegionsStrategyCall.html</anchorfile>
      <anchor>a83dc2eacde70ac01e923480aa6164a46</anchor>
      <arglist>(const RegionsStrategyCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RemoveRandomStrategyCall</name>
    <filename>classRemoveRandomStrategyCall.html</filename>
    <base>GlobalViewBuilderCall</base>
    <member kind="function">
      <type></type>
      <name>RemoveRandomStrategyCall</name>
      <anchorfile>classRemoveRandomStrategyCall.html</anchorfile>
      <anchor>a01efa0929f391a1a08e953ef065a07b2</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RemoveRandomStrategyCall</name>
      <anchorfile>classRemoveRandomStrategyCall.html</anchorfile>
      <anchor>aab4ed7e3a41776284df260b43fbeaabf</anchor>
      <arglist>(const RemoveRandomStrategyCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RemoveRandomStrategyCall</name>
      <anchorfile>classRemoveRandomStrategyCall.html</anchorfile>
      <anchor>a42b39df179a0e1bb078a6fa83a87accc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RemoveRandomStrategyCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classRemoveRandomStrategyCall.html</anchorfile>
      <anchor>af0e87b1b3742ba00d2c4acdc2498a6b0</anchor>
      <arglist>(const RemoveRandomStrategyCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RemoveRandomStrategyCall *</type>
      <name>dup</name>
      <anchorfile>classRemoveRandomStrategyCall.html</anchorfile>
      <anchor>a01cf00fc944abb171c30aebe144b5ca1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classRemoveRandomStrategyCall.html</anchorfile>
      <anchor>a992c9d0180e7ac599fca7100d1100698</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classRemoveRandomStrategyCall.html</anchorfile>
      <anchor>a71b0938b3bd7b459d62e104d2ba80b71</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CoordDataContainer &amp;</type>
      <name>getCoordData</name>
      <anchorfile>classRemoveRandomStrategyCall.html</anchorfile>
      <anchor>aee459eef4ee99be4e1c4388bce0225ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const CoordDataContainer &amp;</type>
      <name>getCoordData</name>
      <anchorfile>classRemoveRandomStrategyCall.html</anchorfile>
      <anchor>a25bf31abd8862b396c32a7338b4ac28b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCoordData</name>
      <anchorfile>classRemoveRandomStrategyCall.html</anchorfile>
      <anchor>a54b0844cdd05530a6f800da773f6179c</anchor>
      <arglist>(const CoordDataContainer &amp;coordData)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classRemoveRandomStrategyCall.html</anchorfile>
      <anchor>adc7d63a2c126dcfc833a9443e55619be</anchor>
      <arglist>(const RemoveRandomStrategyCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordDataContainer</type>
      <name>coordData_var</name>
      <anchorfile>classRemoveRandomStrategyCall.html</anchorfile>
      <anchor>a9f8867de6cf77995ebb614f99de9c4a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classRemoveRandomStrategyCall.html</anchorfile>
      <anchor>a5ebeeabc29398c8a49ad3bda51893eb6</anchor>
      <arglist>(const RemoveRandomStrategyCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RequestLeafSetCall</name>
    <filename>classRequestLeafSetCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>RequestLeafSetCall</name>
      <anchorfile>classRequestLeafSetCall.html</anchorfile>
      <anchor>a72903d7ecc8f96294d64860a72a706aa</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RequestLeafSetCall</name>
      <anchorfile>classRequestLeafSetCall.html</anchorfile>
      <anchor>ac79d70c6fb2cb5fe120376e84e4b5749</anchor>
      <arglist>(const RequestLeafSetCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RequestLeafSetCall</name>
      <anchorfile>classRequestLeafSetCall.html</anchorfile>
      <anchor>a23791b0f6d01c82577e6e01e15861bcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RequestLeafSetCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classRequestLeafSetCall.html</anchorfile>
      <anchor>ac59d209c94d8cffaf1c087072fec3a33</anchor>
      <arglist>(const RequestLeafSetCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RequestLeafSetCall *</type>
      <name>dup</name>
      <anchorfile>classRequestLeafSetCall.html</anchorfile>
      <anchor>afb327a22ed23b70de6ef02daf77135e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classRequestLeafSetCall.html</anchorfile>
      <anchor>a2251b30b28e0787c835be6a1ba149015</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classRequestLeafSetCall.html</anchorfile>
      <anchor>a9580d64b0105c5d72e8034ca108e3bde</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classRequestLeafSetCall.html</anchorfile>
      <anchor>a38354eb411d26d619774fe11fbecd5ff</anchor>
      <arglist>(const RequestLeafSetCall &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classRequestLeafSetCall.html</anchorfile>
      <anchor>a9e5f464c29613b0288ec9161118939ca</anchor>
      <arglist>(const RequestLeafSetCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RequestLeafSetResponse</name>
    <filename>classRequestLeafSetResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>RequestLeafSetResponse</name>
      <anchorfile>classRequestLeafSetResponse.html</anchorfile>
      <anchor>a21b5be68843687c6b865f38f61014e18</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RequestLeafSetResponse</name>
      <anchorfile>classRequestLeafSetResponse.html</anchorfile>
      <anchor>ac3c8fa9320a0bf9ea769419e1e638bc9</anchor>
      <arglist>(const RequestLeafSetResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RequestLeafSetResponse</name>
      <anchorfile>classRequestLeafSetResponse.html</anchorfile>
      <anchor>a9fc1de153b89d428c800e9db22b3e7a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RequestLeafSetResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classRequestLeafSetResponse.html</anchorfile>
      <anchor>a1af9eee57685c62c46fff4d9c9a0f750</anchor>
      <arglist>(const RequestLeafSetResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RequestLeafSetResponse *</type>
      <name>dup</name>
      <anchorfile>classRequestLeafSetResponse.html</anchorfile>
      <anchor>a2c23828b60c9146b01e3f026ee06dd0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classRequestLeafSetResponse.html</anchorfile>
      <anchor>abdc01e6f7bf24e893f01ff4a259ca95a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classRequestLeafSetResponse.html</anchorfile>
      <anchor>a38b20a4d6774e9e1509ef391465b24e5</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classRequestLeafSetResponse.html</anchorfile>
      <anchor>a22e79f2a7591cc91985d81be63b30d66</anchor>
      <arglist>(const RequestLeafSetResponse &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classRequestLeafSetResponse.html</anchorfile>
      <anchor>ab0e2050f107e6cf96f9f7eeca04edb29</anchor>
      <arglist>(const RequestLeafSetResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RequestRepairCall</name>
    <filename>classRequestRepairCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>RequestRepairCall</name>
      <anchorfile>classRequestRepairCall.html</anchorfile>
      <anchor>a4a5cbacd84cbadfdfe7d381922aaa9f7</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RequestRepairCall</name>
      <anchorfile>classRequestRepairCall.html</anchorfile>
      <anchor>ab6306fd32f27c8f8626f42eb6c290cba</anchor>
      <arglist>(const RequestRepairCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RequestRepairCall</name>
      <anchorfile>classRequestRepairCall.html</anchorfile>
      <anchor>a49725c75f2dc32142e10be9f09b28402</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RequestRepairCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classRequestRepairCall.html</anchorfile>
      <anchor>a7a4e3af74fbc20335b4e378e6411603b</anchor>
      <arglist>(const RequestRepairCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RequestRepairCall *</type>
      <name>dup</name>
      <anchorfile>classRequestRepairCall.html</anchorfile>
      <anchor>a43bbee4489e6ca50ebacb06038c04793</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classRequestRepairCall.html</anchorfile>
      <anchor>a4f96c05dbffae757b28e083e48218327</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classRequestRepairCall.html</anchorfile>
      <anchor>abf84f85d0adc01d952cfadada8a00478</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classRequestRepairCall.html</anchorfile>
      <anchor>aa8251dd339c350e519c58eb4fd2be345</anchor>
      <arglist>(const RequestRepairCall &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classRequestRepairCall.html</anchorfile>
      <anchor>aeecd3fc59a53a08b0931cfa802b276b4</anchor>
      <arglist>(const RequestRepairCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RequestRepairResponse</name>
    <filename>classRequestRepairResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>RequestRepairResponse</name>
      <anchorfile>classRequestRepairResponse.html</anchorfile>
      <anchor>acfe5084c995c99cd1112f91c42288ad7</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RequestRepairResponse</name>
      <anchorfile>classRequestRepairResponse.html</anchorfile>
      <anchor>a0338b72c72e6316463a2361342496c58</anchor>
      <arglist>(const RequestRepairResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RequestRepairResponse</name>
      <anchorfile>classRequestRepairResponse.html</anchorfile>
      <anchor>aa4e9e7ade4caad18cd6f15d47fa8c21b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RequestRepairResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classRequestRepairResponse.html</anchorfile>
      <anchor>a332fc206093a7d5eda48440e848f2e55</anchor>
      <arglist>(const RequestRepairResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RequestRepairResponse *</type>
      <name>dup</name>
      <anchorfile>classRequestRepairResponse.html</anchorfile>
      <anchor>a6256336a77472780a73a26da6c27f280</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classRequestRepairResponse.html</anchorfile>
      <anchor>a7bffe43574be0278c3fd2700317de0dc</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classRequestRepairResponse.html</anchorfile>
      <anchor>a28567bed085fe0b30365ab0a0fd354b9</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classRequestRepairResponse.html</anchorfile>
      <anchor>a1a3711013670736c892a515d5e5ee0f3</anchor>
      <arglist>(const RequestRepairResponse &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classRequestRepairResponse.html</anchorfile>
      <anchor>a68f35144b3a70c46133d8ff8deb0f4dd</anchor>
      <arglist>(const RequestRepairResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RequestRoutingRowCall</name>
    <filename>classRequestRoutingRowCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>RequestRoutingRowCall</name>
      <anchorfile>classRequestRoutingRowCall.html</anchorfile>
      <anchor>af4ac5ce639770262377a13caef896b1d</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RequestRoutingRowCall</name>
      <anchorfile>classRequestRoutingRowCall.html</anchorfile>
      <anchor>a2b73427114bf8137affcbcb5ee1d38c2</anchor>
      <arglist>(const RequestRoutingRowCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RequestRoutingRowCall</name>
      <anchorfile>classRequestRoutingRowCall.html</anchorfile>
      <anchor>aef363e2186f0bbb397712e56fad5bf20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RequestRoutingRowCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classRequestRoutingRowCall.html</anchorfile>
      <anchor>adef8d4c3e355a49936b3e3f7074949b8</anchor>
      <arglist>(const RequestRoutingRowCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RequestRoutingRowCall *</type>
      <name>dup</name>
      <anchorfile>classRequestRoutingRowCall.html</anchorfile>
      <anchor>a87f63f75f4d96001cdc1a723c81bb040</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classRequestRoutingRowCall.html</anchorfile>
      <anchor>aa10406dc76119ad67b176f472294e360</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classRequestRoutingRowCall.html</anchorfile>
      <anchor>a0964c0c7863bf8ad9e8905ec296a8ff9</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRow</name>
      <anchorfile>classRequestRoutingRowCall.html</anchorfile>
      <anchor>adc79f07df3e179ec07e5dfd3e23a3113</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRow</name>
      <anchorfile>classRequestRoutingRowCall.html</anchorfile>
      <anchor>ae7fe893a792196e34510975a00503b26</anchor>
      <arglist>(int row)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classRequestRoutingRowCall.html</anchorfile>
      <anchor>a3099fbb5fd050ff6b85819d2d525b91c</anchor>
      <arglist>(const RequestRoutingRowCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>row_var</name>
      <anchorfile>classRequestRoutingRowCall.html</anchorfile>
      <anchor>a4054d6e1e11c3250659666bd1bc5ab0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classRequestRoutingRowCall.html</anchorfile>
      <anchor>a0d52455bbb3ebf088109f3e97851df01</anchor>
      <arglist>(const RequestRoutingRowCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RequestRoutingRowResponse</name>
    <filename>classRequestRoutingRowResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>RequestRoutingRowResponse</name>
      <anchorfile>classRequestRoutingRowResponse.html</anchorfile>
      <anchor>afa2801d40f66f99a26b65c1ee89ef494</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RequestRoutingRowResponse</name>
      <anchorfile>classRequestRoutingRowResponse.html</anchorfile>
      <anchor>a88e732a147d45bef8b4206539e6be0e7</anchor>
      <arglist>(const RequestRoutingRowResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RequestRoutingRowResponse</name>
      <anchorfile>classRequestRoutingRowResponse.html</anchorfile>
      <anchor>ac0db40cd1d9a7976b898fa20fa275681</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RequestRoutingRowResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classRequestRoutingRowResponse.html</anchorfile>
      <anchor>a56b8668a61801fd3051bb76ea872dbd2</anchor>
      <arglist>(const RequestRoutingRowResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RequestRoutingRowResponse *</type>
      <name>dup</name>
      <anchorfile>classRequestRoutingRowResponse.html</anchorfile>
      <anchor>a879aff9f8a90dafad396a6a7aed1cc14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classRequestRoutingRowResponse.html</anchorfile>
      <anchor>a74dd5574c626bee392de3b932750f3b4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classRequestRoutingRowResponse.html</anchorfile>
      <anchor>a73caf4bbba6a98fe3b767ea8871bef0c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classRequestRoutingRowResponse.html</anchorfile>
      <anchor>a3a799890eb1691f88286ff214abc89f8</anchor>
      <arglist>(const RequestRoutingRowResponse &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classRequestRoutingRowResponse.html</anchorfile>
      <anchor>abf6cda4733ebe5ef5e23ef281ef6c1eb</anchor>
      <arglist>(const RequestRoutingRowResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RequestStateCall</name>
    <filename>classRequestStateCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>RequestStateCall</name>
      <anchorfile>classRequestStateCall.html</anchorfile>
      <anchor>a25d588d3dec5ed7eda75d1fc5a9af92b</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RequestStateCall</name>
      <anchorfile>classRequestStateCall.html</anchorfile>
      <anchor>a79d6612ca9f90d2aa10ec2d206d5e1c3</anchor>
      <arglist>(const RequestStateCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RequestStateCall</name>
      <anchorfile>classRequestStateCall.html</anchorfile>
      <anchor>afc0f373d675b3d714ffa74f3ca433273</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RequestStateCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classRequestStateCall.html</anchorfile>
      <anchor>a78e5a5e8a86008ea687b5d1c59a5237f</anchor>
      <arglist>(const RequestStateCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RequestStateCall *</type>
      <name>dup</name>
      <anchorfile>classRequestStateCall.html</anchorfile>
      <anchor>ad4debb716eef4c480827a7c2fef748a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classRequestStateCall.html</anchorfile>
      <anchor>a0e86d2388cbb848cb75e4e2a9e8f936e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classRequestStateCall.html</anchorfile>
      <anchor>a0287bfc03932b7b8c8ca47e7b1cee065</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classRequestStateCall.html</anchorfile>
      <anchor>acb152e52736fb3ab7051f7e288c251aa</anchor>
      <arglist>(const RequestStateCall &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classRequestStateCall.html</anchorfile>
      <anchor>a0604ed785c7f6eeff44246c67c8fb8fe</anchor>
      <arglist>(const RequestStateCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RequestStateResponse</name>
    <filename>classRequestStateResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>RequestStateResponse</name>
      <anchorfile>classRequestStateResponse.html</anchorfile>
      <anchor>ab80a70a896f7a767e767dab6fa53ab22</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RequestStateResponse</name>
      <anchorfile>classRequestStateResponse.html</anchorfile>
      <anchor>ab0d69ab38e938e24f77270361906bbca</anchor>
      <arglist>(const RequestStateResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RequestStateResponse</name>
      <anchorfile>classRequestStateResponse.html</anchorfile>
      <anchor>a39ccdf69411a5a1376503d3e3e01e079</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RequestStateResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classRequestStateResponse.html</anchorfile>
      <anchor>a0418c27755f67ee5991a2ae5953e0b75</anchor>
      <arglist>(const RequestStateResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RequestStateResponse *</type>
      <name>dup</name>
      <anchorfile>classRequestStateResponse.html</anchorfile>
      <anchor>a0065478d091a99d3ff2fc600617aeb34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classRequestStateResponse.html</anchorfile>
      <anchor>a1b36bf4d46e407ee923af60542793397</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classRequestStateResponse.html</anchorfile>
      <anchor>a01bdead111d4bdb396938d4d582f0128</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classRequestStateResponse.html</anchorfile>
      <anchor>a6463f8b074bc5c260f9398a6cef1d84d</anchor>
      <arglist>(const RequestStateResponse &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classRequestStateResponse.html</anchorfile>
      <anchor>a56f194d7caa1160e73be9d6b59e6e13d</anchor>
      <arglist>(const RequestStateResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RescueNode</name>
    <filename>classRescueNode.html</filename>
    <member kind="function">
      <type>void</type>
      <name>setHandle</name>
      <anchorfile>classRescueNode.html</anchorfile>
      <anchor>a3c20008df29cd555f589789194b586c6</anchor>
      <arglist>(NodeHandle &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>NodeHandle &amp;</type>
      <name>getHandle</name>
      <anchorfile>classRescueNode.html</anchorfile>
      <anchor>af918da7d524a754ea3f2ccaad542691d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRankingParameters</name>
      <anchorfile>classRescueNode.html</anchorfile>
      <anchor>a7269a9180f2b4d643f90e541ec1c1441</anchor>
      <arglist>(RankingParameters params)</arglist>
    </member>
    <member kind="function">
      <type>RankingParameters &amp;</type>
      <name>getRankingParameters</name>
      <anchorfile>classRescueNode.html</anchorfile>
      <anchor>aca9a74e52ed265308d1df4ddc70ce967</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRank</name>
      <anchorfile>classRescueNode.html</anchorfile>
      <anchor>a24b8ea922331bdeb45f9967c5d7aa51c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>calculateRank</name>
      <anchorfile>classRescueNode.html</anchorfile>
      <anchor>aac4029aee4aa5917f626ba43b6cc5fac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RankingParameters</type>
      <name>parameters</name>
      <anchorfile>classRescueNode.html</anchorfile>
      <anchor>a8917ef8d071c0d43fc5aa757e4ef0ce7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>rank</name>
      <anchorfile>classRescueNode.html</anchorfile>
      <anchor>a9025cbca52a89891b44c4aa3caad76af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeHandle</type>
      <name>node</name>
      <anchorfile>classRescueNode.html</anchorfile>
      <anchor>ae41fa2743d529ed99c840cd28d129131</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RpcListener</name>
    <filename>classRpcListener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RpcListener</name>
      <anchorfile>classRpcListener.html</anchorfile>
      <anchor>a9670dbdbd31e78b05f1d1f58735580de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRpcResponse</name>
      <anchorfile>classRpcListener.html</anchorfile>
      <anchor>a6229090a446fb649cfec3c1fb61e7167</anchor>
      <arglist>(BaseResponseMessage *msg, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRpcResponse</name>
      <anchorfile>classRpcListener.html</anchorfile>
      <anchor>ac7be6c4f944569921519314295fe7cf4</anchor>
      <arglist>(BaseResponseMessage *msg, const RpcState &amp;rpcState, simtime_t rtt)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRpcTimeout</name>
      <anchorfile>classRpcListener.html</anchorfile>
      <anchor>aaaf9cd362481527ed995dd159aa96b73</anchor>
      <arglist>(BaseCallMessage *msg, const TransportAddress &amp;dest, cPolymorphic *context, int rpcId, const OverlayKey &amp;destKey)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRpcTimeout</name>
      <anchorfile>classRpcListener.html</anchorfile>
      <anchor>abb0de3d1e8d737c3d44864345d5fa732</anchor>
      <arglist>(const RpcState &amp;rpcState)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BaseRpc</name>
      <anchorfile>classRpcListener.html</anchorfile>
      <anchor>a9cdbab595f545455872b3b9dfb89b32b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RpcState</name>
    <filename>classRpcState.html</filename>
    <member kind="function">
      <type>int</type>
      <name>getId</name>
      <anchorfile>classRpcState.html</anchorfile>
      <anchor>aef057cfd57307ee5893014084208a28e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const TransportAddress &amp;</type>
      <name>getDest</name>
      <anchorfile>classRpcState.html</anchorfile>
      <anchor>af72427e81f440292cea7de1f3a545a56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const OverlayKey &amp;</type>
      <name>getDestKey</name>
      <anchorfile>classRpcState.html</anchorfile>
      <anchor>a81be85c40f01ff6bc3f05869f959235d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BaseCallMessage *</type>
      <name>getCallMsg</name>
      <anchorfile>classRpcState.html</anchorfile>
      <anchor>a09b77220e4a2e2a95c364a1b69653ac5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cPolymorphic *</type>
      <name>getContext</name>
      <anchorfile>classRpcState.html</anchorfile>
      <anchor>aca8ba88ef477c3012fa534d4cda0fd30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>id</name>
      <anchorfile>classRpcState.html</anchorfile>
      <anchor>ae2280f03e7a177053f89a93b24fe3297</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>retries</name>
      <anchorfile>classRpcState.html</anchorfile>
      <anchor>a9d8de7ffa3ada360063e97c00cf5fa13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TransportType</type>
      <name>transportType</name>
      <anchorfile>classRpcState.html</anchorfile>
      <anchor>a84bbe60e7474627bd5ee0d37a19d76d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RoutingType</type>
      <name>routingType</name>
      <anchorfile>classRpcState.html</anchorfile>
      <anchor>a267a75cf58f42204f3e793c2b7298e95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CompType</type>
      <name>destComp</name>
      <anchorfile>classRpcState.html</anchorfile>
      <anchor>a83c440f3ea8f8412c606722c4e5b9343</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CompType</type>
      <name>srcComp</name>
      <anchorfile>classRpcState.html</anchorfile>
      <anchor>a127b5965baa99a05d0e6821145fd84ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RpcListener *</type>
      <name>listener</name>
      <anchorfile>classRpcState.html</anchorfile>
      <anchor>a06c6fc1f6dc38ac4e370d35ca1e9488d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const TransportAddress *</type>
      <name>dest</name>
      <anchorfile>classRpcState.html</anchorfile>
      <anchor>a694cccf34fd2fbaa575bde65891bd74b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OverlayKey</type>
      <name>destKey</name>
      <anchorfile>classRpcState.html</anchorfile>
      <anchor>a7da91029796444bf8ef490710adeacec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BaseCallMessage *</type>
      <name>callMsg</name>
      <anchorfile>classRpcState.html</anchorfile>
      <anchor>a4323716676784bfd337ea6b0687f3044</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RpcTimeoutMessage *</type>
      <name>timeoutMsg</name>
      <anchorfile>classRpcState.html</anchorfile>
      <anchor>a2709b29880ed2e6e03cf8b42a0db89d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>timeSent</name>
      <anchorfile>classRpcState.html</anchorfile>
      <anchor>a97fd14be15108343e25a4a248efb3a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>rto</name>
      <anchorfile>classRpcState.html</anchorfile>
      <anchor>ade382a69df3a34d8e7ee83eb5ab4d1fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cPolymorphic *</type>
      <name>context</name>
      <anchorfile>classRpcState.html</anchorfile>
      <anchor>a54ba0c872daf45da9c05a6fea7a97f10</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BaseRpc</name>
      <anchorfile>classRpcState.html</anchorfile>
      <anchor>a9cdbab595f545455872b3b9dfb89b32b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RpcTimeoutMessage</name>
    <filename>classRpcTimeoutMessage.html</filename>
    <base>BaseRpcMessage</base>
    <member kind="function">
      <type></type>
      <name>RpcTimeoutMessage</name>
      <anchorfile>classRpcTimeoutMessage.html</anchorfile>
      <anchor>aea0a91532a220d090c8dfe1cad8821da</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RpcTimeoutMessage</name>
      <anchorfile>classRpcTimeoutMessage.html</anchorfile>
      <anchor>a590a48fe9ef41e320b607b33071f919d</anchor>
      <arglist>(const RpcTimeoutMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RpcTimeoutMessage</name>
      <anchorfile>classRpcTimeoutMessage.html</anchorfile>
      <anchor>a65f39725a8bd939351df5bea8860b707</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RpcTimeoutMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classRpcTimeoutMessage.html</anchorfile>
      <anchor>a9fd080b97dceb09be420df1eff584e14</anchor>
      <arglist>(const RpcTimeoutMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RpcTimeoutMessage *</type>
      <name>dup</name>
      <anchorfile>classRpcTimeoutMessage.html</anchorfile>
      <anchor>ac0994339bf60bbaabb0d1379e5adc04a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classRpcTimeoutMessage.html</anchorfile>
      <anchor>abd0334a16cdd8535f9186865c5f7f14a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classRpcTimeoutMessage.html</anchorfile>
      <anchor>a5671b4ef414916feeb7e8099291267fe</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classRpcTimeoutMessage.html</anchorfile>
      <anchor>a69d5a8ecb565161aacb23c200994d754</anchor>
      <arglist>(const RpcTimeoutMessage &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classRpcTimeoutMessage.html</anchorfile>
      <anchor>a5952f1e9c2d18529656aabb38b24fb68</anchor>
      <arglist>(const RpcTimeoutMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RttMeasurement</name>
    <filename>structRttMeasurement.html</filename>
    <member kind="variable">
      <type>TransportAddress</type>
      <name>measuredNode</name>
      <anchorfile>structRttMeasurement.html</anchorfile>
      <anchor>ab77a844579fe6552a042ba0212662dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>rttsPending</name>
      <anchorfile>structRttMeasurement.html</anchorfile>
      <anchor>a26687a4282200a75a980744b596eb602</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>rttsSent</name>
      <anchorfile>structRttMeasurement.html</anchorfile>
      <anchor>a070438c178348a071cfc5bbcf910b25e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>coordsPassed</name>
      <anchorfile>structRttMeasurement.html</anchorfile>
      <anchor>a93b4efebbd261138c188e31902461f73</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RttToNodeCall</name>
    <filename>classRttToNodeCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>RttToNodeCall</name>
      <anchorfile>classRttToNodeCall.html</anchorfile>
      <anchor>a1159e34580cd0374a97cd7ff6d6328e6</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RttToNodeCall</name>
      <anchorfile>classRttToNodeCall.html</anchorfile>
      <anchor>a16fd483bbdc48c3085c7968bd67d244c</anchor>
      <arglist>(const RttToNodeCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RttToNodeCall</name>
      <anchorfile>classRttToNodeCall.html</anchorfile>
      <anchor>a7caa92238ff2243ce091547731d3a832</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RttToNodeCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classRttToNodeCall.html</anchorfile>
      <anchor>ae5267865c0720f6d205f06e1a9981068</anchor>
      <arglist>(const RttToNodeCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RttToNodeCall *</type>
      <name>dup</name>
      <anchorfile>classRttToNodeCall.html</anchorfile>
      <anchor>a7c78700f5d92c250a4a9e1894bc6f0f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classRttToNodeCall.html</anchorfile>
      <anchor>a63bde342cb3d5c6aacf040db72a5172e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classRttToNodeCall.html</anchorfile>
      <anchor>acfe234c4e4fe96d70b681ccc9c4b551b</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransportAddress &amp;</type>
      <name>getNodeToPing</name>
      <anchorfile>classRttToNodeCall.html</anchorfile>
      <anchor>a9f0c27c4d57a5980feb189c32b43df31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TransportAddress &amp;</type>
      <name>getNodeToPing</name>
      <anchorfile>classRttToNodeCall.html</anchorfile>
      <anchor>a0a23aa6d817d15ac6c3a04ddc4c8a030</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNodeToPing</name>
      <anchorfile>classRttToNodeCall.html</anchorfile>
      <anchor>a98b71cecb29409d5721c389ebb3910a8</anchor>
      <arglist>(const TransportAddress &amp;nodeToPing)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classRttToNodeCall.html</anchorfile>
      <anchor>aa831e442879d1ee03f0a66720ebf08c2</anchor>
      <arglist>(const RttToNodeCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress</type>
      <name>nodeToPing_var</name>
      <anchorfile>classRttToNodeCall.html</anchorfile>
      <anchor>a128a32bf30685112deeaba69a05fb9a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classRttToNodeCall.html</anchorfile>
      <anchor>ad431679f1acdf4d519275493278fccdc</anchor>
      <arglist>(const RttToNodeCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RttToNodeResponse</name>
    <filename>classRttToNodeResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>RttToNodeResponse</name>
      <anchorfile>classRttToNodeResponse.html</anchorfile>
      <anchor>a1c7c728b33777d4ade07b518a929174e</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RttToNodeResponse</name>
      <anchorfile>classRttToNodeResponse.html</anchorfile>
      <anchor>a82d21c7f5224583771403b5dbc97a087</anchor>
      <arglist>(const RttToNodeResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RttToNodeResponse</name>
      <anchorfile>classRttToNodeResponse.html</anchorfile>
      <anchor>ab5777446afb542c3a499c65d09ecb647</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RttToNodeResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classRttToNodeResponse.html</anchorfile>
      <anchor>a8b70f7ae399a91d8862bba06ca961d8d</anchor>
      <arglist>(const RttToNodeResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RttToNodeResponse *</type>
      <name>dup</name>
      <anchorfile>classRttToNodeResponse.html</anchorfile>
      <anchor>a72e96d5030b94589a577859111a0e6e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classRttToNodeResponse.html</anchorfile>
      <anchor>ae4870fbd8c7fcfea1b451d80a1d0f698</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classRttToNodeResponse.html</anchorfile>
      <anchor>ab2bbdde06733425fb4cb66a938fe5803</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransportAddress &amp;</type>
      <name>getPingedNode</name>
      <anchorfile>classRttToNodeResponse.html</anchorfile>
      <anchor>acec2dc91d20121126d21f918f8d2db22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TransportAddress &amp;</type>
      <name>getPingedNode</name>
      <anchorfile>classRttToNodeResponse.html</anchorfile>
      <anchor>ae12c4af0d9e1906b3310a7289208bf4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPingedNode</name>
      <anchorfile>classRttToNodeResponse.html</anchorfile>
      <anchor>a5888d957ef909c24d94650ace81c9ce7</anchor>
      <arglist>(const TransportAddress &amp;pingedNode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOwnCoordinatesArraySize</name>
      <anchorfile>classRttToNodeResponse.html</anchorfile>
      <anchor>a68c6f1ede76e28ed787224b0aaf885a7</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getOwnCoordinatesArraySize</name>
      <anchorfile>classRttToNodeResponse.html</anchorfile>
      <anchor>a14757b12f222f6c0addf86c456705572</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getOwnCoordinates</name>
      <anchorfile>classRttToNodeResponse.html</anchorfile>
      <anchor>a868158cd3e4e70b3c487ab8a75271d51</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOwnCoordinates</name>
      <anchorfile>classRttToNodeResponse.html</anchorfile>
      <anchor>adb9947a12ea1b918dd354b441104476b</anchor>
      <arglist>(unsigned int k, double ownCoordinates)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getRttToNode</name>
      <anchorfile>classRttToNodeResponse.html</anchorfile>
      <anchor>a24e80343eeb4fc2a8fb345ceef718736</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRttToNode</name>
      <anchorfile>classRttToNodeResponse.html</anchorfile>
      <anchor>ab36df89a26a6e0d3d634d52b0d815509</anchor>
      <arglist>(simtime_t rttToNode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classRttToNodeResponse.html</anchorfile>
      <anchor>a707dd11e64d6b530faa48c6d373419ac</anchor>
      <arglist>(const RttToNodeResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress</type>
      <name>pingedNode_var</name>
      <anchorfile>classRttToNodeResponse.html</anchorfile>
      <anchor>a868cfabd6b50732e646edd9c5693bab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>ownCoordinates_var</name>
      <anchorfile>classRttToNodeResponse.html</anchorfile>
      <anchor>a9a24be2c65870e2b7dc08e3c610fc40b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>ownCoordinates_arraysize</name>
      <anchorfile>classRttToNodeResponse.html</anchorfile>
      <anchor>a86274ab85781a9a10f65e9343f05f4ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>rttToNode_var</name>
      <anchorfile>classRttToNodeResponse.html</anchorfile>
      <anchor>a8d6456b7d6848e9538030689cb1f5ec3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classRttToNodeResponse.html</anchorfile>
      <anchor>a13b4c04575a1635d9bf025137e38dd03</anchor>
      <arglist>(const RttToNodeResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RUNetworkConfigurator</name>
    <filename>classRUNetworkConfigurator.html</filename>
    <member kind="function">
      <type></type>
      <name>RUNetworkConfigurator</name>
      <anchorfile>classRUNetworkConfigurator.html</anchorfile>
      <anchor>aba016f23487f65741e64750e9c108077</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RUNetworkConfigurator</name>
      <anchorfile>classRUNetworkConfigurator.html</anchorfile>
      <anchor>ac3c755585e66b66c8e14129f506c0102</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classRUNetworkConfigurator.html</anchorfile>
      <anchor>a67a67982af1653c7995725fed3fd24c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classRUNetworkConfigurator.html</anchorfile>
      <anchor>a765afe519b25635a49814d66926a1572</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classRUNetworkConfigurator.html</anchorfile>
      <anchor>a780159652abe9fdefb4e99552b86435f</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createInterASPaths</name>
      <anchorfile>classRUNetworkConfigurator.html</anchorfile>
      <anchor>a0e877c710d69eb6195ee8e2530ec3e1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>disableStubLinks</name>
      <anchorfile>classRUNetworkConfigurator.html</anchorfile>
      <anchor>ab1339f94809321bdb7e215621676f2ea</anchor>
      <arglist>(nodeInfoRL &amp;dst, nodeInfoRL &amp;src)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>enableStubLinks</name>
      <anchorfile>classRUNetworkConfigurator.html</anchorfile>
      <anchor>a738c8ddbc264996f3de6cb36cc630506</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>extractTopology</name>
      <anchorfile>classRUNetworkConfigurator.html</anchorfile>
      <anchor>aa019b1491f74b65a07629969a47ac829</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>assignAddressAndSetDefaultRoutes</name>
      <anchorfile>classRUNetworkConfigurator.html</anchorfile>
      <anchor>a0e5be501ddf4ca493eeb9a3094256632</anchor>
      <arglist>(nodeInfoAS &amp;asInfo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setIntraASRoutes</name>
      <anchorfile>classRUNetworkConfigurator.html</anchorfile>
      <anchor>a576044fccb31eda5ce308cd6cf3ff52e</anchor>
      <arglist>(cTopology &amp;topology, nodeInfoAS &amp;asInfo)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; cTopology * &gt;</type>
      <name>rlTopology</name>
      <anchorfile>classRUNetworkConfigurator.html</anchorfile>
      <anchor>a6166955bf85b1861f9de62c97fa34d77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cTopology</type>
      <name>asTopology</name>
      <anchorfile>classRUNetworkConfigurator.html</anchorfile>
      <anchor>a7bd0bbb4b6fbaa8013fa4b03803d55e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>noAS</name>
      <anchorfile>classRUNetworkConfigurator.html</anchorfile>
      <anchor>acd70c4eb7852927212252256b8b7686e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nextPow</name>
      <anchorfile>classRUNetworkConfigurator.html</anchorfile>
      <anchor>af18fc283527f1912988896bc32d9abf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NODE_INFO_AS_VEC</type>
      <name>asNodeVec</name>
      <anchorfile>classRUNetworkConfigurator.html</anchorfile>
      <anchor>a1319eac1d29e8fa215654fa65ca43e2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>IP_NET_SHIFT</name>
      <anchorfile>classRUNetworkConfigurator.html</anchorfile>
      <anchor>ae41c257b6bd5c01979183935d09bfe6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>NET_MASK</name>
      <anchorfile>classRUNetworkConfigurator.html</anchorfile>
      <anchor>a9bc70b00c73c0475ee7cb4344b12d1c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCAddPacket</name>
    <filename>classSCAddPacket.html</filename>
    <base>SCBasePacket</base>
    <member kind="variable">
      <type>double</type>
      <name>posX</name>
      <anchorfile>classSCAddPacket.html</anchorfile>
      <anchor>a6b389dbd777d41bc97b9bfdda040d78e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>posY</name>
      <anchorfile>classSCAddPacket.html</anchorfile>
      <anchor>a47a1ac5bafa855c2f6d2bd0abf3fc249</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>ip</name>
      <anchorfile>classSCAddPacket.html</anchorfile>
      <anchor>a32a16fabccabf4b869ab89e5c2e49eb0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCAOIPacket</name>
    <filename>classSCAOIPacket.html</filename>
    <base>SCBasePacket</base>
    <member kind="variable">
      <type>double</type>
      <name>AOI</name>
      <anchorfile>classSCAOIPacket.html</anchorfile>
      <anchor>ad4a8bc092596590b868f633f3640b78b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCBasePacket</name>
    <filename>classSCBasePacket.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>packetType</name>
      <anchorfile>classSCBasePacket.html</anchorfile>
      <anchor>ae3bf5cb2ac373b8e3f7ceb63cea3cf43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCChatPacket</name>
    <filename>classSCChatPacket.html</filename>
    <base>SCBasePacket</base>
    <member kind="variable">
      <type>unsigned int</type>
      <name>ip</name>
      <anchorfile>classSCChatPacket.html</anchorfile>
      <anchor>a3b2e39c16bfb1480cb1464322f850925</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>msg</name>
      <anchorfile>classSCChatPacket.html</anchorfile>
      <anchor>a6954a8a21d46a2f9188bd0341b2b0279</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCFrozenPacket</name>
    <filename>classSCFrozenPacket.html</filename>
    <base>SCBasePacket</base>
    <member kind="variable">
      <type>unsigned int</type>
      <name>ip</name>
      <anchorfile>classSCFrozenPacket.html</anchorfile>
      <anchor>aa53ceb2f842c8ca492da5b8de2f0b49b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>source</name>
      <anchorfile>classSCFrozenPacket.html</anchorfile>
      <anchor>aea93e0d7c528b7326dfb1351e1e51898</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>time_sec</name>
      <anchorfile>classSCFrozenPacket.html</anchorfile>
      <anchor>aa48a31e68596600dc1be0225e55a2725</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>time_usec</name>
      <anchorfile>classSCFrozenPacket.html</anchorfile>
      <anchor>aa250efae15a2fa9ff5c6052ff805f2ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCMovePacket</name>
    <filename>classSCMovePacket.html</filename>
    <base>SCBasePacket</base>
    <member kind="variable">
      <type>double</type>
      <name>posX</name>
      <anchorfile>classSCMovePacket.html</anchorfile>
      <anchor>afbdaff77d3e11663191939e534c3e6b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>posY</name>
      <anchorfile>classSCMovePacket.html</anchorfile>
      <anchor>a0b8322dd25ace1dff30daf87797af8d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCParamPacket</name>
    <filename>classSCParamPacket.html</filename>
    <base>SCBasePacket</base>
    <member kind="variable">
      <type>double</type>
      <name>speed</name>
      <anchorfile>classSCParamPacket.html</anchorfile>
      <anchor>a2709ccffd2953def8b513a78d44b78fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dimension</name>
      <anchorfile>classSCParamPacket.html</anchorfile>
      <anchor>ae156180e8536fd8c78815a4a12c61140</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>AOI</name>
      <anchorfile>classSCParamPacket.html</anchorfile>
      <anchor>a63efe35888b55f7f70686f039b137f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>delay</name>
      <anchorfile>classSCParamPacket.html</anchorfile>
      <anchor>a41f7cd6942d3b3a4a4dbc0c0545d7ce3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>startX</name>
      <anchorfile>classSCParamPacket.html</anchorfile>
      <anchor>a34dcc9d97a3f527cc768271e5067d34e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>startY</name>
      <anchorfile>classSCParamPacket.html</anchorfile>
      <anchor>adfb7748ae22f558fbc012d75b3c0d663</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>ip</name>
      <anchorfile>classSCParamPacket.html</anchorfile>
      <anchor>ad78113bca36dd981164729c95b4dc552</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>seed</name>
      <anchorfile>classSCParamPacket.html</anchorfile>
      <anchor>ac4fdc68ca05ed1fd232c0805b5fc6d66</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCRemovePacket</name>
    <filename>classSCRemovePacket.html</filename>
    <base>SCBasePacket</base>
    <member kind="variable">
      <type>unsigned int</type>
      <name>ip</name>
      <anchorfile>classSCRemovePacket.html</anchorfile>
      <anchor>ac3d484dff9a85443a36d9a0a954ee46f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scribe</name>
    <filename>classScribe.html</filename>
    <base>BaseApp</base>
    <member kind="function">
      <type></type>
      <name>Scribe</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>af93f576093380f05171e240387a38d24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Scribe</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>ac54ec0175b9f080aa15cb545f5fa261a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeApp</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>acb519fa75d1b5f83c6f5f9d2864ec460</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMessage</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>acb546ca959dd268286522017b5d4b0e5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleReadyMessage</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>a3bae5cab5c4c0bb2f60829f769f13d1a</anchor>
      <arglist>(CompReadyMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>a874c4fa77fa27d84de72532ee427918b</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>handleRpcCall</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>a4ca0219335485804bb7b1edd76bbcc11</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRpcResponse</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>a381b199c83cc750822ac93133c5d5e23</anchor>
      <arglist>(BaseResponseMessage *msg, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forward</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>ac7093212bbf13d769eefc217ed5f2625</anchor>
      <arglist>(OverlayKey *key, cPacket **msg, NodeHandle *nextHopNode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deliver</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>a93a15732b140e5f4ce723e02fb83893a</anchor>
      <arglist>(OverlayKey &amp;key, cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>a0696c333a0c17c97b8dad1360fc90ee4</anchor>
      <arglist>(const NodeHandle &amp;node, bool joined)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finishApp</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>a007ecbca4eabdb469234d64b6f2f56ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleJoinResponse</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>a434f7553db4a0f8a98632ca3d350a6dd</anchor>
      <arglist>(ScribeJoinResponse *joinResponse)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleJoinCall</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>ae3f4999bca7b2f69aaf38a6ca8d54904</anchor>
      <arglist>(ScribeJoinCall *joinMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handlePublishCall</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>a1a9f1feb588f1d514d949c7c05cb378f</anchor>
      <arglist>(ScribePublishCall *publishCall)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handlePublishResponse</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>ab97aa8f1d8de189fb0cea5326174fd1f</anchor>
      <arglist>(ScribePublishResponse *publishResponse)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleJoinMessage</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>a09618765c5b261ce819cf18ca259135d</anchor>
      <arglist>(ScribeJoinCall *joinMsg, bool amIRoot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleLeaveMessage</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>a9c232db1f3a01e38a332b46a065616e8</anchor>
      <arglist>(ScribeLeaveMessage *leaveMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>subscribeToGroup</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>a97402386c94198d596b5aeb63f9051be</anchor>
      <arglist>(const OverlayKey &amp;groupId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>leaveGroup</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>aa74f5da64546fe7af83a77b126dcb96e</anchor>
      <arglist>(const OverlayKey &amp;group)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>startTimer</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>a98c02498a4dc4e07711a44d85b0c218f</anchor>
      <arglist>(ScribeTimer *timer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addChildToGroup</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>a3c604ead1b8032d308ab08fdf04c0ff9</anchor>
      <arglist>(const NodeHandle &amp;child, ScribeGroup &amp;group)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeChildFromGroup</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>a4e3cc6abe9e3c0ce6ae46b835daf9988</anchor>
      <arglist>(const NodeHandle &amp;child, ScribeGroup &amp;group)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeChildFromGroup</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>a847d778656eb02ebe1d65b6e667f9b5b</anchor>
      <arglist>(ScribeTimer *timer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkGroupEmpty</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>a0f31427608b0f871a42ba99e65a698f2</anchor>
      <arglist>(ScribeGroup &amp;group)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>refreshChildTimer</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>ab7d3e5d54b88e3fd88937fd35e1c2a7f</anchor>
      <arglist>(NodeHandle &amp;child, OverlayKey &amp;groupId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deliverALMDataToGroup</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>a4315fa84af1137d27edaaf801f77d798</anchor>
      <arglist>(ScribeDataMessage *dataMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deliverALMDataToRoot</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>a2581ddfa533c2d99f56c24acbe38f992</anchor>
      <arglist>(ALMMulticastMessage *mcastMsg)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::map&lt; OverlayKey, ScribeGroup &gt;</type>
      <name>GroupList</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>a0ac5867b8c55ca9b6d551a40be14cab8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::multimap&lt; NodeHandle, ScribeTimer * &gt;</type>
      <name>ChildTimeoutList</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>acc99c38af11034ffea0b04b71289c7f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GroupList</type>
      <name>groupList</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>a61f843f850ba4c62962fae26af71348b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ChildTimeoutList</type>
      <name>childTimeoutList</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>a52fbce24148d781c051c87cd58892a4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>childTimeout</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>a0b5d9a0106edf407743961d22b42af6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>parentTimeout</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>a48fccdb07cfed523618216f559b3756e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ScribeTimer *</type>
      <name>subscriptionTimer</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>a5e762e21cb4902f509b5f53f5da8bf0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numJoins</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>ab90f3a57279a1ebda0c4d8121e8509e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numChildTimeout</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>aba94851bce00769ef6cdfb06e017fca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numParentTimeout</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>a0f5e7eb1fd7f35fddc5ba5cc8f8b59a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numForward</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>affdaebbe2ca6bb7a9e3eb88182960d2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>forwardBytes</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>a641212fa4a572ae54587949740ab8d3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numReceived</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>a853d8728022636a788b202a2b1e1e7d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>receivedBytes</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>a37c505fccd0aadeaf302552e8a2af2fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numHeartbeat</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>a03285a1d06823f70b1731de133341e9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>heartbeatBytes</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>acae5ae71ce72591c9ba807facf5e4a3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numSubscriptionRefresh</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>ac7a1946a873e3515d13cc88a71bf0e71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>subscriptionRefreshBytes</name>
      <anchorfile>classScribe.html</anchorfile>
      <anchor>ac6627bf966dbe532a7d6bd2e4309dd9b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScribeDataMessage</name>
    <filename>classScribeDataMessage.html</filename>
    <member kind="function">
      <type></type>
      <name>ScribeDataMessage</name>
      <anchorfile>classScribeDataMessage.html</anchorfile>
      <anchor>a2ab97a9b6ee4987fca55c75ce7e4bb0d</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScribeDataMessage</name>
      <anchorfile>classScribeDataMessage.html</anchorfile>
      <anchor>a3ece2e146ef9a40719e964425e7ca95e</anchor>
      <arglist>(const ScribeDataMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScribeDataMessage</name>
      <anchorfile>classScribeDataMessage.html</anchorfile>
      <anchor>ae8675513d5b787d5a9cf9820a3693b35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ScribeDataMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classScribeDataMessage.html</anchorfile>
      <anchor>af699ae06e2bc5db5a4864f28f1be74de</anchor>
      <arglist>(const ScribeDataMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ScribeDataMessage *</type>
      <name>dup</name>
      <anchorfile>classScribeDataMessage.html</anchorfile>
      <anchor>ae69c248c9e79163e7be9ca2d959955ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classScribeDataMessage.html</anchorfile>
      <anchor>a71e0194b7c7c3dddc631e014f7c8fbc3</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classScribeDataMessage.html</anchorfile>
      <anchor>a74c45564041e81ef810adf1b85b71db0</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getGroupId</name>
      <anchorfile>classScribeDataMessage.html</anchorfile>
      <anchor>a4476f8c814ebaa27a7c0ff3a8f274448</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getGroupId</name>
      <anchorfile>classScribeDataMessage.html</anchorfile>
      <anchor>a6f0db20d62c8f5789c560117c6a3f1ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setGroupId</name>
      <anchorfile>classScribeDataMessage.html</anchorfile>
      <anchor>a56febbc6329864068fefb3d259a87f56</anchor>
      <arglist>(const OverlayKey &amp;groupId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getEmpty</name>
      <anchorfile>classScribeDataMessage.html</anchorfile>
      <anchor>a28b50ce06bc62cfe4be1c75099d05641</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEmpty</name>
      <anchorfile>classScribeDataMessage.html</anchorfile>
      <anchor>ae82129d3087dded3acb36ee8b3820a9a</anchor>
      <arglist>(bool empty)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classScribeDataMessage.html</anchorfile>
      <anchor>a5ccdf25bf811e68bc7f560dcafb21cbe</anchor>
      <arglist>(const ScribeDataMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>groupId_var</name>
      <anchorfile>classScribeDataMessage.html</anchorfile>
      <anchor>a8fd3da151b82c081d98232bd5665eab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>empty_var</name>
      <anchorfile>classScribeDataMessage.html</anchorfile>
      <anchor>acbfabd3158b68931d82ca16360a0d9c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classScribeDataMessage.html</anchorfile>
      <anchor>a544bf6166134cba84995e901b24d39de</anchor>
      <arglist>(const ScribeDataMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScribeGroup</name>
    <filename>classScribeGroup.html</filename>
    <member kind="function">
      <type></type>
      <name>ScribeGroup</name>
      <anchorfile>classScribeGroup.html</anchorfile>
      <anchor>aa0036c76a96d64b2611064d9d0a3465d</anchor>
      <arglist>(OverlayKey id)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScribeGroup</name>
      <anchorfile>classScribeGroup.html</anchorfile>
      <anchor>a5d2d6b20dcef88c94e9efa16492faf23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::set&lt; NodeHandle &gt;::iterator, bool &gt;</type>
      <name>addChild</name>
      <anchorfile>classScribeGroup.html</anchorfile>
      <anchor>a8a65883d7757c5c5bdb136fe2da531db</anchor>
      <arglist>(const NodeHandle &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChild</name>
      <anchorfile>classScribeGroup.html</anchorfile>
      <anchor>a6e806f360bd021aa50e47a2e6f38ab28</anchor>
      <arglist>(const NodeHandle &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; NodeHandle &gt;::iterator</type>
      <name>getChildrenBegin</name>
      <anchorfile>classScribeGroup.html</anchorfile>
      <anchor>a91890bd33ae49f1bddbed5de163ec129</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; NodeHandle &gt;::iterator</type>
      <name>getChildrenEnd</name>
      <anchorfile>classScribeGroup.html</anchorfile>
      <anchor>adce53b5e22255cd61d93204b3556c2e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numChildren</name>
      <anchorfile>classScribeGroup.html</anchorfile>
      <anchor>a92595777c9237f9bcd43ba96b774621b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isForwarder</name>
      <anchorfile>classScribeGroup.html</anchorfile>
      <anchor>a60d023cff707b9d6e3ffc8eb8ea7669f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAmISource</name>
      <anchorfile>classScribeGroup.html</anchorfile>
      <anchor>acb291f85dca34d85cd3d7fbd7ae41944</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAmISource</name>
      <anchorfile>classScribeGroup.html</anchorfile>
      <anchor>ac02e2640a4a7eef0522b3610ac41aaad</anchor>
      <arglist>(bool source)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getSubscription</name>
      <anchorfile>classScribeGroup.html</anchorfile>
      <anchor>a0ac96866366bc55027c6d432e26830c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubscription</name>
      <anchorfile>classScribeGroup.html</anchorfile>
      <anchor>a538da4f5c8c0e8afdd9803f2dc02ed18</anchor>
      <arglist>(bool subscribe)</arglist>
    </member>
    <member kind="function">
      <type>NodeHandle</type>
      <name>getParent</name>
      <anchorfile>classScribeGroup.html</anchorfile>
      <anchor>a2238de914efb5b7a88d826bdfcf064a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParent</name>
      <anchorfile>classScribeGroup.html</anchorfile>
      <anchor>a1717964405507f145111b7266435beb0</anchor>
      <arglist>(NodeHandle &amp;_parent)</arglist>
    </member>
    <member kind="function">
      <type>NodeHandle</type>
      <name>getRendezvousPoint</name>
      <anchorfile>classScribeGroup.html</anchorfile>
      <anchor>ab3ab12c0cf75bad3186d57a84e3792c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRendezvousPoint</name>
      <anchorfile>classScribeGroup.html</anchorfile>
      <anchor>a479d2e097ab712efa6782402fb8e7ad1</anchor>
      <arglist>(const NodeHandle &amp;_rendezvousPoint)</arglist>
    </member>
    <member kind="function">
      <type>OverlayKey</type>
      <name>getGroupId</name>
      <anchorfile>classScribeGroup.html</anchorfile>
      <anchor>abf30b2089e89ac132dff5e7cd7c31fa4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ScribeTimer *</type>
      <name>getParentTimer</name>
      <anchorfile>classScribeGroup.html</anchorfile>
      <anchor>a04476dbe22bfc93ebb25289be4dffa02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParentTimer</name>
      <anchorfile>classScribeGroup.html</anchorfile>
      <anchor>a77e5b8662aeec58c8d2cdeb59f8bc896</anchor>
      <arglist>(ScribeTimer *t)</arglist>
    </member>
    <member kind="function">
      <type>ScribeTimer *</type>
      <name>getHeartbeatTimer</name>
      <anchorfile>classScribeGroup.html</anchorfile>
      <anchor>ae92a2929c194a024412821cc9280a6a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeartbeatTimer</name>
      <anchorfile>classScribeGroup.html</anchorfile>
      <anchor>a813f061b4ee440d726a004ca2c924a01</anchor>
      <arglist>(ScribeTimer *t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classScribeGroup.html</anchorfile>
      <anchor>a43496c80e3cc283ed9722a6363fad115</anchor>
      <arglist>(const OverlayKey &amp;id) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classScribeGroup.html</anchorfile>
      <anchor>a162d6dbab7e8d2e1b044b70d201e0641</anchor>
      <arglist>(const ScribeGroup &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classScribeGroup.html</anchorfile>
      <anchor>a1fef4176a57beae586758822e1325369</anchor>
      <arglist>(const OverlayKey &amp;id) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classScribeGroup.html</anchorfile>
      <anchor>a3739a849b2ac3afed445ac3b9c49ec29</anchor>
      <arglist>(const ScribeGroup &amp;a) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OverlayKey</type>
      <name>groupId</name>
      <anchorfile>classScribeGroup.html</anchorfile>
      <anchor>a776d882703b4908794cf2d242c31df2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeHandle</type>
      <name>rendezvousPoint</name>
      <anchorfile>classScribeGroup.html</anchorfile>
      <anchor>ab73035cdca2da182adbc1863b6ebc493</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeHandle</type>
      <name>parent</name>
      <anchorfile>classScribeGroup.html</anchorfile>
      <anchor>a1f6f15b707907564f270e837e88e1273</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::set&lt; NodeHandle &gt;</type>
      <name>children</name>
      <anchorfile>classScribeGroup.html</anchorfile>
      <anchor>affdda7979e676a963117b9769a0649c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>subscription</name>
      <anchorfile>classScribeGroup.html</anchorfile>
      <anchor>af4883fbda610936c3464e082fc5bd454</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>amISource</name>
      <anchorfile>classScribeGroup.html</anchorfile>
      <anchor>af1dc9ae94566c72282f5668786c6d4da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ScribeTimer *</type>
      <name>parentTimer</name>
      <anchorfile>classScribeGroup.html</anchorfile>
      <anchor>a4233f090723d4a155b9c7f0a43a4d39a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ScribeTimer *</type>
      <name>heartbeatTimer</name>
      <anchorfile>classScribeGroup.html</anchorfile>
      <anchor>aa9d08bd6be6598137110321b809fa874</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScribeJoinCall</name>
    <filename>classScribeJoinCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>ScribeJoinCall</name>
      <anchorfile>classScribeJoinCall.html</anchorfile>
      <anchor>a6aed8586ccd6d84d4edec7d0762909f2</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScribeJoinCall</name>
      <anchorfile>classScribeJoinCall.html</anchorfile>
      <anchor>a0c85fc80a396bb0bb40b8e5a67be6485</anchor>
      <arglist>(const ScribeJoinCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScribeJoinCall</name>
      <anchorfile>classScribeJoinCall.html</anchorfile>
      <anchor>a266137cb4557f614068a08b02d0370b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ScribeJoinCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classScribeJoinCall.html</anchorfile>
      <anchor>accc56cb6a912fd59da772bc0c1613022</anchor>
      <arglist>(const ScribeJoinCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ScribeJoinCall *</type>
      <name>dup</name>
      <anchorfile>classScribeJoinCall.html</anchorfile>
      <anchor>a35ff309387a254fdf6f8aa7248e8eca1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classScribeJoinCall.html</anchorfile>
      <anchor>ad4e5d642d1a5c4e0e6950b8f768d1251</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classScribeJoinCall.html</anchorfile>
      <anchor>aa09cc88486792262b79929a2f0932b70</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getGroupId</name>
      <anchorfile>classScribeJoinCall.html</anchorfile>
      <anchor>aa83d04e89928c519627679b8a3dda128</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getGroupId</name>
      <anchorfile>classScribeJoinCall.html</anchorfile>
      <anchor>a5c7fa60a77edf4e14133ab40d2e5115e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setGroupId</name>
      <anchorfile>classScribeJoinCall.html</anchorfile>
      <anchor>af2cc3c15979329066c08d5ef38753e7d</anchor>
      <arglist>(const OverlayKey &amp;groupId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classScribeJoinCall.html</anchorfile>
      <anchor>a9b56d313856204a6176875505c4208d8</anchor>
      <arglist>(const ScribeJoinCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>groupId_var</name>
      <anchorfile>classScribeJoinCall.html</anchorfile>
      <anchor>a6727219ea34e5c9514fe6775bd819aed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classScribeJoinCall.html</anchorfile>
      <anchor>af62471f48426a287ac5a2d90371ac5e3</anchor>
      <arglist>(const ScribeJoinCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScribeJoinResponse</name>
    <filename>classScribeJoinResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>ScribeJoinResponse</name>
      <anchorfile>classScribeJoinResponse.html</anchorfile>
      <anchor>a333c80b178a83162f9941a243407f74a</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScribeJoinResponse</name>
      <anchorfile>classScribeJoinResponse.html</anchorfile>
      <anchor>a7b2169a9fd7ef9ec9bcdf05dda084bfb</anchor>
      <arglist>(const ScribeJoinResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScribeJoinResponse</name>
      <anchorfile>classScribeJoinResponse.html</anchorfile>
      <anchor>a6e5b43cee0c796f822ec4a75a2aac528</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ScribeJoinResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classScribeJoinResponse.html</anchorfile>
      <anchor>a5fa513cf425cb4fe5433d175a38d68f6</anchor>
      <arglist>(const ScribeJoinResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ScribeJoinResponse *</type>
      <name>dup</name>
      <anchorfile>classScribeJoinResponse.html</anchorfile>
      <anchor>a58fe4902945346c04dffb3a2b7242e97</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classScribeJoinResponse.html</anchorfile>
      <anchor>ac9bf8e00737d57af64a0c3c070e90fe6</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classScribeJoinResponse.html</anchorfile>
      <anchor>aac4c43fa53a0d337269c992451340152</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getGroupId</name>
      <anchorfile>classScribeJoinResponse.html</anchorfile>
      <anchor>acda9a1b862bb8672e080d6bfaac4ae66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getGroupId</name>
      <anchorfile>classScribeJoinResponse.html</anchorfile>
      <anchor>a0211b441f6918b9dc3ca735657f4df5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setGroupId</name>
      <anchorfile>classScribeJoinResponse.html</anchorfile>
      <anchor>acfd63ffd346e653145d51334839ecfa4</anchor>
      <arglist>(const OverlayKey &amp;groupId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classScribeJoinResponse.html</anchorfile>
      <anchor>a6d63db14cef1a11c2c4f2b0975250879</anchor>
      <arglist>(const ScribeJoinResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>groupId_var</name>
      <anchorfile>classScribeJoinResponse.html</anchorfile>
      <anchor>a1cf26d62fdff3c3c7d4fcb242b13c43b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classScribeJoinResponse.html</anchorfile>
      <anchor>ac36d0245592db847737b171c56649790</anchor>
      <arglist>(const ScribeJoinResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScribeLeaveMessage</name>
    <filename>classScribeLeaveMessage.html</filename>
    <member kind="function">
      <type></type>
      <name>ScribeLeaveMessage</name>
      <anchorfile>classScribeLeaveMessage.html</anchorfile>
      <anchor>abdb558bea605a8338b5ae8f5fc7b4343</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScribeLeaveMessage</name>
      <anchorfile>classScribeLeaveMessage.html</anchorfile>
      <anchor>a8f95c5f887b82c69d929ff7169fc5ca2</anchor>
      <arglist>(const ScribeLeaveMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScribeLeaveMessage</name>
      <anchorfile>classScribeLeaveMessage.html</anchorfile>
      <anchor>ab04d063abb4aa840b94b97f4b920937b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ScribeLeaveMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classScribeLeaveMessage.html</anchorfile>
      <anchor>a7623ad303205d693fa24092c51874d17</anchor>
      <arglist>(const ScribeLeaveMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ScribeLeaveMessage *</type>
      <name>dup</name>
      <anchorfile>classScribeLeaveMessage.html</anchorfile>
      <anchor>a91beb44402a7b132259ee0cb1092f304</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classScribeLeaveMessage.html</anchorfile>
      <anchor>a27fb4113a2084daf86a9a1479abd7e6b</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classScribeLeaveMessage.html</anchorfile>
      <anchor>a82a1cfa4a8b5f3f2d8005010c90a289a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getSrc</name>
      <anchorfile>classScribeLeaveMessage.html</anchorfile>
      <anchor>acfe44d266704e5559090ca19b1b054ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getSrc</name>
      <anchorfile>classScribeLeaveMessage.html</anchorfile>
      <anchor>a0a37dcde2798cf1ff2e0c67dac1c71cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrc</name>
      <anchorfile>classScribeLeaveMessage.html</anchorfile>
      <anchor>a372f3bd30fc6fab7a8e908b5fc424946</anchor>
      <arglist>(const NodeHandle &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getGroupId</name>
      <anchorfile>classScribeLeaveMessage.html</anchorfile>
      <anchor>a7392c7292c621fa6c2f3560794d0c881</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getGroupId</name>
      <anchorfile>classScribeLeaveMessage.html</anchorfile>
      <anchor>a48c0d042a8c62ceb10ba8d69c7e9324f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setGroupId</name>
      <anchorfile>classScribeLeaveMessage.html</anchorfile>
      <anchor>aae2e77b526226c0c89d253eb23443885</anchor>
      <arglist>(const OverlayKey &amp;groupId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classScribeLeaveMessage.html</anchorfile>
      <anchor>a4a7eedff6e84f31c765615d4d901c1d7</anchor>
      <arglist>(const ScribeLeaveMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>src_var</name>
      <anchorfile>classScribeLeaveMessage.html</anchorfile>
      <anchor>abd5d7f0e2621e7f00b31727bc43dc8bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>groupId_var</name>
      <anchorfile>classScribeLeaveMessage.html</anchorfile>
      <anchor>a786d95ed6417cf8925c9a4b5d67601c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classScribeLeaveMessage.html</anchorfile>
      <anchor>a24b478754cec2351a7decd7943abbf29</anchor>
      <arglist>(const ScribeLeaveMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScribePublishCall</name>
    <filename>classScribePublishCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>ScribePublishCall</name>
      <anchorfile>classScribePublishCall.html</anchorfile>
      <anchor>abc37375038b0fa7865e67f5afc7da20e</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScribePublishCall</name>
      <anchorfile>classScribePublishCall.html</anchorfile>
      <anchor>aaacaf8622e89a6c95e7439d0037734e0</anchor>
      <arglist>(const ScribePublishCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScribePublishCall</name>
      <anchorfile>classScribePublishCall.html</anchorfile>
      <anchor>a7b4f8bbad3e5de48860743d922331ce7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ScribePublishCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classScribePublishCall.html</anchorfile>
      <anchor>a4b375087252a01474b1882745d9e06f9</anchor>
      <arglist>(const ScribePublishCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ScribePublishCall *</type>
      <name>dup</name>
      <anchorfile>classScribePublishCall.html</anchorfile>
      <anchor>aaa1e09ffa86ae4b8e2de051ba627c4f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classScribePublishCall.html</anchorfile>
      <anchor>aab7f3925cc4c6b78a3d2ab1c7c3f18e9</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classScribePublishCall.html</anchorfile>
      <anchor>af459a91d85b070169904c8e05efad741</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getGroupId</name>
      <anchorfile>classScribePublishCall.html</anchorfile>
      <anchor>a6c6335f38d0d391798e2e4deda89170b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getGroupId</name>
      <anchorfile>classScribePublishCall.html</anchorfile>
      <anchor>a19c8e464935e4ddab7a829916bcb4891</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setGroupId</name>
      <anchorfile>classScribePublishCall.html</anchorfile>
      <anchor>a71394ae6c1904523d6245ce417072254</anchor>
      <arglist>(const OverlayKey &amp;groupId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classScribePublishCall.html</anchorfile>
      <anchor>a69b787d36a2129b55aae6ead40881b9d</anchor>
      <arglist>(const ScribePublishCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>groupId_var</name>
      <anchorfile>classScribePublishCall.html</anchorfile>
      <anchor>ace4fb596ce2ac24d516b38dfc61b0002</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classScribePublishCall.html</anchorfile>
      <anchor>ab2cd8dffdc379e882338fc71273cb20e</anchor>
      <arglist>(const ScribePublishCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScribePublishResponse</name>
    <filename>classScribePublishResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>ScribePublishResponse</name>
      <anchorfile>classScribePublishResponse.html</anchorfile>
      <anchor>aebad73155b8c685549237dd088cdf542</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScribePublishResponse</name>
      <anchorfile>classScribePublishResponse.html</anchorfile>
      <anchor>a309398ab8f732137eb009223b3eb2005</anchor>
      <arglist>(const ScribePublishResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScribePublishResponse</name>
      <anchorfile>classScribePublishResponse.html</anchorfile>
      <anchor>a31d92a87e9e792f5a58efa192dc901cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ScribePublishResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classScribePublishResponse.html</anchorfile>
      <anchor>af89bf1de2bb27225b24d440d3291c310</anchor>
      <arglist>(const ScribePublishResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ScribePublishResponse *</type>
      <name>dup</name>
      <anchorfile>classScribePublishResponse.html</anchorfile>
      <anchor>aa92e48bfba37450f514516fe3be54ebb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classScribePublishResponse.html</anchorfile>
      <anchor>a740fe2daf47c7ff08c9d67b0886bbb83</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classScribePublishResponse.html</anchorfile>
      <anchor>aff7206276fc741146eea1de4b2219343</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getGroupId</name>
      <anchorfile>classScribePublishResponse.html</anchorfile>
      <anchor>a496cb8a740e31fbacb287b146caa27ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getGroupId</name>
      <anchorfile>classScribePublishResponse.html</anchorfile>
      <anchor>a309d6d6554692710ce89241cbb183a8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setGroupId</name>
      <anchorfile>classScribePublishResponse.html</anchorfile>
      <anchor>a5bceee863447cc88f95af43b40cbba74</anchor>
      <arglist>(const OverlayKey &amp;groupId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getWrongRoot</name>
      <anchorfile>classScribePublishResponse.html</anchorfile>
      <anchor>a4eacf7db9ab2f1ef34bbc81e68ccdd5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWrongRoot</name>
      <anchorfile>classScribePublishResponse.html</anchorfile>
      <anchor>afea5394da65143761862ccd128efefe0</anchor>
      <arglist>(bool wrongRoot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classScribePublishResponse.html</anchorfile>
      <anchor>a6f1125e872ac553c85d0b74e148aa5a5</anchor>
      <arglist>(const ScribePublishResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>groupId_var</name>
      <anchorfile>classScribePublishResponse.html</anchorfile>
      <anchor>ade8cadaea16c9c8dc01cdb07b197ade0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>wrongRoot_var</name>
      <anchorfile>classScribePublishResponse.html</anchorfile>
      <anchor>a822b220b6c206ae60addd5f0cc9782f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classScribePublishResponse.html</anchorfile>
      <anchor>aab9d005ac122888d752d41e5fdae1012</anchor>
      <arglist>(const ScribePublishResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScribeSubscriptionRefreshMessage</name>
    <filename>classScribeSubscriptionRefreshMessage.html</filename>
    <member kind="function">
      <type></type>
      <name>ScribeSubscriptionRefreshMessage</name>
      <anchorfile>classScribeSubscriptionRefreshMessage.html</anchorfile>
      <anchor>a6d3a0616e515988eadd4c55a8cc63c10</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScribeSubscriptionRefreshMessage</name>
      <anchorfile>classScribeSubscriptionRefreshMessage.html</anchorfile>
      <anchor>a764f792cbe3e0869c228f3130f1ea3b1</anchor>
      <arglist>(const ScribeSubscriptionRefreshMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScribeSubscriptionRefreshMessage</name>
      <anchorfile>classScribeSubscriptionRefreshMessage.html</anchorfile>
      <anchor>ad66dd32914462172c3fbe163c4a10184</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ScribeSubscriptionRefreshMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classScribeSubscriptionRefreshMessage.html</anchorfile>
      <anchor>ada30acca1b09a57b2fbccfefc70162f4</anchor>
      <arglist>(const ScribeSubscriptionRefreshMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ScribeSubscriptionRefreshMessage *</type>
      <name>dup</name>
      <anchorfile>classScribeSubscriptionRefreshMessage.html</anchorfile>
      <anchor>abcc3c37ef257d668c56a2d478cbe2d2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classScribeSubscriptionRefreshMessage.html</anchorfile>
      <anchor>a581bf886d9a5df761d2ab3a1fd35e971</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classScribeSubscriptionRefreshMessage.html</anchorfile>
      <anchor>a5b6e85b69b4d9b03aea7a02f0fe882cd</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getSrc</name>
      <anchorfile>classScribeSubscriptionRefreshMessage.html</anchorfile>
      <anchor>a9a408b9f8e778c51cd11c620fc1c2d67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getSrc</name>
      <anchorfile>classScribeSubscriptionRefreshMessage.html</anchorfile>
      <anchor>a3c5c0dc4255f8d2478b13325e22c03cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrc</name>
      <anchorfile>classScribeSubscriptionRefreshMessage.html</anchorfile>
      <anchor>aff947d69f711d733e784db482d9384ef</anchor>
      <arglist>(const NodeHandle &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getGroupId</name>
      <anchorfile>classScribeSubscriptionRefreshMessage.html</anchorfile>
      <anchor>aaed230b37c60c20123b43f1b3df33235</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getGroupId</name>
      <anchorfile>classScribeSubscriptionRefreshMessage.html</anchorfile>
      <anchor>aac61bf96bab93bd88ab003e8912e8bee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setGroupId</name>
      <anchorfile>classScribeSubscriptionRefreshMessage.html</anchorfile>
      <anchor>accb8df96ebc5e149a70a7a5b4fc8039a</anchor>
      <arglist>(const OverlayKey &amp;groupId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classScribeSubscriptionRefreshMessage.html</anchorfile>
      <anchor>a3f0b86959f416baf137b12556ea5fd06</anchor>
      <arglist>(const ScribeSubscriptionRefreshMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>src_var</name>
      <anchorfile>classScribeSubscriptionRefreshMessage.html</anchorfile>
      <anchor>a21037d26c9ee46ead1c587834c9d5cba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>groupId_var</name>
      <anchorfile>classScribeSubscriptionRefreshMessage.html</anchorfile>
      <anchor>ac774e109e0501795227e852ebd2b03c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classScribeSubscriptionRefreshMessage.html</anchorfile>
      <anchor>a5f59352453130c3d2e3a0c32873273b3</anchor>
      <arglist>(const ScribeSubscriptionRefreshMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScribeTimer</name>
    <filename>classScribeTimer.html</filename>
    <member kind="function">
      <type></type>
      <name>ScribeTimer</name>
      <anchorfile>classScribeTimer.html</anchorfile>
      <anchor>acce7022c7aa957cb15651160beba29e9</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScribeTimer</name>
      <anchorfile>classScribeTimer.html</anchorfile>
      <anchor>aac614f04e17e9c34b599eefed4576525</anchor>
      <arglist>(const ScribeTimer &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScribeTimer</name>
      <anchorfile>classScribeTimer.html</anchorfile>
      <anchor>afcecde6642b0e92b052d30707fa17c9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ScribeTimer &amp;</type>
      <name>operator=</name>
      <anchorfile>classScribeTimer.html</anchorfile>
      <anchor>ab38472b3167a1cdbd0756fd33dcc961d</anchor>
      <arglist>(const ScribeTimer &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ScribeTimer *</type>
      <name>dup</name>
      <anchorfile>classScribeTimer.html</anchorfile>
      <anchor>ae3ccbd0567970b442c90873fe8154347</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classScribeTimer.html</anchorfile>
      <anchor>a01142909cb1984c0e71bf53df25bb77f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classScribeTimer.html</anchorfile>
      <anchor>afd1938b5ab41f86c612ce29e32b6b3b0</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTimerType</name>
      <anchorfile>classScribeTimer.html</anchorfile>
      <anchor>acf4f5d5f48103ce67f882ae37fea3cb6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimerType</name>
      <anchorfile>classScribeTimer.html</anchorfile>
      <anchor>a63b7a89ca3aed5eaf7d93a8b32c9f54b</anchor>
      <arglist>(int timerType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getChild</name>
      <anchorfile>classScribeTimer.html</anchorfile>
      <anchor>ac9ef4b88d509ceef5e2ac6f74eef004e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getChild</name>
      <anchorfile>classScribeTimer.html</anchorfile>
      <anchor>a2b8382a0271e43971ef11bd9c38a172e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChild</name>
      <anchorfile>classScribeTimer.html</anchorfile>
      <anchor>a5714d1cfea82d2ca096d5cc4c9322abb</anchor>
      <arglist>(const NodeHandle &amp;child)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getGroup</name>
      <anchorfile>classScribeTimer.html</anchorfile>
      <anchor>ac959953fd841d859b3321040be8194cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getGroup</name>
      <anchorfile>classScribeTimer.html</anchorfile>
      <anchor>a60d8d163a0e468c3bfb43d8064e0c4f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setGroup</name>
      <anchorfile>classScribeTimer.html</anchorfile>
      <anchor>ac5671ca797c2cec50a540590df12f22e</anchor>
      <arglist>(const OverlayKey &amp;group)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classScribeTimer.html</anchorfile>
      <anchor>a918f25ab2982c752fc31b23bbfe79112</anchor>
      <arglist>(const ScribeTimer &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>timerType_var</name>
      <anchorfile>classScribeTimer.html</anchorfile>
      <anchor>a4ce9e121803bb7d94b7f4ba3dae69e49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>child_var</name>
      <anchorfile>classScribeTimer.html</anchorfile>
      <anchor>ad4e2b257c9ce20076fbd58079f7def96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>group_var</name>
      <anchorfile>classScribeTimer.html</anchorfile>
      <anchor>a2c86c49afac89173cf7b1fc6fd5b6fe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classScribeTimer.html</anchorfile>
      <anchor>a5e7795f31afdf59c1a25482f6d44cdf1</anchor>
      <arglist>(const ScribeTimer &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCSnowPacket</name>
    <filename>classSCSnowPacket.html</filename>
    <base>SCBasePacket</base>
    <member kind="variable">
      <type>unsigned int</type>
      <name>ip</name>
      <anchorfile>classSCSnowPacket.html</anchorfile>
      <anchor>a31e34bb876ece9b4be201c7bd4e6ec5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>startX</name>
      <anchorfile>classSCSnowPacket.html</anchorfile>
      <anchor>a0c820ff2b53bf239d4167dbbdbdb730f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>startY</name>
      <anchorfile>classSCSnowPacket.html</anchorfile>
      <anchor>ab6f176a3185dbea22115e2f933d2c376</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>endX</name>
      <anchorfile>classSCSnowPacket.html</anchorfile>
      <anchor>ac1df9cc9b07693e88f91bb5b138aaadc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>endY</name>
      <anchorfile>classSCSnowPacket.html</anchorfile>
      <anchor>a1bd67b71d5df64ce63e8d06d99722131</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>time_sec</name>
      <anchorfile>classSCSnowPacket.html</anchorfile>
      <anchor>afa056aefcd144b3f91072b24c80c23db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>time_usec</name>
      <anchorfile>classSCSnowPacket.html</anchorfile>
      <anchor>af02682679e7b81896517f24c56edf824</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SCSnowTimer</name>
    <filename>classSCSnowTimer.html</filename>
    <member kind="function">
      <type></type>
      <name>SCSnowTimer</name>
      <anchorfile>classSCSnowTimer.html</anchorfile>
      <anchor>a9e073e3140a8eaeb934826cd3fba5f8c</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCSnowTimer</name>
      <anchorfile>classSCSnowTimer.html</anchorfile>
      <anchor>aff64906d5411d6d0ee243224622ce49a</anchor>
      <arglist>(const SCSnowTimer &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SCSnowTimer</name>
      <anchorfile>classSCSnowTimer.html</anchorfile>
      <anchor>aee1b0143a3489372967404a87e9277cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCSnowTimer &amp;</type>
      <name>operator=</name>
      <anchorfile>classSCSnowTimer.html</anchorfile>
      <anchor>a4fdbd1e6e23a59471b2ab33f3a764cf6</anchor>
      <arglist>(const SCSnowTimer &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCSnowTimer *</type>
      <name>dup</name>
      <anchorfile>classSCSnowTimer.html</anchorfile>
      <anchor>ac7b896f17a7a542b5eeffc3442904d91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classSCSnowTimer.html</anchorfile>
      <anchor>a70c14389e3462fbb1552350c4ee30013</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classSCSnowTimer.html</anchorfile>
      <anchor>a41d115da438e646c8780292ba7a77e66</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector2D &amp;</type>
      <name>getPosition</name>
      <anchorfile>classSCSnowTimer.html</anchorfile>
      <anchor>a4a7b43c6c8fff960bc78c61a8f713cde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Vector2D &amp;</type>
      <name>getPosition</name>
      <anchorfile>classSCSnowTimer.html</anchorfile>
      <anchor>a018a1f91df2481f7b6a6ecfc2c559a00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPosition</name>
      <anchorfile>classSCSnowTimer.html</anchorfile>
      <anchor>a8b150f3ff95b3b4530a39dd75bd9127c</anchor>
      <arglist>(const Vector2D &amp;position)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getIp</name>
      <anchorfile>classSCSnowTimer.html</anchorfile>
      <anchor>a4fa16efb5314a02fab17084cd5de4dc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIp</name>
      <anchorfile>classSCSnowTimer.html</anchorfile>
      <anchor>a693f49711dd7e38266b4ca1a0317c743</anchor>
      <arglist>(unsigned int ip)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSCSnowTimer.html</anchorfile>
      <anchor>a865ed1a63ac128e466c30ae0f3460b1f</anchor>
      <arglist>(const SCSnowTimer &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D</type>
      <name>position_var</name>
      <anchorfile>classSCSnowTimer.html</anchorfile>
      <anchor>aa113748b7616b437467e6d864ebb5691</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>ip_var</name>
      <anchorfile>classSCSnowTimer.html</anchorfile>
      <anchor>a438183f0ade214211ea6e2241fdb83b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classSCSnowTimer.html</anchorfile>
      <anchor>aaa974598f834847c4d9c80706a1427bd</anchor>
      <arglist>(const SCSnowTimer &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SearchMessage</name>
    <filename>classSearchMessage.html</filename>
    <base>GiaIDMessage</base>
    <member kind="function">
      <type></type>
      <name>SearchMessage</name>
      <anchorfile>classSearchMessage.html</anchorfile>
      <anchor>a269bc1bbc5bdfd21fce4e2b1ce53c192</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SearchMessage</name>
      <anchorfile>classSearchMessage.html</anchorfile>
      <anchor>a81183d1818c332ccb7bf3438f581f87a</anchor>
      <arglist>(const SearchMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SearchMessage</name>
      <anchorfile>classSearchMessage.html</anchorfile>
      <anchor>a93197d17400542e74c62efc2d485f81f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SearchMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classSearchMessage.html</anchorfile>
      <anchor>a319041191ee8b46e35bd52d89113742c</anchor>
      <arglist>(const SearchMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SearchMessage *</type>
      <name>dup</name>
      <anchorfile>classSearchMessage.html</anchorfile>
      <anchor>aafccadd7b060726b8e37b9396f61c295</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classSearchMessage.html</anchorfile>
      <anchor>a107d3409e59037bf34c5cb51cef5c580</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classSearchMessage.html</anchorfile>
      <anchor>aeb48f43113de68f457855901a10fa12a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getSearchKey</name>
      <anchorfile>classSearchMessage.html</anchorfile>
      <anchor>a17a70fade8575b4129835dfba1c01242</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getSearchKey</name>
      <anchorfile>classSearchMessage.html</anchorfile>
      <anchor>a3ee3c5c29bc1f960e82e0379e4229f77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSearchKey</name>
      <anchorfile>classSearchMessage.html</anchorfile>
      <anchor>a7bad84e356c01961c23ed750aedbf5b6</anchor>
      <arglist>(const OverlayKey &amp;searchKey)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getMaxResponses</name>
      <anchorfile>classSearchMessage.html</anchorfile>
      <anchor>a106eb6b464f2dce6b448d7fba285d842</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMaxResponses</name>
      <anchorfile>classSearchMessage.html</anchorfile>
      <anchor>a464429e205cf9145300e3624089d6c8b</anchor>
      <arglist>(int maxResponses)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReversePathArraySize</name>
      <anchorfile>classSearchMessage.html</anchorfile>
      <anchor>a939efa14afde14ebdf762a421315f28f</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getReversePathArraySize</name>
      <anchorfile>classSearchMessage.html</anchorfile>
      <anchor>a7d4c535fb06edb83fe63d90aee706b98</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getReversePath</name>
      <anchorfile>classSearchMessage.html</anchorfile>
      <anchor>af001e73da45c3d07ee54bb3fc16765fd</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getReversePath</name>
      <anchorfile>classSearchMessage.html</anchorfile>
      <anchor>a169afea7f1f8b9536a577fa13f28c712</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReversePath</name>
      <anchorfile>classSearchMessage.html</anchorfile>
      <anchor>a171787be15154db11ed1ac73ba392dcf</anchor>
      <arglist>(unsigned int k, const OverlayKey &amp;reversePath)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFoundNodeArraySize</name>
      <anchorfile>classSearchMessage.html</anchorfile>
      <anchor>a3d762c634b62d307d749f16c1888f884</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getFoundNodeArraySize</name>
      <anchorfile>classSearchMessage.html</anchorfile>
      <anchor>aa571d1ade79e5532d5f75f82466648b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getFoundNode</name>
      <anchorfile>classSearchMessage.html</anchorfile>
      <anchor>a313da8f2fa0eb39df7c69693114ede0f</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getFoundNode</name>
      <anchorfile>classSearchMessage.html</anchorfile>
      <anchor>a01f9c6119e3c80a6798b9a32bf4c349b</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFoundNode</name>
      <anchorfile>classSearchMessage.html</anchorfile>
      <anchor>a0ec2c4862c11b48a9b82155b447dba55</anchor>
      <arglist>(unsigned int k, const OverlayKey &amp;foundNode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSearchMessage.html</anchorfile>
      <anchor>a60908929714dc996b4e7045040945564</anchor>
      <arglist>(const SearchMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>searchKey_var</name>
      <anchorfile>classSearchMessage.html</anchorfile>
      <anchor>a4a05343d3347e9dbe458adee3575ca97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>maxResponses_var</name>
      <anchorfile>classSearchMessage.html</anchorfile>
      <anchor>a49e8a9fec809a671226cd56412b03307</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey *</type>
      <name>reversePath_var</name>
      <anchorfile>classSearchMessage.html</anchorfile>
      <anchor>ae2e21de95bb42d13a9b5f470624c9d7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>reversePath_arraysize</name>
      <anchorfile>classSearchMessage.html</anchorfile>
      <anchor>a573b1754587c4cfc609d82e812e69220</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey *</type>
      <name>foundNode_var</name>
      <anchorfile>classSearchMessage.html</anchorfile>
      <anchor>aae830e706473e1fd3d42e349b937319f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>foundNode_arraysize</name>
      <anchorfile>classSearchMessage.html</anchorfile>
      <anchor>afc8c0f6d64af0931a51e1094957f8fb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classSearchMessage.html</anchorfile>
      <anchor>af1a496f834335e4d45a885016f6a4e04</anchor>
      <arglist>(const SearchMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SearchMsgBookkeeping</name>
    <filename>classSearchMsgBookkeeping.html</filename>
    <class kind="struct">SearchMsgBookkeeping::SearchMessageItem</class>
    <member kind="typedef">
      <type>std::map&lt; OverlayKey, SearchMessageItem &gt;</type>
      <name>SearchBookkeepingList</name>
      <anchorfile>classSearchMsgBookkeeping.html</anchorfile>
      <anchor>afa7524fd3448cdf75532c57f3e05bd7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; OverlayKey, SearchMessageItem &gt;::iterator</type>
      <name>SearchBookkeepingListIterator</name>
      <anchorfile>classSearchMsgBookkeeping.html</anchorfile>
      <anchor>a56aaeac6bfb6f0ad4ad94c3639c485f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; OverlayKey, SearchMessageItem &gt;::const_iterator</type>
      <name>SearchBookkeepingListConstIterator</name>
      <anchorfile>classSearchMsgBookkeeping.html</anchorfile>
      <anchor>a12dcfdec0e33f7ba1c36dd05f273e677</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SearchMsgBookkeeping</name>
      <anchorfile>classSearchMsgBookkeeping.html</anchorfile>
      <anchor>aa2acec21dc9f612c5816147d8f0e3f5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getSize</name>
      <anchorfile>classSearchMsgBookkeeping.html</anchorfile>
      <anchor>a995ae0bb556d3119a44aa1f98d7a41ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMessage</name>
      <anchorfile>classSearchMsgBookkeeping.html</anchorfile>
      <anchor>acbf4f716346c769de6c873f3f2c22b76</anchor>
      <arglist>(const OverlayKey &amp;searchKey)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeMessage</name>
      <anchorfile>classSearchMsgBookkeeping.html</anchorfile>
      <anchor>a799903ee4145d69f4abff5b12d42d585</anchor>
      <arglist>(const OverlayKey &amp;searchKey)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classSearchMsgBookkeeping.html</anchorfile>
      <anchor>a219d034f498b60d4239d6c12a5b8648b</anchor>
      <arglist>(const OverlayKey &amp;searchKey) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateItem</name>
      <anchorfile>classSearchMsgBookkeeping.html</anchorfile>
      <anchor>a093876a9d25e0ebf5198f14b8b6c30e8</anchor>
      <arglist>(const OverlayKey &amp;searchKey, uint32_t hopCount)</arglist>
    </member>
    <member kind="function">
      <type>GiaSearchStats</type>
      <name>getStatisticalData</name>
      <anchorfile>classSearchMsgBookkeeping.html</anchorfile>
      <anchor>a403f96d3c12039a462cbeb8701fdc8e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SearchBookkeepingList</type>
      <name>messages</name>
      <anchorfile>classSearchMsgBookkeeping.html</anchorfile>
      <anchor>a17d7386b6865b4f302434bf86c7cbd04</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SearchMsgBookkeeping::SearchMessageItem</name>
    <filename>structSearchMsgBookkeeping_1_1SearchMessageItem.html</filename>
    <member kind="variable">
      <type>OverlayKey</type>
      <name>searchKey</name>
      <anchorfile>structSearchMsgBookkeeping_1_1SearchMessageItem.html</anchorfile>
      <anchor>a5c9e7df0f2c20d3edb98103bea65f99b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>creationTime</name>
      <anchorfile>structSearchMsgBookkeeping_1_1SearchMessageItem.html</anchorfile>
      <anchor>ac0f165f091f9deb907e6123f2ad23ae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>minDelay</name>
      <anchorfile>structSearchMsgBookkeeping_1_1SearchMessageItem.html</anchorfile>
      <anchor>a464a7f8bef9d1730754562e971075e24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>maxDelay</name>
      <anchorfile>structSearchMsgBookkeeping_1_1SearchMessageItem.html</anchorfile>
      <anchor>a7fc1b6463f640afb518d5692e93c42ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>minHopCount</name>
      <anchorfile>structSearchMsgBookkeeping_1_1SearchMessageItem.html</anchorfile>
      <anchor>ad8e18e79bbd45311efe2a5ced067413c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>maxHopCount</name>
      <anchorfile>structSearchMsgBookkeeping_1_1SearchMessageItem.html</anchorfile>
      <anchor>ac1ddac12cf88115afcd930327e346490</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>responseCount</name>
      <anchorfile>structSearchMsgBookkeeping_1_1SearchMessageItem.html</anchorfile>
      <anchor>a09ffcef631bbd3abdd8ac2e47f9ebe55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SearchResponseMessage</name>
    <filename>classSearchResponseMessage.html</filename>
    <base>GiaIDMessage</base>
    <member kind="function">
      <type></type>
      <name>SearchResponseMessage</name>
      <anchorfile>classSearchResponseMessage.html</anchorfile>
      <anchor>a78ddbdfbe28015c8a5764637f6287c02</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SearchResponseMessage</name>
      <anchorfile>classSearchResponseMessage.html</anchorfile>
      <anchor>af427bfd8e2e709577be8e59d88360a79</anchor>
      <arglist>(const SearchResponseMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SearchResponseMessage</name>
      <anchorfile>classSearchResponseMessage.html</anchorfile>
      <anchor>adcb5d8a0f92f82f226e433426faeaf74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SearchResponseMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classSearchResponseMessage.html</anchorfile>
      <anchor>abcf0516be4e3d17a25bcd348f96958ea</anchor>
      <arglist>(const SearchResponseMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SearchResponseMessage *</type>
      <name>dup</name>
      <anchorfile>classSearchResponseMessage.html</anchorfile>
      <anchor>a354c6f0ecf9a1041d3d4be6170acab66</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classSearchResponseMessage.html</anchorfile>
      <anchor>ad0a659d56946f88cabf22e6f5b5d5968</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classSearchResponseMessage.html</anchorfile>
      <anchor>a5cf778077e94459a2ad316046bea5f2e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getSearchKey</name>
      <anchorfile>classSearchResponseMessage.html</anchorfile>
      <anchor>a9f3339e6de258e190cb564105d04880e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getSearchKey</name>
      <anchorfile>classSearchResponseMessage.html</anchorfile>
      <anchor>a9c33278f16a3b72a7a8ed96a3b466726</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSearchKey</name>
      <anchorfile>classSearchResponseMessage.html</anchorfile>
      <anchor>a4107b7523b749a57bc58b3b8c7d57eff</anchor>
      <arglist>(const OverlayKey &amp;searchKey)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReversePathArraySize</name>
      <anchorfile>classSearchResponseMessage.html</anchorfile>
      <anchor>a66b4f0a70a8584658700fe266f44f54b</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getReversePathArraySize</name>
      <anchorfile>classSearchResponseMessage.html</anchorfile>
      <anchor>a4f6ea0434bb0ca96349086828e1aac7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getReversePath</name>
      <anchorfile>classSearchResponseMessage.html</anchorfile>
      <anchor>aa649ac8ee386d31f7fa537ffb18dde19</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getReversePath</name>
      <anchorfile>classSearchResponseMessage.html</anchorfile>
      <anchor>ae5fff51bb3e104503ffa843d53ae573e</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReversePath</name>
      <anchorfile>classSearchResponseMessage.html</anchorfile>
      <anchor>ae90f8a6dc0095b74c78520e328eb6274</anchor>
      <arglist>(unsigned int k, const OverlayKey &amp;reversePath)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GiaNode &amp;</type>
      <name>getFoundNode</name>
      <anchorfile>classSearchResponseMessage.html</anchorfile>
      <anchor>ae1db00a8050a7cffa2b73697ef4a2f77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const GiaNode &amp;</type>
      <name>getFoundNode</name>
      <anchorfile>classSearchResponseMessage.html</anchorfile>
      <anchor>a8b76fa840837f37b4830eac16658b623</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFoundNode</name>
      <anchorfile>classSearchResponseMessage.html</anchorfile>
      <anchor>a85ed27f47e8ea86f0247696ac5b755e6</anchor>
      <arglist>(const GiaNode &amp;foundNode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSearchHopCount</name>
      <anchorfile>classSearchResponseMessage.html</anchorfile>
      <anchor>ad6cd0ef956b178017366d543535bec28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSearchHopCount</name>
      <anchorfile>classSearchResponseMessage.html</anchorfile>
      <anchor>af6dbdc06dceae0b532373b2e09fcc326</anchor>
      <arglist>(int searchHopCount)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSearchResponseMessage.html</anchorfile>
      <anchor>a20c06a1588de677f3d6d013372e9fee2</anchor>
      <arglist>(const SearchResponseMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>searchKey_var</name>
      <anchorfile>classSearchResponseMessage.html</anchorfile>
      <anchor>a1e6b88a0742365b822692f29c8921cfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey *</type>
      <name>reversePath_var</name>
      <anchorfile>classSearchResponseMessage.html</anchorfile>
      <anchor>ab715a0195df6edec996faff1a9c6356b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>reversePath_arraysize</name>
      <anchorfile>classSearchResponseMessage.html</anchorfile>
      <anchor>ac33cd6ea4a226ad1d5f6657a2c856e16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GiaNode</type>
      <name>foundNode_var</name>
      <anchorfile>classSearchResponseMessage.html</anchorfile>
      <anchor>af7e4f16e8d85d0864d492f93074bd9ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>searchHopCount_var</name>
      <anchorfile>classSearchResponseMessage.html</anchorfile>
      <anchor>af0dc42d8aa2660d9503b68d8626b8bc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classSearchResponseMessage.html</anchorfile>
      <anchor>ac2401a819e900664af7e7cbabe1234c8</anchor>
      <arglist>(const SearchResponseMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SendAllStrategyCall</name>
    <filename>classSendAllStrategyCall.html</filename>
    <base>GlobalViewBuilderCall</base>
    <member kind="function">
      <type></type>
      <name>SendAllStrategyCall</name>
      <anchorfile>classSendAllStrategyCall.html</anchorfile>
      <anchor>af62f14aba16588900d8caec92e314fdc</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SendAllStrategyCall</name>
      <anchorfile>classSendAllStrategyCall.html</anchorfile>
      <anchor>a06c411baaa648ccb9093d0bd21829195</anchor>
      <arglist>(const SendAllStrategyCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SendAllStrategyCall</name>
      <anchorfile>classSendAllStrategyCall.html</anchorfile>
      <anchor>ac25e1c44a9a2c723698cb278ed85c5a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SendAllStrategyCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classSendAllStrategyCall.html</anchorfile>
      <anchor>a43cea0eadf1c5b9fc7f555cf6d9c26ea</anchor>
      <arglist>(const SendAllStrategyCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SendAllStrategyCall *</type>
      <name>dup</name>
      <anchorfile>classSendAllStrategyCall.html</anchorfile>
      <anchor>aa0ce798650461d57eb50c91a8354b851</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classSendAllStrategyCall.html</anchorfile>
      <anchor>a7ddc18fdc1849cf2ee225febbb422e99</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classSendAllStrategyCall.html</anchorfile>
      <anchor>a5f21b01fefaf439140373bb75cd23e9c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CoordDataContainer &amp;</type>
      <name>getCoordData</name>
      <anchorfile>classSendAllStrategyCall.html</anchorfile>
      <anchor>a227af9bd97ba50375e74b18ba0188ce3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const CoordDataContainer &amp;</type>
      <name>getCoordData</name>
      <anchorfile>classSendAllStrategyCall.html</anchorfile>
      <anchor>a0dab2c7acb215b599a79d4b341e6f145</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCoordData</name>
      <anchorfile>classSendAllStrategyCall.html</anchorfile>
      <anchor>adbc1de56fa068cdaa0d64f2cf92b4a8b</anchor>
      <arglist>(const CoordDataContainer &amp;coordData)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSendAllStrategyCall.html</anchorfile>
      <anchor>a3507d2b7637672fa0ddd317b816221b8</anchor>
      <arglist>(const SendAllStrategyCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordDataContainer</type>
      <name>coordData_var</name>
      <anchorfile>classSendAllStrategyCall.html</anchorfile>
      <anchor>a0f83e348e8bd8e1775df16c01d4b24cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classSendAllStrategyCall.html</anchorfile>
      <anchor>a1075fd103dd5979f12bae1e203f0b719</anchor>
      <arglist>(const SendAllStrategyCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SendCoordinatesCall</name>
    <filename>classSendCoordinatesCall.html</filename>
    <base>GlobalViewBuilderCall</base>
    <member kind="function">
      <type></type>
      <name>SendCoordinatesCall</name>
      <anchorfile>classSendCoordinatesCall.html</anchorfile>
      <anchor>a9fbb72aa4b482437e242ebf31ad02dd7</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SendCoordinatesCall</name>
      <anchorfile>classSendCoordinatesCall.html</anchorfile>
      <anchor>a550240948164e5fa6b36a2d79af67a25</anchor>
      <arglist>(const SendCoordinatesCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SendCoordinatesCall</name>
      <anchorfile>classSendCoordinatesCall.html</anchorfile>
      <anchor>a21341e5fb3bb8fe327abcb483cf94330</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SendCoordinatesCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classSendCoordinatesCall.html</anchorfile>
      <anchor>a8954c543a3d72ce7d1531b9031cce7fe</anchor>
      <arglist>(const SendCoordinatesCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SendCoordinatesCall *</type>
      <name>dup</name>
      <anchorfile>classSendCoordinatesCall.html</anchorfile>
      <anchor>a9111515add1749c3b22332979b711ea0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classSendCoordinatesCall.html</anchorfile>
      <anchor>af3b1fd80e6649adf45cf035d3e1fa42b</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classSendCoordinatesCall.html</anchorfile>
      <anchor>a360553e529e4b756662d48f07a43f3ff</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CoordDataContainer &amp;</type>
      <name>getCoordData</name>
      <anchorfile>classSendCoordinatesCall.html</anchorfile>
      <anchor>a3c30e39637902e6ba0aed807508a73e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const CoordDataContainer &amp;</type>
      <name>getCoordData</name>
      <anchorfile>classSendCoordinatesCall.html</anchorfile>
      <anchor>a1659f542c9d586c6fa2fce2a842c5a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCoordData</name>
      <anchorfile>classSendCoordinatesCall.html</anchorfile>
      <anchor>aabfb62b53187354eefc186b37acc01e5</anchor>
      <arglist>(const CoordDataContainer &amp;coordData)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSendCoordinatesCall.html</anchorfile>
      <anchor>ae9ad9a5fbf3c5dda884c28970d341160</anchor>
      <arglist>(const SendCoordinatesCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordDataContainer</type>
      <name>coordData_var</name>
      <anchorfile>classSendCoordinatesCall.html</anchorfile>
      <anchor>a659c014679bfec708770547443289881</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classSendCoordinatesCall.html</anchorfile>
      <anchor>ac71a6c228358b45b5d4dd221250542b0</anchor>
      <arglist>(const SendCoordinatesCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SendStrategyFactory</name>
    <filename>classSendStrategyFactory.html</filename>
    <member kind="function">
      <type></type>
      <name>SendStrategyFactory</name>
      <anchorfile>classSendStrategyFactory.html</anchorfile>
      <anchor>aa544307e7402a351cd9efe17cc4a9164</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SendStrategyFactory</name>
      <anchorfile>classSendStrategyFactory.html</anchorfile>
      <anchor>a4562eb00d90391110036f48eca7b5e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AbstractSendStrategy *</type>
      <name>getSendStrategyInstance</name>
      <anchorfile>classSendStrategyFactory.html</anchorfile>
      <anchor>ac853ccd047074bac33a5aee52ace1f76</anchor>
      <arglist>(const std::string sendStrategyName)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SendToKeyListener</name>
    <filename>classSendToKeyListener.html</filename>
    <base>LookupListener</base>
    <member kind="function">
      <type></type>
      <name>SendToKeyListener</name>
      <anchorfile>classSendToKeyListener.html</anchorfile>
      <anchor>a27b16a40cfd5c515f94c9fad087d299f</anchor>
      <arglist>(BaseOverlay *overlay, BaseOverlayMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SendToKeyListener</name>
      <anchorfile>classSendToKeyListener.html</anchorfile>
      <anchor>a008de600db3cf76f5aaec9ba8dd7fb77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lookupFinished</name>
      <anchorfile>classSendToKeyListener.html</anchorfile>
      <anchor>ae21d1e104bd5a9d0bda09e659a2938db</anchor>
      <arglist>(AbstractLookup *lookup)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BaseOverlay *</type>
      <name>overlay</name>
      <anchorfile>classSendToKeyListener.html</anchorfile>
      <anchor>ac6a8b10c63a4595450377b9beaa00490</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BaseOverlayMessage *</type>
      <name>msg</name>
      <anchorfile>classSendToKeyListener.html</anchorfile>
      <anchor>a76dd14829ae2b15ccd4a710ab6329ff4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GlobalStatistics *</type>
      <name>globalStatistics</name>
      <anchorfile>classSendToKeyListener.html</anchorfile>
      <anchor>ad65c944612ead39d93ddb9cf69bfbb7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SessionMsg</name>
    <filename>classSessionMsg.html</filename>
    <member kind="function">
      <type></type>
      <name>SessionMsg</name>
      <anchorfile>classSessionMsg.html</anchorfile>
      <anchor>a4fa5dc954633124492e8f4b4a99b0cd5</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SessionMsg</name>
      <anchorfile>classSessionMsg.html</anchorfile>
      <anchor>a56fbd4bcfaea18c72af78586de37b2e1</anchor>
      <arglist>(const SessionMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SessionMsg</name>
      <anchorfile>classSessionMsg.html</anchorfile>
      <anchor>aee11d200c02f7bf42cb77b9711fd7efa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SessionMsg &amp;</type>
      <name>operator=</name>
      <anchorfile>classSessionMsg.html</anchorfile>
      <anchor>aab8c84ac1a848c3503f1315a381b8dda</anchor>
      <arglist>(const SessionMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SessionMsg *</type>
      <name>dup</name>
      <anchorfile>classSessionMsg.html</anchorfile>
      <anchor>aee6c115f050f86eb3df9e4ce095a0ff9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classSessionMsg.html</anchorfile>
      <anchor>a55f7bd1bd5513e5db4fd40b46e574139</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classSessionMsg.html</anchorfile>
      <anchor>af132c3625d499b59d81bf1d12f99d80d</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getType</name>
      <anchorfile>classSessionMsg.html</anchorfile>
      <anchor>a879478547c8c75a4ed8240115619c8b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchorfile>classSessionMsg.html</anchorfile>
      <anchor>a91a092e3cc6ba72e068b4829804d3b8a</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>classSessionMsg.html</anchorfile>
      <anchor>a09fe1fdaadb8f85652517ddca656f06e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classSessionMsg.html</anchorfile>
      <anchor>a2beefe4a29af563b7bdf20b05a143c7d</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual I3Identifier &amp;</type>
      <name>getSource</name>
      <anchorfile>classSessionMsg.html</anchorfile>
      <anchor>add92aa756c386a0ef62304c9b7c01982</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const I3Identifier &amp;</type>
      <name>getSource</name>
      <anchorfile>classSessionMsg.html</anchorfile>
      <anchor>a7c04590fe325d8263d0d01d8942dd1d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSource</name>
      <anchorfile>classSessionMsg.html</anchorfile>
      <anchor>ab2c79437ab41910d2f8222e1696cde72</anchor>
      <arglist>(const I3Identifier &amp;source)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSessionMsg.html</anchorfile>
      <anchor>a35800c3ebd6bf1acb20c1f5968666457</anchor>
      <arglist>(const SessionMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>type_var</name>
      <anchorfile>classSessionMsg.html</anchorfile>
      <anchor>a378f55336fed64379c4751cd52f0da72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>value_var</name>
      <anchorfile>classSessionMsg.html</anchorfile>
      <anchor>a7480cbdd728a8e15487f07d3ef677fc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>I3Identifier</type>
      <name>source_var</name>
      <anchorfile>classSessionMsg.html</anchorfile>
      <anchor>a721d63fffada392e6b0ec215e31c6c9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classSessionMsg.html</anchorfile>
      <anchor>ab0166fbc8daf6eb31d5bc5295c679ca3</anchor>
      <arglist>(const SessionMsg &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>SHA1_WORKSPACE_BLOCK</name>
    <filename>unionSHA1__WORKSPACE__BLOCK.html</filename>
    <member kind="variable">
      <type>UINT_8</type>
      <name>c</name>
      <anchorfile>unionSHA1__WORKSPACE__BLOCK.html</anchorfile>
      <anchor>aa48d6535109d06cf9c86d229406695b5</anchor>
      <arglist>[64]</arglist>
    </member>
    <member kind="variable">
      <type>UINT_32</type>
      <name>l</name>
      <anchorfile>unionSHA1__WORKSPACE__BLOCK.html</anchorfile>
      <anchor>a29c830f54bb0e22acebac3fe5ad64b23</anchor>
      <arglist>[16]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimMud</name>
    <filename>classSimMud.html</filename>
    <base>BaseApp</base>
    <class kind="struct">SimMud::PlayerInfo</class>
    <member kind="function">
      <type></type>
      <name>SimMud</name>
      <anchorfile>classSimMud.html</anchorfile>
      <anchor>a293f7583c943ea76d3cf5fdba2461ab5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SimMud</name>
      <anchorfile>classSimMud.html</anchorfile>
      <anchor>a4537c05411d112e426fa8f7d66d317ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeApp</name>
      <anchorfile>classSimMud.html</anchorfile>
      <anchor>a4d5131fbdb6ffb3aaadd52bf63c120bc</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classSimMud.html</anchorfile>
      <anchor>aca84bd1a6d622f511efc69efdcc87782</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMessage</name>
      <anchorfile>classSimMud.html</anchorfile>
      <anchor>a512a668286e3325a90447807f5306c2a</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMessage</name>
      <anchorfile>classSimMud.html</anchorfile>
      <anchor>a1eac942d3074724f72ce8c4cb7483318</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleReadyMessage</name>
      <anchorfile>classSimMud.html</anchorfile>
      <anchor>af6152e45bda1f05649d9452897c7d5f5</anchor>
      <arglist>(CompReadyMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>handleRpcCall</name>
      <anchorfile>classSimMud.html</anchorfile>
      <anchor>a126366e2f9b49eba9ab55151bb6d607a</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRpcResponse</name>
      <anchorfile>classSimMud.html</anchorfile>
      <anchor>ac5fd0dd69b0d65b50c6378123705fb45</anchor>
      <arglist>(BaseResponseMessage *msg, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finishApp</name>
      <anchorfile>classSimMud.html</anchorfile>
      <anchor>a0e8ed154b874923afca56c3fbf893827</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMove</name>
      <anchorfile>classSimMud.html</anchorfile>
      <anchor>ab72f857b31028bdd4d0c3cf12793e611</anchor>
      <arglist>(GameAPIPositionMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleOtherPlayerMove</name>
      <anchorfile>classSimMud.html</anchorfile>
      <anchor>a93e1af0d57cdd3325b536cec47f47c57</anchor>
      <arglist>(SimMudMoveMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>currentRegionX</name>
      <anchorfile>classSimMud.html</anchorfile>
      <anchor>a34b11377878bf5cecfb64b25a6e630ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>currentRegionY</name>
      <anchorfile>classSimMud.html</anchorfile>
      <anchor>a8d622e93dba7996826365b6cdc54078a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OverlayKey</type>
      <name>currentRegionID</name>
      <anchorfile>classSimMud.html</anchorfile>
      <anchor>a03c57008cba733dd42a0a91cf5bbbfab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::set&lt; OverlayKey &gt;</type>
      <name>subscribedRegions</name>
      <anchorfile>classSimMud.html</anchorfile>
      <anchor>adae17ba2b76feae11b7f03f7100c493c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>fieldSize</name>
      <anchorfile>classSimMud.html</anchorfile>
      <anchor>a567484580fe4c7be62c79b43ffaccf02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numSubspaces</name>
      <anchorfile>classSimMud.html</anchorfile>
      <anchor>a7149b64609e7cd918fd64fdd9627d52b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>regionSize</name>
      <anchorfile>classSimMud.html</anchorfile>
      <anchor>a3c55b8beae16b3de8a93876556fe3307</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>AOIWidth</name>
      <anchorfile>classSimMud.html</anchorfile>
      <anchor>a3b23344d13c68a98c237a5b5df62a66e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>receivedMovementLists</name>
      <anchorfile>classSimMud.html</anchorfile>
      <anchor>a9b42146f71016c0db3387d8100be2075</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>lostMovementLists</name>
      <anchorfile>classSimMud.html</anchorfile>
      <anchor>aac408805d86e36d75d0d0dead744796d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>maxMoveDelay</name>
      <anchorfile>classSimMud.html</anchorfile>
      <anchor>a9f42ef8c9f9fb4249bc755d9f1806915</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>playerTimeout</name>
      <anchorfile>classSimMud.html</anchorfile>
      <anchor>a1eb016c82c8c28a88c88be19ef40a102</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>playerTimer</name>
      <anchorfile>classSimMud.html</anchorfile>
      <anchor>abe14cf33dba0a23191eac6a52e21d994</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; NodeHandle, PlayerInfo &gt;</type>
      <name>playerMap</name>
      <anchorfile>classSimMud.html</anchorfile>
      <anchor>a8d504e84fcccec4b6f7ff8c3ca850819</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimMud::PlayerInfo</name>
    <filename>structSimMud_1_1PlayerInfo.html</filename>
    <member kind="variable">
      <type>Vector2D</type>
      <name>pos</name>
      <anchorfile>structSimMud_1_1PlayerInfo.html</anchorfile>
      <anchor>af31ad2c63af28b8c3775a714e50d1a7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>update</name>
      <anchorfile>structSimMud_1_1PlayerInfo.html</anchorfile>
      <anchor>ae26080b6f98390f52450b6758a916404</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimMudMoveMessage</name>
    <filename>classSimMudMoveMessage.html</filename>
    <member kind="function">
      <type></type>
      <name>SimMudMoveMessage</name>
      <anchorfile>classSimMudMoveMessage.html</anchorfile>
      <anchor>a8c5c1b3fb9bc0dcbf394fc8f431dfab6</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimMudMoveMessage</name>
      <anchorfile>classSimMudMoveMessage.html</anchorfile>
      <anchor>a7a528240b741f0632e095ab651f407e8</anchor>
      <arglist>(const SimMudMoveMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimMudMoveMessage</name>
      <anchorfile>classSimMudMoveMessage.html</anchorfile>
      <anchor>a1f1dd44dced5b434ea0d9eece8a6c0d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SimMudMoveMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimMudMoveMessage.html</anchorfile>
      <anchor>aaa42d81485a184fb8a08f0a5001a1056</anchor>
      <arglist>(const SimMudMoveMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimMudMoveMessage *</type>
      <name>dup</name>
      <anchorfile>classSimMudMoveMessage.html</anchorfile>
      <anchor>a53a586a581babf07195f14c738e4cd6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classSimMudMoveMessage.html</anchorfile>
      <anchor>a94d2c286be864f84eeff424e0fe76a63</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classSimMudMoveMessage.html</anchorfile>
      <anchor>aa9ecaeeca1f5458a0852c95e1542589a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getSrc</name>
      <anchorfile>classSimMudMoveMessage.html</anchorfile>
      <anchor>a6044341ceeba6c0422abfb21672b3ade</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getSrc</name>
      <anchorfile>classSimMudMoveMessage.html</anchorfile>
      <anchor>aca7914e28cd863954b6367194d9ad612</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrc</name>
      <anchorfile>classSimMudMoveMessage.html</anchorfile>
      <anchor>ae525956c7518d6497450265fdd454ac7</anchor>
      <arglist>(const NodeHandle &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPosX</name>
      <anchorfile>classSimMudMoveMessage.html</anchorfile>
      <anchor>af2c5f4723cd58fb80890598f411e25fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPosX</name>
      <anchorfile>classSimMudMoveMessage.html</anchorfile>
      <anchor>a35b873626d0b4a4fb92627bd966e7821</anchor>
      <arglist>(double posX)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPosY</name>
      <anchorfile>classSimMudMoveMessage.html</anchorfile>
      <anchor>a578b29815b19c930e4f4ca1d2e5a01be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPosY</name>
      <anchorfile>classSimMudMoveMessage.html</anchorfile>
      <anchor>aa2b9c3776821f5f8379a3536a3b2d199</anchor>
      <arglist>(double posY)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getTimestamp</name>
      <anchorfile>classSimMudMoveMessage.html</anchorfile>
      <anchor>ae4d0d690c8e4eeba47b16ac8c5f15e47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimestamp</name>
      <anchorfile>classSimMudMoveMessage.html</anchorfile>
      <anchor>a285f79830e679dcdee1d5e574b235256</anchor>
      <arglist>(simtime_t timestamp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getLeaveRegion</name>
      <anchorfile>classSimMudMoveMessage.html</anchorfile>
      <anchor>a7ee2ac1d4a319ca7f65769a9a7f52295</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLeaveRegion</name>
      <anchorfile>classSimMudMoveMessage.html</anchorfile>
      <anchor>a15a6611efa00f5291ac50174b1a391e1</anchor>
      <arglist>(bool leaveRegion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSimMudMoveMessage.html</anchorfile>
      <anchor>ab93ed6d55c36670fd42a9193e51c9375</anchor>
      <arglist>(const SimMudMoveMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>src_var</name>
      <anchorfile>classSimMudMoveMessage.html</anchorfile>
      <anchor>a1e75557bbfbde9644c028b410e97e90a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>posX_var</name>
      <anchorfile>classSimMudMoveMessage.html</anchorfile>
      <anchor>a57bdd3540fafd75cdfe3b4e5da807d66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>posY_var</name>
      <anchorfile>classSimMudMoveMessage.html</anchorfile>
      <anchor>ae865c64e1eda7e2005c8ae34a5fff72f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>timestamp_var</name>
      <anchorfile>classSimMudMoveMessage.html</anchorfile>
      <anchor>a866c1377c97f11007cc31ae02aee67cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>leaveRegion_var</name>
      <anchorfile>classSimMudMoveMessage.html</anchorfile>
      <anchor>a4089cd3d7ce9043981db00e6362489a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classSimMudMoveMessage.html</anchorfile>
      <anchor>ae33842fc9cbff620d5215322feb5f746</anchor>
      <arglist>(const SimMudMoveMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleCoordDataContainer</name>
    <filename>classSimpleCoordDataContainer.html</filename>
    <member kind="typedef">
      <type>UNORDERED_MAP&lt; SimpleCoordinate, int, SimpleCoordinate::hashFcn &gt;</type>
      <name>simpleCoordCountMap</name>
      <anchorfile>classSimpleCoordDataContainer.html</anchorfile>
      <anchor>afe79716f8af48c772c1106aac81bcdb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleCoordDataContainer</name>
      <anchorfile>classSimpleCoordDataContainer.html</anchorfile>
      <anchor>aae1883a80ea773cfb8dd0147104d1ea3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimpleCoordDataContainer</name>
      <anchorfile>classSimpleCoordDataContainer.html</anchorfile>
      <anchor>a11b9a8af6b29dee3241571f2ac80b9a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBitLength</name>
      <anchorfile>classSimpleCoordDataContainer.html</anchorfile>
      <anchor>a35e3989e02e8731ead66efea15116165</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>simpleCoordCountMap</type>
      <name>coordData</name>
      <anchorfile>classSimpleCoordDataContainer.html</anchorfile>
      <anchor>a6acf25d46e4da22ee385ee9c9683b638</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleCoordinate</name>
    <filename>classSimpleCoordinate.html</filename>
    <class kind="class">SimpleCoordinate::hashFcn</class>
    <member kind="function">
      <type></type>
      <name>SimpleCoordinate</name>
      <anchorfile>classSimpleCoordinate.html</anchorfile>
      <anchor>ab7acc2fabd76f33bbfef182dbeff07bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimpleCoordinate</name>
      <anchorfile>classSimpleCoordinate.html</anchorfile>
      <anchor>a665bab6db66407bfda095c8041e97d69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classSimpleCoordinate.html</anchorfile>
      <anchor>a8ef7ae2b6cce6dde45b51cc027bf3fba</anchor>
      <arglist>(const SimpleCoordinate &amp;compSimpleCoordinate) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classSimpleCoordinate.html</anchorfile>
      <anchor>a11d4e19f7cde54cfbc1ec3ca60c4f95d</anchor>
      <arglist>(const SimpleCoordinate &amp;compSimpleCoordinate) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSimpleCoordinate.html</anchorfile>
      <anchor>ac0d89397bc842e83179ae110ee940db1</anchor>
      <arglist>(const SimpleCoordinate &amp;compSimpleCoordinate) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>hash</name>
      <anchorfile>classSimpleCoordinate.html</anchorfile>
      <anchor>a1a2aa61e4ae55fd5244845ce9e4369e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>coordData</name>
      <anchorfile>classSimpleCoordinate.html</anchorfile>
      <anchor>af561b7bb38d109da10e87eeb828a8f26</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>compareTo</name>
      <anchorfile>classSimpleCoordinate.html</anchorfile>
      <anchor>a6fccb8b7ffa3c24dff334796fc2890ea</anchor>
      <arglist>(const SimpleCoordinate &amp;compSimpleCoordinate) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleCoordinate::hashFcn</name>
    <filename>classSimpleCoordinate_1_1hashFcn.html</filename>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>classSimpleCoordinate_1_1hashFcn.html</anchorfile>
      <anchor>a2e389636a2552831ec294c6e793951f2</anchor>
      <arglist>(const SimpleCoordinate &amp;h1) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleCoordsInfo</name>
    <filename>classSimpleCoordsInfo.html</filename>
    <base>EuclideanNcsNodeInfo</base>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classSimpleCoordsInfo.html</anchorfile>
      <anchor>a7d3847f5749f02afa28e9389e003c710</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Prox</type>
      <name>getDistance</name>
      <anchorfile>classSimpleCoordsInfo.html</anchorfile>
      <anchor>a7f98e8bbedcc3fe8b405ee53e5d51247</anchor>
      <arglist>(const AbstractNcsNodeInfo &amp;abstractInfo) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>classSimpleCoordsInfo.html</anchorfile>
      <anchor>a7bd431b9c208c40a1a767e5fdd15c9e5</anchor>
      <arglist>(const AbstractNcsNodeInfo &amp;abstractInfo)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getAccessDelay</name>
      <anchorfile>classSimpleCoordsInfo.html</anchorfile>
      <anchor>a84216b1f5f89f5d4d01f051fc662f779</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAccessDelay</name>
      <anchorfile>classSimpleCoordsInfo.html</anchorfile>
      <anchor>a6bd35bc69366868f09b082a0ec370403</anchor>
      <arglist>(simtime_t delay)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Coords</name>
      <anchorfile>classSimpleCoordsInfo.html</anchorfile>
      <anchor>abc54c5dc022b89a978ad0b0325d166ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>accessDelay</name>
      <anchorfile>classSimpleCoordsInfo.html</anchorfile>
      <anchor>ac48f91814d737b4a4e83b9c1ab4b64cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleCoordStrategyCall</name>
    <filename>classSimpleCoordStrategyCall.html</filename>
    <base>GlobalViewBuilderCall</base>
    <member kind="function">
      <type></type>
      <name>SimpleCoordStrategyCall</name>
      <anchorfile>classSimpleCoordStrategyCall.html</anchorfile>
      <anchor>a778671befff679a3e0bec78adb1af33e</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleCoordStrategyCall</name>
      <anchorfile>classSimpleCoordStrategyCall.html</anchorfile>
      <anchor>a20e5ca4aa5f1cc998c27f2ed9dcbd963</anchor>
      <arglist>(const SimpleCoordStrategyCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimpleCoordStrategyCall</name>
      <anchorfile>classSimpleCoordStrategyCall.html</anchorfile>
      <anchor>adcdc1b23767c9f64500b5cdba63928a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SimpleCoordStrategyCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimpleCoordStrategyCall.html</anchorfile>
      <anchor>aa6861cd01853aa364c80ad64e4fd7db1</anchor>
      <arglist>(const SimpleCoordStrategyCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimpleCoordStrategyCall *</type>
      <name>dup</name>
      <anchorfile>classSimpleCoordStrategyCall.html</anchorfile>
      <anchor>a4501d3d3079d67fad1b8aa51a054eb1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classSimpleCoordStrategyCall.html</anchorfile>
      <anchor>a809516fcf8322439a6c676ea7bb3447f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classSimpleCoordStrategyCall.html</anchorfile>
      <anchor>a1fc8db0da475cc5e8f0117e0c2215cb1</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimpleCoordDataContainer &amp;</type>
      <name>getCoordData</name>
      <anchorfile>classSimpleCoordStrategyCall.html</anchorfile>
      <anchor>a41dacc308b76876af25c9cefc489087b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const SimpleCoordDataContainer &amp;</type>
      <name>getCoordData</name>
      <anchorfile>classSimpleCoordStrategyCall.html</anchorfile>
      <anchor>a3a3d14643df9135c82b3d49fb72b9fe0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCoordData</name>
      <anchorfile>classSimpleCoordStrategyCall.html</anchorfile>
      <anchor>a36b7679706dc3b21d6d1f89d637d9379</anchor>
      <arglist>(const SimpleCoordDataContainer &amp;coordData)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSimpleCoordStrategyCall.html</anchorfile>
      <anchor>ad81aedaaf56004ac7c0c280d48a40731</anchor>
      <arglist>(const SimpleCoordStrategyCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleCoordDataContainer</type>
      <name>coordData_var</name>
      <anchorfile>classSimpleCoordStrategyCall.html</anchorfile>
      <anchor>a7646f9573c7031543c9ceb67d2337bf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classSimpleCoordStrategyCall.html</anchorfile>
      <anchor>a1b62793690dd560d79319456cfc215ea</anchor>
      <arglist>(const SimpleCoordStrategyCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleGameClient</name>
    <filename>classSimpleGameClient.html</filename>
    <base>BaseApp</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimpleGameClient</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>adae8e02c615eabcc879b81b34690c6a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeApp</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>a70755f225ce907b63be80155d54398a5</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>a8558f15f8e978861562e7fa7d2c59d04</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMessage</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>a52cd2c766f09dae0dbdd8704e1c7d75a</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleReadyMessage</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>abb8f8b1687ff9eb4366aed90e28127e4</anchor>
      <arglist>(CompReadyMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finishApp</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>a5f5c71f6e66fa7ea36e8f096f9eed379</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector2D</type>
      <name>getPosition</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>ae673bb2ef0b61cc60aa0e0fd089ea540</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAOI</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>a098f8fe135f6c98ddbe304a30a021257</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOverlayReady</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>a18fa31dfa81a6fde2e6dafa3e4f420d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NodeHandle</type>
      <name>getThisNode</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>a4997c30121620d671833eecfc0ed6e89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>NeighborMap</type>
      <name>Neighbors</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>a6d3262cf211710f4a838f8054ea1dec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNeighbors</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>aeb8efa03ee4335bced596093ef13a6d8</anchor>
      <arglist>(GameAPIListMessage *sgcMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updatePosition</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>a310e1d7b6008ed2537bc3209bc2516c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleRealworldPacket</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>a7430c8fc8ff9a3b3c621e078748dc856</anchor>
      <arglist>(char *buf, uint32_t len)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GlobalCoordinator *</type>
      <name>coordinator</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>a680ad94139a136c9d5b53558447522c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CollisionList</type>
      <name>CollisionRect</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>ab3540a9b78ab3ff2c570e34eb89a1d33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>movementDelay</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>a859e80dde32642451e348ef66b1d8f5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>areaDimension</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>a2ffb0067b93af9eb66ba96a9986deed4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>movementSpeed</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>ab5070d9d8457420ef81f9cbe70d792c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>movementRate</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>a1b07ba07f866478c851f69f7d01df498</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>AOIWidth</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>a7357475d878c7a5d3cbf8411f35bc909</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useScenery</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>a6bc0661300229b216cb07c456b13123d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>overlayReady</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>ae3e76feba386f1b9b0d19dd3d8c6235f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D</type>
      <name>position</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>a3967561a72d197c368d06a6ed46b0461</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MovementGenerator *</type>
      <name>Generator</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>a19e3f6a4e7fa40ad78d01b36977dbbc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>logAOI</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>a5b7a4b0b75eda3741a0e7136a729d124</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NeighborMap::iterator</type>
      <name>itNeighbors</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>accc05adf199a0f95b62cdd315c8eda71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>GeneratorType</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>a643eb203e5e8aa219215709edf48dc2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>move_timer</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>a24e0e6eda2f7d5488ef1a80039e3c8b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>packetNotification</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>af138094b51d9e0d0618d8a356b279785</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PacketBuffer</type>
      <name>packetBuffer</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>a48c3d1a49c672ab8d76a21af868e743a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealtimeScheduler *</type>
      <name>scheduler</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>a02724ec21252078c4b6679651e4ff5f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>mtu</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>a5c944ed4ccc0725dd2867ac74d54d4f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SOCKET</type>
      <name>appFd</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>ade25cb0c7013ad13705e09cad4580a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>doRealworld</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>a41e30f625ae9d97d71c57e43f96a7873</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>frozen</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>a371e53a898bd9958e1b58ce576db67fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>startAOI</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>a192ca902974bb168256c2455f61999d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useHotspots</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>adc6164eda4338258d93d4c798b4b6104</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>lastInHotspot</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>a35ae704bfc3b23baa0a1824734a4c6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>lastFarFromHotspot</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>aa977777b1e1df168a45b9a5c83144813</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lastAOImeasure</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>a3bdde2cf0e4c07a20a95af647c94140e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>avgAOI</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>afc6bc48e2b571545ecda1675c22514d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>nonHotspotTime</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>a5b7c75c9d85bf9ac35688cc7653d0c61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>farFromHotspotTime</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>a6ede0d591f550697250f7f574bda0ec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>avgFarFromHotspotAOI</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>adbda0a34354a3850eee2c064ee736de2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>hotspotTime</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>a57ebd43939ec64a32379f7af1c5e099d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>avgHotspotAOI</name>
      <anchorfile>classSimpleGameClient.html</anchorfile>
      <anchor>adf343039199ee49e5be21ebfb2553aa7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleInfo</name>
    <filename>classSimpleInfo.html</filename>
    <base>PeerInfo</base>
    <member kind="function">
      <type></type>
      <name>SimpleInfo</name>
      <anchorfile>classSimpleInfo.html</anchorfile>
      <anchor>a24d0bc2851a0112a47c927f50f72ef90</anchor>
      <arglist>(uint32_t type, int moduleId, cObject **context)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SimpleInfo</name>
      <anchorfile>classSimpleInfo.html</anchorfile>
      <anchor>a548a359d1f6a77d69843fa9662f3048d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEntry</name>
      <anchorfile>classSimpleInfo.html</anchorfile>
      <anchor>a6f0d5a536742aa6e14dc87288476e0d2</anchor>
      <arglist>(SimpleNodeEntry *entry)</arglist>
    </member>
    <member kind="function">
      <type>SimpleNodeEntry *</type>
      <name>getEntry</name>
      <anchorfile>classSimpleInfo.html</anchorfile>
      <anchor>a7d92b7fa6ca2efd7f4bbe1ab366215d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dummy</name>
      <anchorfile>classSimpleInfo.html</anchorfile>
      <anchor>a20cde9ba427e78b44299076f809339ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleNodeEntry *</type>
      <name>entry</name>
      <anchorfile>classSimpleInfo.html</anchorfile>
      <anchor>a9aefa9d7697e3f7aa2854e1bf6a607fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleNcs</name>
    <filename>classSimpleNcs.html</filename>
    <base>AbstractNcs</base>
    <member kind="function">
      <type></type>
      <name>SimpleNcs</name>
      <anchorfile>classSimpleNcs.html</anchorfile>
      <anchor>aa5e605216b8aaf59a58ae70fd930e32c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimpleNcs</name>
      <anchorfile>classSimpleNcs.html</anchorfile>
      <anchor>ae408b96eebbfcc7d32641d0e8b923ecd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSimpleNcs.html</anchorfile>
      <anchor>af09beac1358cd3d59105acb180548a68</anchor>
      <arglist>(NeighborCache *neighborCache)</arglist>
    </member>
    <member kind="function">
      <type>Prox</type>
      <name>getCoordinateBasedProx</name>
      <anchorfile>classSimpleNcs.html</anchorfile>
      <anchor>aeefd3f8dd1106858570a101392467968</anchor>
      <arglist>(const AbstractNcsNodeInfo &amp;info) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractNcsNodeInfo *</type>
      <name>getUnvalidNcsInfo</name>
      <anchorfile>classSimpleNcs.html</anchorfile>
      <anchor>a2545f4409ff3e35ca1fdd5ccd56564d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractNcsNodeInfo *</type>
      <name>createNcsInfo</name>
      <anchorfile>classSimpleNcs.html</anchorfile>
      <anchor>ae3e536dc0f74418c1c6457e3ae8e1dfb</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;coords) const </arglist>
    </member>
    <member kind="function">
      <type>const AbstractNcsNodeInfo &amp;</type>
      <name>getOwnNcsInfo</name>
      <anchorfile>classSimpleNcs.html</anchorfile>
      <anchor>ac1549351b53045b47ef1d39825a2dfc0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>getOwnCoordinates</name>
      <anchorfile>classSimpleNcs.html</anchorfile>
      <anchor>afcd7c29c9404232ad860515b902da635</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NeighborCache *</type>
      <name>neighborCache</name>
      <anchorfile>classSimpleNcs.html</anchorfile>
      <anchor>a16fdd30c59558b471d95f7651efb01b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>delayFaultTypeNum</name>
      <anchorfile>classSimpleNcs.html</anchorfile>
      <anchor>a8cf26e885ee4b91198d2aff0095bce86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>delayFaultUndefined</name>
      <anchorfile>classSimpleNcs.html</anchorfile>
      <anchor>a8cf26e885ee4b91198d2aff0095bce86aa5827d822b4895c87db1af774a4bebf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>delayFaultLiveAll</name>
      <anchorfile>classSimpleNcs.html</anchorfile>
      <anchor>a8cf26e885ee4b91198d2aff0095bce86a40eefa318b5cc7d87883bfb88590edb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>delayFaultLivePlanetlab</name>
      <anchorfile>classSimpleNcs.html</anchorfile>
      <anchor>a8cf26e885ee4b91198d2aff0095bce86a6bf7af846f42af245d10b68fd02e1b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>delayFaultSimulation</name>
      <anchorfile>classSimpleNcs.html</anchorfile>
      <anchor>a8cf26e885ee4b91198d2aff0095bce86a79a65ee088913356546e3515dc1d1e94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>simtime_t</type>
      <name>falsifyDelay</name>
      <anchorfile>classSimpleNcs.html</anchorfile>
      <anchor>a06eea2f0358458b7e935c314471ebf2d</anchor>
      <arglist>(simtime_t oldDelay) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SimpleCoordsInfo *</type>
      <name>ownCoords</name>
      <anchorfile>classSimpleNcs.html</anchorfile>
      <anchor>ac01f212087eedc251ae716f6b3c0fffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>dimension</name>
      <anchorfile>classSimpleNcs.html</anchorfile>
      <anchor>ae77ab765ff6885d92203f988bf02d707</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static std::map&lt; std::string, delayFaultTypeNum &gt;</type>
      <name>delayFaultTypeMap</name>
      <anchorfile>classSimpleNcs.html</anchorfile>
      <anchor>af639294281786d89ddeb401db907e295</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static std::string</type>
      <name>delayFaultTypeString</name>
      <anchorfile>classSimpleNcs.html</anchorfile>
      <anchor>af63ef5767adfe80bd4fd9df9b317bf91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static bool</type>
      <name>faultyDelay</name>
      <anchorfile>classSimpleNcs.html</anchorfile>
      <anchor>a87cfd46fed626b6f7cd725893a63902c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleNodeEntry</name>
    <filename>classSimpleNodeEntry.html</filename>
    <class kind="struct">SimpleNodeEntry::Channel</class>
    <member kind="typedef">
      <type>std::pair&lt; simtime_t, bool &gt;</type>
      <name>SimpleDelay</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>a094ba8b4401210dc532f789b354a13a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SimpleNodeEntry</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>afed86b62a1a98ba0bafd753e3a5be0fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleNodeEntry</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>a00c1b3db260f9fa9f61bb03b824d51aa</anchor>
      <arglist>(cModule *node, cChannelType *typeRx, cChannelType *typeTx, uint32_t sendQueueLength, uint32_t fieldSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleNodeEntry</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>a9b0bb6b094b7911acbca0e3ba4b8cbb7</anchor>
      <arglist>(cModule *node, cChannelType *typeRx, cChannelType *typeTx, uint32_t sendQueueLength, NodeRecord *nodeRecord, int index)</arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getUdpIPv4Gate</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>a0c5f6c502df721616367cfc95a5d5c47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getUdpIPv6Gate</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>aa5024de02f478791101e08c10f5815dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getTcpIPv4Gate</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>a3f9699297423052c76601da9e29d0db0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getTcpIPv6Gate</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>a765ef14c71b289379465748164c5cf19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SimpleDelay</type>
      <name>calcDelay</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>a90f3eef9b439cc9ba4282be89c8745ae</anchor>
      <arglist>(cPacket *msg, const SimpleNodeEntry &amp;dest, bool faultyDelay=false)</arglist>
    </member>
    <member kind="function">
      <type>SimpleDelay</type>
      <name>calcAccessRouterDelay</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>a3a3fe2053bda6df5b1939c112dfe6d0f</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>a2b57bfe629a14b1630ac98d8217a5a3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getAccessDelay</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>a540621de4f6c9cdd2bc1cf665f9768c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getTxAccessDelay</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>ae709670ee92f52e4bdbbabd2a0685b49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getRxAccessDelay</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>a0b3e13802321621b1d7f7f78fd699c56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getBandwidth</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>ae39ca74a2b98c1f9cffd79c0eff004be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getTxBandwidth</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>adc68ad2b57292ddaf7449a7792db16a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRxBandwidth</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>ab39f593fce820557b224f231c5639bc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getErrorRate</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>aa0b5209889699d3cc9bdd7008b4807d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setX</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>a530debac77fbb18fb963d2d46c0f3825</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setY</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>abfe8019202ffa612e25b02b93cef9811</anchor>
      <arglist>(float y)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getX</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>acaead5826a271b9d8e413f72e15fc4be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getY</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>ab25a077231be77c2be9e6ad94af7e6e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getCoords</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>adbec5d28d5bf0371394e43a323d10f03</anchor>
      <arglist>(int dim) const </arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>getDim</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>ac610faa095266e4117d51855ac19abd2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRecordIndex</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>a5f4e1880def7e049a74463564df33130</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NodeRecord *</type>
      <name>getNodeRecord</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>a5d8a57a204861f97272721ee4d67cf24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static simtime_t</type>
      <name>getFaultyDelay</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>ab96d3ed14bf77a374db26e294b9169f2</anchor>
      <arglist>(simtime_t oldDelay)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>float</type>
      <name>operator-</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>a49668c249150bce1039978bd94cc8615</anchor>
      <arglist>(const SimpleNodeEntry &amp;entry) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cGate *</type>
      <name>UdpIPv4ingate</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>ac3610458b57b34fb547d1d4ade7bf4c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cGate *</type>
      <name>UdpIPv6ingate</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>a0f96895d28e97a8df8f75ac76130f008</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cGate *</type>
      <name>TcpIPv4ingate</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>a4fa6ea58cc6e0506435f3886dd3ddb77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cGate *</type>
      <name>TcpIPv6ingate</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>ac9598053caef5d5c73e15964f8b26642</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>struct SimpleNodeEntry::Channel</type>
      <name>rx</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>a37f82121eac470d76b398ac87033fafa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>struct SimpleNodeEntry::Channel</type>
      <name>tx</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>a05c57ea8f28e77615f6f99415e57128a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeRecord *</type>
      <name>nodeRecord</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>a2bf6e5590d5a5d07c8c6cf99187fafaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>index</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>a19f86af3961b4165f41345dd9fa198d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSimpleNodeEntry.html</anchorfile>
      <anchor>a0b4192804a609ce319462fc307aa5248</anchor>
      <arglist>(std::ostream &amp;out, const SimpleNodeEntry &amp;entry)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimpleNodeEntry::Channel</name>
    <filename>structSimpleNodeEntry_1_1Channel.html</filename>
    <member kind="variable">
      <type>simtime_t</type>
      <name>finished</name>
      <anchorfile>structSimpleNodeEntry_1_1Channel.html</anchorfile>
      <anchor>ad3d4ec9798f73418f88d36bd0d0d31b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>maxQueueTime</name>
      <anchorfile>structSimpleNodeEntry_1_1Channel.html</anchorfile>
      <anchor>aa41281320a7c8ffdb3626cb514406517</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>accessDelay</name>
      <anchorfile>structSimpleNodeEntry_1_1Channel.html</anchorfile>
      <anchor>a4a0f4437ea494e249dde008d1fa371c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>bandwidth</name>
      <anchorfile>structSimpleNodeEntry_1_1Channel.html</anchorfile>
      <anchor>ab4fba8305acfe67d78d5e35d5482a51b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>errorRate</name>
      <anchorfile>structSimpleNodeEntry_1_1Channel.html</anchorfile>
      <anchor>ac3551903cade5fd771f0950301b080a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleTCP</name>
    <filename>classSimpleTCP.html</filename>
    <member kind="function">
      <type></type>
      <name>SimpleTCP</name>
      <anchorfile>classSimpleTCP.html</anchorfile>
      <anchor>abb181ac06e23932e09b93d03e1b98a2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimpleTCP</name>
      <anchorfile>classSimpleTCP.html</anchorfile>
      <anchor>a54b9501e9b2ee34d4261d5ab7e0f74cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodeEntry</name>
      <anchorfile>classSimpleTCP.html</anchorfile>
      <anchor>abddcae4e6b79ffdcca916553def4d5f5</anchor>
      <arglist>(SimpleNodeEntry *entry)</arglist>
    </member>
    <member kind="variable">
      <type>StatisticsAndDelay</type>
      <name>sad</name>
      <anchorfile>classSimpleTCP.html</anchorfile>
      <anchor>a89d34d0cb75d93f06977a62e91833e07</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>segmentArrivalWhileClosed</name>
      <anchorfile>classSimpleTCP.html</anchorfile>
      <anchor>a9226771de9df8d100af27d7bdfd3f66e</anchor>
      <arglist>(TCPSegment *tcpseg, IPvXAddress srcAddr, IPvXAddress destAddr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SimpleTCPConnection *</type>
      <name>createConnection</name>
      <anchorfile>classSimpleTCP.html</anchorfile>
      <anchor>a229e131579ffe9b8045671161163988d</anchor>
      <arglist>(int appGateIndex, int connId)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classSimpleTCP.html</anchorfile>
      <anchor>aafd5f640dc6fbb6518e7e3174deb6932</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classSimpleTCP.html</anchorfile>
      <anchor>a482331af9b7835f3c234ccf596c0d5d8</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classSimpleTCP.html</anchorfile>
      <anchor>abd216b335d87144e735e4b1d28609118</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classSimpleTCP.html</anchorfile>
      <anchor>a2cfc52a503808e55d77506e8c5083828</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleTCPConnection</name>
    <filename>classSimpleTCPConnection.html</filename>
    <member kind="function">
      <type></type>
      <name>SimpleTCPConnection</name>
      <anchorfile>classSimpleTCPConnection.html</anchorfile>
      <anchor>afb617c21fcd5a0d0f2473b18c9402c6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleTCPConnection</name>
      <anchorfile>classSimpleTCPConnection.html</anchorfile>
      <anchor>a63d9cfb0c22610e1986ec0474e48aa48</anchor>
      <arglist>(TCP *mod, int appGateIndex, int connId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendToIP</name>
      <anchorfile>classSimpleTCPConnection.html</anchorfile>
      <anchor>aef7a2dec538af071e0c7706cd9ec9686</anchor>
      <arglist>(TCPSegment *tcpseg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendRst</name>
      <anchorfile>classSimpleTCPConnection.html</anchorfile>
      <anchor>a2a90f7b7c30ac18b6bb8976d36f56623</anchor>
      <arglist>(uint32 seq, IPvXAddress src, IPvXAddress dest, int srcPort, int destPort)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendRstAck</name>
      <anchorfile>classSimpleTCPConnection.html</anchorfile>
      <anchor>a34e0bd4cc145e5b2247a709fa41366c2</anchor>
      <arglist>(uint32 seq, uint32 ack, IPvXAddress src, IPvXAddress dest, int srcPort, int destPort)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static StatisticsAndDelay</type>
      <name>sad</name>
      <anchorfile>classSimpleTCPConnection.html</anchorfile>
      <anchor>a03830f7573a62f195399f9d079be26a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendToIP</name>
      <anchorfile>classSimpleTCPConnection.html</anchorfile>
      <anchor>a5ab8e1fecb4a30b73b211cbae1c66f99</anchor>
      <arglist>(TCPSegment *tcpseg, IPvXAddress src, IPvXAddress dest)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SimpleTCPConnection *</type>
      <name>cloneListeningConnection</name>
      <anchorfile>classSimpleTCPConnection.html</anchorfile>
      <anchor>a49f65ebc48520e42c7fe947d62757694</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleUDP</name>
    <filename>classSimpleUDP.html</filename>
    <member kind="enumeration">
      <name>delayFaultTypeNum</name>
      <anchorfile>classSimpleUDP.html</anchorfile>
      <anchor>aa4e5fd42cffba73dbf4ba822d0d4ffa2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>delayFaultUndefined</name>
      <anchorfile>classSimpleUDP.html</anchorfile>
      <anchor>aa4e5fd42cffba73dbf4ba822d0d4ffa2a50452ff8a31c099ebed32a7c5180d66d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>delayFaultLiveAll</name>
      <anchorfile>classSimpleUDP.html</anchorfile>
      <anchor>aa4e5fd42cffba73dbf4ba822d0d4ffa2ae6ae0ab88a430b94ae7889ac37348d80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>delayFaultLivePlanetlab</name>
      <anchorfile>classSimpleUDP.html</anchorfile>
      <anchor>aa4e5fd42cffba73dbf4ba822d0d4ffa2aadcd8a3040fb5ace9b1082dc42f16d63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>delayFaultSimulation</name>
      <anchorfile>classSimpleUDP.html</anchorfile>
      <anchor>aa4e5fd42cffba73dbf4ba822d0d4ffa2a612e2fec7265712b3685dcbd037920fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodeEntry</name>
      <anchorfile>classSimpleUDP.html</anchorfile>
      <anchor>a38bd15c1be825365db0da0b9854177af</anchor>
      <arglist>(SimpleNodeEntry *entry)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleUDP</name>
      <anchorfile>classSimpleUDP.html</anchorfile>
      <anchor>ab403b43340a300c3e674aa3227b1d4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimpleUDP</name>
      <anchorfile>classSimpleUDP.html</anchorfile>
      <anchor>a65e357849f3932609d8e9149acd99127</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>delayFaultTypeString</name>
      <anchorfile>classSimpleUDP.html</anchorfile>
      <anchor>a92b03f0d4da00a85bbe7e2fdb2ff4990</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::map&lt; std::string, delayFaultTypeNum &gt;</type>
      <name>delayFaultTypeMap</name>
      <anchorfile>classSimpleUDP.html</anchorfile>
      <anchor>aeb99b15b5a517971cbddfefc3b19dc99</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateDisplayString</name>
      <anchorfile>classSimpleUDP.html</anchorfile>
      <anchor>a20d06a96252d39d8495878ac2aa68888</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processMsgFromApp</name>
      <anchorfile>classSimpleUDP.html</anchorfile>
      <anchor>a3c7054450259026c2f3785367ced3db6</anchor>
      <arglist>(cPacket *appData)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processUDPPacket</name>
      <anchorfile>classSimpleUDP.html</anchorfile>
      <anchor>ad0c2f6e2fd8be2ef4145eb3bc826b080</anchor>
      <arglist>(cPacket *udpPacket)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>processUndeliverablePacket</name>
      <anchorfile>classSimpleUDP.html</anchorfile>
      <anchor>a89eb9a74dc4523fe2df5be89befc84a7</anchor>
      <arglist>(cPacket *udpPacket, cPolymorphic *ctrl)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendUp</name>
      <anchorfile>classSimpleUDP.html</anchorfile>
      <anchor>a56b9e6947461b96ec83138f8f4b086e3</anchor>
      <arglist>(cPacket *payload, UDPControlInfo *ctrl, SockDesc *sd)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classSimpleUDP.html</anchorfile>
      <anchor>a843ff1122a9b891150e6382663e4f14c</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classSimpleUDP.html</anchorfile>
      <anchor>aaea6738f51bfb9328dbded365873eed5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classSimpleUDP.html</anchorfile>
      <anchor>a84f320ce3a8b1443675eb457ece7195f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classSimpleUDP.html</anchorfile>
      <anchor>acd07bb77c3915a53948468990a5b61fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numQueueLost</name>
      <anchorfile>classSimpleUDP.html</anchorfile>
      <anchor>a672ba3c32f764a817f34eb92ffba0f5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numPartitionLost</name>
      <anchorfile>classSimpleUDP.html</anchorfile>
      <anchor>a5354f656bbccb5a19c6725c813c0687f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numDestUnavailableLost</name>
      <anchorfile>classSimpleUDP.html</anchorfile>
      <anchor>ac4e9db6a2411ede4fc77b8853f6a11d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>delay</name>
      <anchorfile>classSimpleUDP.html</anchorfile>
      <anchor>a26bfc8c9a3fb37c26f7f01907ec76aa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>constantDelay</name>
      <anchorfile>classSimpleUDP.html</anchorfile>
      <anchor>a7e32c75a0abee8273ada3c7814f21267</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useCoordinateBasedDelay</name>
      <anchorfile>classSimpleUDP.html</anchorfile>
      <anchor>a461c639358fba2c0f57e816bb167445e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>jitter</name>
      <anchorfile>classSimpleUDP.html</anchorfile>
      <anchor>a4b4fb45ccd587cf8000262c9c2ef5c84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>enableAccessRouterTxQueue</name>
      <anchorfile>classSimpleUDP.html</anchorfile>
      <anchor>ac000b9860f2499a0bd8cfa6aafaf6a3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>faultyDelay</name>
      <anchorfile>classSimpleUDP.html</anchorfile>
      <anchor>a17e79c630f84b9b02f3b71c42bac6842</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GlobalNodeList *</type>
      <name>globalNodeList</name>
      <anchorfile>classSimpleUDP.html</anchorfile>
      <anchor>a8fe15b592b8f4dd025d8c5645482b795</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GlobalStatistics *</type>
      <name>globalStatistics</name>
      <anchorfile>classSimpleUDP.html</anchorfile>
      <anchor>a419cfd9b40de8d448ef6199d64e9a25e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleNodeEntry *</type>
      <name>nodeEntry</name>
      <anchorfile>classSimpleUDP.html</anchorfile>
      <anchor>aadf0c399319e8d6632a797c76e53e6f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleUnderlayConfigurator</name>
    <filename>classSimpleUnderlayConfigurator.html</filename>
    <base>UnderlayConfigurator</base>
    <member kind="function">
      <type></type>
      <name>~SimpleUnderlayConfigurator</name>
      <anchorfile>classSimpleUnderlayConfigurator.html</anchorfile>
      <anchor>add00a72436fb6d4a2766e78555e878b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransportAddress *</type>
      <name>createNode</name>
      <anchorfile>classSimpleUnderlayConfigurator.html</anchorfile>
      <anchor>a01e80cf34f3cbb58c1c043a4feb35821</anchor>
      <arglist>(NodeType type, bool initialize=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preKillNode</name>
      <anchorfile>classSimpleUnderlayConfigurator.html</anchorfile>
      <anchor>abe70659a4c1ee2bbb27fb4467fb3ab15</anchor>
      <arglist>(NodeType type, TransportAddress *addr=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>migrateNode</name>
      <anchorfile>classSimpleUnderlayConfigurator.html</anchorfile>
      <anchor>a26a103b7cc280308bd44db2acddf5013</anchor>
      <arglist>(NodeType type, TransportAddress *addr=NULL)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getFieldSize</name>
      <anchorfile>classSimpleUnderlayConfigurator.html</anchorfile>
      <anchor>aef11a8652906a77e700c3bc5484d9d68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getFieldDimension</name>
      <anchorfile>classSimpleUnderlayConfigurator.html</anchorfile>
      <anchor>a67e752b7f01956450b195323183ed42a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getSendQueueLenghth</name>
      <anchorfile>classSimpleUnderlayConfigurator.html</anchorfile>
      <anchor>aaa3701ffd7cf4fbaa3bd732082d71807</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IPvXAddress</type>
      <name>migrateNode</name>
      <anchorfile>classSimpleUnderlayConfigurator.html</anchorfile>
      <anchor>a4c0c6c00e927bff8cec95a471842e5cf</anchor>
      <arglist>(NodeType type, IPvXAddress addr, const BaseLocation &amp;locID)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDistance</name>
      <anchorfile>classSimpleUnderlayConfigurator.html</anchorfile>
      <anchor>aff93b98977dd0a5192c23e9204d2b2d2</anchor>
      <arglist>(const BaseLocation &amp;IDa, const BaseLocation &amp;IDb)</arglist>
    </member>
    <member kind="function">
      <type>BaseLocation *</type>
      <name>getNearLocation</name>
      <anchorfile>classSimpleUnderlayConfigurator.html</anchorfile>
      <anchor>a40c12b8590e3379cc0d2ed94369155c6</anchor>
      <arglist>(const BaseLocation &amp;ID, double radius)</arglist>
    </member>
    <member kind="function">
      <type>BaseLocation *</type>
      <name>getLocation</name>
      <anchorfile>classSimpleUnderlayConfigurator.html</anchorfile>
      <anchor>a07043859d8bf6f2c059ede2fc204899a</anchor>
      <arglist>(IPvXAddress addr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initializeUnderlay</name>
      <anchorfile>classSimpleUnderlayConfigurator.html</anchorfile>
      <anchor>ab7fd87c60ac4996f6a386ddafd75f910</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classSimpleUnderlayConfigurator.html</anchorfile>
      <anchor>aea24c168ca0dc5875e6777163ad94639</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finishUnderlay</name>
      <anchorfile>classSimpleUnderlayConfigurator.html</anchorfile>
      <anchor>a5855dfcfda48a7d5b0cd7bd15141855c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setDisplayString</name>
      <anchorfile>classSimpleUnderlayConfigurator.html</anchorfile>
      <anchor>a9be788afafc6f35b513cbc8a531963aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint32_t</type>
      <name>parseCoordFile</name>
      <anchorfile>classSimpleUnderlayConfigurator.html</anchorfile>
      <anchor>a61448a99cad40fd5a6e0862795e1da71</anchor>
      <arglist>(const char *nodeCoordinateSource)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>nextFreeAddress</name>
      <anchorfile>classSimpleUnderlayConfigurator.html</anchorfile>
      <anchor>a74e060fbb843ff7ae4de051de4d027e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::deque&lt; IPvXAddress &gt;</type>
      <name>killList</name>
      <anchorfile>classSimpleUnderlayConfigurator.html</anchorfile>
      <anchor>ac52c4d8d68fca88102484ac090e722d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; int &gt;</type>
      <name>scheduledID</name>
      <anchorfile>classSimpleUnderlayConfigurator.html</anchorfile>
      <anchor>a6703528bc0737dc0e53657f2d60be51d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>sendQueueLength</name>
      <anchorfile>classSimpleUnderlayConfigurator.html</anchorfile>
      <anchor>ac3ad270434b285b70996246f7c62e534</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>fieldSize</name>
      <anchorfile>classSimpleUnderlayConfigurator.html</anchorfile>
      <anchor>a2980802de08860ddf161b6db5b613e23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dimensions</name>
      <anchorfile>classSimpleUnderlayConfigurator.html</anchorfile>
      <anchor>a0a8c092a6a1068c62e1ddca0af52ce2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>fixedNodePositions</name>
      <anchorfile>classSimpleUnderlayConfigurator.html</anchorfile>
      <anchor>a88fe612fd63812baac86fb9a401a1650</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useIPv6</name>
      <anchorfile>classSimpleUnderlayConfigurator.html</anchorfile>
      <anchor>a3d614789dc71626684760ce84a2354d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useXmlCoords</name>
      <anchorfile>classSimpleUnderlayConfigurator.html</anchorfile>
      <anchor>a3d5797106fa175c310b9bdae26a3559d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>nodeCoordinateSource</name>
      <anchorfile>classSimpleUnderlayConfigurator.html</anchorfile>
      <anchor>a25c208ee08648c0ce1aac8ec26614759</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>maxCoordinate</name>
      <anchorfile>classSimpleUnderlayConfigurator.html</anchorfile>
      <anchor>a3a346131def8785e3973aa04579e65ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::pair&lt; NodeRecord *, bool &gt; &gt;</type>
      <name>nodeRecordPool</name>
      <anchorfile>classSimpleUnderlayConfigurator.html</anchorfile>
      <anchor>a7ebb95f75b6da93cbbc36008f7e30eb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numCreated</name>
      <anchorfile>classSimpleUnderlayConfigurator.html</anchorfile>
      <anchor>a8be3a17d1c26fd5ee8d797cff54ad62c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numKilled</name>
      <anchorfile>classSimpleUnderlayConfigurator.html</anchorfile>
      <anchor>a3fec2fe5170072409cc7e92691154b29</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleUnderlayCoordsInfo</name>
    <filename>classSimpleUnderlayCoordsInfo.html</filename>
    <base>EuclideanNcsNodeInfo</base>
    <member kind="function">
      <type></type>
      <name>operator Coords</name>
      <anchorfile>classSimpleUnderlayCoordsInfo.html</anchorfile>
      <anchor>a50936ccdff51005157231406f085e0f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classSimpleUnderlayCoordsInfo.html</anchorfile>
      <anchor>aa12842f7669331d2b1417ceab7d6f61a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Prox</type>
      <name>getDistance</name>
      <anchorfile>classSimpleUnderlayCoordsInfo.html</anchorfile>
      <anchor>ad6f9b76b324a76beb17d54d3357ba15d</anchor>
      <arglist>(const AbstractNcsNodeInfo &amp;abstractInfo) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>classSimpleUnderlayCoordsInfo.html</anchorfile>
      <anchor>a453884f3a76e308e64a5da76bc36f80b</anchor>
      <arglist>(const AbstractNcsNodeInfo &amp;abstractInfo)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleUnderlayNCS</name>
    <filename>classSimpleUnderlayNCS.html</filename>
    <base>AbstractNcs</base>
    <member kind="function">
      <type></type>
      <name>SimpleUnderlayNCS</name>
      <anchorfile>classSimpleUnderlayNCS.html</anchorfile>
      <anchor>a31e1cc59b5d257b439eafad4c2ec8400</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimpleUnderlayNCS</name>
      <anchorfile>classSimpleUnderlayNCS.html</anchorfile>
      <anchor>ae8ec664489d416aeb993b283a93f7810</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSimpleUnderlayNCS.html</anchorfile>
      <anchor>af48430ddea49c3660257b133f3fc410c</anchor>
      <arglist>(NeighborCache *neighorCache)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractNcsNodeInfo *</type>
      <name>getUnvalidNcsInfo</name>
      <anchorfile>classSimpleUnderlayNCS.html</anchorfile>
      <anchor>abaf1f7441eeaf18a786f551fdf2392c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isAdapting</name>
      <anchorfile>classSimpleUnderlayNCS.html</anchorfile>
      <anchor>a5ad536fdbbbac61c8c000fad6bae1791</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AbstractNcsNodeInfo *</type>
      <name>createNcsInfo</name>
      <anchorfile>classSimpleUnderlayNCS.html</anchorfile>
      <anchor>a82d5634c0117cb521e4e079efb1bbbdd</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;coords) const </arglist>
    </member>
    <member kind="function">
      <type>Prox</type>
      <name>getCoordinateBasedProx</name>
      <anchorfile>classSimpleUnderlayNCS.html</anchorfile>
      <anchor>a998db7229e5fe6079815d2978c42d8ed</anchor>
      <arglist>(const AbstractNcsNodeInfo &amp;info) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const AbstractNcsNodeInfo &amp;</type>
      <name>getOwnNcsInfo</name>
      <anchorfile>classSimpleUnderlayNCS.html</anchorfile>
      <anchor>ad8f41d6fd9ef030794f851a63c662c38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NeighborCache *</type>
      <name>neighborCache</name>
      <anchorfile>classSimpleUnderlayNCS.html</anchorfile>
      <anchor>a516caf5f1e63c0be6b5c385c9cba16ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleUnderlayCoordsInfo *</type>
      <name>ownCoords</name>
      <anchorfile>classSimpleUnderlayNCS.html</anchorfile>
      <anchor>a72531a5588e276142e92638751ef65b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Simplex</name>
    <filename>classSimplex.html</filename>
    <member kind="function">
      <type></type>
      <name>Simplex</name>
      <anchorfile>classSimplex.html</anchorfile>
      <anchor>ab63d4813934ecf50121c01bb8b338254</anchor>
      <arglist>(int dimension)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Simplex</name>
      <anchorfile>classSimplex.html</anchorfile>
      <anchor>a3986e67caafd3bf4911478a7654ec002</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec_DP &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSimplex.html</anchorfile>
      <anchor>ac136ba3c9b578fd75814dfa07dc3980d</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>high</name>
      <anchorfile>classSimplex.html</anchorfile>
      <anchor>ace1b8dc8b778e5bb274b99fcca757e86</anchor>
      <arglist>(double *val=0) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>low</name>
      <anchorfile>classSimplex.html</anchorfile>
      <anchor>af24f8e9f6d735df0cd94598023495de5</anchor>
      <arglist>(double *val=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>centroid</name>
      <anchorfile>classSimplex.html</anchorfile>
      <anchor>a6d1c2cadb7915502a358987bcc2af439</anchor>
      <arglist>(Vec_DP &amp;vec) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>size</name>
      <anchorfile>classSimplex.html</anchorfile>
      <anchor>a90d3856f4edcbe6cc619531e7d5eca5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>reflect</name>
      <anchorfile>classSimplex.html</anchorfile>
      <anchor>a1e3d381783ad5ba9916eeb9e2f803aa8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>reflect_exp</name>
      <anchorfile>classSimplex.html</anchorfile>
      <anchor>a5c031b5fb5c00d5a1bf092a110faed3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>contract</name>
      <anchorfile>classSimplex.html</anchorfile>
      <anchor>a622c0646451074bb454dfcda2565d958</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduce</name>
      <anchorfile>classSimplex.html</anchorfile>
      <anchor>ab1724197048909cf2cd6d812a1bb48a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>CoordCalcFunction *</type>
      <name>functionObject</name>
      <anchorfile>classSimplex.html</anchorfile>
      <anchor>aa74c3952428833ae932cee1d4c8df6df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nverts</name>
      <anchorfile>classSimplex.html</anchorfile>
      <anchor>a24e87db4abf26fec02ce4fecb76a37db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vec_DP **</type>
      <name>verts</name>
      <anchorfile>classSimplex.html</anchorfile>
      <anchor>ac3b20223f75f95a0155cceee27597109</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>dim</name>
      <anchorfile>classSimplex.html</anchorfile>
      <anchor>a0af66979d8cd861fbf599f2a840572ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SingleHostUnderlayConfigurator</name>
    <filename>classSingleHostUnderlayConfigurator.html</filename>
    <base>UnderlayConfigurator</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initializeUnderlay</name>
      <anchorfile>classSingleHostUnderlayConfigurator.html</anchorfile>
      <anchor>a6a1fe38b21633089d8d78f0ed10b208c</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finishUnderlay</name>
      <anchorfile>classSingleHostUnderlayConfigurator.html</anchorfile>
      <anchor>a809b28cd4021d225aa2f78efd90c212f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setDisplayString</name>
      <anchorfile>classSingleHostUnderlayConfigurator.html</anchorfile>
      <anchor>a38b2716ca9257a11cb136b8967379dd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classSingleHostUnderlayConfigurator.html</anchorfile>
      <anchor>abbe3008b1ddd53242eba802b5fe6f8e0</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TransportAddress *</type>
      <name>createNode</name>
      <anchorfile>classSingleHostUnderlayConfigurator.html</anchorfile>
      <anchor>a93dbddafedc08fe8109090de4fa804a5</anchor>
      <arglist>(NodeType type, bool initialize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>preKillNode</name>
      <anchorfile>classSingleHostUnderlayConfigurator.html</anchorfile>
      <anchor>a6acce052d42d5d373d7e276ce6c0d37e</anchor>
      <arglist>(NodeType type, TransportAddress *addr=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>migrateNode</name>
      <anchorfile>classSingleHostUnderlayConfigurator.html</anchorfile>
      <anchor>ac71d496cfe481e3d965098f2f4e1d7ff</anchor>
      <arglist>(NodeType type, TransportAddress *addr=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SingleHostUnderlayPacketNotification</name>
    <filename>classSingleHostUnderlayPacketNotification.html</filename>
    <member kind="function">
      <type></type>
      <name>SingleHostUnderlayPacketNotification</name>
      <anchorfile>classSingleHostUnderlayPacketNotification.html</anchorfile>
      <anchor>aabc1b84fa5f3c5afcaf5312fa5281892</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SingleHostUnderlayPacketNotification</name>
      <anchorfile>classSingleHostUnderlayPacketNotification.html</anchorfile>
      <anchor>a8772f478ee5dc01a051c7c8c972362a5</anchor>
      <arglist>(const SingleHostUnderlayPacketNotification &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SingleHostUnderlayPacketNotification</name>
      <anchorfile>classSingleHostUnderlayPacketNotification.html</anchorfile>
      <anchor>a1c2b21f4be8f7653d7bc41162995512e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SingleHostUnderlayPacketNotification &amp;</type>
      <name>operator=</name>
      <anchorfile>classSingleHostUnderlayPacketNotification.html</anchorfile>
      <anchor>a5e4a190fe4156b125faf05d80e476f56</anchor>
      <arglist>(const SingleHostUnderlayPacketNotification &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SingleHostUnderlayPacketNotification *</type>
      <name>dup</name>
      <anchorfile>classSingleHostUnderlayPacketNotification.html</anchorfile>
      <anchor>a0db87e004b18a2d94f53b300089f66e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classSingleHostUnderlayPacketNotification.html</anchorfile>
      <anchor>afb30b84803c9568631bc4eba7ffe3705</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classSingleHostUnderlayPacketNotification.html</anchorfile>
      <anchor>a78785e1bc8ccfb735c7905a2609a7f66</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSingleHostUnderlayPacketNotification.html</anchorfile>
      <anchor>ae3652fa4256b8a61b501a1d6dba751b8</anchor>
      <arglist>(const SingleHostUnderlayPacketNotification &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classSingleHostUnderlayPacketNotification.html</anchorfile>
      <anchor>a81318978afc104453d1c15d7750d89d3</anchor>
      <arglist>(const SingleHostUnderlayPacketNotification &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Site</name>
    <filename>classSite.html</filename>
    <member kind="function">
      <type></type>
      <name>Site</name>
      <anchorfile>classSite.html</anchorfile>
      <anchor>a4119f95c45d57d6edf419169dea993f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Vector2D</type>
      <name>coord</name>
      <anchorfile>classSite.html</anchorfile>
      <anchor>a47f1f719668ba23a61049c2178fd4226</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>type</name>
      <anchorfile>classSite.html</anchorfile>
      <anchor>a8285244e3eb082cd382c6971b56066a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>innerEdge</name>
      <anchorfile>classSite.html</anchorfile>
      <anchor>af3127538ba2958a14647256be4f4c4cb</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>outerEdge</name>
      <anchorfile>classSite.html</anchorfile>
      <anchor>a5246e75a77da90982c7dad7a3c6a5e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isAdded</name>
      <anchorfile>classSite.html</anchorfile>
      <anchor>a54fc002cfbfbc0953f35db99d9a0c45e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NodeHandle</type>
      <name>addr</name>
      <anchorfile>classSite.html</anchorfile>
      <anchor>a00aa6ee527770673220a97dd7bff3c4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>tstamp</name>
      <anchorfile>classSite.html</anchorfile>
      <anchor>ad1fc86cf5be1fd937ad022e3fd2623bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>neighborCount</name>
      <anchorfile>classSite.html</anchorfile>
      <anchor>ad049b81de6bddc5f2b5c198ca391dff6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnclosingSet</type>
      <name>enclosingSet</name>
      <anchorfile>classSite.html</anchorfile>
      <anchor>a0b03f30a81bb8c872570ca60d3bde3f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnclosingSet</type>
      <name>oldEnclosingSet</name>
      <anchorfile>classSite.html</anchorfile>
      <anchor>a5f6d5fd56ae316f506bcb02590f1a24e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSite.html</anchorfile>
      <anchor>a570266e98dc206baab659a39e5b85a2f</anchor>
      <arglist>(std::ostream &amp;Stream, const Site s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StabilizeCall</name>
    <filename>classStabilizeCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>StabilizeCall</name>
      <anchorfile>classStabilizeCall.html</anchorfile>
      <anchor>af3dd428be95bbabc6f95b39773715807</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StabilizeCall</name>
      <anchorfile>classStabilizeCall.html</anchorfile>
      <anchor>ac368934ef0ce1b115d95f9f4bf5dcb3d</anchor>
      <arglist>(const StabilizeCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StabilizeCall</name>
      <anchorfile>classStabilizeCall.html</anchorfile>
      <anchor>a83fcfd6ee81ee0fcaecbbddc135b9130</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StabilizeCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classStabilizeCall.html</anchorfile>
      <anchor>a180919d0a108d71db06fb82b1dcef1c8</anchor>
      <arglist>(const StabilizeCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StabilizeCall *</type>
      <name>dup</name>
      <anchorfile>classStabilizeCall.html</anchorfile>
      <anchor>ae2940a75da85951fb8baaa5c44c77298</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classStabilizeCall.html</anchorfile>
      <anchor>abe7bf22b1fb9ca99e83bb38d2f8c2e37</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classStabilizeCall.html</anchorfile>
      <anchor>ad489223904f20c3c4e1b4f4dd876b532</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classStabilizeCall.html</anchorfile>
      <anchor>ada99c323e1188537e98e1cc6f3b33d67</anchor>
      <arglist>(const StabilizeCall &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classStabilizeCall.html</anchorfile>
      <anchor>a507b14d34c08f5bf108d73c972bd5a6e</anchor>
      <arglist>(const StabilizeCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StabilizeResponse</name>
    <filename>classStabilizeResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>StabilizeResponse</name>
      <anchorfile>classStabilizeResponse.html</anchorfile>
      <anchor>ad3f2b43bdfe8a25007fddbf3b1f50036</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StabilizeResponse</name>
      <anchorfile>classStabilizeResponse.html</anchorfile>
      <anchor>a3a99e046a3ed77e815263119ed4d3c84</anchor>
      <arglist>(const StabilizeResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StabilizeResponse</name>
      <anchorfile>classStabilizeResponse.html</anchorfile>
      <anchor>aabe619c8ede0f70c6c5e88753650f6e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StabilizeResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classStabilizeResponse.html</anchorfile>
      <anchor>a6f07dabdc4e16b0df12d9583b8b4d405</anchor>
      <arglist>(const StabilizeResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StabilizeResponse *</type>
      <name>dup</name>
      <anchorfile>classStabilizeResponse.html</anchorfile>
      <anchor>a460226d2ad68aed50cde079eb8a074be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classStabilizeResponse.html</anchorfile>
      <anchor>afd9064e02114c2c3676bc623d1bf65ea</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classStabilizeResponse.html</anchorfile>
      <anchor>a004d8ceb3484d6d36b75dd9260a1736c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getPreNode</name>
      <anchorfile>classStabilizeResponse.html</anchorfile>
      <anchor>a66091e2cde4bb0374a849303185fad36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getPreNode</name>
      <anchorfile>classStabilizeResponse.html</anchorfile>
      <anchor>a84cfc4c6a6492f0d8f76bf6b640f2b41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPreNode</name>
      <anchorfile>classStabilizeResponse.html</anchorfile>
      <anchor>a26850f8bc1186b20d9d66b45bef787d3</anchor>
      <arglist>(const NodeHandle &amp;preNode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classStabilizeResponse.html</anchorfile>
      <anchor>af2ca47eae20fe5bc30c2ac2cd74f252e</anchor>
      <arglist>(const StabilizeResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>preNode_var</name>
      <anchorfile>classStabilizeResponse.html</anchorfile>
      <anchor>a4d7ded49646140dacbb61b9efa7f9721</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classStabilizeResponse.html</anchorfile>
      <anchor>aec0676b7bd30dfb805f953d404414eb1</anchor>
      <arglist>(const StabilizeResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>StatisticsAndDelay</name>
    <filename>structStatisticsAndDelay.html</filename>
    <member kind="enumeration">
      <name>delayFaultTypeNum</name>
      <anchorfile>structStatisticsAndDelay.html</anchorfile>
      <anchor>a6eb37bf361df435d4e1cf891d2991ba5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>delayFaultUndefined</name>
      <anchorfile>structStatisticsAndDelay.html</anchorfile>
      <anchor>a6eb37bf361df435d4e1cf891d2991ba5ac1bf1f8e684fd75e218e927596a3fbc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>delayFaultLiveAll</name>
      <anchorfile>structStatisticsAndDelay.html</anchorfile>
      <anchor>a6eb37bf361df435d4e1cf891d2991ba5afe0ee069144d796135bce380e1ac42ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>delayFaultLivePlanetlab</name>
      <anchorfile>structStatisticsAndDelay.html</anchorfile>
      <anchor>a6eb37bf361df435d4e1cf891d2991ba5abac63ff392f0a1998949bb1f695c659d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>delayFaultSimulation</name>
      <anchorfile>structStatisticsAndDelay.html</anchorfile>
      <anchor>a6eb37bf361df435d4e1cf891d2991ba5ae51377332ebe1815bf3ecf5500144df1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>delayFaultTypeString</name>
      <anchorfile>structStatisticsAndDelay.html</anchorfile>
      <anchor>a2c9bb33b62dae21a5637c936d75d6704</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, delayFaultTypeNum &gt;</type>
      <name>delayFaultTypeMap</name>
      <anchorfile>structStatisticsAndDelay.html</anchorfile>
      <anchor>a18a2a8f3860314e112519d7fc7e63523</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numSent</name>
      <anchorfile>structStatisticsAndDelay.html</anchorfile>
      <anchor>aeb20fdd2c64084ebe3038bfa988a9c15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numQueueLost</name>
      <anchorfile>structStatisticsAndDelay.html</anchorfile>
      <anchor>ac0fb0c280a914930b352e7d3c5f45e2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numPartitionLost</name>
      <anchorfile>structStatisticsAndDelay.html</anchorfile>
      <anchor>a836c38197079b0f21a52eb2cd5544576</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numDestUnavailableLost</name>
      <anchorfile>structStatisticsAndDelay.html</anchorfile>
      <anchor>aca04ef22c6c8bd65cd98a7af58d577dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>delay</name>
      <anchorfile>structStatisticsAndDelay.html</anchorfile>
      <anchor>a1d24013607a6d6763cb75d9211dbd653</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>constantDelay</name>
      <anchorfile>structStatisticsAndDelay.html</anchorfile>
      <anchor>a5e1bfce6c505beb5dc3f32e3a264878f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>useCoordinateBasedDelay</name>
      <anchorfile>structStatisticsAndDelay.html</anchorfile>
      <anchor>a888474d52c0422097930c2abe1c61d74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>jitter</name>
      <anchorfile>structStatisticsAndDelay.html</anchorfile>
      <anchor>a6411eade894d17778e15653bed25f2ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>faultyDelay</name>
      <anchorfile>structStatisticsAndDelay.html</anchorfile>
      <anchor>a94c50ce1f8cadf64798d65257cd17725</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GlobalNodeList *</type>
      <name>globalNodeList</name>
      <anchorfile>structStatisticsAndDelay.html</anchorfile>
      <anchor>a5512c6e7fd7a47e681f2a8dc3e50cc3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GlobalStatistics *</type>
      <name>globalStatistics</name>
      <anchorfile>structStatisticsAndDelay.html</anchorfile>
      <anchor>a86b9b08948fd5ac856dbe8f6e5e2f8c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SimpleNodeEntry *</type>
      <name>nodeEntry</name>
      <anchorfile>structStatisticsAndDelay.html</anchorfile>
      <anchor>a9ff3d8314da300706b11edfda9c43ef5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StdProxComparator</name>
    <filename>classStdProxComparator.html</filename>
    <base>AbstractProxComparator</base>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classStdProxComparator.html</anchorfile>
      <anchor>ab5cbafdbe6fd9493882123b560b56853</anchor>
      <arglist>(const Prox &amp;lhs, const Prox &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StrategyRegions</name>
    <filename>classStrategyRegions.html</filename>
    <base>AbstractSendStrategy</base>
    <member kind="function">
      <type></type>
      <name>StrategyRegions</name>
      <anchorfile>classStrategyRegions.html</anchorfile>
      <anchor>a38bafe4e42c82161c6ec4b26467fa533</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StrategyRegions</name>
      <anchorfile>classStrategyRegions.html</anchorfile>
      <anchor>a2fe9b5007170d534e53b4d031945c6df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GlobalViewBuilderCall *</type>
      <name>getCoordinateMessage</name>
      <anchorfile>classStrategyRegions.html</anchorfile>
      <anchor>aa1a9dbe32752167c880aac701abc2255</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleCoordinateRpcCall</name>
      <anchorfile>classStrategyRegions.html</anchorfile>
      <anchor>a456edbd7da2b20e439389aec1d29353d</anchor>
      <arglist>(GlobalViewBuilderCall *globalViewBuilderCall)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getStrategyDataStatus</name>
      <anchorfile>classStrategyRegions.html</anchorfile>
      <anchor>a217ab800128352bce127fc7ff4bcbbad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>getGlobalViewData</name>
      <anchorfile>classStrategyRegions.html</anchorfile>
      <anchor>aad00ac8941861a29165fe1298b185058</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMyCoordinates</name>
      <anchorfile>classStrategyRegions.html</anchorfile>
      <anchor>ae7b167d1b3cbd355f75214aab408272a</anchor>
      <arglist>(const AbstractNcsNodeInfo &amp;ncsInfo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cleanUpCoordData</name>
      <anchorfile>classStrategyRegions.html</anchorfile>
      <anchor>af730cc436bba74c64808030955ac48f1</anchor>
      <arglist>(const treeNodeMap &amp;currentTreeChildNodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getStrategyCombinedParams</name>
      <anchorfile>classStrategyRegions.html</anchorfile>
      <anchor>aa6bb1b50d476f55a1fb490c4de951842</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>debugRegionData</name>
      <anchorfile>classStrategyRegions.html</anchorfile>
      <anchor>a5c29edaa208153bebb13647e0bce751e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; long &gt;</type>
      <name>regionVector</name>
      <anchorfile>classStrategyRegions.html</anchorfile>
      <anchor>ac2f52ce7989ffcc1bfd99c3950af0ca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; TransportAddress, regionCountMap &gt;</type>
      <name>nodeRegionData</name>
      <anchorfile>classStrategyRegions.html</anchorfile>
      <anchor>a743aa45d3806112f22b20590dc3c66c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>UNORDERED_MAP&lt; TransportAddress, regionCountMap, TransportAddress::hashFcn &gt;</type>
      <name>branchRegionDataMap</name>
      <anchorfile>classStrategyRegions.html</anchorfile>
      <anchor>a164f0f354a9c3e14f8aa95dc8d06db9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>long</type>
      <name>convertCoordVectorToRegion</name>
      <anchorfile>classStrategyRegions.html</anchorfile>
      <anchor>ae2249b1670f18f7ef724e27ceb216980</anchor>
      <arglist>(std::vector&lt; double &gt; coordVector)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>convertRegionToCoordVector</name>
      <anchorfile>classStrategyRegions.html</anchorfile>
      <anchor>a7e44c9ea822a2a8799fac4265e9452fc</anchor>
      <arglist>(int region, int dimCount)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const regionCountMap</type>
      <name>getCombinedRegionsMap</name>
      <anchorfile>classStrategyRegions.html</anchorfile>
      <anchor>ad625a0c5ade8b70e95978b17f9cf05b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setBranchCoordinates</name>
      <anchorfile>classStrategyRegions.html</anchorfile>
      <anchor>a066ee9e78fc99d6eba00e9944f238579</anchor>
      <arglist>(const NodeHandle &amp;node, regionCountMap countMap)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getSizePerDim</name>
      <anchorfile>classStrategyRegions.html</anchorfile>
      <anchor>a2d99fb7c56c18ed4c73a1dc21850a71b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getMaxSpread</name>
      <anchorfile>classStrategyRegions.html</anchorfile>
      <anchor>a6effa104dfbab110172cc21d68f4dfc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>checkMaxSpread</name>
      <anchorfile>classStrategyRegions.html</anchorfile>
      <anchor>a0ae4eb25c611df36a4cee7c81ab12f04</anchor>
      <arglist>(double dimValue)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>branchRegionDataMap</type>
      <name>regionData</name>
      <anchorfile>classStrategyRegions.html</anchorfile>
      <anchor>adee74dee03caa8fa3d8047a9f6f680c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StrategyRemoveCoords</name>
    <filename>classStrategyRemoveCoords.html</filename>
    <base>StrategySendAll</base>
    <member kind="function">
      <type></type>
      <name>StrategyRemoveCoords</name>
      <anchorfile>classStrategyRemoveCoords.html</anchorfile>
      <anchor>a8bc48aa9fe78dd07f28a07d8b5dc06cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StrategyRemoveCoords</name>
      <anchorfile>classStrategyRemoveCoords.html</anchorfile>
      <anchor>a3b3c5e63229b8eabc863967789c3b20e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GlobalViewBuilderCall *</type>
      <name>getCoordinateMessage</name>
      <anchorfile>classStrategyRemoveCoords.html</anchorfile>
      <anchor>a3be4bd8411555ac9ff1c891f869104ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getStrategyCombinedParams</name>
      <anchorfile>classStrategyRemoveCoords.html</anchorfile>
      <anchor>ac1b9e4fbfe31eed2e8fbb7f5ab5663ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processCoordinates</name>
      <anchorfile>classStrategyRemoveCoords.html</anchorfile>
      <anchor>a258dff886246b569645b279442537944</anchor>
      <arglist>(coordinatesVector *coords)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeCoordinatesByPercentage</name>
      <anchorfile>classStrategyRemoveCoords.html</anchorfile>
      <anchor>acf65cabe94d5aeba75acbdfd35466d7d</anchor>
      <arglist>(coordinatesVector *coords, int percentage)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeCoordinatesByCoordLimit</name>
      <anchorfile>classStrategyRemoveCoords.html</anchorfile>
      <anchor>ac3c4a59816f9811954a6c9d913d3c7bd</anchor>
      <arglist>(coordinatesVector *coords, int coordLimit)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeCoordinatesByTrafficLimit</name>
      <anchorfile>classStrategyRemoveCoords.html</anchorfile>
      <anchor>af7709337527f0c9bc764fc40d0c3fa5e</anchor>
      <arglist>(coordinatesVector *coords, int trafficLimit)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeCoordinates</name>
      <anchorfile>classStrategyRemoveCoords.html</anchorfile>
      <anchor>a44c329e27e956b82101bf2fc782ae337</anchor>
      <arglist>(coordinatesVector *coords, int entrysToRemove)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StrategyRemoveInaccurate</name>
    <filename>classStrategyRemoveInaccurate.html</filename>
    <base>StrategyRemoveCoords</base>
    <member kind="function">
      <type></type>
      <name>StrategyRemoveInaccurate</name>
      <anchorfile>classStrategyRemoveInaccurate.html</anchorfile>
      <anchor>a08d4aa58111f395e9e29a19180e4ca78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StrategyRemoveInaccurate</name>
      <anchorfile>classStrategyRemoveInaccurate.html</anchorfile>
      <anchor>a5ac36ffe013e1b774902b8a502006ccc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMyCoordinates</name>
      <anchorfile>classStrategyRemoveInaccurate.html</anchorfile>
      <anchor>aa32fbcbbb3056adc793deef9e94867c1</anchor>
      <arglist>(const AbstractNcsNodeInfo &amp;ncsInfo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeCoordinates</name>
      <anchorfile>classStrategyRemoveInaccurate.html</anchorfile>
      <anchor>a679f0bc662ccc69016c8be88d5b06153</anchor>
      <arglist>(coordinatesVector *coords, int entrysToRemove)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StrategyRemoveRandom</name>
    <filename>classStrategyRemoveRandom.html</filename>
    <base>StrategyRemoveCoords</base>
    <member kind="function">
      <type></type>
      <name>StrategyRemoveRandom</name>
      <anchorfile>classStrategyRemoveRandom.html</anchorfile>
      <anchor>a27e7d80f1594977159f3e2fbe95e845f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StrategyRemoveRandom</name>
      <anchorfile>classStrategyRemoveRandom.html</anchorfile>
      <anchor>ab44430336ebb0baf78943b335417d948</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeCoordinates</name>
      <anchorfile>classStrategyRemoveRandom.html</anchorfile>
      <anchor>ac8354eb23fb6aa73c83a1796c6d0b1bd</anchor>
      <arglist>(coordinatesVector *coords, int entrysToRemove)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StrategySendAll</name>
    <filename>classStrategySendAll.html</filename>
    <base>AbstractSendStrategy</base>
    <member kind="function">
      <type></type>
      <name>StrategySendAll</name>
      <anchorfile>classStrategySendAll.html</anchorfile>
      <anchor>a57a666c40f938a1e35601dd0f6b96074</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StrategySendAll</name>
      <anchorfile>classStrategySendAll.html</anchorfile>
      <anchor>a3a94a2e9ff45e841ff15b65d4942cf89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMyCoordinates</name>
      <anchorfile>classStrategySendAll.html</anchorfile>
      <anchor>af9b1153f88d3790c8f4018daf3545e3a</anchor>
      <arglist>(const AbstractNcsNodeInfo &amp;ncsInfo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GlobalViewBuilderCall *</type>
      <name>getCoordinateMessage</name>
      <anchorfile>classStrategySendAll.html</anchorfile>
      <anchor>a207f4b97dc16f7782292e6fd72f1fa8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleCoordinateRpcCall</name>
      <anchorfile>classStrategySendAll.html</anchorfile>
      <anchor>a6c766f0312bc5b96a7288ee4d9f47d20</anchor>
      <arglist>(GlobalViewBuilderCall *globalViewBuilderCall)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getStrategyDataStatus</name>
      <anchorfile>classStrategySendAll.html</anchorfile>
      <anchor>a9a801bfee9c3005df7a3c4c37cb2772c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>getGlobalViewData</name>
      <anchorfile>classStrategySendAll.html</anchorfile>
      <anchor>a9d7e93779e01e04a84b1874b7693bfe5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cleanUpCoordData</name>
      <anchorfile>classStrategySendAll.html</anchorfile>
      <anchor>a0c994889770509540c79db37c0bafa07</anchor>
      <arglist>(const treeNodeMap &amp;currentTreeChildNodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getStrategyCombinedParams</name>
      <anchorfile>classStrategySendAll.html</anchorfile>
      <anchor>a0039466e5fe9cb79e64f1ab2f6d9355e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>coordinatesVector</name>
      <anchorfile>classStrategySendAll.html</anchorfile>
      <anchor>a132971792df2403af790ed6f1222b2e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; TransportAddress, coordinatesVector &gt;</type>
      <name>nodeCoordData</name>
      <anchorfile>classStrategySendAll.html</anchorfile>
      <anchor>af7a0dd5e1027be8476a6b73af1deae66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>UNORDERED_MAP&lt; TransportAddress, coordinatesVector, TransportAddress::hashFcn &gt;</type>
      <name>coordDataMap</name>
      <anchorfile>classStrategySendAll.html</anchorfile>
      <anchor>ac37a879bad4b1ff678e336687e6e03fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setBranchCoordinates</name>
      <anchorfile>classStrategySendAll.html</anchorfile>
      <anchor>ae0b4863b9ab31cc8982ed9f0b1cc96f7</anchor>
      <arglist>(const NodeHandle &amp;node, coordinatesVector coordsVector)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>getCombinedCoordsVector</name>
      <anchorfile>classStrategySendAll.html</anchorfile>
      <anchor>a3858e167914150392bbcf2f62cdcdbc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>getSizeOfCoordVector</name>
      <anchorfile>classStrategySendAll.html</anchorfile>
      <anchor>afc5c5d0dcb7e21c2365bb9cf975c67e6</anchor>
      <arglist>(const coordinatesVector &amp;combinedCoordsVector)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>getSizeOfSingleCoordinate</name>
      <anchorfile>classStrategySendAll.html</anchorfile>
      <anchor>a297ba52396387d1a666a7d77344c473e</anchor>
      <arglist>(const coordinatesVector &amp;combinedCoordsVector)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>coordDataMap</type>
      <name>coordData</name>
      <anchorfile>classStrategySendAll.html</anchorfile>
      <anchor>a110324f7f90a50f4315b2f76c7a9e885</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StrategySimplifyCoords</name>
    <filename>classStrategySimplifyCoords.html</filename>
    <base>AbstractSendStrategy</base>
    <member kind="function">
      <type></type>
      <name>StrategySimplifyCoords</name>
      <anchorfile>classStrategySimplifyCoords.html</anchorfile>
      <anchor>a42bc6b2ff6ed0ed78ba22b43de775ed5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StrategySimplifyCoords</name>
      <anchorfile>classStrategySimplifyCoords.html</anchorfile>
      <anchor>af74f92b99dfc6ab8dddee20f7ded8ae7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GlobalViewBuilderCall *</type>
      <name>getCoordinateMessage</name>
      <anchorfile>classStrategySimplifyCoords.html</anchorfile>
      <anchor>a8194622f25f786bf578b311bd8390560</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleCoordinateRpcCall</name>
      <anchorfile>classStrategySimplifyCoords.html</anchorfile>
      <anchor>a0409ebe829848259159289fdc4ffaaac</anchor>
      <arglist>(GlobalViewBuilderCall *globalViewBuilderCall)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getStrategyDataStatus</name>
      <anchorfile>classStrategySimplifyCoords.html</anchorfile>
      <anchor>a4a8d7a1c37ecc079e15265659dc454aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>getGlobalViewData</name>
      <anchorfile>classStrategySimplifyCoords.html</anchorfile>
      <anchor>a4923e622201c2d43c9e37c6079e80102</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMyCoordinates</name>
      <anchorfile>classStrategySimplifyCoords.html</anchorfile>
      <anchor>a40451de922f54afccfbd266880c66dfc</anchor>
      <arglist>(const AbstractNcsNodeInfo &amp;ncsInfo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cleanUpCoordData</name>
      <anchorfile>classStrategySimplifyCoords.html</anchorfile>
      <anchor>ab16239faf384c9f200620ae01b81631d</anchor>
      <arglist>(const treeNodeMap &amp;currentTreeChildNodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getStrategyCombinedParams</name>
      <anchorfile>classStrategySimplifyCoords.html</anchorfile>
      <anchor>a4a0ecb19d21af39b78f5ca6f007492c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; TransportAddress, simpleCoordCountMap &gt;</type>
      <name>nodeCoordData</name>
      <anchorfile>classStrategySimplifyCoords.html</anchorfile>
      <anchor>aaa996469288991118a265be47bbf42da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>UNORDERED_MAP&lt; TransportAddress, simpleCoordCountMap, TransportAddress::hashFcn &gt;</type>
      <name>branchCoordDataMap</name>
      <anchorfile>classStrategySimplifyCoords.html</anchorfile>
      <anchor>a6773284c9b0ef047d52c33e018576854</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setBranchCoordinates</name>
      <anchorfile>classStrategySimplifyCoords.html</anchorfile>
      <anchor>acfa62586f4e4ebe4cce53a2fe6f1c1e1</anchor>
      <arglist>(const NodeHandle &amp;node, simpleCoordCountMap countMap)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SimpleCoordinate</type>
      <name>simplify</name>
      <anchorfile>classStrategySimplifyCoords.html</anchorfile>
      <anchor>a7d879721d961b7d7667bc91b9b1029d3</anchor>
      <arglist>(std::vector&lt; double &gt; coordVector)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>decode</name>
      <anchorfile>classStrategySimplifyCoords.html</anchorfile>
      <anchor>a5fbb33d11a2397eec0f9fdfdc817e3ce</anchor>
      <arglist>(SimpleCoordinate simplifiedVector)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const simpleCoordCountMap</type>
      <name>getCombinedCoordCountMap</name>
      <anchorfile>classStrategySimplifyCoords.html</anchorfile>
      <anchor>aac20bfbaf62b08714f60049f3823c905</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>branchCoordDataMap</type>
      <name>coordData</name>
      <anchorfile>classStrategySimplifyCoords.html</anchorfile>
      <anchor>aa8e7fbc5426fed91c8f0febe62b35d51</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StrategyTreeTest</name>
    <filename>classStrategyTreeTest.html</filename>
    <base>AbstractSendStrategy</base>
    <member kind="function">
      <type></type>
      <name>StrategyTreeTest</name>
      <anchorfile>classStrategyTreeTest.html</anchorfile>
      <anchor>a38a4214f83d087fee5f86ae84e8d6ba2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StrategyTreeTest</name>
      <anchorfile>classStrategyTreeTest.html</anchorfile>
      <anchor>a2777b6666ee0b613f58855f96329d43c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleCoordinateRpcCall</name>
      <anchorfile>classStrategyTreeTest.html</anchorfile>
      <anchor>a8b5bcb1c5d92e766bbd8069fa74121d1</anchor>
      <arglist>(GlobalViewBuilderCall *globalViewBuilderCall)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMyCoordinates</name>
      <anchorfile>classStrategyTreeTest.html</anchorfile>
      <anchor>ad2feae1066880cf7dd60913b4afaf0cd</anchor>
      <arglist>(const AbstractNcsNodeInfo &amp;ncsInfo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GlobalViewBuilderCall *</type>
      <name>getCoordinateMessage</name>
      <anchorfile>classStrategyTreeTest.html</anchorfile>
      <anchor>aec3e2233dd7a0d85a9361f1f4e60ea78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>getGlobalViewData</name>
      <anchorfile>classStrategyTreeTest.html</anchorfile>
      <anchor>abb4a312864135ea1345b16d178173b92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getStrategyDataStatus</name>
      <anchorfile>classStrategyTreeTest.html</anchorfile>
      <anchor>a28a9563b52273dd123e3332fd00f4a0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cleanUpCoordData</name>
      <anchorfile>classStrategyTreeTest.html</anchorfile>
      <anchor>aa6f2c27a4210f886b528e501283c82a4</anchor>
      <arglist>(const treeNodeMap &amp;currentTreeChildNodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getStrategyCombinedParams</name>
      <anchorfile>classStrategyTreeTest.html</anchorfile>
      <anchor>a084eac9edfc6acb6346a2a81477d606e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setBranchCount</name>
      <anchorfile>classStrategyTreeTest.html</anchorfile>
      <anchor>a76d562599772b0ec49713e5977199ed1</anchor>
      <arglist>(const NodeHandle &amp;treeNode, int count)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getNodeCount</name>
      <anchorfile>classStrategyTreeTest.html</anchorfile>
      <anchor>abeab3ff78b4c30022056cf1a35e06175</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::pair&lt; TransportAddress, int &gt;</type>
      <name>branchCount</name>
      <anchorfile>classStrategyTreeTest.html</anchorfile>
      <anchor>a7cc31333fc75919ef9e0bc3d03e158b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>UNORDERED_MAP&lt; TransportAddress, int, TransportAddress::hashFcn &gt;</type>
      <name>nodeCountMap</name>
      <anchorfile>classStrategyTreeTest.html</anchorfile>
      <anchor>a20aa0425bec6bc9d75812511a4016fe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>nodeCountMap</type>
      <name>branchCountMap</name>
      <anchorfile>classStrategyTreeTest.html</anchorfile>
      <anchor>a31db1fe475c671db04edd4ee0e19b533</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SVivaldi</name>
    <filename>classSVivaldi.html</filename>
    <base>Vivaldi</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classSVivaldi.html</anchorfile>
      <anchor>a21e329bca228279260100970f14ae943</anchor>
      <arglist>(NeighborCache *neighborCache)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLoss</name>
      <anchorfile>classSVivaldi.html</anchorfile>
      <anchor>ad4276f8723f9900c14f9a3654b3cfda4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopAdaptation</name>
      <anchorfile>classSVivaldi.html</anchorfile>
      <anchor>a80d9a6d2199ce61974bef8284f5b1cab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcError</name>
      <anchorfile>classSVivaldi.html</anchorfile>
      <anchor>a51708b8607dafa95f69fa599ea6fb40f</anchor>
      <arglist>(const simtime_t &amp;rtt, double dist, double weight)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcDelta</name>
      <anchorfile>classSVivaldi.html</anchorfile>
      <anchor>a838d2651ec3c0d14d9ea5510c343b2da</anchor>
      <arglist>(const simtime_t &amp;rtt, double dist, double weight)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>lossC</name>
      <anchorfile>classSVivaldi.html</anchorfile>
      <anchor>a1fb50e81fe006ed6445608d403e6a6cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>effectiveSample</name>
      <anchorfile>classSVivaldi.html</anchorfile>
      <anchor>a2c42a63537418636f83c522c6ac5954e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>loss</name>
      <anchorfile>classSVivaldi.html</anchorfile>
      <anchor>acbeaf1f23a7e76d4dcfe3505b1a45be3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>lossResetLimit</name>
      <anchorfile>classSVivaldi.html</anchorfile>
      <anchor>a6c56921baf9bb430eaba1ca18ee0e289</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TcpDataMessage</name>
    <filename>classTcpDataMessage.html</filename>
    <member kind="function">
      <type></type>
      <name>TcpDataMessage</name>
      <anchorfile>classTcpDataMessage.html</anchorfile>
      <anchor>a156abe167bac18a50c74c1e69b8107b5</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TcpDataMessage</name>
      <anchorfile>classTcpDataMessage.html</anchorfile>
      <anchor>a91ad6bcce61049eb1df5eac3405f25ea</anchor>
      <arglist>(const TcpDataMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TcpDataMessage</name>
      <anchorfile>classTcpDataMessage.html</anchorfile>
      <anchor>ae8093eda66d426ee41af3ae07812c0f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TcpDataMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classTcpDataMessage.html</anchorfile>
      <anchor>a022657ebc6194d77e349954e96deb600</anchor>
      <arglist>(const TcpDataMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TcpDataMessage *</type>
      <name>dup</name>
      <anchorfile>classTcpDataMessage.html</anchorfile>
      <anchor>a4031c7227732605583c8402f45834fc2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classTcpDataMessage.html</anchorfile>
      <anchor>ae8f236ff8f4249cb0b6874ded003ab42</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classTcpDataMessage.html</anchorfile>
      <anchor>ab090606e02580fd8a8ca493037fc6b23</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BinaryValue &amp;</type>
      <name>getData</name>
      <anchorfile>classTcpDataMessage.html</anchorfile>
      <anchor>a9e647bf6276c024c217215c0c0606ff8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const BinaryValue &amp;</type>
      <name>getData</name>
      <anchorfile>classTcpDataMessage.html</anchorfile>
      <anchor>a634af45a0ccad2d1a2a5e77a160648fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setData</name>
      <anchorfile>classTcpDataMessage.html</anchorfile>
      <anchor>a4b6b2b86dee36a7cc54beee76426db5e</anchor>
      <arglist>(const BinaryValue &amp;data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classTcpDataMessage.html</anchorfile>
      <anchor>a8b0054bafbe4210eb394cff20b35138d</anchor>
      <arglist>(const TcpDataMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BinaryValue</type>
      <name>data_var</name>
      <anchorfile>classTcpDataMessage.html</anchorfile>
      <anchor>a6b0e4e479bab208822489b790d08ae5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classTcpDataMessage.html</anchorfile>
      <anchor>a659b43833f93c3fcd85c8faafce4f801</anchor>
      <arglist>(const TcpDataMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPExampleApp</name>
    <filename>classTCPExampleApp.html</filename>
    <base>BaseApp</base>
    <member kind="function">
      <type></type>
      <name>TCPExampleApp</name>
      <anchorfile>classTCPExampleApp.html</anchorfile>
      <anchor>a017c1b9a898afa6e8caef32716901872</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TCPExampleApp</name>
      <anchorfile>classTCPExampleApp.html</anchorfile>
      <anchor>ac32a302989bedf0f9f3d8b56e04a5237</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initializeApp</name>
      <anchorfile>classTCPExampleApp.html</anchorfile>
      <anchor>adb529bcbb60193d514f909cf1e9fb43b</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>finishApp</name>
      <anchorfile>classTCPExampleApp.html</anchorfile>
      <anchor>a80e4f60f3ba97cae97696a8f5d189dcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classTCPExampleApp.html</anchorfile>
      <anchor>afee6e1160c3a7e839fa0435048d01d20</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleDataReceived</name>
      <anchorfile>classTCPExampleApp.html</anchorfile>
      <anchor>a0b8351e36dcb18ab37943c1b4bfb1c5b</anchor>
      <arglist>(TransportAddress address, cPacket *msg, bool urgent)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleConnectionEvent</name>
      <anchorfile>classTCPExampleApp.html</anchorfile>
      <anchor>a8d000ee96b21e583beba60f71b77ffa4</anchor>
      <arglist>(EvCode code, TransportAddress address)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>sendPeriod</name>
      <anchorfile>classTCPExampleApp.html</anchorfile>
      <anchor>a78e662d91e9ddd08915c3992207ce853</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numSent</name>
      <anchorfile>classTCPExampleApp.html</anchorfile>
      <anchor>a4b13b4a2bf584e6bbf3b1659b99fb233</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numReceived</name>
      <anchorfile>classTCPExampleApp.html</anchorfile>
      <anchor>ac86ae1590be36dfc46c71fefe2a427dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>timerMsg</name>
      <anchorfile>classTCPExampleApp.html</anchorfile>
      <anchor>a74cdef2f8b5ba2b38e34201514183bb7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TCPExampleMessage</name>
    <filename>classTCPExampleMessage.html</filename>
    <member kind="function">
      <type></type>
      <name>TCPExampleMessage</name>
      <anchorfile>classTCPExampleMessage.html</anchorfile>
      <anchor>adc003823791496bd1161537021b118e8</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TCPExampleMessage</name>
      <anchorfile>classTCPExampleMessage.html</anchorfile>
      <anchor>ac8e5a22830e16afa16342d4f6b94b1fc</anchor>
      <arglist>(const TCPExampleMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TCPExampleMessage</name>
      <anchorfile>classTCPExampleMessage.html</anchorfile>
      <anchor>ad4a686e5a4e5f99e079dbd760be60ab3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TCPExampleMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classTCPExampleMessage.html</anchorfile>
      <anchor>a1a8d2281c6bc73f6788f9187577cc421</anchor>
      <arglist>(const TCPExampleMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TCPExampleMessage *</type>
      <name>dup</name>
      <anchorfile>classTCPExampleMessage.html</anchorfile>
      <anchor>a2ce5442e41ddfdd02ba4fadeaf5e14fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classTCPExampleMessage.html</anchorfile>
      <anchor>af6b3bc9e2338120846d24fa193c1f5a8</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classTCPExampleMessage.html</anchorfile>
      <anchor>a655a318f373ec178306c29c3b2347462</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getType</name>
      <anchorfile>classTCPExampleMessage.html</anchorfile>
      <anchor>a3f574b80eb8ea76875883eb1265b0a40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchorfile>classTCPExampleMessage.html</anchorfile>
      <anchor>a0e15ecf2b4bf9c18b2689e33fbfc7acb</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransportAddress &amp;</type>
      <name>getSenderAddress</name>
      <anchorfile>classTCPExampleMessage.html</anchorfile>
      <anchor>ad2bed601f22ac157d1e653559ae9539a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TransportAddress &amp;</type>
      <name>getSenderAddress</name>
      <anchorfile>classTCPExampleMessage.html</anchorfile>
      <anchor>a20d839f2ba62d41a4ebd9f3b0e71d516</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSenderAddress</name>
      <anchorfile>classTCPExampleMessage.html</anchorfile>
      <anchor>a9d40ad67cc254d1273a603fae6f326d8</anchor>
      <arglist>(const TransportAddress &amp;senderAddress)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classTCPExampleMessage.html</anchorfile>
      <anchor>aa7e3e1bb7b949866f08cc4ec9adb8abb</anchor>
      <arglist>(const TCPExampleMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>type_var</name>
      <anchorfile>classTCPExampleMessage.html</anchorfile>
      <anchor>a0135dbb664a8b63e0dac0307924c514c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress</type>
      <name>senderAddress_var</name>
      <anchorfile>classTCPExampleMessage.html</anchorfile>
      <anchor>a385bf1b256af6dcfa014a84b97c0238c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classTCPExampleMessage.html</anchorfile>
      <anchor>afd73f871eed62b9b0be42957ed342aed</anchor>
      <arglist>(const TCPExampleMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TerminalInfo</name>
    <filename>classTerminalInfo.html</filename>
    <base>NodeInfo</base>
    <member kind="variable">
      <type>cModule *</type>
      <name>PPPInterface</name>
      <anchorfile>classTerminalInfo.html</anchorfile>
      <anchor>aa7cb2290dd47461412cb334b33515bfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cModule *</type>
      <name>remotePPPInterface</name>
      <anchorfile>classTerminalInfo.html</anchorfile>
      <anchor>adbc8cc0fe3f0c085e877bd21baf803d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InterfaceEntry *</type>
      <name>interfaceEntry</name>
      <anchorfile>classTerminalInfo.html</anchorfile>
      <anchor>a6b3525e21c90955280e2ecad4c160302</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InterfaceEntry *</type>
      <name>remoteInterfaceEntry</name>
      <anchorfile>classTerminalInfo.html</anchorfile>
      <anchor>acb031535d53f763288849a88ab4d1c43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IInterfaceTable *</type>
      <name>remoteInterfaceTable</name>
      <anchorfile>classTerminalInfo.html</anchorfile>
      <anchor>a42b91d88269991a6e94d1992de292e66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPRoute *</type>
      <name>remoteRoutingEntry</name>
      <anchorfile>classTerminalInfo.html</anchorfile>
      <anchor>a121e0d4da175dc4c0494ae34fe684130</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPRoute *</type>
      <name>routingEntry</name>
      <anchorfile>classTerminalInfo.html</anchorfile>
      <anchor>a3b86b8bb778914b05fec401b5fcb79f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPv6Route *</type>
      <name>remoteIpv6RoutingEntry</name>
      <anchorfile>classTerminalInfo.html</anchorfile>
      <anchor>ae59bad17f6cc93347f3f394f0a45d1b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPv6Route *</type>
      <name>ipv6routingEntry</name>
      <anchorfile>classTerminalInfo.html</anchorfile>
      <anchor>a5ea1d617f9389889327050a9eb05392a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>terminalInfo</name>
    <filename>classterminalInfo.html</filename>
    <member kind="variable">
      <type>uint32</type>
      <name>IPAddress</name>
      <anchorfile>classterminalInfo.html</anchorfile>
      <anchor>a2efa1f945863b8747b7264695679dcda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classterminalInfo.html</anchorfile>
      <anchor>a094488a8ad3932070581ddc9006e9990</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IInterfaceTable *</type>
      <name>interfaceTable</name>
      <anchorfile>classterminalInfo.html</anchorfile>
      <anchor>a50fbfff2fba9fcd72e053689db98c923</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IRoutingTable *</type>
      <name>routingTable</name>
      <anchorfile>classterminalInfo.html</anchorfile>
      <anchor>a475ba5ee011aac82489771a130df4305</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cModule *</type>
      <name>PPPInterface</name>
      <anchorfile>classterminalInfo.html</anchorfile>
      <anchor>ab6b7e65e87b22cc68557b57657c44c0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cModule *</type>
      <name>remotePPPInterface</name>
      <anchorfile>classterminalInfo.html</anchorfile>
      <anchor>aaece03afdd80a1b86413fda0fd52cdd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InterfaceEntry *</type>
      <name>interfaceEntry</name>
      <anchorfile>classterminalInfo.html</anchorfile>
      <anchor>a47854146e0218c6e8ccc1cbc0feec54e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InterfaceEntry *</type>
      <name>remoteInterfaceEntry</name>
      <anchorfile>classterminalInfo.html</anchorfile>
      <anchor>acd356c0302b251f8eb4551b967b9f166</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IInterfaceTable *</type>
      <name>remoteInterfaceTable</name>
      <anchorfile>classterminalInfo.html</anchorfile>
      <anchor>a9bf03765a0e35a01e548613c7a2eab4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPRoute *</type>
      <name>routingEntry</name>
      <anchorfile>classterminalInfo.html</anchorfile>
      <anchor>af926269e7f2ccac4256b6f4ac9b77338</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPRoute *</type>
      <name>remoteRoutingEntry</name>
      <anchorfile>classterminalInfo.html</anchorfile>
      <anchor>a4e1be84f6ca0fcb40430b7fb8ac657f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>edgeRoutes *</type>
      <name>edgeRouter</name>
      <anchorfile>classterminalInfo.html</anchorfile>
      <anchor>af420b1c28fc4a3dc8ab46d67722745a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ASindex</name>
      <anchorfile>classterminalInfo.html</anchorfile>
      <anchor>a07da8863c6c9af65bc3f336374ef8a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>createdAt</name>
      <anchorfile>classterminalInfo.html</anchorfile>
      <anchor>a0ac54cc168a9d3ca6d9d37e7b37e99b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classterminalInfo.html</anchorfile>
      <anchor>a1638188c632871d5a4a099c223e28daa</anchor>
      <arglist>(std::ostream &amp;os, terminalInfo &amp;n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TierDummy</name>
    <filename>classTierDummy.html</filename>
    <base>BaseApp</base>
  </compound>
  <compound kind="class">
    <name>TokenMessage</name>
    <filename>classTokenMessage.html</filename>
    <base>GiaMessage</base>
    <member kind="function">
      <type></type>
      <name>TokenMessage</name>
      <anchorfile>classTokenMessage.html</anchorfile>
      <anchor>a2392542fa1ae728ec83d893b59417833</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TokenMessage</name>
      <anchorfile>classTokenMessage.html</anchorfile>
      <anchor>ad82325b20cad307758be4aab36858b26</anchor>
      <arglist>(const TokenMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TokenMessage</name>
      <anchorfile>classTokenMessage.html</anchorfile>
      <anchor>a01cd3226c3ad892eee4fcafc9b30fdd0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TokenMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classTokenMessage.html</anchorfile>
      <anchor>ad35cdb2b0a584043db446f3811f1f6d8</anchor>
      <arglist>(const TokenMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TokenMessage *</type>
      <name>dup</name>
      <anchorfile>classTokenMessage.html</anchorfile>
      <anchor>ad22b5e400ab90743dc8a2764e2036ad4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classTokenMessage.html</anchorfile>
      <anchor>adfc22836099d76fc61fffa964d2facad</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classTokenMessage.html</anchorfile>
      <anchor>a1f840cb359d1255485e5ec109f7e1350</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSrcTokenNr</name>
      <anchorfile>classTokenMessage.html</anchorfile>
      <anchor>a71e7d3ba2b6bf6ff479a4469e9e4edfe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSrcTokenNr</name>
      <anchorfile>classTokenMessage.html</anchorfile>
      <anchor>ade832372d8e0266ff6ae5e3ac39c29c8</anchor>
      <arglist>(int srcTokenNr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDstTokenNr</name>
      <anchorfile>classTokenMessage.html</anchorfile>
      <anchor>a22f1cc9d28997851d3a129cce1e1c727</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDstTokenNr</name>
      <anchorfile>classTokenMessage.html</anchorfile>
      <anchor>a02120f1dbb4badfd4ba954ddba7672e6</anchor>
      <arglist>(int dstTokenNr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classTokenMessage.html</anchorfile>
      <anchor>a93702a51bde55de157e343d52d05abc0</anchor>
      <arglist>(const TokenMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>srcTokenNr_var</name>
      <anchorfile>classTokenMessage.html</anchorfile>
      <anchor>a0726e4487ea2a055d24b8ab89d6e44f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dstTokenNr_var</name>
      <anchorfile>classTokenMessage.html</anchorfile>
      <anchor>a2d7c2ede184d33dde7265e591fbd4e6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classTokenMessage.html</anchorfile>
      <anchor>a3ed7f38b8c812205d4fbe304659b49b9</anchor>
      <arglist>(const TokenMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>topologyProperty</name>
    <filename>structtopologyProperty.html</filename>
    <member kind="variable">
      <type>cModule *</type>
      <name>pModule</name>
      <anchorfile>structtopologyProperty.html</anchorfile>
      <anchor>a698757c69affe4b1f784eab4985f0e85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>property</name>
      <anchorfile>structtopologyProperty.html</anchorfile>
      <anchor>a1c2bc020bd4d7a8f08473988ac523e80</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TopologyVis</name>
    <filename>classTopologyVis.html</filename>
    <member kind="function">
      <type></type>
      <name>TopologyVis</name>
      <anchorfile>classTopologyVis.html</anchorfile>
      <anchor>ac8280be284d0cb7de35fd3fab4888b1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showOverlayNeighborArrow</name>
      <anchorfile>classTopologyVis.html</anchorfile>
      <anchor>a4fe67c060004c8ca76658c7b41514a4a</anchor>
      <arglist>(const NodeHandle &amp;neighbor, bool flush=true, const char *displayString=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteOverlayNeighborArrow</name>
      <anchorfile>classTopologyVis.html</anchorfile>
      <anchor>ae9629882d5f3bb7865f9c9501b23a172</anchor>
      <arglist>(const NodeHandle &amp;neighbor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initVis</name>
      <anchorfile>classTopologyVis.html</anchorfile>
      <anchor>ab551ff162d16d625b967f228f479bf72</anchor>
      <arglist>(cModule *terminal)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cModule *</type>
      <name>thisTerminal</name>
      <anchorfile>classTopologyVis.html</anchorfile>
      <anchor>af42ace00be5d764cec11bfd85158c2a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GlobalNodeList *</type>
      <name>globalNodeList</name>
      <anchorfile>classTopologyVis.html</anchorfile>
      <anchor>a9ce2dafb76f2ffcc94369ee2eaabee52</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>compactGateArray</name>
      <anchorfile>classTopologyVis.html</anchorfile>
      <anchor>a149dc25b6177d0d71b9b01ae2acf5ecc</anchor>
      <arglist>(cModule *terminal, enum VisDrawDirection dir)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TraceChurn</name>
    <filename>classTraceChurn.html</filename>
    <base>ChurnGenerator</base>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classTraceChurn.html</anchorfile>
      <anchor>a45a4f8976f5a27800a0e5ecdd2fa5510</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeChurn</name>
      <anchorfile>classTraceChurn.html</anchorfile>
      <anchor>a435f8d477a3142c1b6fd68945e0e954c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createNode</name>
      <anchorfile>classTraceChurn.html</anchorfile>
      <anchor>a1609da9ade3beb7367862c5199115bda</anchor>
      <arglist>(int nodeId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteNode</name>
      <anchorfile>classTraceChurn.html</anchorfile>
      <anchor>afbb80c9b85674e20094a457efa895bcb</anchor>
      <arglist>(int nodeId)</arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getAppGateById</name>
      <anchorfile>classTraceChurn.html</anchorfile>
      <anchor>ac2c54af28534f23ad38183399d200816</anchor>
      <arglist>(int nodeId)</arglist>
    </member>
    <member kind="function">
      <type>TransportAddress *</type>
      <name>getTransportAddressById</name>
      <anchorfile>classTraceChurn.html</anchorfile>
      <anchor>a2bdbee0028bd00fdec9126328ff0b817</anchor>
      <arglist>(int nodeId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateDisplayString</name>
      <anchorfile>classTraceChurn.html</anchorfile>
      <anchor>aeebee202cc9d93860b8ec71a20f926e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::pair&lt; TransportAddress *, cGate * &gt;</type>
      <name>nodeMapEntry</name>
      <anchorfile>classTraceChurn.html</anchorfile>
      <anchor>a368cd7d65381f31d9a5dcf148467cffc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>maxTier</name>
      <anchorfile>classTraceChurn.html</anchorfile>
      <anchor>a795e6201ee399352aefe692142ef2d16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>initAddMoreTerminals</name>
      <anchorfile>classTraceChurn.html</anchorfile>
      <anchor>ae459c6403f09b7fdb2c947a6311dbdad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>nextRead</name>
      <anchorfile>classTraceChurn.html</anchorfile>
      <anchor>a8818da8ff9896d0229151603925862ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>UNORDERED_MAP&lt; int, nodeMapEntry * &gt;</type>
      <name>nodeMap</name>
      <anchorfile>classTraceChurn.html</anchorfile>
      <anchor>a91f256739e8620cce2ef1147c1c78833</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TransportAddress</name>
    <filename>classTransportAddress.html</filename>
    <class kind="class">TransportAddress::hashFcn</class>
    <member kind="enumeration">
      <name>NatType</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>ae4b516d887b22574af3f49115cbecd4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_NAT</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>ae4b516d887b22574af3f49115cbecd4aa215f3175b1f2ce671ff1ca2c7e97db6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_NAT</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>ae4b516d887b22574af3f49115cbecd4aaf125d0aa5072dbcaf1438f2d7dc75444</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FULL_CONE_NAT</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>ae4b516d887b22574af3f49115cbecd4aacb7dfb0b2d905528d7d8e9dfb46e441a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PORT_RESTRICTED_NAT</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>ae4b516d887b22574af3f49115cbecd4aadfce179ab6ba6613d3d9bf0ceafb3fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SYMMETRIC_NAT</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>ae4b516d887b22574af3f49115cbecd4aa348ab6aa8d238e4896126e05a096fa23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UNORDERED_SET&lt; TransportAddress, hashFcn &gt;</type>
      <name>Set</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>afaa226dc1ab52ed5d94d4724c7194ae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransportAddress</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>a13c31d33a22663e33b491db1a38f010e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TransportAddress</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>a5308c7f266d57ab8b6791abe683f116f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransportAddress</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>a2aeab21df2a327a154a5ae571a5185df</anchor>
      <arglist>(const TransportAddress &amp;handle)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransportAddress</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>abf6dafaa3d73d806428efce1c0ea974e</anchor>
      <arglist>(const IPvXAddress &amp;ip, int port=-1, NatType natType=UNKNOWN_NAT)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>ada2eda3465ea27bd710236a96ee88080</anchor>
      <arglist>(const TransportAddress &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>a7b8ff2dc3c5f3d08c061f9160d205a5f</anchor>
      <arglist>(const TransportAddress &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>a4398e2b8f9ec1f623812f4114088a529</anchor>
      <arglist>(const TransportAddress &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>a0a8ab6fe00e4a617ed46f273678f1fa2</anchor>
      <arglist>(const TransportAddress &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>a2268f85aee5650c4e0d5a06949208f08</anchor>
      <arglist>(const TransportAddress &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>a2db7ed81669b8750f49e513d986537eb</anchor>
      <arglist>(const TransportAddress &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>TransportAddress &amp;</type>
      <name>operator=</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>a8902295db5710495b34730c604d7e971</anchor>
      <arglist>(const TransportAddress &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIp</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>a1c7b834dc2e6e738f1f4db8711a12814</anchor>
      <arglist>(const IPvXAddress &amp;ip, int port=-1, NatType natType=UNKNOWN_NAT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAddress</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>a56dec9344066553e503c679401e0d986</anchor>
      <arglist>(const IPvXAddress &amp;ip, int port=-1, NatType natType=UNKNOWN_NAT) __attribute((deprecated))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendSourceRoute</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>a11394d4f782e430e244b9c46226c5cab</anchor>
      <arglist>(const TransportAddress &amp;sourceRoute)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearSourceRoute</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>a10054d83f3fde4143f79415c705e2024</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPort</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>a46a1b53760e5f2d3f8af8c9591160a48</anchor>
      <arglist>(int port)</arglist>
    </member>
    <member kind="function">
      <type>const IPvXAddress &amp;</type>
      <name>getIp</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>a00e613d98d3412e2b92897c25aa0eb4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const IPvXAddress &amp;</type>
      <name>getAddress</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>a9fbed6ba90e71133f88dbde6fb5401e0</anchor>
      <arglist>() const __attribute((deprecated))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPort</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>a4cf99c434c5110935683624dc3702e0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NatType</type>
      <name>getNatType</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>a335d6960df43d073362a73faec772ab9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getSourceRouteSize</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>a77e5ef053f35c57a510063ed01a82d8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const TransportAddressVector &amp;</type>
      <name>getSourceRoute</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>a4481a01d6223b5f052c9302205c9a078</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnspecified</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>a026e777c423ff2a0280edd2fa5472e74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>hash</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>a7314880bd7f199f8dd36799e08ccff96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransportAddress *</type>
      <name>dup</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>aa24e734db847686768b0ddbd3098721c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const TransportAddress</type>
      <name>UNSPECIFIED_NODE</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>ac1709545db722cbbce1367034142d31f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const TransportAddressVector</type>
      <name>UNSPECIFIED_NODES</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>ac4c193ddadf638fa3f1bf0de04fbaaab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPvXAddress</type>
      <name>ip</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>a283f5d01bdcda920ca8374ebc9722e11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>port</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>ab824750df6a1b3d31af2ffa2d856fc94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>assertUnspecified</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>a9bb4284365794c2ccc5307bfbdaccdb0</anchor>
      <arglist>(const TransportAddress &amp;handle) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NatType</type>
      <name>natType</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>a7beafd6835481da88b6de5435b16f8aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TransportAddressVector</type>
      <name>sourceRoute</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>a097830dee6401335f9c9cdf16c073c37</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classTransportAddress.html</anchorfile>
      <anchor>a4e31f3768335d4310504c4742603ec33</anchor>
      <arglist>(std::ostream &amp;os, const TransportAddress &amp;n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TransportAddress::hashFcn</name>
    <filename>classTransportAddress_1_1hashFcn.html</filename>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>classTransportAddress_1_1hashFcn.html</anchorfile>
      <anchor>aaed699a3cfa1acda6f236ba382cb918e</anchor>
      <arglist>(const TransportAddress &amp;h1) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>traverseRoaming</name>
    <filename>classtraverseRoaming.html</filename>
    <base>MovementGenerator</base>
    <member kind="function">
      <type></type>
      <name>traverseRoaming</name>
      <anchorfile>classtraverseRoaming.html</anchorfile>
      <anchor>a934e9f19e1385cef5c240c439f692b41</anchor>
      <arglist>(double areaDimension, double speed, NeighborMap *Neighbors, GlobalCoordinator *coordinator, CollisionList *CollisionRect)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~traverseRoaming</name>
      <anchorfile>classtraverseRoaming.html</anchorfile>
      <anchor>ae38f76c959cc08aaf44f07233f34349b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>classtraverseRoaming.html</anchorfile>
      <anchor>ab9c42486b7ceeb90360112fd120a715f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TreeAppCall</name>
    <filename>classTreeAppCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>TreeAppCall</name>
      <anchorfile>classTreeAppCall.html</anchorfile>
      <anchor>a2ed52159e8d1f1268c8a0193fb0e3e25</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TreeAppCall</name>
      <anchorfile>classTreeAppCall.html</anchorfile>
      <anchor>a8350adfb82849f2b3fa80e79e21459e4</anchor>
      <arglist>(const TreeAppCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TreeAppCall</name>
      <anchorfile>classTreeAppCall.html</anchorfile>
      <anchor>ad9e344f274f633b0d078d7caa210bd24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TreeAppCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classTreeAppCall.html</anchorfile>
      <anchor>a5dcba8c44d8e53c758d954d150257875</anchor>
      <arglist>(const TreeAppCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TreeAppCall *</type>
      <name>dup</name>
      <anchorfile>classTreeAppCall.html</anchorfile>
      <anchor>a728154a85050b2cebacd8401d47f33ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classTreeAppCall.html</anchorfile>
      <anchor>a68925df0b5545e5bd23ff50c024fc48f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classTreeAppCall.html</anchorfile>
      <anchor>a86fbb17b70e25a6e54223de8315a1a0d</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classTreeAppCall.html</anchorfile>
      <anchor>acb4a02da130b52fb19e1a1956b0b0a30</anchor>
      <arglist>(const TreeAppCall &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classTreeAppCall.html</anchorfile>
      <anchor>a383abbe703770a0d7e8ec2b3540bf365</anchor>
      <arglist>(const TreeAppCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TreeAppResponse</name>
    <filename>classTreeAppResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>TreeAppResponse</name>
      <anchorfile>classTreeAppResponse.html</anchorfile>
      <anchor>acc99693e25b63916b64b333e9f0714e1</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TreeAppResponse</name>
      <anchorfile>classTreeAppResponse.html</anchorfile>
      <anchor>a3c1d4333e5c86c43680cce6b9d89aa30</anchor>
      <arglist>(const TreeAppResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TreeAppResponse</name>
      <anchorfile>classTreeAppResponse.html</anchorfile>
      <anchor>a699a06d937857f7296f677cec0c7ab25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TreeAppResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classTreeAppResponse.html</anchorfile>
      <anchor>aa9647be398dbe51934037ab6957c7afa</anchor>
      <arglist>(const TreeAppResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TreeAppResponse *</type>
      <name>dup</name>
      <anchorfile>classTreeAppResponse.html</anchorfile>
      <anchor>a2d90aab645b8d7014356e7a8c0a63fd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classTreeAppResponse.html</anchorfile>
      <anchor>ab0019a71049124c0e2808f2eb15b5261</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classTreeAppResponse.html</anchorfile>
      <anchor>acc3a1341424abef6d26d7ebba5b29f1f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classTreeAppResponse.html</anchorfile>
      <anchor>a9c9e2a24ffdd30cf247675ae4329c445</anchor>
      <arglist>(const TreeAppResponse &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classTreeAppResponse.html</anchorfile>
      <anchor>a0f9984cf9f5283938c1fca3e3060b4e6</anchor>
      <arglist>(const TreeAppResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TreeManagement</name>
    <filename>classTreeManagement.html</filename>
    <base>RpcListener</base>
    <member kind="function">
      <type></type>
      <name>TreeManagement</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>a988c54418e75390bc590eb52f581632a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>aeaefcafce57423835ea11edc0ee0c3b6</anchor>
      <arglist>(NeighborCache *neighborCache)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TreeManagement</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>aec387715e2ee5b8ce9d0a6a1a5f711ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>ab63a46fb93d9225b4ce80385d3fd36da</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>handleRpcCall</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>aa525eb5ac9d59a285d481736e6b280f1</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleRpcTimeout</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>afcbadf051958d6930d5a0404f103a4b8</anchor>
      <arglist>(BaseCallMessage *msg, const TransportAddress &amp;dest, cPolymorphic *context, int rpcId, const OverlayKey &amp;destKey)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sendMessageToParent</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>a0f27e1436b5db404e2329d43bc577e60</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sendMessageToChildren</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>aca91cfe88405942601f17b55c64f254a</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startTreeBuilding</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>adc6f93b4af76efcd31a605b77789421d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const NodeHandle &amp;</type>
      <name>getParentNode</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>afc584bf2c7605137e93fc69fe2272d38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRoot</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>a1a40ced95ba4eea6df7de40104411280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isChild</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>a2a3e54e1c53d4d721ef008bf6456361e</anchor>
      <arglist>(TransportAddress &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isParent</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>ad0a0f594487873ac8ca06a65b4823a8f</anchor>
      <arglist>(TransportAddress &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCurrentTreeLevel</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>a8eb49d4d9e1df68543a607e7cb38dd3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const treeNodeMap &amp;</type>
      <name>getChildNodes</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>a2e4264a8dd8c9dfd3b7eb4f960e67d03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMsgClient</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>a38a402c913d3f099131fb46984851746</anchor>
      <arglist>(const char *identifier, AbstractTreeMsgClient *msgClient)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeMsgClient</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>a64b1592a3d4e0f532d40ce840b53a633</anchor>
      <arglist>(const char *identifier)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleChildCheckRpcCall</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>a0c1c9a9390343a6f74ad922977b82491</anchor>
      <arglist>(ChildCheckCall *call)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleChildCheckRpcResponse</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>a4e047795c7832bdea474ea26a4115471</anchor>
      <arglist>(ChildCheckResponse *response, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finishTreeManagement</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>a92e01ba568e4da809c0ecff163c340f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>connectToParent</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>a03da018b5d1cb932510fa86698afd2a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeParentConnection</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>a4b00c73abaf62c2c71330262d5de1018</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkParentValid</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>a7f32b9f28c35dd9d431abfde330901c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>registerAtParent</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>a6660e08dddf823c35ccb23c11143b94a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isTreeDomainKeyValid</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>a5f27b8f33d223a718b0d633722a97455</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>OverlayKey</type>
      <name>getResponsibleDomainKey</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>ade11b0800e586e8f5b287ec840515f62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleParentRequestRpcCall</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>aadb3ebdba4996fe6edb12ab9b83a7634</anchor>
      <arglist>(ParentRequestCall *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleParentRequestRpcResponse</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>aee4625ca7e6ebed34565c744e3a162a0</anchor>
      <arglist>(ParentRequestResponse *response, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleChildReleaseRpcCall</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>a53e6e5e8fb87d9e73ba359a939645518</anchor>
      <arglist>(ChildReleaseCall *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>visualizeTreeLinkToNode</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>ac1549b5851d20edde9fb7c94f900c535</anchor>
      <arglist>(const NodeHandle &amp;treeNode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addChildNode</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>a646e124bb2a73f0e48f7ba6a51351b02</anchor>
      <arglist>(NodeHandle &amp;childNode)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRpcResponse</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>aa48a44f02e65683005bb3e5f63797c20</anchor>
      <arglist>(BaseResponseMessage *msg, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendChildReleaseCall</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>a94da3b6fb651db64adc4046e3151625f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkTreeChildNodes</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>a45cc0d62df83d365e53aee89ed907c41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeTreeChild</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>ae60095626912c9b084162af1592d6d19</anchor>
      <arglist>(const TransportAddress &amp;childToRemove)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>debugChildren</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>aaa926dbb6ef2273d89ba17273770e499</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cleanup</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>a9c3a357541b5abd66f005df8f3b525c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>currentTreeLevel</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>afbfd6b867df71c1f0476a009465065dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numTMSent</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>ab13067697ff4c43bfa60bb94abdea854</anchor>
      <arglist>[MAXTREELEVEL]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numTMReceived</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>a5d3a0eaa0012dc71ae612652d75b90c7</anchor>
      <arglist>[MAXTREELEVEL]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bytesTMSent</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>a92cd3dc004368b28372675ea453ff63e</anchor>
      <arglist>[MAXTREELEVEL]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bytesTMReceived</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>a0653d3639aefbacff26cd37b256b7536</anchor>
      <arglist>[MAXTREELEVEL]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>creationTime</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>a2ba5a471ddd412ed3b061d9b9fbe7e17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::pair&lt; const char *, AbstractTreeMsgClient * &gt;</type>
      <name>msgClientPair</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>aaa30fca0f5023fd3f5cc2ff4486c8182</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>UNORDERED_MAP&lt; const char *, AbstractTreeMsgClient * &gt;</type>
      <name>msgClientMap</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>a440034a312d99aba79a8b8f584d352ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GlobalNodeList *</type>
      <name>globalNodeList</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>a8f1deabdd1399eaadb56ab3a688f7c0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NeighborCache *</type>
      <name>neighborCache</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>a64d237e4b26078ec87829dbcf84b6fa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BaseOverlay *</type>
      <name>overlay</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>a328f8ccf8827a8a8ab4483542bab5cd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeHandle</type>
      <name>parentNode</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>ab1bbf5fd79d8e4f1989cf27625ab3285</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OverlayKey</type>
      <name>treeDomainKey</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>acb78af942edf539cca5828752a8ffc02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>treeNodeMap</type>
      <name>treeChildNodes</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>a3ea5dde2f6a8f0ed41807021428d68a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>treeBuildTimer</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>a37ac7434576f7452a9078498202e8571</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>treeMgmtBuildInterval</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>a8f731531c9d13b5c65e14d86f18677dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>deviation</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>ab31009abb8d73255042bd67927684335</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>timeOutInSeconds</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>ad2530bdf87b5cd2dc2b136bfe1e81f68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>msgClientMap</type>
      <name>msgClients</name>
      <anchorfile>classTreeManagement.html</anchorfile>
      <anchor>a703fbb8d8d4f626d141b0532b99286e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>treeNodeEntry</name>
    <filename>structtreeNodeEntry.html</filename>
    <member kind="variable">
      <type>NodeHandle</type>
      <name>node</name>
      <anchorfile>structtreeNodeEntry.html</anchorfile>
      <anchor>a07a5f8a8dcdcf6d1dd60ca26d674352f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>lastTouch</name>
      <anchorfile>structtreeNodeEntry.html</anchorfile>
      <anchor>aa63db95856e5c2b1fa0abc52563ddf5f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TreeTestStrategyCall</name>
    <filename>classTreeTestStrategyCall.html</filename>
    <base>GlobalViewBuilderCall</base>
    <member kind="function">
      <type></type>
      <name>TreeTestStrategyCall</name>
      <anchorfile>classTreeTestStrategyCall.html</anchorfile>
      <anchor>aaea54f329f616380f239c33993bce98c</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TreeTestStrategyCall</name>
      <anchorfile>classTreeTestStrategyCall.html</anchorfile>
      <anchor>ae4ba43d0ded04c65e6fb5a72ca1f864e</anchor>
      <arglist>(const TreeTestStrategyCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TreeTestStrategyCall</name>
      <anchorfile>classTreeTestStrategyCall.html</anchorfile>
      <anchor>a0fbbbe3382791cf750cfa581e0332e8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TreeTestStrategyCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classTreeTestStrategyCall.html</anchorfile>
      <anchor>a006daed58c5679fcec993f210c1d9f71</anchor>
      <arglist>(const TreeTestStrategyCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TreeTestStrategyCall *</type>
      <name>dup</name>
      <anchorfile>classTreeTestStrategyCall.html</anchorfile>
      <anchor>abce20fbb4201fe559cf9965ab21b9a50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classTreeTestStrategyCall.html</anchorfile>
      <anchor>a9425d24d2272925673e9bb41b21ee133</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classTreeTestStrategyCall.html</anchorfile>
      <anchor>a2cb679eca27a352713880d78a7ee7c8a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNodeCount</name>
      <anchorfile>classTreeTestStrategyCall.html</anchorfile>
      <anchor>a51aadfaf057f2c50f0ed4d62f78fbb1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNodeCount</name>
      <anchorfile>classTreeTestStrategyCall.html</anchorfile>
      <anchor>aa53740016cae542158470c932bce3de7</anchor>
      <arglist>(int nodeCount)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classTreeTestStrategyCall.html</anchorfile>
      <anchor>a73207266fe26f2ee69ea838d65a5ff4e</anchor>
      <arglist>(const TreeTestStrategyCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nodeCount_var</name>
      <anchorfile>classTreeTestStrategyCall.html</anchorfile>
      <anchor>a782566f743f1a0ee6fb544a79096bd89</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classTreeTestStrategyCall.html</anchorfile>
      <anchor>ab6601f9010c5ae14514e17ee8ca1f86f</anchor>
      <arglist>(const TreeTestStrategyCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TriggersHandshakeMsg</name>
    <filename>classTriggersHandshakeMsg.html</filename>
    <member kind="function">
      <type></type>
      <name>TriggersHandshakeMsg</name>
      <anchorfile>classTriggersHandshakeMsg.html</anchorfile>
      <anchor>af6e2d7c37eab741302c6bea687703211</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TriggersHandshakeMsg</name>
      <anchorfile>classTriggersHandshakeMsg.html</anchorfile>
      <anchor>aee10ad31362153d6449536f74549777f</anchor>
      <arglist>(const TriggersHandshakeMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TriggersHandshakeMsg</name>
      <anchorfile>classTriggersHandshakeMsg.html</anchorfile>
      <anchor>aba3bb91d01fbf6877f238794f6ece6c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TriggersHandshakeMsg &amp;</type>
      <name>operator=</name>
      <anchorfile>classTriggersHandshakeMsg.html</anchorfile>
      <anchor>a7f0b832d2ee180a58855d05f01d424ad</anchor>
      <arglist>(const TriggersHandshakeMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TriggersHandshakeMsg *</type>
      <name>dup</name>
      <anchorfile>classTriggersHandshakeMsg.html</anchorfile>
      <anchor>a92007f0bc1f4382fe62b888db164498c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classTriggersHandshakeMsg.html</anchorfile>
      <anchor>a3cf9de372cc67ecc85114a7c86a5965f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classTriggersHandshakeMsg.html</anchorfile>
      <anchor>a65432f2156b5c9863ca320bb84eb12f7</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getValue</name>
      <anchorfile>classTriggersHandshakeMsg.html</anchorfile>
      <anchor>a1ebffdc7aee44220a73e238f5d86fa36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classTriggersHandshakeMsg.html</anchorfile>
      <anchor>afffedf1eb8460a0604385c667f61a627</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual I3Identifier &amp;</type>
      <name>getTriggerId</name>
      <anchorfile>classTriggersHandshakeMsg.html</anchorfile>
      <anchor>a62c573bf048036bc477cda119715bfba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const I3Identifier &amp;</type>
      <name>getTriggerId</name>
      <anchorfile>classTriggersHandshakeMsg.html</anchorfile>
      <anchor>ad43d43f91cf1b155e6239577e3db4639</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTriggerId</name>
      <anchorfile>classTriggersHandshakeMsg.html</anchorfile>
      <anchor>a4312dcf6514a14aa71cfd920a35de0b2</anchor>
      <arglist>(const I3Identifier &amp;triggerId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classTriggersHandshakeMsg.html</anchorfile>
      <anchor>a17e4d616c92f66a4d83154eb95b1d732</anchor>
      <arglist>(const TriggersHandshakeMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>value_var</name>
      <anchorfile>classTriggersHandshakeMsg.html</anchorfile>
      <anchor>af399f987ea29502174fb2d009f8ed9b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>I3Identifier</type>
      <name>triggerId_var</name>
      <anchorfile>classTriggersHandshakeMsg.html</anchorfile>
      <anchor>a3adff80a30e815aecbc087ff8546c586</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classTriggersHandshakeMsg.html</anchorfile>
      <anchor>adc2c89cf6425b86ac10f0a099adb4076</anchor>
      <arglist>(const TriggersHandshakeMsg &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TriggersMsg</name>
    <filename>classTriggersMsg.html</filename>
    <member kind="function">
      <type></type>
      <name>TriggersMsg</name>
      <anchorfile>classTriggersMsg.html</anchorfile>
      <anchor>a2b3a4b299b3c13463da77b83bbccd6f7</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TriggersMsg</name>
      <anchorfile>classTriggersMsg.html</anchorfile>
      <anchor>a2c6dacf5495aee35f5a01e0d40aea4e5</anchor>
      <arglist>(const TriggersMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TriggersMsg</name>
      <anchorfile>classTriggersMsg.html</anchorfile>
      <anchor>a7ad4fe6a0d1a59ba520b2cd0cb8756f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TriggersMsg &amp;</type>
      <name>operator=</name>
      <anchorfile>classTriggersMsg.html</anchorfile>
      <anchor>ae937adbf2c4b8aa5f693e7104f3dd242</anchor>
      <arglist>(const TriggersMsg &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TriggersMsg *</type>
      <name>dup</name>
      <anchorfile>classTriggersMsg.html</anchorfile>
      <anchor>a0574b9814ddad1b29d185678268c983c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classTriggersMsg.html</anchorfile>
      <anchor>a36e2459709336e53bf5f210b59bfad62</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classTriggersMsg.html</anchorfile>
      <anchor>ab2d71c33a9cda9c67fc4f7761de8b126</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getValue</name>
      <anchorfile>classTriggersMsg.html</anchorfile>
      <anchor>a55c458e5902582f5cf0262ea33d0ea7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classTriggersMsg.html</anchorfile>
      <anchor>a63bc9c5e8711b1b4ae1a9308354c86f7</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classTriggersMsg.html</anchorfile>
      <anchor>a5f652caf84fd17a2ea61c927b7f03e46</anchor>
      <arglist>(const TriggersMsg &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>value_var</name>
      <anchorfile>classTriggersMsg.html</anchorfile>
      <anchor>a4a8b9e0265947049bbcf1349c680976c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classTriggersMsg.html</anchorfile>
      <anchor>a77daf8144a32552d46a92c877650e5c1</anchor>
      <arglist>(const TriggersMsg &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TriggerTable</name>
    <filename>structTriggerTable.html</filename>
    <member kind="function">
      <type>int</type>
      <name>numInitStages</name>
      <anchorfile>structTriggerTable.html</anchorfile>
      <anchor>ad2cc4371e4fe2d89eb7e5fecbca09627</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>structTriggerTable.html</anchorfile>
      <anchor>aa9d721b4175b2d1a53301866386e9115</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDisplayString</name>
      <anchorfile>structTriggerTable.html</anchorfile>
      <anchor>a392a20c86a7fec4cf9e8b55006f8854c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>I3TriggerTable *</type>
      <name>triggerTable</name>
      <anchorfile>structTriggerTable.html</anchorfile>
      <anchor>a4f35e4fe9c9d57a32caeca2d90933868</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TunOutDevice</name>
    <filename>classTunOutDevice.html</filename>
    <base>RealworldDevice</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual char *</type>
      <name>encapsulate</name>
      <anchorfile>classTunOutDevice.html</anchorfile>
      <anchor>ad683d4e626729eca4f619d636a0eced4</anchor>
      <arglist>(cPacket *msg, unsigned int *length, sockaddr **addr, socklen_t *addrlen)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>decapsulate</name>
      <anchorfile>classTunOutDevice.html</anchorfile>
      <anchor>a43f69be90b8d8d23241ff7f5acf65d3d</anchor>
      <arglist>(char *buf, uint32_t length, sockaddr *addr, socklen_t addrlen)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TunOutScheduler</name>
    <filename>classTunOutScheduler.html</filename>
    <base>RealtimeScheduler</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TunOutScheduler</name>
      <anchorfile>classTunOutScheduler.html</anchorfile>
      <anchor>ab7a672df22bb0532e7fd970ef8d40f1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>initializeNetwork</name>
      <anchorfile>classTunOutScheduler.html</anchorfile>
      <anchor>ac0ce8ea27c97f91c3ffcaced6e0f08d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>additionalFD</name>
      <anchorfile>classTunOutScheduler.html</anchorfile>
      <anchor>a5ec2ec95f40d06685911f7b571efc392</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>dev</name>
      <anchorfile>classTunOutScheduler.html</anchorfile>
      <anchor>a12ba5d05152a4a7be128f8219191f190</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UdpOutDevice</name>
    <filename>classUdpOutDevice.html</filename>
    <base>RealworldDevice</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual char *</type>
      <name>encapsulate</name>
      <anchorfile>classUdpOutDevice.html</anchorfile>
      <anchor>a587e93716d4d1e75b5dcba935f064cc6</anchor>
      <arglist>(cPacket *msg, unsigned int *length, sockaddr **addr, socklen_t *addrlen)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>decapsulate</name>
      <anchorfile>classUdpOutDevice.html</anchorfile>
      <anchor>a9be045c1375bbdea5a2023b03129c01a</anchor>
      <arglist>(char *buf, uint32_t length, sockaddr *addr, socklen_t addrlen)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UdpOutScheduler</name>
    <filename>classUdpOutScheduler.html</filename>
    <base>RealtimeScheduler</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UdpOutScheduler</name>
      <anchorfile>classUdpOutScheduler.html</anchorfile>
      <anchor>a18a5b61e3cf0193bd0af3565bf73093e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>initializeNetwork</name>
      <anchorfile>classUdpOutScheduler.html</anchorfile>
      <anchor>a58be0295c7d02e0becbc37d9da27572c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>additionalFD</name>
      <anchorfile>classUdpOutScheduler.html</anchorfile>
      <anchor>ac9a5e1e72556809f04a44991e6f0b437</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>dev</name>
      <anchorfile>classUdpOutScheduler.html</anchorfile>
      <anchor>a4e458e0a5b32ab4d604e453a1ad6d399</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UnderlayConfigurator</name>
    <filename>classUnderlayConfigurator.html</filename>
    <member kind="function">
      <type></type>
      <name>UnderlayConfigurator</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>a3ede93554a900269c78aa2399ffd9648</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UnderlayConfigurator</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>a548a6de588a250e3de9ceeb9adf61c1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInInitPhase</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>a00c2e85286a38799c7a04edb52ae6e76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSimulationEndingSoon</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>abf1b95b990ec72831e5b288b5fb3b013</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getGracefulLeaveDelay</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>adb555b73f61739eb5731f9388065dc63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTransitionTimeFinished</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>a1e9ed51c6459e7f6bef3a1e2a7096ca5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TransportAddress *</type>
      <name>createNode</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>a65d64297bacdcf855bc13e8410754c7e</anchor>
      <arglist>(NodeType type, bool initialize=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>preKillNode</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>a365808ae3d6f667e897f5bf3ee8666b8</anchor>
      <arglist>(NodeType type, TransportAddress *addr=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>migrateNode</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>a31e6fc55c914b3a6606f6c2bc532a1cc</anchor>
      <arglist>(NodeType type, TransportAddress *addr=NULL)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initFinished</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>a1a8154c6086e6f8e5a1a682e82f200d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ChurnGenerator *</type>
      <name>getChurnGenerator</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>a0246308751f76d91bf3b2a9b9015b47a</anchor>
      <arglist>(int typeID)</arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>getChurnGeneratorNum</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>afbc8944f961dad94a571ef01e6bb341b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOverlayTerminalCount</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>a611bd56fa1ac7fca47a2c8f02e8b2009</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>numInitStages</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>a4a2df5363620242d6623570a3bce8ce7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>a2c191c8f38c7ac86509061801664b69b</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>initializeUnderlay</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>a00b370315b9dcd39b41e254837d9a7ad</anchor>
      <arglist>(int stage)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>a90985a5b37ced8385ae394f1648757c4</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>afa534ef8e29d27e45de39492a92cfb10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finishUnderlay</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>a774e30cdd3aced06e5a04eb3ec4e4b0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>setDisplayString</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>a38c591a7837a8d7a426111229955c9fd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>aa7f115162da55cf2b5c70ef6ee36efdc</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>overlayTerminalCount</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>aed1fe1d613fb061b714fc281cbb0b820</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>firstNodeId</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>a16e2037aaf121606c64d0b11da010699</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>gracefulLeaveDelay</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>a940d214081be6860f8410511c2da7ad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>gracefulLeaveProbability</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>afac0cabcbc3d20fd6c490ea27918372e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GlobalNodeList *</type>
      <name>globalNodeList</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>a18732aa18ca952e0f7973216692d7777</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GlobalStatistics *</type>
      <name>globalStatistics</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>a372135b968de0be7c48211cddcc06df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ChurnGenerator * &gt;</type>
      <name>churnGenerator</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>a45b9ecd5f8deb026db63afc69c60d5a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>endSimulationTimer</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>a548eec1000148d285efe34cf6ee216ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>endSimulationNotificationTimer</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>a2f7a04daff94019a55923852acf64054</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>endTransitionTimer</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>ad5973e609ca86c8c401f938ce6be2be7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>struct timeval</type>
      <name>initFinishedTime</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>a2675d1d01baaac0fe01436d01deabd13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>struct timeval</type>
      <name>initStartTime</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>a928043cc0dbb0454f1916c3bf3671da0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>transitionTime</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>afb96a52e81380ef6050bb862e9e3a065</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>measurementTime</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>a1b60e5e9896ae96d7cfa6874fdc37b3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>NUM_COLORS</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>a98cdd2bec4b42ccf467e8062cc5a0f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const char *</type>
      <name>colorNames</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>ab5366368e36a4884d97ae5c3d2a82182</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>consoleOut</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>a19c6a49c1c473504ca99cd68de6d29b4</anchor>
      <arglist>(const std::string &amp;text)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>init</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>a9fc926f506f7871972e600daa1610f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>simulationEndingSoon</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>a38754865f517c0f01b6982e64f2c07ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>transitionTimeFinished</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>ac7adf76aa36b906e46de3fddd2b29ed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>initCounter</name>
      <anchorfile>classUnderlayConfigurator.html</anchorfile>
      <anchor>ab9dfff047a669eb64164d953c44e60f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UnderlayConfiguratorAccess</name>
    <filename>classUnderlayConfiguratorAccess.html</filename>
    <member kind="function">
      <type>UnderlayConfigurator *</type>
      <name>get</name>
      <anchorfile>classUnderlayConfiguratorAccess.html</anchorfile>
      <anchor>a5e0cc87f6699810ee663e2239184e9b9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UnderlayTestCall</name>
    <filename>classUnderlayTestCall.html</filename>
    <base>BaseCallMessage</base>
    <member kind="function">
      <type></type>
      <name>UnderlayTestCall</name>
      <anchorfile>classUnderlayTestCall.html</anchorfile>
      <anchor>a7c9e53465f21d9a8a6bc38bba1c2ea4b</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnderlayTestCall</name>
      <anchorfile>classUnderlayTestCall.html</anchorfile>
      <anchor>a5852fd1f760dfe9e7f50e0f49d7678c1</anchor>
      <arglist>(const UnderlayTestCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UnderlayTestCall</name>
      <anchorfile>classUnderlayTestCall.html</anchorfile>
      <anchor>a803f5a4da0b70575c140896187b209e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UnderlayTestCall &amp;</type>
      <name>operator=</name>
      <anchorfile>classUnderlayTestCall.html</anchorfile>
      <anchor>a92ad5d59256b055c29afe8b750768180</anchor>
      <arglist>(const UnderlayTestCall &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnderlayTestCall *</type>
      <name>dup</name>
      <anchorfile>classUnderlayTestCall.html</anchorfile>
      <anchor>a0c426594c41e653f77df7b013fd6a125</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classUnderlayTestCall.html</anchorfile>
      <anchor>a9077ff21e8ace323b32cb0bfa58062f4</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classUnderlayTestCall.html</anchorfile>
      <anchor>a5284052da1811bfbc3b0aba5a7f73c4c</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getSendTime</name>
      <anchorfile>classUnderlayTestCall.html</anchorfile>
      <anchor>aee283554424c48040d54f1a9b76cf9d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSendTime</name>
      <anchorfile>classUnderlayTestCall.html</anchorfile>
      <anchor>a6781f43e8cc1aaa6475b7bbcce0b4ad2</anchor>
      <arglist>(simtime_t sendTime)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classUnderlayTestCall.html</anchorfile>
      <anchor>a2a55c17186a3d752bc66132fa71ecdfc</anchor>
      <arglist>(const UnderlayTestCall &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>sendTime_var</name>
      <anchorfile>classUnderlayTestCall.html</anchorfile>
      <anchor>a1c0e1155fde293cff8312fbd29a13e30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classUnderlayTestCall.html</anchorfile>
      <anchor>a339d6b49dbe0bc2bb4ba80b81d1630a0</anchor>
      <arglist>(const UnderlayTestCall &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UnderlayTestResponse</name>
    <filename>classUnderlayTestResponse.html</filename>
    <base>BaseResponseMessage</base>
    <member kind="function">
      <type></type>
      <name>UnderlayTestResponse</name>
      <anchorfile>classUnderlayTestResponse.html</anchorfile>
      <anchor>a9a29fdf5301f590b4cf68cf966610f03</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnderlayTestResponse</name>
      <anchorfile>classUnderlayTestResponse.html</anchorfile>
      <anchor>a125515a2bf83bddc84ec9b0030bb644e</anchor>
      <arglist>(const UnderlayTestResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UnderlayTestResponse</name>
      <anchorfile>classUnderlayTestResponse.html</anchorfile>
      <anchor>a1022cdf150394908c75380d790a5b609</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UnderlayTestResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classUnderlayTestResponse.html</anchorfile>
      <anchor>a126206dff6e4a360b2760ed27c85f622</anchor>
      <arglist>(const UnderlayTestResponse &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnderlayTestResponse *</type>
      <name>dup</name>
      <anchorfile>classUnderlayTestResponse.html</anchorfile>
      <anchor>a5f641517b7e216a1c661456f17081f94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classUnderlayTestResponse.html</anchorfile>
      <anchor>a8475e8ac65a7d46fc538ac90f3118181</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classUnderlayTestResponse.html</anchorfile>
      <anchor>a95ada4dc95872994641b744435501cae</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getOneWayLatency</name>
      <anchorfile>classUnderlayTestResponse.html</anchorfile>
      <anchor>a9aec9a22afe9b426142632642eb702db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOneWayLatency</name>
      <anchorfile>classUnderlayTestResponse.html</anchorfile>
      <anchor>aa22e58f6ec138dd44cc5b1678cffeab3</anchor>
      <arglist>(simtime_t oneWayLatency)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classUnderlayTestResponse.html</anchorfile>
      <anchor>a9df6551dc1938b2122e332821ead4df3</anchor>
      <arglist>(const UnderlayTestResponse &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>oneWayLatency_var</name>
      <anchorfile>classUnderlayTestResponse.html</anchorfile>
      <anchor>a5f40e566c2839cb4cff7415dbe56c017</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classUnderlayTestResponse.html</anchorfile>
      <anchor>aec66106e72fad33e1ed7d473e0ab7296</anchor>
      <arglist>(const UnderlayTestResponse &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vast</name>
    <filename>classVast.html</filename>
    <base>BaseOverlay</base>
    <member kind="function">
      <type></type>
      <name>~Vast</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>aba314a4b9ab92fe4b19126fae47a0501</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeOverlay</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a9146368d63151277c8442a17afe8d1d6</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finishOverlay</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a5ebb4aad5fd0a309cae1d09762b6c270</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleUDPMessage</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a5a12a3e1f34fbad6a2f6bb3231fce048</anchor>
      <arglist>(BaseOverlayMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a8b0fcea2fc373e49bb5b496fe8049f10</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleAppMessage</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a9bfca7e546baa11222621b528659efa7</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleNodeLeaveNotification</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>abe5f7fe27677c21cb0421ace877ff368</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleNodeGracefulLeaveNotification</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a927d7255a4ffb6ab2ef1f46c5cba8fb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAOI</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>ac3b579a608533fc6f2cf91e0fd79842a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector2D</type>
      <name>getPosition</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>aa285352a2262c1a67208cd98659616a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NodeHandle</type>
      <name>getHandle</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a48cf3c577c61f00217c6e3e62a90fc9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAreaDimension</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a4861053794596d6f2b7c5c24e44fc345</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>SiteMap</type>
      <name>Sites</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>aa91c3bc67b42ddb46d9ff6ff0dc9aaf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Site</type>
      <name>thisSite</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a6cc5cbcb1af32443b0ed007af8937073</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addNode</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a27eff8db1664e9cd1e081c6dd3a64f42</anchor>
      <arglist>(Vector2D p, NodeHandle node, int NeighborCount=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addNodeToStock</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a35d59294c560dd21f9ac30729eddfdb2</anchor>
      <arglist>(NodeHandle node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeNode</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a3e7c0afd3098cc61ede525a6a59fb71f</anchor>
      <arglist>(NodeHandle node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buildVoronoi</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>aac593b11c556c63cbdb49984bc6e9b34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buildVoronoi</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a191518eda5a0f2d8639521c9102d43b1</anchor>
      <arglist>(Vector2D old_pos, Vector2D new_pos, NodeHandle enclosingCheck=NodeHandle::UNSPECIFIED_NODE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeNeighbors</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>ac0eb8a31568b3fbec02f6251e7d05e46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendToApp</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>ad3da9d482e3f5e50e0555cb561805320</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMessage</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a746611132de4dcbba0ece46cf75798b6</anchor>
      <arglist>(VastMessage *vastMsg, NodeHandle destAddr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setBootstrapedIcon</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a1bfee43b8a5cde362b7ff137f3597c78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>changeState</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a9f49980680ed52219a6ef0a1bcff412b</anchor>
      <arglist>(int state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processJoinTimer</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>aa54887a2c280267a9a401e50c240f6d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processPingTimer</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>af30893315b517cde6403ebf5a0aca8af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processSecTimer</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a0eadb10fa255a3a2b89b1296d87be07d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processCheckCriticalTimer</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a1297368d6e59e3d9528b082f5ec043f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processDiscoveryTimer</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a3e41736afd958b63b754c0bcc425cbfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleJoin</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a25469658017340ae776e74d966ba5f54</anchor>
      <arglist>(GameAPIPositionMessage *sgcMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMove</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a092f27883a3661a5b1ffe905e68df738</anchor>
      <arglist>(GameAPIPositionMessage *sgcMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleEvent</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a645e007e0427c40f13eadf6f914f9881</anchor>
      <arglist>(GameAPIMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleJoinRequest</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a3b1ec50a85c2e2e6c7c3e081acd1dcd2</anchor>
      <arglist>(VastMessage *vastMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleJoinAcknowledge</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>ae3f2d9c26130a6986478513bc281e080</anchor>
      <arglist>(VastListMessage *vastListMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleNodeMove</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a9a1ea2b26ce93b38b226fd0eeb494998</anchor>
      <arglist>(VastMoveMessage *vastMoveMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleNewNeighbors</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a50d7f96259000a44b65ee3951cb75ef5</anchor>
      <arglist>(VastListMessage *vastListMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleNodeLeave</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>aa5b06ce84e80dfe3f274327a8cebf3d9</anchor>
      <arglist>(VastListMessage *vastListMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleEnclosingNeighborsRequest</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>adde7e0c8aab03277a63461d134fc6daa</anchor>
      <arglist>(VastMessage *vastMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleBackupNeighbors</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a7183562b322a046e2f23f8f8f668fdca</anchor>
      <arglist>(VastListMessage *vastListMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handlePing</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a1361682de85c7ecc63476b0a9db712f0</anchor>
      <arglist>(VastMessage *vastMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handlePong</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a183cca07bd6ddceb33eebfba75bf1b80</anchor>
      <arglist>(VastMessage *vastMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleDiscardNode</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>ac8599f81539fdaee6cd4cfd5cca2b8f4</anchor>
      <arglist>(VastDiscardMessage *vastMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendDiscardNode</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a23e724cfc93976442b57ed98c60b585d</anchor>
      <arglist>(VastMessage *vastMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>synchronizeApp</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>afe368cd0468509b32f40acfc196a1856</anchor>
      <arglist>(VastMoveMessage *vastMoveMsg=NULL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>AOI_size</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a4720ff97b3ca3a6f53b9533f57a4fb56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>areaDimension</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>afdc6b6327442ee54b2a92c930966aae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PositionSet</type>
      <name>Positions</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a72ef8a625cc4c37c0513fc842bd09470</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StockList</type>
      <name>Stock</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a1b80c395388f7cc10a7a084bac6157e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>joinRequestBytesSent</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a8cae35144fc3d3615ca900f4a5d016f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>joinAcknowledgeBytesSent</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>af1b66db4acda86bc53121f530ad3305f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nodeMoveBytesSent</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>ae7e6d853f952734f8e1c41d5c3f82dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>newNeighborsBytesSent</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a0bb1c36ab41d09526a7b54433b2a1f54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nodeLeaveBytesSent</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>aec8877ef5725ece7aa4f1e7dc6ec47c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>enclosingNeighborsRequestBytesSent</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a42fa22094150446e8b0d2e2e2c58ef02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>pingBytesSent</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>afea7ca8faed771a898b0daa3cffafeeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>pongBytesSent</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>af8a09f477664314710211ec69de5944f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>discardNodeBytesSent</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a53543eccb1be540b3d7875cf0cdd0b52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>backupBytesSent</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a44a0e59077adea2a2c3d09a39ce6597e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>maxBytesPerSecondSent</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>aea94419d8d7589930d1b2e1b4de0468d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>averageBytesPerSecondSent</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a90f9ed7d27fee143970e838e2a7bea15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>bytesPerSecond</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>af30ae27611d3b281fb3a7f16b329f539</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>secTimerCount</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a120c3c82cafcab0a237fe080e71a4862</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debugVoronoiOutput</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a9a5f4a33b22c8d78fef399b1041cb333</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>joinTimeout</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a2218f4c5c055326aeb59640acaf3b91c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>pingTimeout</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>ad79f8a786033cb62653286f8cc5015e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>discoveryIntervall</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a9b5faa39bdba0cbc3da3a588173e3c1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>checkCriticalIntervall</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a7cf9fae4a48173e8e28a117f568027fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>criticalThreshold</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>ab68ac286673ed0ae4e2e05215481d667</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>stockListSize</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a4d00a0a50dd92e3d223b4f4599bc82c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Geometry</type>
      <name>geom</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a74a56d4cdcb37e86d85a893696ba7780</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeList</type>
      <name>edgelist</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>afa2c209389e2a7e721c238336501971b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HeapPQ</type>
      <name>heap</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a8080d25da7c61e9d731f5d84779b7d8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>join_timer</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a5679f28e0a58927ef5e707f8eafd9473</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>ping_timer</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a34548c8fe764d86196e99f3bd8d5b793</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>discovery_timer</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a12f4439d33e9d3f8928c5cc81f36a141</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>checkcritical_timer</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>a6da2c953a461445f77d16764f3545e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>sec_timer</name>
      <anchorfile>classVast.html</anchorfile>
      <anchor>aff47bd08fb10c41ec16862934b098a4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VastDiscardMessage</name>
    <filename>classVastDiscardMessage.html</filename>
    <base>VastMessage</base>
    <member kind="function">
      <type></type>
      <name>VastDiscardMessage</name>
      <anchorfile>classVastDiscardMessage.html</anchorfile>
      <anchor>a8a4ad5b0560834f0749cf5c6fd6276f0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VastDiscardMessage</name>
      <anchorfile>classVastDiscardMessage.html</anchorfile>
      <anchor>af88e982fcb78a9693bce6022eaab7970</anchor>
      <arglist>(const VastDiscardMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VastDiscardMessage</name>
      <anchorfile>classVastDiscardMessage.html</anchorfile>
      <anchor>a54c57042b06c61c1430eb3fd70d733bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VastDiscardMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classVastDiscardMessage.html</anchorfile>
      <anchor>a15ff48eebd4bb9a877e18634535d4dbe</anchor>
      <arglist>(const VastDiscardMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VastDiscardMessage *</type>
      <name>dup</name>
      <anchorfile>classVastDiscardMessage.html</anchorfile>
      <anchor>a52bec34ce3490f87afa0f958aeaa1b3f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classVastDiscardMessage.html</anchorfile>
      <anchor>a774245aa721bf2f95887134587f8100f</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classVastDiscardMessage.html</anchorfile>
      <anchor>a4128739d118bbdc806351a36bc8c6f48</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getDiscardNode</name>
      <anchorfile>classVastDiscardMessage.html</anchorfile>
      <anchor>ab1aafc5df134ef62c4af2ef06ca87b25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getDiscardNode</name>
      <anchorfile>classVastDiscardMessage.html</anchorfile>
      <anchor>aa0c1a8b481f278e1310c459b82fd8ed7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDiscardNode</name>
      <anchorfile>classVastDiscardMessage.html</anchorfile>
      <anchor>a730a57591e34bea66551aac9f3b2b592</anchor>
      <arglist>(const NodeHandle &amp;discardNode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classVastDiscardMessage.html</anchorfile>
      <anchor>a64ce533b338f76477a8ba9205befcefe</anchor>
      <arglist>(const VastDiscardMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>discardNode_var</name>
      <anchorfile>classVastDiscardMessage.html</anchorfile>
      <anchor>a0640b416f625f0feb2d6886cb81db368</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classVastDiscardMessage.html</anchorfile>
      <anchor>ae503f5989683555a589d725c93e3ad13</anchor>
      <arglist>(const VastDiscardMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VastEventMessage</name>
    <filename>classVastEventMessage.html</filename>
    <base>VastMessage</base>
    <member kind="function">
      <type></type>
      <name>VastEventMessage</name>
      <anchorfile>classVastEventMessage.html</anchorfile>
      <anchor>a4bba2f64e3bede739ae5d64cbbb49aab</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VastEventMessage</name>
      <anchorfile>classVastEventMessage.html</anchorfile>
      <anchor>a6feafec29c4bd2880d2d47a9b4e992b9</anchor>
      <arglist>(const VastEventMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VastEventMessage</name>
      <anchorfile>classVastEventMessage.html</anchorfile>
      <anchor>aa45f2672bc842155a04656e5ad047d95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VastEventMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classVastEventMessage.html</anchorfile>
      <anchor>a6441f7139993502774e592deacab6842</anchor>
      <arglist>(const VastEventMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VastEventMessage *</type>
      <name>dup</name>
      <anchorfile>classVastEventMessage.html</anchorfile>
      <anchor>aaa359fd96c3345a5297aa38d72e4cabd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classVastEventMessage.html</anchorfile>
      <anchor>a88ee05edcefdc96b93c95f1cd1094b61</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classVastEventMessage.html</anchorfile>
      <anchor>af4a0cd76407e6abf737011faac59b37b</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classVastEventMessage.html</anchorfile>
      <anchor>abf84baba4a0f010002a752ebcfe15df6</anchor>
      <arglist>(const VastEventMessage &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classVastEventMessage.html</anchorfile>
      <anchor>a6fece7c934839b707d315428916256d9</anchor>
      <arglist>(const VastEventMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VastListMessage</name>
    <filename>classVastListMessage.html</filename>
    <base>VastMessage</base>
    <member kind="function">
      <type></type>
      <name>VastListMessage</name>
      <anchorfile>classVastListMessage.html</anchorfile>
      <anchor>aff5bcfc86def8d60e9cf1b6aae683340</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VastListMessage</name>
      <anchorfile>classVastListMessage.html</anchorfile>
      <anchor>a7dea5e9bf16a9c9fada4ed260c34c601</anchor>
      <arglist>(const VastListMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VastListMessage</name>
      <anchorfile>classVastListMessage.html</anchorfile>
      <anchor>a46a6174b8982337748966b36167661e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VastListMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classVastListMessage.html</anchorfile>
      <anchor>a83f2b674b56d4df622e68536c3c1286b</anchor>
      <arglist>(const VastListMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VastListMessage *</type>
      <name>dup</name>
      <anchorfile>classVastListMessage.html</anchorfile>
      <anchor>a75bc7300b243b71a084f9395411a9c84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classVastListMessage.html</anchorfile>
      <anchor>af5d5b54d8266b12748ebf9bbdd6086d7</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classVastListMessage.html</anchorfile>
      <anchor>a4eb4a3d911fd74fca5531de436d25241</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNeighborNodeArraySize</name>
      <anchorfile>classVastListMessage.html</anchorfile>
      <anchor>a51421ae8e810c22b4395f0335e6a22b5</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNeighborNodeArraySize</name>
      <anchorfile>classVastListMessage.html</anchorfile>
      <anchor>a284ee95a466d4e7c1b4f803acd47be2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getNeighborNode</name>
      <anchorfile>classVastListMessage.html</anchorfile>
      <anchor>a4779058fdfb7630a9ac3658377e033d4</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getNeighborNode</name>
      <anchorfile>classVastListMessage.html</anchorfile>
      <anchor>a8d9badaaeb700e3ddb84c602e78ff8f8</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNeighborNode</name>
      <anchorfile>classVastListMessage.html</anchorfile>
      <anchor>af9ed6e564bae28c51b19cf3004a83325</anchor>
      <arglist>(unsigned int k, const NodeHandle &amp;neighborNode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNeighborPosArraySize</name>
      <anchorfile>classVastListMessage.html</anchorfile>
      <anchor>acdf513aff66a23092146597c5904d72e</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNeighborPosArraySize</name>
      <anchorfile>classVastListMessage.html</anchorfile>
      <anchor>a0de79f8eff86dc7fef1aa1cc214834af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector2D &amp;</type>
      <name>getNeighborPos</name>
      <anchorfile>classVastListMessage.html</anchorfile>
      <anchor>ab21fc36623f45fc11ef02f510b3dceee</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Vector2D &amp;</type>
      <name>getNeighborPos</name>
      <anchorfile>classVastListMessage.html</anchorfile>
      <anchor>a777844864d7e0f555b16a27f71fa6ed7</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNeighborPos</name>
      <anchorfile>classVastListMessage.html</anchorfile>
      <anchor>ad6718fb26bb003fbf87c6be6c2ecfae5</anchor>
      <arglist>(unsigned int k, const Vector2D &amp;neighborPos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getRequestEnclosingNeighbors</name>
      <anchorfile>classVastListMessage.html</anchorfile>
      <anchor>a310301deb6e923737554b28876e39d13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRequestEnclosingNeighbors</name>
      <anchorfile>classVastListMessage.html</anchorfile>
      <anchor>ae6fb80fc3ecda036f8eb68caf82f80f7</anchor>
      <arglist>(bool requestEnclosingNeighbors)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classVastListMessage.html</anchorfile>
      <anchor>acfea2c33817591e04a277cdb8d7ef0a8</anchor>
      <arglist>(const VastListMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle *</type>
      <name>neighborNode_var</name>
      <anchorfile>classVastListMessage.html</anchorfile>
      <anchor>af7d2d827139bc66ec9b2bc3dd0ad9408</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>neighborNode_arraysize</name>
      <anchorfile>classVastListMessage.html</anchorfile>
      <anchor>ac5b661535bb7e14f4019ed0666c755ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D *</type>
      <name>neighborPos_var</name>
      <anchorfile>classVastListMessage.html</anchorfile>
      <anchor>ae6cd399c7f72ae975bbf0af2b6d85bdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>neighborPos_arraysize</name>
      <anchorfile>classVastListMessage.html</anchorfile>
      <anchor>a6d609ced0142ab7f50d89f76f94511ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>requestEnclosingNeighbors_var</name>
      <anchorfile>classVastListMessage.html</anchorfile>
      <anchor>aefe1d6ad306858a5bf6da5138ec80d5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classVastListMessage.html</anchorfile>
      <anchor>aa7011f20ec18bed08ca688ae16546ed0</anchor>
      <arglist>(const VastListMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VastMessage</name>
    <filename>classVastMessage.html</filename>
    <base>BaseOverlayMessage</base>
    <member kind="function">
      <type></type>
      <name>VastMessage</name>
      <anchorfile>classVastMessage.html</anchorfile>
      <anchor>aa873227636e1b30021481dd594c8e9f1</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VastMessage</name>
      <anchorfile>classVastMessage.html</anchorfile>
      <anchor>a45c9668c38535b6e8b1539bd2c3a2750</anchor>
      <arglist>(const VastMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VastMessage</name>
      <anchorfile>classVastMessage.html</anchorfile>
      <anchor>ad36fe5a1583062f738d6dc7aa30d16d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VastMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classVastMessage.html</anchorfile>
      <anchor>ad352e574f9ad8fc9f537ed24df819bee</anchor>
      <arglist>(const VastMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VastMessage *</type>
      <name>dup</name>
      <anchorfile>classVastMessage.html</anchorfile>
      <anchor>a9f68f45d83317a6cd5d122aae94a0347</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classVastMessage.html</anchorfile>
      <anchor>aedbb60e79bd0fc19297810b04d6b677a</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classVastMessage.html</anchorfile>
      <anchor>a58510b19b9cb069e60c3f196fcd59ed9</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCommand</name>
      <anchorfile>classVastMessage.html</anchorfile>
      <anchor>a4faf79e8d3e56ae8b1007468d64f415e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCommand</name>
      <anchorfile>classVastMessage.html</anchorfile>
      <anchor>a7c59b275d01a0efea1adc8f0e431ce30</anchor>
      <arglist>(int command)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeHandle &amp;</type>
      <name>getSourceNode</name>
      <anchorfile>classVastMessage.html</anchorfile>
      <anchor>a39ede7a350c6cb596d2042bb95f36c59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getSourceNode</name>
      <anchorfile>classVastMessage.html</anchorfile>
      <anchor>a4aabd2f9691d8c0707404f50f3c223b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSourceNode</name>
      <anchorfile>classVastMessage.html</anchorfile>
      <anchor>ae853c47373a57c41d20898dd80702b29</anchor>
      <arglist>(const NodeHandle &amp;sourceNode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OverlayKey &amp;</type>
      <name>getDestKey</name>
      <anchorfile>classVastMessage.html</anchorfile>
      <anchor>a9c9cdb5c0fbbdc0835ec81958c149a42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const OverlayKey &amp;</type>
      <name>getDestKey</name>
      <anchorfile>classVastMessage.html</anchorfile>
      <anchor>ab8c9367cde0646a8ffcc52383694c5cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestKey</name>
      <anchorfile>classVastMessage.html</anchorfile>
      <anchor>a1261e60d2cbc669d27607799d3bf4868</anchor>
      <arglist>(const OverlayKey &amp;destKey)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector2D &amp;</type>
      <name>getPos</name>
      <anchorfile>classVastMessage.html</anchorfile>
      <anchor>acd4b084b9e888caaaafa0872cd2cd640</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Vector2D &amp;</type>
      <name>getPos</name>
      <anchorfile>classVastMessage.html</anchorfile>
      <anchor>ae20b7f4fcdc9ac0167adb91eddd0e9c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPos</name>
      <anchorfile>classVastMessage.html</anchorfile>
      <anchor>a9428a4970412386808b252320f7edbc0</anchor>
      <arglist>(const Vector2D &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNeighborCount</name>
      <anchorfile>classVastMessage.html</anchorfile>
      <anchor>a91722b2dc4522f9b533db87c9eb9c56e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNeighborCount</name>
      <anchorfile>classVastMessage.html</anchorfile>
      <anchor>ab19b7ac43edc311698af211d2a6254fc</anchor>
      <arglist>(int neighborCount)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classVastMessage.html</anchorfile>
      <anchor>ac0c6e9da7511de0385dde6e8a4e46c93</anchor>
      <arglist>(const VastMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>command_var</name>
      <anchorfile>classVastMessage.html</anchorfile>
      <anchor>af0a6c805621bf847c7984b98fbbfb5d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>sourceNode_var</name>
      <anchorfile>classVastMessage.html</anchorfile>
      <anchor>a5b36b6f700e4223277f1ce6dc548d1d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverlayKey</type>
      <name>destKey_var</name>
      <anchorfile>classVastMessage.html</anchorfile>
      <anchor>a72359001d196731046e295c9445ac777</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D</type>
      <name>pos_var</name>
      <anchorfile>classVastMessage.html</anchorfile>
      <anchor>ae6dc13b5fb612c3ed440254c1ff99dff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>neighborCount_var</name>
      <anchorfile>classVastMessage.html</anchorfile>
      <anchor>a857b6055fe7f6fdf356c28c75e41eef6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classVastMessage.html</anchorfile>
      <anchor>a175da512f86f7e765d0ac8301fdefc7e</anchor>
      <arglist>(const VastMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VastMoveMessage</name>
    <filename>classVastMoveMessage.html</filename>
    <base>VastMessage</base>
    <member kind="function">
      <type></type>
      <name>VastMoveMessage</name>
      <anchorfile>classVastMoveMessage.html</anchorfile>
      <anchor>aa7563a758774bcc4f452a4191f31c54a</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VastMoveMessage</name>
      <anchorfile>classVastMoveMessage.html</anchorfile>
      <anchor>a34dfff2c99d4a80659766e9e8be4cb7c</anchor>
      <arglist>(const VastMoveMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VastMoveMessage</name>
      <anchorfile>classVastMoveMessage.html</anchorfile>
      <anchor>a7293c0063939fa0d075f65d5516e4b31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VastMoveMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classVastMoveMessage.html</anchorfile>
      <anchor>a045e31c2c96829b88b1c9ada6870bd3a</anchor>
      <arglist>(const VastMoveMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VastMoveMessage *</type>
      <name>dup</name>
      <anchorfile>classVastMoveMessage.html</anchorfile>
      <anchor>a11172478d23ce8de9fc66c005a2f9c5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classVastMoveMessage.html</anchorfile>
      <anchor>a2e5721c26d6efabec685f7bebdee8f38</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classVastMoveMessage.html</anchorfile>
      <anchor>adb2f5ab702bff1e3fb7715677055064e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector2D &amp;</type>
      <name>getNewPos</name>
      <anchorfile>classVastMoveMessage.html</anchorfile>
      <anchor>a6b79e923f8cf72150b2b59e5c0f2a59c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Vector2D &amp;</type>
      <name>getNewPos</name>
      <anchorfile>classVastMoveMessage.html</anchorfile>
      <anchor>af35ad67b81e00524a18839a18710e8d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNewPos</name>
      <anchorfile>classVastMoveMessage.html</anchorfile>
      <anchor>ade518f3540a8184ae1a27b262c766ea2</anchor>
      <arglist>(const Vector2D &amp;newPos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getIs_boundary</name>
      <anchorfile>classVastMoveMessage.html</anchorfile>
      <anchor>a4ff4ff5bbee058b7ecb88066f24a1955</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIs_boundary</name>
      <anchorfile>classVastMoveMessage.html</anchorfile>
      <anchor>a9aa1de91ccd0105b57c67d309ec4df67</anchor>
      <arglist>(bool is_boundary)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getRequest_list</name>
      <anchorfile>classVastMoveMessage.html</anchorfile>
      <anchor>ac3a4b30c70da42a1d9fefba6d4b0a762</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRequest_list</name>
      <anchorfile>classVastMoveMessage.html</anchorfile>
      <anchor>a1c51279c4d9653e8753a61d4a67883f8</anchor>
      <arglist>(bool request_list)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classVastMoveMessage.html</anchorfile>
      <anchor>af2c3ec80fe9eb03b22c0a8937b77f0fa</anchor>
      <arglist>(const VastMoveMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector2D</type>
      <name>newPos_var</name>
      <anchorfile>classVastMoveMessage.html</anchorfile>
      <anchor>a4d2470fe9a3d2d3ff3f81ebbd4c4f258</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>is_boundary_var</name>
      <anchorfile>classVastMoveMessage.html</anchorfile>
      <anchor>ad063a58b6d8a4652724e668015e8242f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>request_list_var</name>
      <anchorfile>classVastMoveMessage.html</anchorfile>
      <anchor>aeb9438b5966cadd778b41ebdbb942b93</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classVastMoveMessage.html</anchorfile>
      <anchor>ab2a501ebd0f358db557998b0bb22295d</anchor>
      <arglist>(const VastMoveMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::vector</name>
    <filename>classstd_1_1vector.html</filename>
  </compound>
  <compound kind="class">
    <name>Vector2D</name>
    <filename>classVector2D.html</filename>
    <member kind="function">
      <type></type>
      <name>Vector2D</name>
      <anchorfile>classVector2D.html</anchorfile>
      <anchor>a98e9997ebb7a629f4db52397d4e0d653</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector2D</name>
      <anchorfile>classVector2D.html</anchorfile>
      <anchor>a525e125aac4c844f04c52ddb0e75d594</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classVector2D.html</anchorfile>
      <anchor>a39a3335f33d7e9850b99e4498ba4d856</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceSqr</name>
      <anchorfile>classVector2D.html</anchorfile>
      <anchor>ae01a1f04ce4ee6f09f3fbc72893412cb</anchor>
      <arglist>(const Vector2D v) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xyMaxDistance</name>
      <anchorfile>classVector2D.html</anchorfile>
      <anchor>a32737dea996933d64be2968ae8f5574a</anchor>
      <arglist>(const Vector2D v) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cosAngle</name>
      <anchorfile>classVector2D.html</anchorfile>
      <anchor>a93b3d9dd85ce1987550c4be90616cc76</anchor>
      <arglist>(const Vector2D &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getQuadrant</name>
      <anchorfile>classVector2D.html</anchorfile>
      <anchor>a63be09d94b3845fbc280a296ee40e299</anchor>
      <arglist>(const Vector2D &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vector2D &amp;</type>
      <name>operator=</name>
      <anchorfile>classVector2D.html</anchorfile>
      <anchor>a8e96aff8e684c756345391631b3cc64a</anchor>
      <arglist>(const Vector2D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector2D &amp;</type>
      <name>operator+=</name>
      <anchorfile>classVector2D.html</anchorfile>
      <anchor>a49c69f8e9a323a89307387c37ce5424d</anchor>
      <arglist>(const Vector2D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector2D &amp;</type>
      <name>operator-=</name>
      <anchorfile>classVector2D.html</anchorfile>
      <anchor>a71321e79ebef52a996536ff4dc19de65</anchor>
      <arglist>(const Vector2D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector2D &amp;</type>
      <name>operator*=</name>
      <anchorfile>classVector2D.html</anchorfile>
      <anchor>a40adb1084a31bb7995c38abfe890742a</anchor>
      <arglist>(const double s)</arglist>
    </member>
    <member kind="function">
      <type>Vector2D &amp;</type>
      <name>operator/=</name>
      <anchorfile>classVector2D.html</anchorfile>
      <anchor>a396a5a464caf443ac913daa6a79e4fe1</anchor>
      <arglist>(const double s)</arglist>
    </member>
    <member kind="function">
      <type>Vector2D</type>
      <name>operator+</name>
      <anchorfile>classVector2D.html</anchorfile>
      <anchor>a554409abfa6672209c067cce7ebc8a8f</anchor>
      <arglist>(const Vector2D &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vector2D</type>
      <name>operator-</name>
      <anchorfile>classVector2D.html</anchorfile>
      <anchor>a41a6af3b060355fbb31d1ba61a675589</anchor>
      <arglist>(const Vector2D &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vector2D</type>
      <name>operator*</name>
      <anchorfile>classVector2D.html</anchorfile>
      <anchor>aca2baff3de3da62b60e3e9eb8c150701</anchor>
      <arglist>(const double s) const </arglist>
    </member>
    <member kind="function">
      <type>Vector2D</type>
      <name>operator/</name>
      <anchorfile>classVector2D.html</anchorfile>
      <anchor>ad1c97b361dcd7b1f0d5ab5aad9a2d3ef</anchor>
      <arglist>(const double s) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classVector2D.html</anchorfile>
      <anchor>a7be930aa241b6d3a0020b379d9c5d9df</anchor>
      <arglist>(const Vector2D &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classVector2D.html</anchorfile>
      <anchor>a0045570cb8f25106cdcf2a6488bfa8d7</anchor>
      <arglist>(const Vector2D &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>netPack</name>
      <anchorfile>classVector2D.html</anchorfile>
      <anchor>af0132b05dd3d183ffabdd41de32fd35e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>netUnpack</name>
      <anchorfile>classVector2D.html</anchorfile>
      <anchor>a1d1c988e57ee9ee0e63a9ddfca6ce612</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>x</name>
      <anchorfile>classVector2D.html</anchorfile>
      <anchor>ac5c4e553815737aa24bec8281270178f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>y</name>
      <anchorfile>classVector2D.html</anchorfile>
      <anchor>ac38d0179cfe74c30fee290a703ab209a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classVector2D.html</anchorfile>
      <anchor>a6a34eeff8daedb4141f46609905271cf</anchor>
      <arglist>(const Vector2D &amp;a, const Vector2D &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classVector2D.html</anchorfile>
      <anchor>a141227592beb1c3714fdf1f357f221a6</anchor>
      <arglist>(std::ostream &amp;Stream, const Vector2D &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vivaldi</name>
    <filename>classVivaldi.html</filename>
    <base>AbstractNcs</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Vivaldi</name>
      <anchorfile>classVivaldi.html</anchorfile>
      <anchor>a938ea96ef9c45b103a4fcdcb13fa7993</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classVivaldi.html</anchorfile>
      <anchor>adfea4da4b6bc57b76c157669d78eec4d</anchor>
      <arglist>(NeighborCache *neighborCache)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processCoordinates</name>
      <anchorfile>classVivaldi.html</anchorfile>
      <anchor>a9eed1e59f335c2e8bd93ad0a2f4fb0a6</anchor>
      <arglist>(const simtime_t &amp;rtt, const AbstractNcsNodeInfo &amp;nodeInfo)</arglist>
    </member>
    <member kind="function">
      <type>Prox</type>
      <name>getCoordinateBasedProx</name>
      <anchorfile>classVivaldi.html</anchorfile>
      <anchor>afca433927cab20f16ea82b87c1e211db</anchor>
      <arglist>(const AbstractNcsNodeInfo &amp;info) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractNcsNodeInfo *</type>
      <name>getUnvalidNcsInfo</name>
      <anchorfile>classVivaldi.html</anchorfile>
      <anchor>a6552dfa8193efd2d8dae40e9f9813155</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractNcsNodeInfo *</type>
      <name>createNcsInfo</name>
      <anchorfile>classVivaldi.html</anchorfile>
      <anchor>a281e419b806e6f68f0e738a51fcafd8f</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;coords) const </arglist>
    </member>
    <member kind="function">
      <type>const VivaldiCoordsInfo &amp;</type>
      <name>getOwnNcsInfo</name>
      <anchorfile>classVivaldi.html</anchorfile>
      <anchor>a73d84429ef5aaa9d99623d321b79766b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>getOwnCoordinates</name>
      <anchorfile>classVivaldi.html</anchorfile>
      <anchor>ae808c2aefe8eb5ed21d7c9a3d1c98926</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getOwnError</name>
      <anchorfile>classVivaldi.html</anchorfile>
      <anchor>abe5243e8597036774c559c340fd2ac48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getOwnHeightVector</name>
      <anchorfile>classVivaldi.html</anchorfile>
      <anchor>a9789a57219c60fbbe4cc9c16949afc00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finishVivaldi</name>
      <anchorfile>classVivaldi.html</anchorfile>
      <anchor>aa07b7adcc082647b3bc8b934463a7570</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateDisplay</name>
      <anchorfile>classVivaldi.html</anchorfile>
      <anchor>adf90927677eac51a77e3a04dbd19c7f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcError</name>
      <anchorfile>classVivaldi.html</anchorfile>
      <anchor>a91655cfe786ee313db3baad877f5ca87</anchor>
      <arglist>(const simtime_t &amp;rtt, double dist, double weight)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcDelta</name>
      <anchorfile>classVivaldi.html</anchorfile>
      <anchor>a25c69150f54ee33c20491417dba44d4e</anchor>
      <arglist>(const simtime_t &amp;rtt, double dist, double weight)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VivaldiCoordsInfo *</type>
      <name>ownCoords</name>
      <anchorfile>classVivaldi.html</anchorfile>
      <anchor>ae76e433284116eaa6bbdccd86e0efa9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>errorC</name>
      <anchorfile>classVivaldi.html</anchorfile>
      <anchor>aa38a52ac5d29c2844620ae43d7f32aa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>coordC</name>
      <anchorfile>classVivaldi.html</anchorfile>
      <anchor>afe96e0b3ad90220dbee5198f9fae7fce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>showPosition</name>
      <anchorfile>classVivaldi.html</anchorfile>
      <anchor>ac311dcb0883695c4ed1c0d4f5f65df65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GlobalStatistics *</type>
      <name>globalStatistics</name>
      <anchorfile>classVivaldi.html</anchorfile>
      <anchor>a5f27d85390540c10850315ae66700cc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NeighborCache *</type>
      <name>neighborCache</name>
      <anchorfile>classVivaldi.html</anchorfile>
      <anchor>aa6bef4e3c3d1835579c499888098f999</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>enableHeightVector</name>
      <anchorfile>classVivaldi.html</anchorfile>
      <anchor>a7188bbad97d7828178d4b564c3a5e9c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>dimension</name>
      <anchorfile>classVivaldi.html</anchorfile>
      <anchor>aa43a848b5da63bdeb736179538886fb6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VivaldiCoordsInfo</name>
    <filename>classVivaldiCoordsInfo.html</filename>
    <base>EuclideanNcsNodeInfo</base>
    <member kind="function">
      <type></type>
      <name>VivaldiCoordsInfo</name>
      <anchorfile>classVivaldiCoordsInfo.html</anchorfile>
      <anchor>aa32b1e41c9913c8b66ba22d2ff66250f</anchor>
      <arglist>(bool useHeightVector=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classVivaldiCoordsInfo.html</anchorfile>
      <anchor>aecb338d41028b225c75b3172b806330e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getError</name>
      <anchorfile>classVivaldiCoordsInfo.html</anchorfile>
      <anchor>aabee39267fce1b9b600f26c07e8fd3c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setError</name>
      <anchorfile>classVivaldiCoordsInfo.html</anchorfile>
      <anchor>ab9c363cd680ebcf859963cf3f838e44b</anchor>
      <arglist>(double err)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getHeightVector</name>
      <anchorfile>classVivaldiCoordsInfo.html</anchorfile>
      <anchor>aa8917115e37754c424fc5c2a2ffe061d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeightVector</name>
      <anchorfile>classVivaldiCoordsInfo.html</anchorfile>
      <anchor>a6dc90bcf968e35dbd27373ae206490f0</anchor>
      <arglist>(double height)</arglist>
    </member>
    <member kind="function">
      <type>Prox</type>
      <name>getDistance</name>
      <anchorfile>classVivaldiCoordsInfo.html</anchorfile>
      <anchor>a16ab2ea8e77c8ba8f40c5527c2a10fdb</anchor>
      <arglist>(const AbstractNcsNodeInfo &amp;node) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>classVivaldiCoordsInfo.html</anchorfile>
      <anchor>a64d46d0bcefedb655a8db1e01c804696</anchor>
      <arglist>(const AbstractNcsNodeInfo &amp;info)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Coords</name>
      <anchorfile>classVivaldiCoordsInfo.html</anchorfile>
      <anchor>a522a563ef8bf9a66389d9b34eaa9764b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>coordErr</name>
      <anchorfile>classVivaldiCoordsInfo.html</anchorfile>
      <anchor>a1d4ceb62b0cbd1b63c0e6598d014222a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>heightVector</name>
      <anchorfile>classVivaldiCoordsInfo.html</anchorfile>
      <anchor>ac9177cf9b99542545b3e39f391420f9e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VTopologyNode</name>
    <filename>classVTopologyNode.html</filename>
    <member kind="function">
      <type></type>
      <name>VTopologyNode</name>
      <anchorfile>classVTopologyNode.html</anchorfile>
      <anchor>a69efd8d8f7d02e68ea51298cb3e758cd</anchor>
      <arglist>(int moduleID)</arglist>
    </member>
    <member kind="function">
      <type>Vast *</type>
      <name>getModule</name>
      <anchorfile>classVTopologyNode.html</anchorfile>
      <anchor>a8553c6879661b8c07e7d10ac85e1ceca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>visited</name>
      <anchorfile>classVTopologyNode.html</anchorfile>
      <anchor>a72882f2fe97aaa2c7edc7f9ae2d85708</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>moduleID</name>
      <anchorfile>classVTopologyNode.html</anchorfile>
      <anchor>a25cbe208ad251611db050033273ef0fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vtr</name>
    <filename>classVtr.html</filename>
    <member kind="function">
      <type></type>
      <name>Vtr</name>
      <anchorfile>classVtr.html</anchorfile>
      <anchor>aee76402e5a2d6f2a59a0234aa95f5691</anchor>
      <arglist>(int, double *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vtr</name>
      <anchorfile>classVtr.html</anchorfile>
      <anchor>ad48c5154131d1e15d7c1d0cb64fce582</anchor>
      <arglist>(int, double=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vtr</name>
      <anchorfile>classVtr.html</anchorfile>
      <anchor>aeef6fc7d65aa25c6d9823f0d9fdfaae3</anchor>
      <arglist>(const Vtr &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Vtr</name>
      <anchorfile>classVtr.html</anchorfile>
      <anchor>aafd7ad664b373980d14b6e94ad997582</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classVtr.html</anchorfile>
      <anchor>a6f8373aefae15f34414a66a850adfab1</anchor>
      <arglist>(const Vtr &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Vtr &amp;</type>
      <name>operator+=</name>
      <anchorfile>classVtr.html</anchorfile>
      <anchor>a45247b0136c9778de6e6378f36f8d384</anchor>
      <arglist>(const Vtr &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Vtr &amp;</type>
      <name>operator-=</name>
      <anchorfile>classVtr.html</anchorfile>
      <anchor>a4f665c0261dc8ee2214c03ee6389004f</anchor>
      <arglist>(const Vtr &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classVtr.html</anchorfile>
      <anchor>aefd57fb64612b684c440851de8cbe50c</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxnorm</name>
      <anchorfile>classVtr.html</anchorfile>
      <anchor>a206705572981730b1f087ca3ca1fc52d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>twonorm</name>
      <anchorfile>classVtr.html</anchorfile>
      <anchor>af6146c6c4953204a513923696181b4ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classVtr.html</anchorfile>
      <anchor>a6f64880483f3896a219e5511db512a1e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>lenth</name>
      <anchorfile>classVtr.html</anchorfile>
      <anchor>a5418510e47919ed17206ba7792d1c700</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double *</type>
      <name>ets</name>
      <anchorfile>classVtr.html</anchorfile>
      <anchor>a1b1999adaf5dd6544db146eb49a11bb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend Vtr</type>
      <name>operator+</name>
      <anchorfile>classVtr.html</anchorfile>
      <anchor>a2f198ae49c4f87a7b441899a63472ab6</anchor>
      <arglist>(const Vtr &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend Vtr</type>
      <name>operator-</name>
      <anchorfile>classVtr.html</anchorfile>
      <anchor>aaa7f59f61d6e5c711212058072fb6cfa</anchor>
      <arglist>(const Vtr &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend Vtr</type>
      <name>operator+</name>
      <anchorfile>classVtr.html</anchorfile>
      <anchor>a3eccdd1b10087410e2e19e590d7e3dd1</anchor>
      <arglist>(const Vtr &amp;, const Vtr &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend Vtr</type>
      <name>operator-</name>
      <anchorfile>classVtr.html</anchorfile>
      <anchor>a4d34e461bbcddf6c931fc4c27adb80d3</anchor>
      <arglist>(const Vtr &amp;, const Vtr &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend double</type>
      <name>dot</name>
      <anchorfile>classVtr.html</anchorfile>
      <anchor>ae04fb064b89beebc51a88f997d1df912</anchor>
      <arglist>(const Vtr &amp;, const Vtr &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend Vtr</type>
      <name>operator*</name>
      <anchorfile>classVtr.html</anchorfile>
      <anchor>a755356a9890a697f29494bc09071b0b2</anchor>
      <arglist>(const double, const Vtr &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend Vtr</type>
      <name>operator*</name>
      <anchorfile>classVtr.html</anchorfile>
      <anchor>a5c030e78d1a7dff942b28a030b78186f</anchor>
      <arglist>(const Vtr &amp;, const double)</arglist>
    </member>
    <member kind="friend">
      <type>friend Vtr</type>
      <name>operator*</name>
      <anchorfile>classVtr.html</anchorfile>
      <anchor>a43321f52cd030b161a2071e023860c2d</anchor>
      <arglist>(const Vtr &amp;, const Vtr &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend Vtr</type>
      <name>operator*</name>
      <anchorfile>classVtr.html</anchorfile>
      <anchor>ac04e69745981b1ece348f5f96c5732f1</anchor>
      <arglist>(const Vtr &amp;, const Mtx &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend Vtr</type>
      <name>operator/</name>
      <anchorfile>classVtr.html</anchorfile>
      <anchor>aad02ac1c7a954a7f4c7b94adbff99246</anchor>
      <arglist>(const Vtr &amp;, const double)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classVtr.html</anchorfile>
      <anchor>a9215d40fb87c1b431580fbe225304723</anchor>
      <arglist>(std::ostream &amp;, const Vtr &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>XmlRpcInterface</name>
    <filename>classXmlRpcInterface.html</filename>
    <base>BaseApp</base>
    <base>XmlRpc::XmlRpcServer</base>
    <class kind="struct">XmlRpcInterface::XmlRpcConnectionState</class>
    <member kind="function">
      <type></type>
      <name>XmlRpcInterface</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>a9e9b8193427d4b1ec0a13b9f0cde714f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~XmlRpcInterface</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>a616f42e83dd83b89641d91a4bf7dcb79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeApp</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>a86c1b02bb908c1fe82d5936f760d5e6f</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>a2b18b571f3614d6c29e255d1193f2157</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleRpcTimeout</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>a8638b7059d216ab0716e558d11421666</anchor>
      <arglist>(BaseCallMessage *msg, const TransportAddress &amp;dest, cPolymorphic *context, int rpcId, const OverlayKey &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deliverTunneledMessage</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>a9d0752632bc0eddb33d2b95e13f47dc0</anchor>
      <arglist>(const BinaryValue &amp;payload)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>localLookup</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>ae7ada92483ec0ab24925f2944977e813</anchor>
      <arglist>(XmlRpc::XmlRpcValue &amp;params, XmlRpc::XmlRpcValue &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>a725cd3ceadeed7a4f2f334974cfa55c0</anchor>
      <arglist>(XmlRpc::XmlRpcValue &amp;params, XmlRpc::XmlRpcValue &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>p2pnsRegister</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>a3e8dc35258238becf3d2299d71e422de</anchor>
      <arglist>(XmlRpc::XmlRpcValue &amp;params, XmlRpc::XmlRpcValue &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>p2pnsResolve</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>a6939fdc168419f3bc02a7407992e871c</anchor>
      <arglist>(XmlRpc::XmlRpcValue &amp;params, XmlRpc::XmlRpcValue &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>a3fe030f19772c1987400c9cbf07e78dc</anchor>
      <arglist>(XmlRpc::XmlRpcValue &amp;params, XmlRpc::XmlRpcValue &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>a2667b3e4f14f2d394932a487b08fe04c</anchor>
      <arglist>(XmlRpc::XmlRpcValue &amp;params, XmlRpc::XmlRpcValue &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpDht</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>a0c6a65089bc3d2fdf328e8ef07e1a49b</anchor>
      <arglist>(XmlRpc::XmlRpcValue &amp;params, XmlRpc::XmlRpcValue &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>joinOverlay</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>af61626db1a14c1fd2114ca016617d30c</anchor>
      <arglist>(XmlRpc::XmlRpcValue &amp;params, XmlRpc::XmlRpcValue &amp;result)</arglist>
    </member>
    <member kind="enumeration">
      <name>ServerConnectionState</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>acc56e9801b3cabe12bc3404d4f1de794</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>READ_HEADER</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>acc56e9801b3cabe12bc3404d4f1de794aba5a488ac500cd38a0206cdcb51031ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>READ_REQUEST</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>acc56e9801b3cabe12bc3404d4f1de794a3384efeb1fb284eb4f9570f4b4d0f61f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXECUTE_REQUEST</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>acc56e9801b3cabe12bc3404d4f1de794a9d5f57a03d2fa7442a354f803ffe6452</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WRITE_RESPONSE</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>acc56e9801b3cabe12bc3404d4f1de794a739fb884f909df2fec67a10878ae5330</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readHeader</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>ad47c59f893ee30ae5e56cf87459944b2</anchor>
      <arglist>(char *buf, uint32_t length)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readRequest</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>a8016d47290ad29582e6bf178edd5f2a6</anchor>
      <arglist>(char *buf, uint32_t length)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>writeResponse</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>af88369ddb76ebd54117f46fc57969557</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isPrivileged</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>ad16d568eb4e7b9c122fd3feaebcc6c1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleAppTunPacket</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>aecf15cf50dcedd8b11297d9b7140e07a</anchor>
      <arglist>(char *buf, uint32_t len)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleRealworldPacket</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>a61f76e15a1160a765ee59558bf5ea52d</anchor>
      <arglist>(char *buf, uint32_t len)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleCommonAPIPacket</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>aef16e0a16ba2f3be91658343a4854f35</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleRpcResponse</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>a22d4c238f2faa751d838c81696f4f686</anchor>
      <arglist>(BaseResponseMessage *msg, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resetConnectionState</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>ab59f8cbf0bfc71c761d1c9167ff3803c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>closeConnection</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>af862373d24c9d482d4daf51b1522d800</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendInternalRpcWithTimeout</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>a32d6a205db854ee23024c9a39d58b92f</anchor>
      <arglist>(CompType destComp, BaseCallMessage *call)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleReadyMessage</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>a218bcf294028b8528e7ff4997a34a063</anchor>
      <arglist>(CompReadyMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>mtu</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>a9052c244a6ed0fc872303e2f0c255255</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>packetNotification</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>a54ce9f1884916792c9825e7fc6401dd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PacketBuffer</type>
      <name>packetBuffer</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>aaa866e106884f57d49bac742b2763a5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealtimeScheduler *</type>
      <name>scheduler</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>a6f1a7683989c76b32ded7e8ac52c8248</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, XmlRpcConnectionState &gt;</type>
      <name>state</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>a638d43b3005fb190757282b2049e8d13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SOCKET</type>
      <name>curAppFd</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>ac0133609b89c92a7342992a355cf5099</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>limitAccess</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>abcb493b05584e846dba169cd4ee1e24a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>XmlRpc::XmlRpcServerMethod *</type>
      <name>_localLookup</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>a1b1384f7e1f9fa85b0315eb08dd6ad6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>XmlRpc::XmlRpcServerMethod *</type>
      <name>_lookup</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>a96d4c9d9db66dd0704eddb8c9aac44ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>XmlRpc::XmlRpcServerMethod *</type>
      <name>_register</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>ac4764420da8901c51140d5a98c30c53a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>XmlRpc::XmlRpcServerMethod *</type>
      <name>_resolve</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>a1d3fba55b244646cf073076723158986</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>XmlRpc::XmlRpcServerMethod *</type>
      <name>_put</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>ac0e9f518dd46ceb0c46b73ce88a9fc15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>XmlRpc::XmlRpcServerMethod *</type>
      <name>_get</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>a4369a776b67f5f572a4b2728d6875083</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>XmlRpc::XmlRpcServerMethod *</type>
      <name>_dumpDht</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>aee1b509ea3fa85aba611809d462426e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>XmlRpc::XmlRpcServerMethod *</type>
      <name>_joinOverlay</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>a20b719a3e8b5a170bc1df60eb1572040</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>XmlRpc::XmlRpcServerMethod *</type>
      <name>_addContact</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>a5ac6c0c035dc7e1fbcc3312350c17044</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>XmlRpc::XmlRpcServerMethod *</type>
      <name>_removeContact</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>a219272f8b5b1c7c9583ac4b7837593bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>XmlRpc::XmlRpcServerMethod *</type>
      <name>_getContacts</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>a38167f6a79c654c9836265e260a30e80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>XmlRpc::XmlRpcServerMethod *</type>
      <name>_getUserId</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>aef6116ccacd2a6c479b78bb61219144d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>XmlRpc::XmlRpcServerMethod *</type>
      <name>_searchContact</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>af6a3c15bc4aea3436abdb8d7ca9b74fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>XmlRpc::XmlRpcServerMethod *</type>
      <name>_publish</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>a4007feeaf0b5a23fa54ef8b4ff790225</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>XmlRpc::XmlRpcServerMethod *</type>
      <name>_pull_notification</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>a0abb72a7eba21da7f16caaa0b1ec94e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>XmlRpc::XmlRpcServerMethod *</type>
      <name>_subscribe</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>a3c7b0896b06ec2a0c814fda5fcc19ba2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SOCKET</type>
      <name>appTunFd</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>a4a5abd718044c3db8443d7984f201623</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P2pns *</type>
      <name>p2pns</name>
      <anchorfile>classXmlRpcInterface.html</anchorfile>
      <anchor>a07c104f16ae63f7ec1abbddb5c8f3a05</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>XmlRpcInterface::XmlRpcConnectionState</name>
    <filename>structXmlRpcInterface_1_1XmlRpcConnectionState.html</filename>
    <member kind="variable">
      <type>ServerConnectionState</type>
      <name>_connectionState</name>
      <anchorfile>structXmlRpcInterface_1_1XmlRpcConnectionState.html</anchorfile>
      <anchor>ab831bbf6704089aee020a40b9f850d94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>_header</name>
      <anchorfile>structXmlRpcInterface_1_1XmlRpcConnectionState.html</anchorfile>
      <anchor>a92af12721cc8e0c2576f1549dae15a9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_contentLength</name>
      <anchorfile>structXmlRpcInterface_1_1XmlRpcConnectionState.html</anchorfile>
      <anchor>a4cf49567fa02b821c3a34ba5490b0836</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>_request</name>
      <anchorfile>structXmlRpcInterface_1_1XmlRpcConnectionState.html</anchorfile>
      <anchor>a352b01fe626437fe5d1ed9f5dac00c8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>_response</name>
      <anchorfile>structXmlRpcInterface_1_1XmlRpcConnectionState.html</anchorfile>
      <anchor>ade85e5632ba15c271da3bfac48b8cf15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_bytesWritten</name>
      <anchorfile>structXmlRpcInterface_1_1XmlRpcConnectionState.html</anchorfile>
      <anchor>a0cd4881e2dbf618d641bb84eecdd2d3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>_keepAlive</name>
      <anchorfile>structXmlRpcInterface_1_1XmlRpcConnectionState.html</anchorfile>
      <anchor>a0b03bca94e6a269e84e2dea902f9e0aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SOCKET</type>
      <name>appFd</name>
      <anchorfile>structXmlRpcInterface_1_1XmlRpcConnectionState.html</anchorfile>
      <anchor>acf7108062e05822a52322a42fb2956a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>localhost</name>
      <anchorfile>structXmlRpcInterface_1_1XmlRpcConnectionState.html</anchorfile>
      <anchor>a1ba8c5d7caa193f9c63ddda96c99dfa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>pendingRpc</name>
      <anchorfile>structXmlRpcInterface_1_1XmlRpcConnectionState.html</anchorfile>
      <anchor>ac5c167e2be64ad42ba4ea9a76fa4fe42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ZeroconfConnector</name>
    <filename>classZeroconfConnector.html</filename>
    <member kind="function">
      <type></type>
      <name>ZeroconfConnector</name>
      <anchorfile>classZeroconfConnector.html</anchorfile>
      <anchor>a06948bd4e5290b5c58795b364b20ac79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ZeroconfConnector</name>
      <anchorfile>classZeroconfConnector.html</anchorfile>
      <anchor>a98f40b6b21f9372c49b4cad21961e7ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>announceService</name>
      <anchorfile>classZeroconfConnector.html</anchorfile>
      <anchor>a3e1451bf34db9d8c9fdbe5116cf3458d</anchor>
      <arglist>(const NodeHandle &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>revokeService</name>
      <anchorfile>classZeroconfConnector.html</anchorfile>
      <anchor>a23523f8783bace9e884d9a039f2beaea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>classZeroconfConnector.html</anchorfile>
      <anchor>a83b0b55e7b414b6f98d29f8c301a1a33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>__gnu_cxx</name>
    <filename>namespace____gnu__cxx.html</filename>
    <class kind="struct">__gnu_cxx::hash&lt; IPvXAddress &gt;</class>
    <class kind="struct">__gnu_cxx::hash&lt; TransportAddress &gt;</class>
  </compound>
  <compound kind="struct">
    <name>__gnu_cxx::hash&lt; IPvXAddress &gt;</name>
    <filename>struct____gnu__cxx_1_1hash_3_01IPvXAddress_01_4.html</filename>
    <member kind="function">
      <type>std::size_t</type>
      <name>operator()</name>
      <anchorfile>struct____gnu__cxx_1_1hash_3_01IPvXAddress_01_4.html</anchorfile>
      <anchor>a23de61f37cd6837ffe6fe6a1586075ff</anchor>
      <arglist>(const IPvXAddress &amp;addr) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>__gnu_cxx::hash&lt; TransportAddress &gt;</name>
    <filename>struct____gnu__cxx_1_1hash_3_01TransportAddress_01_4.html</filename>
    <member kind="function">
      <type>std::size_t</type>
      <name>operator()</name>
      <anchorfile>struct____gnu__cxx_1_1hash_3_01TransportAddress_01_4.html</anchorfile>
      <anchor>ace73477dce009f2c3ddc41ffcad4e290</anchor>
      <arglist>(const TransportAddress &amp;addr) const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>oversim</name>
    <filename>namespaceoversim.html</filename>
    <class kind="class">oversim::Chord</class>
    <class kind="class">oversim::ChordFingerTable</class>
    <class kind="struct">oversim::SuccessorListEntry</class>
    <class kind="class">oversim::ChordSuccessorList</class>
    <class kind="class">oversim::Koorde</class>
    <class kind="class">oversim::Nice</class>
    <class kind="class">oversim::NicePeerInfo</class>
    <member kind="typedef">
      <type>std::multimap&lt; simtime_t, NodeHandle &gt;</type>
      <name>Successors</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>accb84485edd59dfec332aba3eea6311e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; NodeHandle, Successors &gt;</type>
      <name>FingerEntry</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>ac74e60dd6245280c9943f0d8a5ec0f25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; unsigned int, double &gt;</type>
      <name>HeartbeatEvaluator</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>ac15ba8aa917f763e836dfdd2689c89bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>aac274bdf33ee20fba3e03edadb79cb5b</anchor>
      <arglist>(Chord)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>a4ce40456e6cd781bfc5a1ac4b2629e24</anchor>
      <arglist>(ChordFingerTable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>a62504e2a4fbc558f8dcb5c85ff2c06e0</anchor>
      <arglist>(ChordSuccessorList)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>aadea7e56aca0c555180e0673e23c5e60</anchor>
      <arglist>(std::ostream &amp;os, const SuccessorListEntry &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>ac7150ad9342a466f088056505578044a</anchor>
      <arglist>(Koorde)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next_combination</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>a9fccec5847240be8424dcc8703a6d49b</anchor>
      <arglist>(BidIt n_begin, BidIt n_end, BidIt r_begin, BidIt r_end)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next_combination</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>ae61d0163684ba38f35b349be0674df56</anchor>
      <arglist>(BidIt n_begin, BidIt n_end, BidIt r_begin, BidIt r_end, Prediate Equal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>prev_combination</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>ae0d824f07e414fe86aa7a17ec9a4ec2f</anchor>
      <arglist>(BidIt n_begin, BidIt n_end, BidIt r_begin, BidIt r_end)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>prev_combination</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>a3c2f8f57e1c902a69dbd57e6b677862e</anchor>
      <arglist>(BidIt n_begin, BidIt n_end, BidIt r_begin, BidIt r_end, Prediate Equal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recursive_combination</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>a8a3b17923f0b8c3c3d7fdac90cb1464b</anchor>
      <arglist>(RanIt nbegin, RanIt nend, int n_column, RanIt rbegin, RanIt rend, int r_column, int loop, Func func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>ac02931151882dbf0943df783a045e4cc</anchor>
      <arglist>(Nice)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>adf906f99b19d28fb06efb9e3e8ba73b9</anchor>
      <arglist>(std::ostream &amp;os, NicePeerInfo &amp;pi)</arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>clustercolors</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>a068481bf2793ad703ca213dcca1e4a6f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>clusterarrows</name>
      <anchorfile>namespaceoversim.html</anchorfile>
      <anchor>aa3b63c2cc07d2571efe93e9004ca0172</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>oversim::Chord</name>
    <filename>classoversim_1_1Chord.html</filename>
    <base>BaseOverlay</base>
    <base>ProxListener</base>
    <member kind="function">
      <type></type>
      <name>Chord</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a4c0c952b08d5cd87500f807dad9be273</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Chord</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>af75b6b2e80651053daadb6d0ce7b075f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeOverlay</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a9af34cb9f3b5f0588a6b6214274339db</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a0eb314d0fed6ee1d57ab2fa0f1f15d36</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUDPMessage</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a3e4011d819724809a665e987b0ba6726</anchor>
      <arglist>(BaseOverlayMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordOverlaySentStats</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a1b0ebef0b3440c6a7e5c30bb41f3979e</anchor>
      <arglist>(BaseOverlayMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finishOverlay</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a17c0e05ef938b225dacecc6c9f03b1d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OverlayKey</type>
      <name>distance</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>afa1f27846808b609de259489b1c6a09b</anchor>
      <arglist>(const OverlayKey &amp;x, const OverlayKey &amp;y, bool useAlternative=false) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateTooltip</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a5baaf500b5320e071fbe9b8d3fab4642</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>proxCallback</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a3515427364803f1cdc2e2e7380a674d4</anchor>
      <arglist>(const TransportAddress &amp;node, int rpcId, cPolymorphic *contextPointer, Prox prox)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>changeState</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>acd8535c47e747c57ef5e02454f7ae0b7</anchor>
      <arglist>(int toState)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleJoinTimerExpired</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>af26b033267678a595e34515471685715</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleStabilizeTimerExpired</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>af559fcd7d9d7d0ddc4eb745cb7830af6</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleFixFingersTimerExpired</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a01313823b0cb2d891d5b87f9759e7e3c</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleNewSuccessorHint</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>ad922bad854664a7e86914e2612e725e4</anchor>
      <arglist>(ChordMessage *chordMsg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual NodeVector *</type>
      <name>closestPreceedingNode</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a0ac0c7746e46a3d4c38f66389786a387</anchor>
      <arglist>(const OverlayKey &amp;key)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>findFriendModules</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>acf1848528103f2bde93047c51d3fc411</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeFriendModules</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a96f444bfd815179ef9ab625d776a8045</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>handleRpcCall</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>aa5c60718325e0857581b1fa9773a8bd9</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeVector *</type>
      <name>findNode</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a4f5cc75c40ceedbfc4f41b215358bdea</anchor>
      <arglist>(const OverlayKey &amp;key, int numRedundantNodes, int numSiblings, BaseOverlayMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>joinOverlay</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a14e93372b444c6b6e7cfe8fdb3eed52d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>joinForeignPartition</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>aecef4ab06dbfe72a33006dac9966a408</anchor>
      <arglist>(const NodeHandle &amp;node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSiblingFor</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a5a1c7a5739b0dd0fcea99dac422eb82c</anchor>
      <arglist>(const NodeHandle &amp;node, const OverlayKey &amp;key, int numSiblings, bool *err)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getMaxNumSiblings</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>af893e5128428ac817fb084339a08a9be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getMaxNumRedundantNodes</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a54f62061b8333f151032f710abcfb831</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>rpcFixfingers</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a23c254f5482ff8ccd4e401e4f6fe7c12</anchor>
      <arglist>(FixfingersCall *call)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>rpcJoin</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>ab7dbe418205a8c06fd744dda61245d3e</anchor>
      <arglist>(JoinCall *call)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>rpcNotify</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a1b3ba91dae8d24cc1d884cc165a6f1cd</anchor>
      <arglist>(NotifyCall *call)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>rpcStabilize</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>ac4b7c9e4bdfc8565a1077adb3cf71ec6</anchor>
      <arglist>(StabilizeCall *call)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRpcResponse</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a97ae31f4eb09194c59d69ad2250a58ae</anchor>
      <arglist>(BaseResponseMessage *msg, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRpcTimeout</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a657003adc2e2c99b2fa098614abd0bf4</anchor>
      <arglist>(BaseCallMessage *msg, const TransportAddress &amp;dest, cPolymorphic *context, int rpcId, const OverlayKey &amp;destKey)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>pingResponse</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>aed457bb4c6d08a24f916fb7bbbc91952</anchor>
      <arglist>(PingResponse *pingResponse, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>pingTimeout</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a17b3783648663e0962f40b42e294bd55</anchor>
      <arglist>(PingCall *pingCall, const TransportAddress &amp;dest, cPolymorphic *context, int rpcId)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRpcJoinResponse</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a13157fb06c6dd4a3fba20896afcf6b2e</anchor>
      <arglist>(JoinResponse *joinResponse)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRpcNotifyResponse</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>af7090c67689c40d07ba2cedf366c558e</anchor>
      <arglist>(NotifyResponse *notifyResponse)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRpcStabilizeResponse</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a5302b177c5861c6d480021528e83aac4</anchor>
      <arglist>(StabilizeResponse *stabilizeResponse)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRpcFixfingersResponse</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>afcc6f12007c439f1e4651a603f9d755a</anchor>
      <arglist>(FixfingersResponse *fixfingersResponse, double rtt=-1)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>handleFailedNode</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a306a76d59ba7c2b18b7a88975fe62886</anchor>
      <arglist>(const TransportAddress &amp;failed)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>joinRetry</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a8a778766d2bc6b17fba2847270d4ce18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>stabilizeRetry</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a853f8061992684bf7e5a5a0464f782b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>joinDelay</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a6285e56a6838fd95d05a835600946936</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>stabilizeDelay</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>ad570ac18cef6eb3dac8aed4ad538c4e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>fixfingersDelay</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a9a6ebf06808b5b7536de43e346a16279</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>checkPredecessorDelay</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a28e9b2caf598306f55278a53edef5b62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>successorListSize</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>ab2a71a07f6b4a2e369c8bc82790e3bfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>aggressiveJoinMode</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>ae7677c8bf3a516da1ecb6c652b22b5fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>extendedFingerTable</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a687e448c18edfb4987d7c302e530d342</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numFingerCandidates</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>adefdada2a5450e24302d1c995f29276b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>proximityRouting</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a4cfb9af923304d654d3e9592f923318f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>memorizeFailedSuccessor</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a27d966e62ea860e86bc752c21f21f7b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>newChordFingerTable</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a7699354bd2da1fc9732de6247ffefea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mergeOptimizationL1</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a9abc4067fe898381b06a58209a61e6e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mergeOptimizationL2</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a4e86e378e04ff601ac0ad7008dcde0e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mergeOptimizationL3</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>ac7a79e475989eda66fb00aaf9bc50764</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mergeOptimizationL4</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a1dc65676d41b5ad916d59382d51c34ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>join_timer</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>afbcfe6c86c560ee376cf17cec0d6173a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>stabilize_timer</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a5cf2f388d0d2eb77effd0c15322fc434</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>fixfingers_timer</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>afef54e9c50b0dffb655e358d6c48f306</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>checkPredecessor_timer</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>ab2b513bb5d1bfea858e4fcac0f9403dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>joinCount</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>ae7db1cb91036e8ce6edcf866e98792ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>stabilizeCount</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>ad001edb00012a0f92fa8c01bd91599da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>fixfingersCount</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a8a8152ee273433c093cc87512307b0c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>notifyCount</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a8af2aaccef88f0cf4b57cdd5ff12f2a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>newsuccessorhintCount</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a4e546b952bde3f68e4d50a0b518a79c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>joinBytesSent</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a07215d02c2223aa1011a867f41b57d12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>stabilizeBytesSent</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a5c3c951a6ca0d2670aa6026965fb4737</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>notifyBytesSent</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>ae797f391eeae6c3bf8b41c16464988e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>fixfingersBytesSent</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a67f2a4db48655b89480a86d970d43059</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>newsuccessorhintBytesSent</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>acd8d033d561e92e79f0a7e37bef2aa00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>keyLength</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>aa2aaddec0ee733fd0f0f987dbedbe24b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>missingPredecessorStabRequests</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>af748797793f9b0c3e0bece444a7b02e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>predecessorNode</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>ad460fba59c65a381de5d6cfeb8773639</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransportAddress</type>
      <name>bootstrapNode</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>a6850239a2f7b24e7cd8b7709ba579f7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ChordFingerTable *</type>
      <name>fingerTable</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>af849199dad1020b09678a02b0c62ff9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ChordSuccessorList *</type>
      <name>successorList</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>acb503165a451976bb7d500857d0d7f80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TransportAddress</type>
      <name>failedSuccessor</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>ab72e56143840e1c3252ee6e5e6a22a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ChordSuccessorList</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>aaf6a807771c72ff35f3843210c0a2d4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ChordFingerTable</name>
      <anchorfile>classoversim_1_1Chord.html</anchorfile>
      <anchor>ac09324ac1eae5cc764d1d81fa4dab4e4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>oversim::ChordFingerTable</name>
    <filename>classoversim_1_1ChordFingerTable.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classoversim_1_1ChordFingerTable.html</anchorfile>
      <anchor>a123149064f8d099a4b36dc7f52dc6f93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classoversim_1_1ChordFingerTable.html</anchorfile>
      <anchor>aa368ceb78fc9870666a8935d4ea61a72</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classoversim_1_1ChordFingerTable.html</anchorfile>
      <anchor>a9b96e337515b236d17e462f5d590933c</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeTable</name>
      <anchorfile>classoversim_1_1ChordFingerTable.html</anchorfile>
      <anchor>a39d2fd8b018038c822db6df5d9a43ad1</anchor>
      <arglist>(uint32_t size, const NodeHandle &amp;owner, Chord *overlay)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFinger</name>
      <anchorfile>classoversim_1_1ChordFingerTable.html</anchorfile>
      <anchor>ac9d577faa61cd0fff7e76654ffb7e13a</anchor>
      <arglist>(uint32_t pos, const NodeHandle &amp;node, Successors const *sucNodes=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFinger</name>
      <anchorfile>classoversim_1_1ChordFingerTable.html</anchorfile>
      <anchor>ad424cf57c9447db78e716d941b3350c1</anchor>
      <arglist>(uint32_t pos, const Successors &amp;nodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>updateFinger</name>
      <anchorfile>classoversim_1_1ChordFingerTable.html</anchorfile>
      <anchor>ac827b15b568873a92572c7fb53aebcc8</anchor>
      <arglist>(uint32_t pos, const NodeHandle &amp;node, simtime_t rtt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getFinger</name>
      <anchorfile>classoversim_1_1ChordFingerTable.html</anchorfile>
      <anchor>a5de319d818784d5640970d10c2b0a16d</anchor>
      <arglist>(uint32_t pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NodeVector *</type>
      <name>getFinger</name>
      <anchorfile>classoversim_1_1ChordFingerTable.html</anchorfile>
      <anchor>adff379dc103a89445306038fc660d4ea</anchor>
      <arglist>(uint32_t pos, const OverlayKey &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleFailedNode</name>
      <anchorfile>classoversim_1_1ChordFingerTable.html</anchorfile>
      <anchor>ab0611790677175b31c12b5f2fd9f927c</anchor>
      <arglist>(const TransportAddress &amp;failed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFinger</name>
      <anchorfile>classoversim_1_1ChordFingerTable.html</anchorfile>
      <anchor>aa7de729060fcdef746a990992fcf31c5</anchor>
      <arglist>(uint32_t pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>getSize</name>
      <anchorfile>classoversim_1_1ChordFingerTable.html</anchorfile>
      <anchor>a63c20fe5024cefd33b16ca5d9098ba73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>maxSize</name>
      <anchorfile>classoversim_1_1ChordFingerTable.html</anchorfile>
      <anchor>aa85d41e0c0921bc57773d24c4fb08cec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::deque&lt; FingerEntry &gt;</type>
      <name>fingerTable</name>
      <anchorfile>classoversim_1_1ChordFingerTable.html</anchorfile>
      <anchor>a07339f94c1de8660fa92482fe9d9f373</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Chord *</type>
      <name>overlay</name>
      <anchorfile>classoversim_1_1ChordFingerTable.html</anchorfile>
      <anchor>a062e8be42e9eb2dfaa2ecd18c40894b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>oversim::SuccessorListEntry</name>
    <filename>structoversim_1_1SuccessorListEntry.html</filename>
    <member kind="variable">
      <type>NodeHandle</type>
      <name>nodeHandle</name>
      <anchorfile>structoversim_1_1SuccessorListEntry.html</anchorfile>
      <anchor>a8c55a46562b623bb4942e332294226aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>newEntry</name>
      <anchorfile>structoversim_1_1SuccessorListEntry.html</anchorfile>
      <anchor>a577ac8f163190fcfceb047849aa688e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>oversim::ChordSuccessorList</name>
    <filename>classoversim_1_1ChordSuccessorList.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classoversim_1_1ChordSuccessorList.html</anchorfile>
      <anchor>a6ed9acdbe8927b72adfb8f6c6a0394b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classoversim_1_1ChordSuccessorList.html</anchorfile>
      <anchor>adbeaae5869a62c7190cfba1a46cc0051</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classoversim_1_1ChordSuccessorList.html</anchorfile>
      <anchor>a9e5761ce3ddee0784edf4139823f854c</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeList</name>
      <anchorfile>classoversim_1_1ChordSuccessorList.html</anchorfile>
      <anchor>a882c36c7a32386519521b9b523a1c5a5</anchor>
      <arglist>(uint32_t size, NodeHandle owner, Chord *overlay)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>getSize</name>
      <anchorfile>classoversim_1_1ChordSuccessorList.html</anchorfile>
      <anchor>aa4c33c634da0ce72bc376528602f2407</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEmpty</name>
      <anchorfile>classoversim_1_1ChordSuccessorList.html</anchorfile>
      <anchor>ac8d1a65c1a14401cc716754c466b276c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>getSuccessor</name>
      <anchorfile>classoversim_1_1ChordSuccessorList.html</anchorfile>
      <anchor>a941ea3a7568fba729c4990b92c8b9d97</anchor>
      <arglist>(uint32_t pos=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addSuccessor</name>
      <anchorfile>classoversim_1_1ChordSuccessorList.html</anchorfile>
      <anchor>a986de50f02b1c775e8c1917d612a2e0b</anchor>
      <arglist>(NodeHandle successor, bool resize=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateList</name>
      <anchorfile>classoversim_1_1ChordSuccessorList.html</anchorfile>
      <anchor>a263954ceb4ac03cb61aba0beef22ffa5</anchor>
      <arglist>(NotifyResponse *notify)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleFailedNode</name>
      <anchorfile>classoversim_1_1ChordSuccessorList.html</anchorfile>
      <anchor>a8d1fd0adfaa40c236653c282e9c8ccee</anchor>
      <arglist>(const TransportAddress &amp;failed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>display</name>
      <anchorfile>classoversim_1_1ChordSuccessorList.html</anchorfile>
      <anchor>a7d70ece0da9bcd7f71669a195dba61a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeOldSuccessors</name>
      <anchorfile>classoversim_1_1ChordSuccessorList.html</anchorfile>
      <anchor>a53e8cd47bad8dbd47e62975b8708f2c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateDisplayString</name>
      <anchorfile>classoversim_1_1ChordSuccessorList.html</anchorfile>
      <anchor>a4f22289975d5c11045e986d8705b56a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateTooltip</name>
      <anchorfile>classoversim_1_1ChordSuccessorList.html</anchorfile>
      <anchor>ac184f15db48fc3a3e5f68a4307a637d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>thisNode</name>
      <anchorfile>classoversim_1_1ChordSuccessorList.html</anchorfile>
      <anchor>a4eab7b228d548d85371337be242a0f77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; OverlayKey, SuccessorListEntry &gt;</type>
      <name>successorMap</name>
      <anchorfile>classoversim_1_1ChordSuccessorList.html</anchorfile>
      <anchor>a1e6b51299d8c993ab1c08005dd58ed8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>successorListSize</name>
      <anchorfile>classoversim_1_1ChordSuccessorList.html</anchorfile>
      <anchor>a6da16382f45c1956e2e7aa9ad48db90d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Chord *</type>
      <name>overlay</name>
      <anchorfile>classoversim_1_1ChordSuccessorList.html</anchorfile>
      <anchor>affa95321294c0f98f47c652a41855e2b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>oversim::Koorde</name>
    <filename>classoversim_1_1Koorde.html</filename>
    <base>oversim::Chord</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Koorde</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>af6a856110e11c606c8eb25897c1850f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeOverlay</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>a3b281279cbf37344659bf3f9ff732d8f</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>ad57f65c954b86e89a31166764f616a87</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUDPMessage</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>a98fb65a513aa6274415a4638449201ad</anchor>
      <arglist>(BaseOverlayMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordOverlaySentStats</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>a01b7b96e8645ae25ef00bc04355b9f10</anchor>
      <arglist>(BaseOverlayMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finishOverlay</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>a11bccef58fe7f9eae778645d38c95451</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateTooltip</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>a31184338bec30e0d3197e8797c3bbe66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>changeState</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>af1b93f951fa47e64698a4e021186a29c</anchor>
      <arglist>(int state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDeBruijnTimerExpired</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>ac33a2bad62d8190887facb060c0d88df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>handleRpcCall</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>a604ffcffd116be18c44e7bc42e6bf7f8</anchor>
      <arglist>(BaseCallMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRpcResponse</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>acbd731af5663833f47af380ccb7b350b</anchor>
      <arglist>(BaseResponseMessage *msg, cPolymorphic *context, int rpcId, simtime_t rtt)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRpcTimeout</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>a303e6b506fc60bc72bfc615c315c9eb0</anchor>
      <arglist>(BaseCallMessage *msg, const TransportAddress &amp;dest, cPolymorphic *context, int rpcId, const OverlayKey &amp;destKey)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRpcJoinResponse</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>abe83f9b8b3242e6a328c9d164da69a92</anchor>
      <arglist>(JoinResponse *joinResponse)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRpcDeBruijnRequest</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>a699c8ee1fba09f14187eb5469e5612e1</anchor>
      <arglist>(DeBruijnCall *deBruinCall)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleRpcDeBruijnResponse</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>a973e05898945347be96135510a680214</anchor>
      <arglist>(DeBruijnResponse *deBruijnResponse)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleDeBruijnTimeout</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>a29cd9890f7a4b2185908b4e3200800ac</anchor>
      <arglist>(DeBruijnCall *deBruijnCall)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual NodeHandle</type>
      <name>findDeBruijnHop</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>acc6c1e70acc862fe8657b745d3eb25e2</anchor>
      <arglist>(const OverlayKey &amp;destKey, KoordeFindNodeExtMessage *findNodeExt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeVector *</type>
      <name>findNode</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>a0b50911a5d0a1bbb4dc277d6854e9a7c</anchor>
      <arglist>(const OverlayKey &amp;key, int numRedundantNodes, int numSiblings, BaseOverlayMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual OverlayKey</type>
      <name>findStartKey</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>a5a6d2b6004307afc0027faddedef986f</anchor>
      <arglist>(const OverlayKey &amp;startKey, const OverlayKey &amp;endKey, const OverlayKey &amp;destKey, int &amp;step)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>walkDeBruijnList</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>a491c06fd0ac8609af118931126cdde13</anchor>
      <arglist>(const OverlayKey &amp;key)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const NodeHandle &amp;</type>
      <name>walkSuccessorList</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>a30fb9378aa319544dcd20190d65cef8b</anchor>
      <arglist>(const OverlayKey &amp;key)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>handleFailedNode</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>ac783aeb95d5d49ee606da244f2595779</anchor>
      <arglist>(const TransportAddress &amp;failed)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>rpcJoin</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>acb2ec023b312208cc9e25d94de48e10a</anchor>
      <arglist>(JoinCall *call)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>findFriendModules</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>af93efbf0629a9d7769fb553503e05005</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeFriendModules</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>af5478856d0a17eaff0c3aa7c625ee2bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>deBruijnDelay</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>ab69793269561a3daef5e0699214c92f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>deBruijnNumber</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>ad8850fadd7c3d4b86e8b42e2547c992f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>deBruijnListSize</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>ae079e3bd8782fe05bdc748a07283a1ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>shiftingBits</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>ad3f6771f97eac9ffb1d5951663d720db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useOtherLookup</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>aa6358d0ff4ee45fb4bb4af918ac46b56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useSucList</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>a415b6b2ba86e8aa00737ebc37407e4c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>breakLookup</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>afbe4d38039f56c6f93cbb9709b11ffeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>setupDeBruijnBeforeJoin</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>a3d349ecb9d582ad6baf81aef464e1e4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>setupDeBruijnAtJoin</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>ae8e953d1b3e48f2094b72a879b39a460</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>deBruijnCount</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>aed7e4c0a3809e24574a8665cdfb1272a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>deBruijnBytesSent</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>a41b1f9ebf763bad10cfb4ff361585c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle *</type>
      <name>deBruijnNodes</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>a2369f4b8f09179f6e070e4a0863e6cc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeHandle</type>
      <name>deBruijnNode</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>a0400e8af965d376f74d83322d78d3fba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>deBruijn_timer</name>
      <anchorfile>classoversim_1_1Koorde.html</anchorfile>
      <anchor>aaf963dd99d12ac42742624c1f7eda978</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>oversim::Nice</name>
    <filename>classoversim_1_1Nice.html</filename>
    <base>BaseOverlay</base>
    <member kind="typedef">
      <type>std::set&lt; TransportAddress &gt;</type>
      <name>TaSet</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a60d75f363c7edb6f1fd349cac322d99a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; TransportAddress &gt;::iterator</type>
      <name>TaSetIt</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a2f60a812cd1652cd6624511076dee718</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Nice</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a7ffce18253e937f405a232fd8555b60e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Nice</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a9788a3d4f0f81f204edaaa16a492cf50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeOverlay</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a63977effde493b185fb9230ec5c2a608</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleTimerEvent</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>aebd1289938fa0c32bceda56deafaf302</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUDPMessage</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>aa7b0abef7e007a2a032614cd1e5be597</anchor>
      <arglist>(BaseOverlayMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAppMessage</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>af750b796fbab34f8fc9c48cca7a26ddb</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finishOverlay</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a93acdc685e2e7ad1ada75063db007463</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>changeState</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>ad1d32ea267badf0b9a482d7c415aa03c</anchor>
      <arglist>(int toState)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>joinOverlay</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a642dd901f2f5b0561cde5a1c3e932d8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleNodeLeaveNotification</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a9f2264e7a35474365104f15854108700</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateVisualization</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a71a14940853660afb14b6c8f6b5d448c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getHighestLeaderLayer</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a51eac39bb02905af0ea3a792bc23248a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getHighestLayer</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>ac29c7ecdf6590c8f7fd4ea9b546f72f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>BasicJoinLayer</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>ad3b7430e484451777e58ea163e4fc049</anchor>
      <arglist>(short layer)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ClusterSplit</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>aa0181f581e1a294a1a115ce68363a517</anchor>
      <arglist>(int layer)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>Query</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a6acafcf8008939d12f8db7e002a2ebb5</anchor>
      <arglist>(const TransportAddress &amp;node, short layer)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleNiceClusterMergeRequest</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a133d3f2486a3d5a7c294d3e2d5fa8369</anchor>
      <arglist>(NiceClusterMerge *mergeMsg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleNiceForceMerge</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a8a781cde350bdaed6e8db0d0f36d82c0</anchor>
      <arglist>(NiceMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleNiceHeartbeat</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a9e789530fee17ed030b474ab2a7b1b18</anchor>
      <arglist>(NiceHeartbeat *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleNiceLeaderHeartbeat</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a2946a8a0d8f597e09e5d37659d1e30a1</anchor>
      <arglist>(NiceLeaderHeartbeat *lhbMsg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleNiceLeaderTransfer</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a0d13c3965aafab68b912a6dc75c4e9a0</anchor>
      <arglist>(NiceLeaderHeartbeat *transferMsg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleNiceJoinCluster</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a0757be556541e2d8efd235be889f2ab6</anchor>
      <arglist>(NiceMessage *joinMsg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleNiceJoineval</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a32b8406978ad9ab46a7eba786ccf83a2</anchor>
      <arglist>(NiceMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleNiceJoinevalResponse</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a90140602613205803d08c25820b94063</anchor>
      <arglist>(NiceMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleNiceLeaderHeartbeatOrTransfer</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a34fcedb51cca4b510f3e5a9eebf28096</anchor>
      <arglist>(NiceMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleNiceMulticast</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a5ebd8516425fdcc5847e26ce3b08314f</anchor>
      <arglist>(NiceMulticastMessage *multicastMsg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleNicePeerTemporary</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>ab6096a998d14db350a8c12780ca62e61</anchor>
      <arglist>(NiceMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleNicePeerTemporaryRelease</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a761b15b9d4124e34084250c79339da27</anchor>
      <arglist>(NiceMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleNicePingProbe</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a45f3d0f25ccf42b10be3717b1e59846b</anchor>
      <arglist>(NiceMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleNicePingProbeResponse</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>aa818a9dfa6027388de5281eae926c7c4</anchor>
      <arglist>(NiceMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleNicePollRp</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a10494e710344144e515c7e22b83e786c</anchor>
      <arglist>(NiceMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleNicePollRpResponse</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a655a94f5f3da35838278419173dda60c</anchor>
      <arglist>(NiceMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleNiceQuery</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>afeb7081be1f7f76b2108aad45c49abfe</anchor>
      <arglist>(NiceMessage *queryMsg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleNiceQueryResponse</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>ab36bfc01b3cd042da92e1b27782ce7bd</anchor>
      <arglist>(NiceMemberMessage *queryRspMsg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>handleNiceRemove</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a66a02ca915d3e7182580217bde40ccb5</anchor>
      <arglist>(NiceMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>JoinCluster</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>af4c42da9d6ab2d8e83a4056bf83dd8ab</anchor>
      <arglist>(const TransportAddress &amp;leader, short layer)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>sendHeartbeats</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a1ffd3a3b39866e51502fee0bf37480f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cleanPeers</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>ae1bc183e5411855a2026e884d2d2cee1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>splitNeeded</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>aed05e40d0f2c58971e6eff74009cbf82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>mergeNeeded</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a84af41f236c10b5398aa9d63aeab63b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>checkLeaderHeartbeatsForCollisions</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a66d414d9448c241ede5d2702cbec6578</anchor>
      <arglist>(NiceLeaderHeartbeat *hbMsg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>maintenance</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a0a808dd35aedab035a7bb8ba1a5d6f9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>simtime_t</type>
      <name>getMaxDistance</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>ad87e45d16986960bf34ce49f236e1d52</anchor>
      <arglist>(TransportAddress member, const std::set&lt; TransportAddress &gt; &amp;neighbors)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>simtime_t</type>
      <name>getMaxDistance</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>add21d13bfce3f97aa115be55dfe781c2</anchor>
      <arglist>(TransportAddress member, ConstIter neighborsBegin, ConstIter neighborsEnd)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>simtime_t</type>
      <name>getMeanDistance</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>af6e0621edd3122f917e428d133a0a732</anchor>
      <arglist>(std::set&lt; TransportAddress &gt; neighbors)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>LeaderTransfer</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a4b8cc16894616bbe008940eb98775c0d</anchor>
      <arglist>(int layer, TransportAddress leader, TaSet cluster, TransportAddress sc_leader, TaSet superCluster)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>LeaderTransfer</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a0202754f95c50b2891cfd0f6234c8f81</anchor>
      <arglist>(int layer, TransportAddress leader)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>Remove</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a546c8b69ae759d24e9b809deb1d75398</anchor>
      <arglist>(int layer)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>sendHeartbeatTo</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a677d8c691996974f3abb040578279669</anchor>
      <arglist>(const TransportAddress &amp;node, int layer)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>sendRemoveTo</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a70a802eb31e3c0047413fa08864986bf</anchor>
      <arglist>(const TransportAddress &amp;node, int layer)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ClusterMerge</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>ad4f8cc3855e672b84d2a097bd60c0925</anchor>
      <arglist>(int layer)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ClusterMergeRequest</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a46eb256216745f2ae5db49585d8c7025</anchor>
      <arglist>(const TransportAddress &amp;node, int layer)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>gracefulLeave</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>af48af4ac315203b552f1eecd1678689c</anchor>
      <arglist>(short bottomLayer)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::pair&lt; TransportAddress, simtime_t &gt;</type>
      <name>findCenter</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>ab103d070590546c820b57f2a087955ed</anchor>
      <arglist>(TaSet cluster, bool allowRandom=false)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::pair&lt; TransportAddress, simtime_t &gt;</type>
      <name>findCenter</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>ac67e86de4b5b08c2388242783b0348fc</anchor>
      <arglist>(std::vector&lt; TransportAddress &gt; cluster, bool allowRandom=false)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::pair&lt; TransportAddress, simtime_t &gt;</type>
      <name>findCenter</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a357ff0d2b5996b7ce8a2cb3f4637b8b6</anchor>
      <arglist>(const NiceCluster &amp;cluster, bool allowRandom=false)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::pair&lt; TransportAddress, simtime_t &gt;</type>
      <name>findCenter</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>acedb962da716062f124e85bcbced2cbd</anchor>
      <arglist>(ConstIter begin, ConstIter end, bool allowRandom=false)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>sendDataToOverlay</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a92c3a3c37c9c3101ac2e51ab609c4c64</anchor>
      <arglist>(NiceMulticastMessage *appMsg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>pollRP</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>ac1b9865b490cf352d83680020939c270</anchor>
      <arglist>(int layer)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>pimp</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a8603dc65c59516ee5dc237ce651659c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TransportAddress</type>
      <name>RendevouzPoint</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a28c155327e18edb17d6ab2a4c67cf0a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isRendevouzPoint</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>aaad03fa2518f9122314129e4afd433d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>heartbeatTimer</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a687c425a685e47b47d989b24a1fe6165</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>heartbeatInterval</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a58d3d6285e2a84acb277e220d1a35807</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>maintenanceTimer</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>ace2ed47b84cbee1c7cc71cbc44a4fea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>maintenanceInterval</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a6d14d42d813222d9ee8c5d395ba60365</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>queryTimer</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a4648efb65dd8c13990a571c275d3bd04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>queryInterval</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a6e3e4cdfa221e6f9980e3c51a5452570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>rpPollTimer</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a4a913c4be6eabc80fac48dffed005771</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>rpPollTimerInterval</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a417d95b2b0bdad377d0613f4dde77b66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>peerTimeoutHeartbeats</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>abffc50a7507069a0d97997f269c2d130</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>visualizationTimer</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>aa31f386f8403d2ba88f43a1a57fcba57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>first_HB</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a7e846c8b782d0bc44fdafc58897d4d5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TransportAddress</type>
      <name>first_leader</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a36ec304efa445340c9c1f72e950b076b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>second_HB</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>acde4679b6655c0fbf9bdc6c35bc974b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TransportAddress</type>
      <name>second_leader</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>ad6115b6ca9ae33de7308570d8aaceaf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::pair&lt; TransportAddress, simtime_t &gt; &gt;</type>
      <name>leaderHeartbeats</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a1cdcbcd2cf361d641fb76ee38d552599</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>clusterrefinement</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>aebff401d083e6f6b20fb9253181465ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>debug_heartbeats</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>ae8b24bedc06f07fe2c03ec7b135c63a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>debug_visualization</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a1a3aaae38bf78dc32e177868afbde6c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>debug_join</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>afa26359a3e0160724c4f36bbb02df6f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>debug_peertimeouts</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a6af70b0196fd0d482286c0ff5a46f5ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>debug_removes</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a12a2bd46343643e35473ab74900db70a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>debug_queries</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a65ded61488d36484e3529f3e23b6e713</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned short</type>
      <name>k</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a29f5e69b521aa1eb0047e64272b84562</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NiceCluster</type>
      <name>clusters</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a644c991f567da9990713bba00e3dacac</anchor>
      <arglist>[maxLayers]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>evalLayer</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a71935c17b8b4804bc6dd823d696dbf3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>joinLayer</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a46807673c62fb160eaf202a0eac29058</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TransportAddress</type>
      <name>polledRendevouzPoint</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>ac00b0f8d11b8f3f7c3e5c2eb78511cc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>query_start</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>aa604bd27a4b737fd179c2b09debebc84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TransportAddress</type>
      <name>tempResolver</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a974f1212dc063af0d943b5fa350cc57a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>query_compare</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a3460e84226f3260196e99da210b74082</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>short</type>
      <name>targetLayer</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a327e50ef2c393ea0b929f3f27154ce96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; TransportAddress, NicePeerInfo * &gt;</type>
      <name>peerInfos</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>abfd784a7eb10c0af88d835308cf66ff6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; TransportAddress, simtime_t &gt;</type>
      <name>tempPeers</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>ab4e95531a9f00a8c4ed022749d263238</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isTempPeered</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>abe5249e886cdb9e6d56efa40e6efe71e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>CLUSTERLEADERBOUND</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a3469d510d59a1cc3577e5d24a6628275</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>CLUSTERLEADERCOMPAREDIST</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>ad83625b73a292aa04380837e7d6c3944</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>SC_PROC_DISTANCE</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a4368d509b0c5ac9950cf8fa52fa5f176</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>SC_MIN_OFFSET</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a02292a0c465a7bbb80f66fbd7187cc9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numInconsistencies</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a50dd1e20f4c56dc45f9ffa1c52d2716f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numQueryTimeouts</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>ac151ea0f3d5ac1d60b32d92c08d89e44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numPeerTimeouts</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a82e217903a688c47656a56dc4a593ebc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numTempPeerTimeouts</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a97964c134da4da5b58b3c7dff32a0800</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numStructurePartitions</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>acd1effc337560f6677e63608b3e53af8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numOwnMessagesReceived</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>ab0a8837fcffd376b822166d048a401fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>totalSCMinCompare</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a063a91a0c9cbd3bcfeca7ce10944eb70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numJoins</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a765b5d96a57bf709b6a8ce28541d55a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numForward</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>aa0d6fe84d8444d39caee3e2c67323550</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>totalForwardBytes</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>ade427df4fbd3edb53e04467984384927</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numReceived</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>ab0165945cd4929e57f66e595ce76cc14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>totalReceivedBytes</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>ab70712e9a475d6ab12690cf36a31ffe1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numHeartbeat</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>aed41149eb142ad3c71d6a639b113a5f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>totalHeartbeatBytes</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>ad186e77457bdad45888594517319a02b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const short</type>
      <name>maxLayers</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a960f2035d499686a97fe7163542b8647</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>NicePeerInfo</name>
      <anchorfile>classoversim_1_1Nice.html</anchorfile>
      <anchor>a6b71884e13dc73c1a1c81351b031cb64</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>oversim::NicePeerInfo</name>
    <filename>classoversim_1_1NicePeerInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>NicePeerInfo</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>adfc3b7f50687fd3b82fed18715667f0a</anchor>
      <arglist>(Nice *_parent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NicePeerInfo</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>a0b659d66d9556fb49254a1fb538129d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_distance_estimation_start</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>af67a7e7ff0d1a87bb8e65a50e992cfae</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDES</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>a4ca06b24377cc3b9a455e7264cdffc04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_distance</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>a582f40941e6e0e51010bc032560218b2</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_distance</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>a950d4a052171bb6195c23295d496622c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startHeartbeatTimeout</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>af602403cf0b247e03c06d28b1f9dbe1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cMessage *</type>
      <name>getHbTimer</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>ad1e20490d0d12114456f01e702fcd286</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDistance</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>a7eb845fcc945918f7b288cdfbdc2085b</anchor>
      <arglist>(TransportAddress member, double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDistanceTo</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>ad394a80929933b5162cfdab41e247edf</anchor>
      <arglist>(TransportAddress member)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_last_sent_HB</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>aac73e9ec4b8829a1867e942391fddf9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_last_sent_HB</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>a95bfe2f0e33507a5e251b21a50f02b9f</anchor>
      <arglist>(unsigned int seqNo)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_last_recv_HB</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>a8ba522f4b027f61c336e922415ed78d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_last_recv_HB</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>abed8acfcf9b6c2083d687ea951f01c59</anchor>
      <arglist>(unsigned int seqNo)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_last_HB_arrival</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>aac9f098e70732d8b2cec89409ed2399f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_last_HB_arrival</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>a51b43471fde853d419ba38003c419055</anchor>
      <arglist>(double arrival)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_backHBPointer</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>af5fc174a954fb26d13b6742e6465348a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_backHBPointer</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>a403d8783a7db795499b5701d2114c603</anchor>
      <arglist>(bool _backHBPointer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_backHB</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>a30933ef212a0c20c7138a6d3175609da</anchor>
      <arglist>(bool backHBPointer, unsigned int seqNo, double time)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_backHB</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>aa7699d3c460009f83ca54cce3206fd5f</anchor>
      <arglist>(unsigned int seqNo)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_backHB_seqNo</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>a8abd53b9abb4f8e2690d94e74f11f1bd</anchor>
      <arglist>(bool index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touch</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>a177a048c2d2e7dfb49f009adc25e60a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getActivity</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>a83852c840f0021595e19bb93bba2fbc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubClusterMembers</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>a487a2e85037c247fcb66a816143db80c</anchor>
      <arglist>(unsigned int members)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSubClusterMembers</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>a18dfd924377e2a35c8cfa1f86542d999</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Nice *</type>
      <name>parent</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>af6f48e5883ba2087932ca26ecc4115b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>distance_estimation_start</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>a83fce7fe461686c3767d8f80dc1b7f92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>a2c65707c45f91f7be24f61329ce24f90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>hbTimer</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>a34c5b2eb30dbf470b8fd619cc4bd3a8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; TransportAddress, double &gt;</type>
      <name>distanceTable</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>a5aea71c050e1db87895af45ce6806b4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>activity</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>a2c1b6e2c0c8ed6c3106a42ece8c32338</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>subclustermembers</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>aa0b25c9c377f3d7f04d70409bba56443</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>HeartbeatEvaluator</type>
      <name>backHB</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>ad267485d835af57c1b2d5f24cbcd2284</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>backHBPointer</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>aeca3e24c95ffe186dd4c104848aa14fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>last_sent_HB</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>ab5f1ae50b4271cadc95197205832f174</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>last_recv_HB</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>a9ce6a6c91733728e5f512e54a8055aff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>last_HB_arrival</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>a87f89d93589899ea55b54c1e530de223</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classoversim_1_1NicePeerInfo.html</anchorfile>
      <anchor>a22940b30045cfc090e0a7d0fe7cd58ce</anchor>
      <arglist>(std::ostream &amp;os, NicePeerInfo &amp;pi)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>RUNetConf</name>
    <filename>namespaceRUNetConf.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>getCoreNodes</name>
      <anchorfile>namespaceRUNetConf.html</anchorfile>
      <anchor>ad6241551161840908b615ba2adea3d73</anchor>
      <arglist>(cModule *curMod, void *nullPointer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>getRouterLevelNodes</name>
      <anchorfile>namespaceRUNetConf.html</anchorfile>
      <anchor>a74e4a0730da15bd2adfbc7670aa60c8d</anchor>
      <arglist>(cModule *curMod, void *name)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>XmlRpc</name>
    <filename>namespaceXmlRpc.html</filename>
    <class kind="class">XmlRpc::XmlRpcErrorHandler</class>
    <class kind="class">XmlRpc::XmlRpcLogHandler</class>
    <class kind="class">XmlRpc::XmlRpcClient</class>
    <class kind="class">XmlRpc::XmlRpcDispatch</class>
    <class kind="class">XmlRpc::XmlRpcException</class>
    <class kind="class">XmlRpc::XmlRpcMutex</class>
    <class kind="class">XmlRpc::XmlRpcServer</class>
    <class kind="class">XmlRpc::XmlRpcServerConnection</class>
    <class kind="class">XmlRpc::XmlRpcServerMethod</class>
    <class kind="class">XmlRpc::XmlRpcSocket</class>
    <class kind="class">XmlRpc::XmlRpcSource</class>
    <class kind="class">XmlRpc::XmlRpcRunnable</class>
    <class kind="class">XmlRpc::XmlRpcThread</class>
    <class kind="class">XmlRpc::XmlRpcThreadedServer</class>
    <class kind="class">XmlRpc::XmlRpcUtil</class>
    <class kind="class">XmlRpc::XmlRpcValue</class>
    <member kind="function">
      <type>int</type>
      <name>getVerbosity</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>a0fa39c1bb4d9d258eb71ddd775d67a82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVerbosity</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>adbb0a79191037f0d3173d2dfa9cc820c</anchor>
      <arglist>(int level)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>tmEq</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>ad8f8ff6586074409afba65257b0fd8c4</anchor>
      <arglist>(struct tm const &amp;t1, struct tm const &amp;t2)</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>XMLRPC_VERSION</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>a6e869daf0be5c7c473298467413f960d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>VALUE_TAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>af1b01d1d5787d9ac80b9b21042253189</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>VALUE_ETAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>a63f350b2af42a65501a491897ceacc70</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>BOOLEAN_TAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>a0f6167a2bd28e58de90b43bac4a26bab</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>BOOLEAN_ETAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>a68cf1f3bef8845f42c852286421c1c7b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>DOUBLE_TAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>a3abdd40d69d2c07b3e0d7fcfe9595a04</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>DOUBLE_ETAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>ab264ddf4ec040711b3b5c406412397d4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>INT_TAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>a83e9ee700fe4257106b1339af3034309</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>I4_TAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>aa695362e146693bdd3fcec1bebd7c1e0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>I4_ETAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>a8a5acaae7dbcd1596879889df379408d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>STRING_TAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>a0efa0718086fcc7ffe8799160b8de32a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>DATETIME_TAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>a7db6c5d65646688a5267891eba8a6bee</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>DATETIME_ETAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>aa94610af16b91b0efb6d289c6390e3ec</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>BASE64_TAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>a12774d1d643bb80f6f8072510a35a225</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>BASE64_ETAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>aa85ff1cc9643f6ae5edbf4e5ec23cfc8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>ARRAY_TAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>aca9e3617e3e18aa3b90317ac5edf4863</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>DATA_TAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>a93e5d734fb19c8e8efe38a8471221c6f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>DATA_ETAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>ab1d351f57700f255f19c0ab6ef5b8e87</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>ARRAY_ETAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>a2adde1303b2d7c71e37cc1a092e2c1e9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>STRUCT_TAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>a3df03d8213dd5245740f600eb67875dc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>MEMBER_TAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>aae3ac07b339f1dd2aae1321f59ca05a4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>NAME_TAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>a2dc41b5182cff0a717cdbedd5207b1bd</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>NAME_ETAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>a28347db9c048f216596b1993203823f9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>MEMBER_ETAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>a13ab4e9cd24abd23e2541780cb3914ea</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>STRUCT_ETAG</name>
      <anchorfile>namespaceXmlRpc.html</anchorfile>
      <anchor>adbc2768217f424a19cbb02d3e1c937e9</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>XmlRpc::XmlRpcErrorHandler</name>
    <filename>classXmlRpc_1_1XmlRpcErrorHandler.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~XmlRpcErrorHandler</name>
      <anchorfile>classXmlRpc_1_1XmlRpcErrorHandler.html</anchorfile>
      <anchor>aac576b841b9a1af104f1a4f32e9ffd22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>error</name>
      <anchorfile>classXmlRpc_1_1XmlRpcErrorHandler.html</anchorfile>
      <anchor>a6a59a544da79813ec5300966bb2629de</anchor>
      <arglist>(const char *msg)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static XmlRpcErrorHandler *</type>
      <name>getErrorHandler</name>
      <anchorfile>classXmlRpc_1_1XmlRpcErrorHandler.html</anchorfile>
      <anchor>a71565e49da56314567f8e39ec03f8065</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setErrorHandler</name>
      <anchorfile>classXmlRpc_1_1XmlRpcErrorHandler.html</anchorfile>
      <anchor>a10285a6aa478f3454d82e3bf34abde41</anchor>
      <arglist>(XmlRpcErrorHandler *eh)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static XmlRpcErrorHandler *</type>
      <name>_errorHandler</name>
      <anchorfile>classXmlRpc_1_1XmlRpcErrorHandler.html</anchorfile>
      <anchor>af62eda051797f2c5c3f508b7fa2dd43f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>XmlRpc::XmlRpcLogHandler</name>
    <filename>classXmlRpc_1_1XmlRpcLogHandler.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~XmlRpcLogHandler</name>
      <anchorfile>classXmlRpc_1_1XmlRpcLogHandler.html</anchorfile>
      <anchor>a1159e1b2c21b481552a8ea9a06bac6f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>log</name>
      <anchorfile>classXmlRpc_1_1XmlRpcLogHandler.html</anchorfile>
      <anchor>a7e2466aacc3173acdbbb7c81ae8eb658</anchor>
      <arglist>(int level, const char *msg)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static XmlRpcLogHandler *</type>
      <name>getLogHandler</name>
      <anchorfile>classXmlRpc_1_1XmlRpcLogHandler.html</anchorfile>
      <anchor>ab103d4c7573efdb3dc8729a8a72d640b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setLogHandler</name>
      <anchorfile>classXmlRpc_1_1XmlRpcLogHandler.html</anchorfile>
      <anchor>acce8e15b0aa47bcbc9f80e61c7bfb183</anchor>
      <arglist>(XmlRpcLogHandler *lh)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getVerbosity</name>
      <anchorfile>classXmlRpc_1_1XmlRpcLogHandler.html</anchorfile>
      <anchor>a94c23c8da2ecca3d296fbaf37b671e56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setVerbosity</name>
      <anchorfile>classXmlRpc_1_1XmlRpcLogHandler.html</anchorfile>
      <anchor>ae41c9025e82d20d918acd679c66e2b88</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static XmlRpcLogHandler *</type>
      <name>_logHandler</name>
      <anchorfile>classXmlRpc_1_1XmlRpcLogHandler.html</anchorfile>
      <anchor>ae90c210152f1bce66b828fe30597b76d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static int</type>
      <name>_verbosity</name>
      <anchorfile>classXmlRpc_1_1XmlRpcLogHandler.html</anchorfile>
      <anchor>a5589f27c16dd76b1c49a00a881170a01</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>XmlRpc::XmlRpcClient</name>
    <filename>classXmlRpc_1_1XmlRpcClient.html</filename>
    <base>XmlRpc::XmlRpcSource</base>
    <member kind="function">
      <type></type>
      <name>XmlRpcClient</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a0cf7930046c31a0c3c0f212e116b100f</anchor>
      <arglist>(const char *host, int port, const char *uri=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlRpcClient</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a55476354c4c9939a042b10460d9093e2</anchor>
      <arglist>(const char *host, int port, const char *uri=0, bool ssl=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlRpcClient</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a2223bf42e03567cc62aac468a5ef2316</anchor>
      <arglist>(const char *host, int port, const char *login, const char *password, const char *uri=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlRpcClient</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>af45b04f8b358fcb05dd5b668fbd8fe11</anchor>
      <arglist>(const char *host, int port, const char *login, const char *password, const char *uri=0, bool ssl=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~XmlRpcClient</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>aae9962d6894ebe1afa190edda7ba75da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a21d98429c0d62edae63cf3bbd2516bd1</anchor>
      <arglist>(const char *method, XmlRpcValue const &amp;params, XmlRpcValue &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFault</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>aff30f853a66e3ca632da83f3ce65fff5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *const</type>
      <name>host</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a1d1df6e1c6c8361954796048ee10b096</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPort</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a7a393c0c0aff0a18ccad5502b3ede521</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *const</type>
      <name>uri</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a414d92f39871555b9a22ba9468c83fea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a3e58bbcca03337b5cb76512db3d77ae9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>handleEvent</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>ade4c6ffd6eb48aa7a2edb70df3b318c0</anchor>
      <arglist>(unsigned eventType)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>REQUEST_BEGIN</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a83a72bca22f485d2ce72d0582412d44b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>REQUEST_END_METHODNAME</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a43cda51c01bfc4b35a520ffe69f2a362</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>PARAMS_TAG</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>abccf509ae531e7607b50603eb5b14715</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>PARAMS_ETAG</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a09e52523c5f093d75265c22d88f9c4a3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>PARAM_TAG</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a84809c54442975e7f64c2fcc13d33bdc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>PARAM_ETAG</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a01db02d7319cf50f9d3fe589175ce2b6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>REQUEST_END</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a0cd4dabc7da2075ff7803a42dbd84e4a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>METHODRESPONSE_TAG</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>ab92a38945f291549836ec2f8fd9c09e5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>FAULT_TAG</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>abc3a92213ca13999a196601f1981576f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="enumeration">
      <name>ClientConnectionState</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a6fc7ee148fe9b73184e6d27ec065db28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_CONNECTION</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a6fc7ee148fe9b73184e6d27ec065db28aec469431fed0679174ad85271aa2e5f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTING</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a6fc7ee148fe9b73184e6d27ec065db28a5c142a818036c96889df94c9838e41f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WRITE_REQUEST</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a6fc7ee148fe9b73184e6d27ec065db28ab323ff85a6b8bc524684add21e247cd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>READ_HEADER</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a6fc7ee148fe9b73184e6d27ec065db28a48e4c90f6586fd4b1eee636a957a7608</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>READ_RESPONSE</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a6fc7ee148fe9b73184e6d27ec065db28a546fab6dc5981646af5d09314ffb3b0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IDLE</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a6fc7ee148fe9b73184e6d27ec065db28a8690ef6221c93ab66c823e5a4335482e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>doConnect</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a332f11036e64e64251779951f1f69c7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>setupConnection</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a9edd57b13678b157e9406a5ab3cefec3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>generateRequest</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>ac00ec3c80765eca294c8c1406e120b4c</anchor>
      <arglist>(const char *method, XmlRpcValue const &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::string</type>
      <name>generateHeader</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a3a3c88813708899e14ce53fbd026b16e</anchor>
      <arglist>(std::string const &amp;body)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>writeRequest</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>aa2d2e32c83c27a96b2b57b243a0f90fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>readHeader</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>ab160633fdfbe7a1fb907d5014cc7cf84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>readResponse</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>aaa1c7c40055f57d99337c18d241b5352</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>parseResponse</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a7166653867a10a0065d152b0ef4f96d2</anchor>
      <arglist>(XmlRpcValue &amp;result)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ClientConnectionState</type>
      <name>_connectionState</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a56111e147dd009b812903a80cf4c3d51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_host</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a8957fd8ee89dcc9a896b7b8b53504ef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_uri</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>ab5763f09e0bdacd764cb66adaeeb76c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_port</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a20b21b44a361cca6a0f86253b5a6b115</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_login</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a944557c7d1a4bdbf19b0330b03effafd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_password</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a379e79d8b200ab78cf3f55ae0263492d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_request</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a2e364b0dc031027103dabd127087ca54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_header</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a0d35cde5365ed2937da19029d14fa452</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_response</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>adad5276154d8a4726a5c34a46a49bbb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_sendAttempts</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a97dd016ca400c7fa50d7b3bbb3c83996</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_bytesWritten</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a22e6b4ebc074ea34c1bfcf55e5f9d065</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_executing</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>aa34d263af88f4a80674e4d529e269572</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_eof</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a4327d9c94f41c14e360640be340029c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_isFault</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>ac636bda163583ee14b05f9b9e380532d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_contentLength</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a8d269f076a24a24b7c950f100e690126</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>XmlRpcDispatch</type>
      <name>_disp</name>
      <anchorfile>classXmlRpc_1_1XmlRpcClient.html</anchorfile>
      <anchor>a26d04790853b5abd2c749b96b066e338</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>XmlRpc::XmlRpcDispatch</name>
    <filename>classXmlRpc_1_1XmlRpcDispatch.html</filename>
    <class kind="struct">XmlRpc::XmlRpcDispatch::MonitoredSource</class>
    <member kind="enumeration">
      <name>EventType</name>
      <anchorfile>classXmlRpc_1_1XmlRpcDispatch.html</anchorfile>
      <anchor>a4f75ac1cdd83a138699d2bbf10511d5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ReadableEvent</name>
      <anchorfile>classXmlRpc_1_1XmlRpcDispatch.html</anchorfile>
      <anchor>a4f75ac1cdd83a138699d2bbf10511d5da882cc1bb5d0f955eb07240c1cb01949f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WritableEvent</name>
      <anchorfile>classXmlRpc_1_1XmlRpcDispatch.html</anchorfile>
      <anchor>a4f75ac1cdd83a138699d2bbf10511d5daf3d2dd04861a1f219313c085be68b015</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Exception</name>
      <anchorfile>classXmlRpc_1_1XmlRpcDispatch.html</anchorfile>
      <anchor>a4f75ac1cdd83a138699d2bbf10511d5dab3a858667552697e11691e8e9f7c8728</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlRpcDispatch</name>
      <anchorfile>classXmlRpc_1_1XmlRpcDispatch.html</anchorfile>
      <anchor>a3dd5fecb140e808430972e23903bcacb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~XmlRpcDispatch</name>
      <anchorfile>classXmlRpc_1_1XmlRpcDispatch.html</anchorfile>
      <anchor>abfb50c103ac3658f8c5cc3b00336845d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSource</name>
      <anchorfile>classXmlRpc_1_1XmlRpcDispatch.html</anchorfile>
      <anchor>ad8b2904f9fd4ef2e22b68245db4a153f</anchor>
      <arglist>(XmlRpcSource *source, unsigned eventMask)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSource</name>
      <anchorfile>classXmlRpc_1_1XmlRpcDispatch.html</anchorfile>
      <anchor>a459ee4d5339a5663fbcc6a2b561ff266</anchor>
      <arglist>(XmlRpcSource *source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSourceEvents</name>
      <anchorfile>classXmlRpc_1_1XmlRpcDispatch.html</anchorfile>
      <anchor>acd3943da2aeb144c66da9e9567fdaff0</anchor>
      <arglist>(XmlRpcSource *source, unsigned eventMask)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>work</name>
      <anchorfile>classXmlRpc_1_1XmlRpcDispatch.html</anchorfile>
      <anchor>a51abc65ad1aa043189b7417409cad3ab</anchor>
      <arglist>(double msTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exit</name>
      <anchorfile>classXmlRpc_1_1XmlRpcDispatch.html</anchorfile>
      <anchor>a72e7cc7862e33d19fc7f71acf6d9f1cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classXmlRpc_1_1XmlRpcDispatch.html</anchorfile>
      <anchor>ab7810fe3264a4540ff9b3f9a3c8c924b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; MonitoredSource &gt;</type>
      <name>SourceList</name>
      <anchorfile>classXmlRpc_1_1XmlRpcDispatch.html</anchorfile>
      <anchor>ad66156e0cdc5d58f08b84f73d59efe72</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>waitForAndProcessEvents</name>
      <anchorfile>classXmlRpc_1_1XmlRpcDispatch.html</anchorfile>
      <anchor>a906df35edaecb9c16efd9a02146c18ed</anchor>
      <arglist>(double timeout)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>getTime</name>
      <anchorfile>classXmlRpc_1_1XmlRpcDispatch.html</anchorfile>
      <anchor>a6be35fe058034d94ff1ab82ee054c2f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SourceList</type>
      <name>_sources</name>
      <anchorfile>classXmlRpc_1_1XmlRpcDispatch.html</anchorfile>
      <anchor>ac34379e4d009332f99a5ed63e770e085</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_endTime</name>
      <anchorfile>classXmlRpc_1_1XmlRpcDispatch.html</anchorfile>
      <anchor>a736f415479d4c7ec37ae986564091c09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_doClear</name>
      <anchorfile>classXmlRpc_1_1XmlRpcDispatch.html</anchorfile>
      <anchor>a8b874df2d91f74ef0f0da8ca5ab0e746</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_inWork</name>
      <anchorfile>classXmlRpc_1_1XmlRpcDispatch.html</anchorfile>
      <anchor>a0fd07d219c2aa395370ef94c9b5b7684</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>XmlRpc::XmlRpcDispatch::MonitoredSource</name>
    <filename>structXmlRpc_1_1XmlRpcDispatch_1_1MonitoredSource.html</filename>
    <member kind="function">
      <type></type>
      <name>MonitoredSource</name>
      <anchorfile>structXmlRpc_1_1XmlRpcDispatch_1_1MonitoredSource.html</anchorfile>
      <anchor>a00a74f7957c2f74a1cb9c7868e337920</anchor>
      <arglist>(XmlRpcSource *src, unsigned mask)</arglist>
    </member>
    <member kind="function">
      <type>XmlRpcSource *</type>
      <name>getSource</name>
      <anchorfile>structXmlRpc_1_1XmlRpcDispatch_1_1MonitoredSource.html</anchorfile>
      <anchor>ad596c89ec60715157c4b4056265894b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned &amp;</type>
      <name>getMask</name>
      <anchorfile>structXmlRpc_1_1XmlRpcDispatch_1_1MonitoredSource.html</anchorfile>
      <anchor>ab362b6b6eac515e58615fdb820fa4b7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>XmlRpcSource *</type>
      <name>_src</name>
      <anchorfile>structXmlRpc_1_1XmlRpcDispatch_1_1MonitoredSource.html</anchorfile>
      <anchor>a47aaca7a27066981c8e06b41a8b695df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>_mask</name>
      <anchorfile>structXmlRpc_1_1XmlRpcDispatch_1_1MonitoredSource.html</anchorfile>
      <anchor>aee65974edde9014a67052bd65bddcaf9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>XmlRpc::XmlRpcException</name>
    <filename>classXmlRpc_1_1XmlRpcException.html</filename>
    <member kind="function">
      <type></type>
      <name>XmlRpcException</name>
      <anchorfile>classXmlRpc_1_1XmlRpcException.html</anchorfile>
      <anchor>a474679bd25715b2e5fb23b2d09de6ada</anchor>
      <arglist>(const std::string &amp;message, int code=-1)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getMessage</name>
      <anchorfile>classXmlRpc_1_1XmlRpcException.html</anchorfile>
      <anchor>a8b847167289592dc8417d35a7d464739</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCode</name>
      <anchorfile>classXmlRpc_1_1XmlRpcException.html</anchorfile>
      <anchor>a0f8ae215539aa1d0124a3a0c0d7773bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>_message</name>
      <anchorfile>classXmlRpc_1_1XmlRpcException.html</anchorfile>
      <anchor>ad7a135f43c7c8a810b1d808d08b1b169</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_code</name>
      <anchorfile>classXmlRpc_1_1XmlRpcException.html</anchorfile>
      <anchor>aa6f320eb1e30c648cae684baafb7e7d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>XmlRpc::XmlRpcMutex</name>
    <filename>classXmlRpc_1_1XmlRpcMutex.html</filename>
    <class kind="struct">XmlRpc::XmlRpcMutex::AutoLock</class>
    <member kind="function">
      <type></type>
      <name>XmlRpcMutex</name>
      <anchorfile>classXmlRpc_1_1XmlRpcMutex.html</anchorfile>
      <anchor>a0ecb1a00e0de921c893a5042bca55401</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~XmlRpcMutex</name>
      <anchorfile>classXmlRpc_1_1XmlRpcMutex.html</anchorfile>
      <anchor>a6c57f5a18426da18199fc2dbcd5f1e40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acquire</name>
      <anchorfile>classXmlRpc_1_1XmlRpcMutex.html</anchorfile>
      <anchor>a107f8644a3dcd5c2ef2ebd5ec3d0361d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classXmlRpc_1_1XmlRpcMutex.html</anchorfile>
      <anchor>ab97bdeea53b912930f0f8ab426c12bea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>void *</type>
      <name>_pMutex</name>
      <anchorfile>classXmlRpc_1_1XmlRpcMutex.html</anchorfile>
      <anchor>a92a22e40a18bb7f080ce02f6318df05b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>XmlRpc::XmlRpcMutex::AutoLock</name>
    <filename>structXmlRpc_1_1XmlRpcMutex_1_1AutoLock.html</filename>
    <member kind="function">
      <type></type>
      <name>AutoLock</name>
      <anchorfile>structXmlRpc_1_1XmlRpcMutex_1_1AutoLock.html</anchorfile>
      <anchor>a40095e4ea8f1b890571bbaea3847c47c</anchor>
      <arglist>(XmlRpcMutex &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AutoLock</name>
      <anchorfile>structXmlRpc_1_1XmlRpcMutex_1_1AutoLock.html</anchorfile>
      <anchor>a339db092866168518ec5a88e846fae87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>XmlRpcMutex &amp;</type>
      <name>_m</name>
      <anchorfile>structXmlRpc_1_1XmlRpcMutex_1_1AutoLock.html</anchorfile>
      <anchor>ae914dbbd695c525b0580b4669de76d7f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>XmlRpc::XmlRpcServer</name>
    <filename>classXmlRpc_1_1XmlRpcServer.html</filename>
    <base>XmlRpc::XmlRpcSource</base>
    <member kind="function">
      <type></type>
      <name>XmlRpcServer</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>a60e9792221dc8c2142e62d1be8d925b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~XmlRpcServer</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>aae1a21a97ffaa6172f54a2cbf2b67fae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableIntrospection</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>a5d2d4bedbd35b262b2a49494176a1167</anchor>
      <arglist>(bool enabled=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMethod</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>a95e71b6ee1c2b7756d3d71fed9c661e3</anchor>
      <arglist>(XmlRpcServerMethod *method)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeMethod</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>a728cd389552fe8d18b4cdbfcee18890e</anchor>
      <arglist>(XmlRpcServerMethod *method)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeMethod</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>a425e2e71f2d23b3c15a96d58acf0537f</anchor>
      <arglist>(const std::string &amp;methodName)</arglist>
    </member>
    <member kind="function">
      <type>XmlRpcServerMethod *</type>
      <name>findMethod</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>a30471d5fa674f0d41f6b4f3b5f3b5e9c</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bindAndListen</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>a48caf2fa417377fe53768d0909eff617</anchor>
      <arglist>(int port, int backlog=5)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPort</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>a25e255005711a08c151e756adea77ef6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>work</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>aa271504216a40e4a9e52e5b66165ede3</anchor>
      <arglist>(double msTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exit</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>aef0f7b568fe456efb01a269cb30f0c3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shutdown</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>a1efc6113f5b9d3d4faede2aa19c62452</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>listMethods</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>adc2af33af2e59376454d68d23986fe15</anchor>
      <arglist>(XmlRpcValue &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>executeRequest</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>acc3b49e20a5e1c7e360572df0752dad0</anchor>
      <arglist>(std::string const &amp;request)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>handleEvent</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>a8379b211be0cfd3381f9e36e318bafc5</anchor>
      <arglist>(unsigned eventType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeConnection</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>a784922a9ac3787c05e9247269752c98c</anchor>
      <arglist>(XmlRpcServerConnection *)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, XmlRpcServerMethod * &gt;</type>
      <name>MethodMap</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>a327afeb6f67924f846dc1564e6185451</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>acceptConnection</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>ab10270cba339177be9d8987a5d6c438c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual XmlRpcServerConnection *</type>
      <name>createConnection</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>a79e86c730e6cd54ca794517cc0061b63</anchor>
      <arglist>(int socket)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>dispatchConnection</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>a1225945af4ec688d35d5245f02819943</anchor>
      <arglist>(XmlRpcServerConnection *sc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>parseRequest</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>ac4bf126bd24170b3f2b124957a8d8156</anchor>
      <arglist>(std::string const &amp;request, XmlRpcValue &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>executeMethod</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>adf1ac9a438a6a7b0b055c7002663eb9b</anchor>
      <arglist>(const std::string &amp;methodName, XmlRpcValue &amp;params, XmlRpcValue &amp;result)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>executeMulticall</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>ad6e8454852336798ed6c0dfed823706c</anchor>
      <arglist>(const std::string &amp;methodName, XmlRpcValue &amp;params, XmlRpcValue &amp;result)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>generateResponse</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>a2d44940be108a33efc45b12975593b71</anchor>
      <arglist>(std::string const &amp;resultXml)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>generateFaultResponse</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>a3e0bf2ab2c4fd269a7b5e03ccca79475</anchor>
      <arglist>(std::string const &amp;msg, int errorCode=-1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>generateHeader</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>a1e787a9b1c06be972ec8df70241adfef</anchor>
      <arglist>(std::string const &amp;body)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_introspectionEnabled</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>a8df2d59929398dfd25dd9e19c909a468</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>XmlRpcDispatch</type>
      <name>_disp</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>af8b775cd2ed2a0838ed21686b8900bea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MethodMap</type>
      <name>_methods</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>ab4169ac57183b3d7ce940b61f86f1322</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>XmlRpcServerMethod *</type>
      <name>_listMethods</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>a3a2920cfb521b18948ce2b311d6fff7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>XmlRpcServerMethod *</type>
      <name>_methodHelp</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>a80f4e13155f51ab6d76cdd75dc598a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const char</type>
      <name>METHODNAME_TAG</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>a5bf03fd86a729904e3361293a61e9cfb</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const char</type>
      <name>PARAMS_TAG</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>aa47ed2b6fc713508d4f8045295eff34e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const char</type>
      <name>PARAMS_ETAG</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>a16e93fe9e0a0f53379b082659b036c51</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const char</type>
      <name>PARAM_TAG</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>a795675c72586fdbd60bebfc84081b5d8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const char</type>
      <name>PARAM_ETAG</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>a5fc8a668f1d9766815b00707b7449d4a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const std::string</type>
      <name>SYSTEM_MULTICALL</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>ad7948ffe2b23e78568cdf62e2270ec69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const std::string</type>
      <name>METHODNAME</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>afa08aee751ae2b966a07eee6c3dc21d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const std::string</type>
      <name>PARAMS</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>a52a0786fc89f8dfba149af64dcd1e816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const std::string</type>
      <name>FAULTCODE</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>ac21fb7ebd2c3b98aec3985fbb2c501fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const std::string</type>
      <name>FAULTSTRING</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServer.html</anchorfile>
      <anchor>a6a206e59932cbf60268bbafb5be3b8c3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>XmlRpc::XmlRpcServerConnection</name>
    <filename>classXmlRpc_1_1XmlRpcServerConnection.html</filename>
    <base>XmlRpc::XmlRpcSource</base>
    <member kind="function">
      <type></type>
      <name>XmlRpcServerConnection</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServerConnection.html</anchorfile>
      <anchor>a87d0ef4ba886ba68986c3062013aae01</anchor>
      <arglist>(int fd, XmlRpcServer *server, bool deleteOnClose=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~XmlRpcServerConnection</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServerConnection.html</anchorfile>
      <anchor>a67cba9901da4e410f0686242b2f728a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>handleEvent</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServerConnection.html</anchorfile>
      <anchor>abaec02b02aa78372b251f48872087fe6</anchor>
      <arglist>(unsigned eventType)</arglist>
    </member>
    <member kind="enumeration">
      <name>ServerConnectionState</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServerConnection.html</anchorfile>
      <anchor>a509d96fb697a23f6078fdbd6c3405d09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>READ_HEADER</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServerConnection.html</anchorfile>
      <anchor>a509d96fb697a23f6078fdbd6c3405d09aba39b67cc857d22c568da8b871f4e7e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>READ_REQUEST</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServerConnection.html</anchorfile>
      <anchor>a509d96fb697a23f6078fdbd6c3405d09a63e043096058ef5d745fdaa73359270f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WRITE_RESPONSE</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServerConnection.html</anchorfile>
      <anchor>a509d96fb697a23f6078fdbd6c3405d09a17a4dca3486e5adcece34a55d463ab26</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readHeader</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServerConnection.html</anchorfile>
      <anchor>ace9ad848fb6a42dc8f773a034580cf75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readRequest</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServerConnection.html</anchorfile>
      <anchor>a2e27c9b14915ff8324ea85d5b2ef4ea8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>writeResponse</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServerConnection.html</anchorfile>
      <anchor>a9b25d8d436315fda83a2eff8c33fe181</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>executeRequest</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServerConnection.html</anchorfile>
      <anchor>a7928d53455bbfe8aae3eb81319e62b1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>XmlRpcServer *</type>
      <name>_server</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServerConnection.html</anchorfile>
      <anchor>ad55a408b9f92152fb2b0d6da3c80102d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ServerConnectionState</type>
      <name>_connectionState</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServerConnection.html</anchorfile>
      <anchor>a24beae84a3885a19c75aaf2f130bdbe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_header</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServerConnection.html</anchorfile>
      <anchor>a040c389e5db426977553eaa238b82acb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_contentLength</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServerConnection.html</anchorfile>
      <anchor>ad9f5bdff4af85f5baf80bc24e6ea6078</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_request</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServerConnection.html</anchorfile>
      <anchor>a31fd216bde1d98f721349f503b1a29f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_response</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServerConnection.html</anchorfile>
      <anchor>abe6c19bf5da6fa4365ad9991abbda95a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_bytesWritten</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServerConnection.html</anchorfile>
      <anchor>a92167e450abcac63e0bbe71bca40eeb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_keepAlive</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServerConnection.html</anchorfile>
      <anchor>a921ad52de93f71a8c8cdb10b7db486dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>XmlRpc::XmlRpcServerMethod</name>
    <filename>classXmlRpc_1_1XmlRpcServerMethod.html</filename>
    <member kind="function">
      <type></type>
      <name>XmlRpcServerMethod</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServerMethod.html</anchorfile>
      <anchor>a8abbf6cc0b6699593a85e5fd50a5e5b2</anchor>
      <arglist>(std::string const &amp;name, XmlRpcServer *server=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~XmlRpcServerMethod</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServerMethod.html</anchorfile>
      <anchor>aa77a438869cf2f413d558f8c5c7c1c64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServerMethod.html</anchorfile>
      <anchor>aab0409eeaf47abf10f3ff5e97b8e84cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>execute</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServerMethod.html</anchorfile>
      <anchor>a47b803c9c728d454054e5860d1228dda</anchor>
      <arglist>(XmlRpcValue &amp;params, XmlRpcValue &amp;result)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>help</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServerMethod.html</anchorfile>
      <anchor>a214a09aa8b29e24041e6bd016e3007e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>_name</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServerMethod.html</anchorfile>
      <anchor>a6f287626278a848410d5a3f54fe338e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>XmlRpcServer *</type>
      <name>_server</name>
      <anchorfile>classXmlRpc_1_1XmlRpcServerMethod.html</anchorfile>
      <anchor>a33cbad87f7378c2cc18d820e01a6f412</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>XmlRpc::XmlRpcSocket</name>
    <filename>classXmlRpc_1_1XmlRpcSocket.html</filename>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getSocket</name>
      <anchorfile>classXmlRpc_1_1XmlRpcSocket.html</anchorfile>
      <anchor>a3c69282c6c7cfbdcb8afc90c178c2cf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>close</name>
      <anchorfile>classXmlRpc_1_1XmlRpcSocket.html</anchorfile>
      <anchor>ac5c50e12ee428f4190a81a38d196bd70</anchor>
      <arglist>(int socket)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>setNonBlocking</name>
      <anchorfile>classXmlRpc_1_1XmlRpcSocket.html</anchorfile>
      <anchor>abc6fc4083d79a873bdeab20ae09ab549</anchor>
      <arglist>(int socket)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>nbRead</name>
      <anchorfile>classXmlRpc_1_1XmlRpcSocket.html</anchorfile>
      <anchor>a6444e46abadd7b59cea079e3a25fc87b</anchor>
      <arglist>(int socket, std::string &amp;s, bool *eof, SSL *ssl)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>nbWrite</name>
      <anchorfile>classXmlRpc_1_1XmlRpcSocket.html</anchorfile>
      <anchor>a878097ad3bcce2f7046e30322b5ac7ef</anchor>
      <arglist>(int socket, std::string &amp;s, int *bytesSoFar, SSL *ssl)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>setReuseAddr</name>
      <anchorfile>classXmlRpc_1_1XmlRpcSocket.html</anchorfile>
      <anchor>a8a98b18862a7b79e82ee608484a1a460</anchor>
      <arglist>(int socket)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>bind</name>
      <anchorfile>classXmlRpc_1_1XmlRpcSocket.html</anchorfile>
      <anchor>ad7bcf641b1e2e5857ee3b7f57439b959</anchor>
      <arglist>(int socket, int port)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>listen</name>
      <anchorfile>classXmlRpc_1_1XmlRpcSocket.html</anchorfile>
      <anchor>a3fe3ac75b1d632b94f233d743cc2bed5</anchor>
      <arglist>(int socket, int backlog)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>accept</name>
      <anchorfile>classXmlRpc_1_1XmlRpcSocket.html</anchorfile>
      <anchor>a653b1f5a5eb6991d69fdb405100fc170</anchor>
      <arglist>(int socket)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>connect</name>
      <anchorfile>classXmlRpc_1_1XmlRpcSocket.html</anchorfile>
      <anchor>a9eef45df476437a085a1ab8be744cfc6</anchor>
      <arglist>(int socket, std::string &amp;host, int port)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getPort</name>
      <anchorfile>classXmlRpc_1_1XmlRpcSocket.html</anchorfile>
      <anchor>ac8ab6d64cc27452547a40ac73381737d</anchor>
      <arglist>(int socket)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>nonFatalError</name>
      <anchorfile>classXmlRpc_1_1XmlRpcSocket.html</anchorfile>
      <anchor>ab77fa1a5bdf9ae4c8f7cfd9f5cf21f14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getError</name>
      <anchorfile>classXmlRpc_1_1XmlRpcSocket.html</anchorfile>
      <anchor>a4953010f3d84287639b3fd73ff29a682</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getErrorMsg</name>
      <anchorfile>classXmlRpc_1_1XmlRpcSocket.html</anchorfile>
      <anchor>ae1926209b963e3e1a95a41fd25dcd43d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getErrorMsg</name>
      <anchorfile>classXmlRpc_1_1XmlRpcSocket.html</anchorfile>
      <anchor>a2f9e8645065a252d36a0b83964ff61a3</anchor>
      <arglist>(int error)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>XmlRpc::XmlRpcSource</name>
    <filename>classXmlRpc_1_1XmlRpcSource.html</filename>
    <member kind="function">
      <type></type>
      <name>XmlRpcSource</name>
      <anchorfile>classXmlRpc_1_1XmlRpcSource.html</anchorfile>
      <anchor>ac2dffe3f0c9414e86efe68f28d13f1f1</anchor>
      <arglist>(int fd=-1, bool deleteOnClose=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~XmlRpcSource</name>
      <anchorfile>classXmlRpc_1_1XmlRpcSource.html</anchorfile>
      <anchor>aa4ffa8467c00c4fa3bce988bc5ad1e3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getfd</name>
      <anchorfile>classXmlRpc_1_1XmlRpcSource.html</anchorfile>
      <anchor>a58f7ffbcdbdc10a7102938b5cf8d6146</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setfd</name>
      <anchorfile>classXmlRpc_1_1XmlRpcSource.html</anchorfile>
      <anchor>ae95e0e691dca904db429b10774757b1f</anchor>
      <arglist>(int fd)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getKeepOpen</name>
      <anchorfile>classXmlRpc_1_1XmlRpcSource.html</anchorfile>
      <anchor>a029bb896eee191afc29e2c02aa203af0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKeepOpen</name>
      <anchorfile>classXmlRpc_1_1XmlRpcSource.html</anchorfile>
      <anchor>ab7d97a96d4765c2845959116d96294cc</anchor>
      <arglist>(bool b=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classXmlRpc_1_1XmlRpcSource.html</anchorfile>
      <anchor>a37f25f335c37dd408b2e5f71448d59bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned</type>
      <name>handleEvent</name>
      <anchorfile>classXmlRpc_1_1XmlRpcSource.html</anchorfile>
      <anchor>ad9858285d9ab1c7bbef9c3a1eb27b634</anchor>
      <arglist>(unsigned eventType)=0</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>_ssl</name>
      <anchorfile>classXmlRpc_1_1XmlRpcSource.html</anchorfile>
      <anchor>a1b7bb31921ed397d821dc2468ab5e004</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SSL_CTX *</type>
      <name>_ssl_ctx</name>
      <anchorfile>classXmlRpc_1_1XmlRpcSource.html</anchorfile>
      <anchor>aeb270ad405b11e60c1de62ef3f7ef48f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SSL *</type>
      <name>_ssl_ssl</name>
      <anchorfile>classXmlRpc_1_1XmlRpcSource.html</anchorfile>
      <anchor>a3bd3055ba6bb61889368716766ba52c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SSL_METHOD *</type>
      <name>_ssl_meth</name>
      <anchorfile>classXmlRpc_1_1XmlRpcSource.html</anchorfile>
      <anchor>a730fd74f7fd0a9133c8913c6c5ea1e11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>_fd</name>
      <anchorfile>classXmlRpc_1_1XmlRpcSource.html</anchorfile>
      <anchor>af28ed1c56fbd76766483aa3357187cb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>_deleteOnClose</name>
      <anchorfile>classXmlRpc_1_1XmlRpcSource.html</anchorfile>
      <anchor>a8d4a9f92756f1c1acc874c33e28087ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>_keepOpen</name>
      <anchorfile>classXmlRpc_1_1XmlRpcSource.html</anchorfile>
      <anchor>afca2155080d23a75273787c5b5a35e49</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>XmlRpc::XmlRpcRunnable</name>
    <filename>classXmlRpc_1_1XmlRpcRunnable.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>run</name>
      <anchorfile>classXmlRpc_1_1XmlRpcRunnable.html</anchorfile>
      <anchor>a986b76415151f37dbd3cfa48d1d39d34</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>XmlRpc::XmlRpcThread</name>
    <filename>classXmlRpc_1_1XmlRpcThread.html</filename>
    <member kind="function">
      <type></type>
      <name>XmlRpcThread</name>
      <anchorfile>classXmlRpc_1_1XmlRpcThread.html</anchorfile>
      <anchor>a1598765bfe7c8e48f63156ef7fd007d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlRpcThread</name>
      <anchorfile>classXmlRpc_1_1XmlRpcThread.html</anchorfile>
      <anchor>aec747b5f1d7cb1d49e8b7b4481cf2bed</anchor>
      <arglist>(XmlRpcRunnable *runnable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~XmlRpcThread</name>
      <anchorfile>classXmlRpc_1_1XmlRpcThread.html</anchorfile>
      <anchor>a63c5739bc3eb09d1f7084d0630aae50e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classXmlRpc_1_1XmlRpcThread.html</anchorfile>
      <anchor>aa0f0ce7fc5eaf491f3cca908fb7c4fbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>join</name>
      <anchorfile>classXmlRpc_1_1XmlRpcThread.html</anchorfile>
      <anchor>af43a5315873b45762c9d694a2a1fdb0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>XmlRpcRunnable *</type>
      <name>getRunnable</name>
      <anchorfile>classXmlRpc_1_1XmlRpcThread.html</anchorfile>
      <anchor>af4271378f52410c0d883e7ff31079016</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRunnable</name>
      <anchorfile>classXmlRpc_1_1XmlRpcThread.html</anchorfile>
      <anchor>a429eae7e87969651cc8766aa728b7e20</anchor>
      <arglist>(XmlRpcRunnable *r)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static unsigned int __stdcall</type>
      <name>runInThread</name>
      <anchorfile>classXmlRpc_1_1XmlRpcThread.html</anchorfile>
      <anchor>af556bfe11be3e6f417e149bd4302ed52</anchor>
      <arglist>(void *pThread)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>XmlRpcRunnable *</type>
      <name>_runner</name>
      <anchorfile>classXmlRpc_1_1XmlRpcThread.html</anchorfile>
      <anchor>ab00c7ff78a534a2d850fa345867ce9c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>void *</type>
      <name>_pThread</name>
      <anchorfile>classXmlRpc_1_1XmlRpcThread.html</anchorfile>
      <anchor>aee2aafd47b4a92849bc6e00842ede378</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>XmlRpc::XmlRpcThreadedServer</name>
    <filename>classXmlRpc_1_1XmlRpcThreadedServer.html</filename>
    <base>XmlRpc::XmlRpcServer</base>
    <class kind="class">XmlRpc::XmlRpcThreadedServer::Worker</class>
    <member kind="function">
      <type></type>
      <name>XmlRpcThreadedServer</name>
      <anchorfile>classXmlRpc_1_1XmlRpcThreadedServer.html</anchorfile>
      <anchor>a7495e168977ed6263befb648c7482b8f</anchor>
      <arglist>(int nWorkers=6)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Worker &gt;</type>
      <name>_workers</name>
      <anchorfile>classXmlRpc_1_1XmlRpcThreadedServer.html</anchorfile>
      <anchor>ae7c3316619059dc818894871bae8010d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>XmlRpcMutex</type>
      <name>_mutex</name>
      <anchorfile>classXmlRpc_1_1XmlRpcThreadedServer.html</anchorfile>
      <anchor>ad506f9cdc840dc3d3cd19d16feea067d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>XmlRpc::XmlRpcThreadedServer::Worker</name>
    <filename>classXmlRpc_1_1XmlRpcThreadedServer_1_1Worker.html</filename>
    <base protection="private">XmlRpc::XmlRpcRunnable</base>
    <member kind="function">
      <type></type>
      <name>Worker</name>
      <anchorfile>classXmlRpc_1_1XmlRpcThreadedServer_1_1Worker.html</anchorfile>
      <anchor>af07cf465a9b2b9ebd6c55c4d8dc160a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classXmlRpc_1_1XmlRpcThreadedServer_1_1Worker.html</anchorfile>
      <anchor>a5a3b28853b81efa347e380ae4526e3f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>XmlRpcThread</type>
      <name>_thread</name>
      <anchorfile>classXmlRpc_1_1XmlRpcThreadedServer_1_1Worker.html</anchorfile>
      <anchor>ae05c36a30ae146d2811465f729b8a565</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>XmlRpc::XmlRpcUtil</name>
    <filename>classXmlRpc_1_1XmlRpcUtil.html</filename>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>parseTag</name>
      <anchorfile>classXmlRpc_1_1XmlRpcUtil.html</anchorfile>
      <anchor>a31294b7282f97068a68f46995a29bcc9</anchor>
      <arglist>(const char *tag, std::string const &amp;xml, int *offset)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>findTag</name>
      <anchorfile>classXmlRpc_1_1XmlRpcUtil.html</anchorfile>
      <anchor>aa0a246fe28c9a5d87abd6adcdf17712a</anchor>
      <arglist>(const char *tag, std::string const &amp;xml, int *offset)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getNextTag</name>
      <anchorfile>classXmlRpc_1_1XmlRpcUtil.html</anchorfile>
      <anchor>aca44d3dcdd184a089bceb0dc92852617</anchor>
      <arglist>(std::string const &amp;xml, int *offset)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>nextTagIs</name>
      <anchorfile>classXmlRpc_1_1XmlRpcUtil.html</anchorfile>
      <anchor>a2ed1df7f98e410a4c8da054e803f3eb1</anchor>
      <arglist>(const char *tag, std::string const &amp;xml, int *offset)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>xmlEncode</name>
      <anchorfile>classXmlRpc_1_1XmlRpcUtil.html</anchorfile>
      <anchor>a99256e5c15fbc64826ed70b64aca7da8</anchor>
      <arglist>(const std::string &amp;raw)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>xmlDecode</name>
      <anchorfile>classXmlRpc_1_1XmlRpcUtil.html</anchorfile>
      <anchor>ae1128729bf4f90d3c6929690bdca34d2</anchor>
      <arglist>(const std::string &amp;encoded)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>log</name>
      <anchorfile>classXmlRpc_1_1XmlRpcUtil.html</anchorfile>
      <anchor>ac8423b781acbcbf90e5d4558591e7c61</anchor>
      <arglist>(int level, const char *fmt,...)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>error</name>
      <anchorfile>classXmlRpc_1_1XmlRpcUtil.html</anchorfile>
      <anchor>a3b8a23e81eb924fb0889cff32d3fe190</anchor>
      <arglist>(const char *fmt,...)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>XmlRpc::XmlRpcValue</name>
    <filename>classXmlRpc_1_1XmlRpcValue.html</filename>
    <member kind="enumeration">
      <name>Type</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a39bba28bc00ed6c271f142f3bc9d21f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TypeInvalid</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a39bba28bc00ed6c271f142f3bc9d21f6ac3f5f1f2ad19a783e961e3cd047caab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TypeBoolean</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a39bba28bc00ed6c271f142f3bc9d21f6af266e4bcf8d50267bb65d16d09614b9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TypeInt</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a39bba28bc00ed6c271f142f3bc9d21f6a9b6959296fc9d226f003168477d410f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TypeDouble</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a39bba28bc00ed6c271f142f3bc9d21f6a533e4853d0a26536127117f2e80a8e86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TypeString</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a39bba28bc00ed6c271f142f3bc9d21f6a493d258493cbc67e245dedaaf61cca8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TypeDateTime</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a39bba28bc00ed6c271f142f3bc9d21f6a5ed0b79251bf123fb099b433f2c1f262</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TypeBase64</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a39bba28bc00ed6c271f142f3bc9d21f6a8b0a412b4ac0c629cb6c027a1f596140</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TypeArray</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a39bba28bc00ed6c271f142f3bc9d21f6ab687f4227eb8a2d3e25800321fbfc5ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TypeStruct</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a39bba28bc00ed6c271f142f3bc9d21f6a6bccebd24455611922d0caccd58e2164</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; char &gt;</type>
      <name>BinaryData</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a0946bd810374aad0bd88dd90da73eeac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; XmlRpcValue &gt;</type>
      <name>ValueArray</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>accacf8f9f8a9bf7c0b525588337117cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, XmlRpcValue &gt;</type>
      <name>ValueStruct</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>ac3c1ecdd3d7256cd6444abe8751ac8ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlRpcValue</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>afc719cd8abb922edf8abf9ea091a28a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlRpcValue</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>aa5241036d467dd2ae84e255645ac2654</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlRpcValue</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a4362fe59f05c895e01aaa2ec00b6d35e</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlRpcValue</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>aa6c70a0825f872539e5a1bf8fbf21413</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlRpcValue</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a475fbd8a6f4381dbd91395441a85fae3</anchor>
      <arglist>(std::string const &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlRpcValue</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>ae723c334bcc41bc74ccac1cfc861db7d</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlRpcValue</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>aba9cad5400a7b056c72d4204c3698e34</anchor>
      <arglist>(struct tm *value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlRpcValue</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a98f03dd11f19390b801d77f68332d29e</anchor>
      <arglist>(void *value, int nBytes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlRpcValue</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a92843dae43fe3d3e665aa924488ef553</anchor>
      <arglist>(std::string const &amp;xml, int *offset)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlRpcValue</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>aa5ebe5e1a88b20b9817d9b734a89bafb</anchor>
      <arglist>(XmlRpcValue const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~XmlRpcValue</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>acb14691a44a20ca1c0d0330a9653a2bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a905b062b276399644e07d0a08a61caf0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>XmlRpcValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a5c64d5949abceec2b8ede66733aa8693</anchor>
      <arglist>(XmlRpcValue const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>XmlRpcValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a7672e6fb95e0b2466cea431cc05452a4</anchor>
      <arglist>(int const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>XmlRpcValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a8a8dde29eb1a052cb8c67f8c4b5e1fa2</anchor>
      <arglist>(double const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>XmlRpcValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>abbdad80aebd4d5fbd287c5382306aa5a</anchor>
      <arglist>(const char *rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a154854f6ebb0143374aa50862076e6b7</anchor>
      <arglist>(XmlRpcValue const &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a264b5c7ec9028a7c9e01c860a7adf821</anchor>
      <arglist>(XmlRpcValue const &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool &amp;</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a765e58a89a853df0413b8d844346bb3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int &amp;</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a48d9067faa3e9a66f737d09f87afbd57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double &amp;</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>afeb0b17b040ca17e9d1c8295cc41de62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string &amp;</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>af41b5e978609acec2660d367c26343bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator BinaryData &amp;</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a260241a12d02bedefc30e0627eb8e876</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator struct tm &amp;</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a35d9212e29911c3f7c8dd7360f74ca02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>XmlRpcValue const &amp;</type>
      <name>operator[]</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a957b4b077fc94fa3406e56a18c89bc60</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>XmlRpcValue &amp;</type>
      <name>operator[]</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a0c5d04debad6aa6130315d4a03571dc3</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>XmlRpcValue &amp;</type>
      <name>operator[]</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a93aaf0f3fa9440f28a6d576384e3eaea</anchor>
      <arglist>(std::string const &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>XmlRpcValue &amp;</type>
      <name>operator[]</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>af437bcae28b5bbac5881ecee51ecc932</anchor>
      <arglist>(const char *k)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ValueStruct const &amp;</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a161e5b80b9586790125a9c16ede421f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a1224dc3af0e87b928f3fea86f527f0f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Type const &amp;</type>
      <name>getType</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>ab0b14902f264c1dbd72abea1b46f6adc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a7f3a1969a5506df8d045bb01632f9f2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>af411c8368c750bd8b06801a7f0693bb0</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMember</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a30f79d9214b9ec8e2962fc4f29deccaf</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fromXml</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>aaf41232ab0fc4066c960fde896f96769</anchor>
      <arglist>(std::string const &amp;valueXml, int *offset)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toXml</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>aedae94ced3a80ff37a528861bcb2a47e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>write</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>aec23f8321044b9d6fcdc73451ce729a9</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string const &amp;</type>
      <name>getDoubleFormat</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a70ec0df6e27b1975e40b81b7b761e665</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setDoubleFormat</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a9d616e07625c97bf8fa99c855f9450e2</anchor>
      <arglist>(const char *f)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a43d8dc5b5a5015788c277075482c9207</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>assertTypeOrInvalid</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a802faa98b1e2bee03f51b3a6829fe635</anchor>
      <arglist>(Type t)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>assertArray</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a3211be4c0f2bbc6cfa55063342e1d7e3</anchor>
      <arglist>(int size) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>assertArray</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a0214f295adb213000080f727860938aa</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>assertStruct</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>ab2586ea076061a38c870488bacad334a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>boolFromXml</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>adaa0de96bf05305841e397e7fab62c31</anchor>
      <arglist>(std::string const &amp;valueXml, int *offset)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>intFromXml</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a5f1b5251eba6016497ac8bd632aefd22</anchor>
      <arglist>(std::string const &amp;valueXml, int *offset)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>doubleFromXml</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a96327cdb81552fda14dde4c83d7289c2</anchor>
      <arglist>(std::string const &amp;valueXml, int *offset)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>stringFromXml</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>ad38716b3af838c4e5707f4b85f9fe5ee</anchor>
      <arglist>(std::string const &amp;valueXml, int *offset)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>timeFromXml</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a1aa9f6627713a6812301936fb79b3249</anchor>
      <arglist>(std::string const &amp;valueXml, int *offset)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>binaryFromXml</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a583d7b6455887f3246c56e230103b6db</anchor>
      <arglist>(std::string const &amp;valueXml, int *offset)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>arrayFromXml</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>aa2875b0e203027c8c2c756bd21301c66</anchor>
      <arglist>(std::string const &amp;valueXml, int *offset)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>structFromXml</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>ab38e3afc776a008f0c1cbdf441147ae1</anchor>
      <arglist>(std::string const &amp;valueXml, int *offset)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>boolToXml</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a66d37d1d46ede1eacd5da3d12b2feb0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>intToXml</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>ab2b71fbc1a539d8f3e6e7f7064d904b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>doubleToXml</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>ade0d89d285db29286e1f4c336ded5cb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>stringToXml</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a1f8bdcb2ba89010bdee24cf29685c8d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>timeToXml</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>af6299b893bd86c937735c49e1822dccd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>binaryToXml</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a14d989ec0d7150dd0bc3f53551c8e276</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>arrayToXml</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a191e22546e2f6713945c1bf509835020</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>structToXml</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a9d88448585a740c8371dfd6f5aa7c04c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Type</type>
      <name>_type</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a48510519f9e8aecef4c9b3643e2d6ae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>union XmlRpc::XmlRpcValue::@1</type>
      <name>_value</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>a835306cc2edb2cb490b094a1431f2d04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>asBool</name>
      <anchorfile>unionXmlRpc_1_1XmlRpcValue_1_1@1.html</anchorfile>
      <anchor>ad9f2a2a9af266020618b728a6d55597d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>asInt</name>
      <anchorfile>unionXmlRpc_1_1XmlRpcValue_1_1@1.html</anchorfile>
      <anchor>a87a66c535199db23e96e03d3a9d64b9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>asDouble</name>
      <anchorfile>unionXmlRpc_1_1XmlRpcValue_1_1@1.html</anchorfile>
      <anchor>a83ec6fe3a3ec953377853db275e94e2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct tm *</type>
      <name>asTime</name>
      <anchorfile>unionXmlRpc_1_1XmlRpcValue_1_1@1.html</anchorfile>
      <anchor>aeb69774b514a7b2d7640955de473a75b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string *</type>
      <name>asString</name>
      <anchorfile>unionXmlRpc_1_1XmlRpcValue_1_1@1.html</anchorfile>
      <anchor>abac7962f6bbd1436111fb0052f18d4df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BinaryData *</type>
      <name>asBinary</name>
      <anchorfile>unionXmlRpc_1_1XmlRpcValue_1_1@1.html</anchorfile>
      <anchor>a5483aa3c5b17267801e7953eee1d6fad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueArray *</type>
      <name>asArray</name>
      <anchorfile>unionXmlRpc_1_1XmlRpcValue_1_1@1.html</anchorfile>
      <anchor>ac3263bb1f4d9623013d9bb75e47f743a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueStruct *</type>
      <name>asStruct</name>
      <anchorfile>unionXmlRpc_1_1XmlRpcValue_1_1@1.html</anchorfile>
      <anchor>ae0f5e3b6758118870064db9133e5dffd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static std::string</type>
      <name>_doubleFormat</name>
      <anchorfile>classXmlRpc_1_1XmlRpcValue.html</anchorfile>
      <anchor>ac21750d771a0d88e2440f64f5c0ad73f</anchor>
      <arglist></arglist>
    </member>
  </compound>
</tagfile>
